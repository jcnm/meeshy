# Frontend Dockerfile - Production Ready with Node.js 22
FROM node:22-slim AS base

# Install pnpm and system dependencies needed for ONNX Runtime
RUN corepack enable && corepack prepare pnpm@latest --activate
RUN apt-get update && apt-get install -y \
    tini \
    libc6 \
    libgcc-s1 \
    libstdc++6 \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*
ENTRYPOINT ["/usr/bin/tini", "--"]

# === DEPENDENCIES STAGE ===
FROM base AS deps
WORKDIR /app

# Copy package files for frontend
COPY package.json pnpm-lock.yaml ./

# Install all dependencies at once (both prod and dev for build)
RUN pnpm install --no-frozen-lockfile

# Remove sharp completely to avoid ARM64 issues
RUN pnpm remove sharp || echo "Sharp not found, continuing..."

# === BUILDER STAGE ===
FROM base AS builder
WORKDIR /app

# Copy over the node_modules from the deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy the application source
COPY . .

# Set environment variables for ONNX Runtime
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV ONNXRUNTIME_NODE_USE_SYSTEM_PACKAGE=1

# Build the application
RUN pnpm build

# === PRODUCTION STAGE ===
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create system user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3100
ENV PORT=3100

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3100', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Set environment for ONNX Runtime
ENV ONNXRUNTIME_NODE_USE_SYSTEM_PACKAGE=1

CMD ["node", "server.js"]