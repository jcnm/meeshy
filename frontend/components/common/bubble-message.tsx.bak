'use client';

import { useState, useEffect, useRef, memo, useMemo, useCallback } from 'react';
import { 
  Star,
  Copy,
  AlertTriangle,
  Timer,
  Languages,
  MoreHorizontal,
  CheckCircle2,
  Loader2,
  ArrowUp,
  Search,
  X,
  Ghost,
  Edit,
  Trash2
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import { toast } from 'sonner';
import { motion, AnimatePresence } from 'framer-motion';
import type { User, BubbleTranslation } from '@shared/types';
import { SUPPORTED_LANGUAGES, getLanguageInfo } from '@shared/types';
import type { Message } from '@shared/types/conversation';
import type { BubbleStreamMessage } from '@/types/bubble-stream';
import { Z_CLASSES } from '@/lib/z-index';
import { useI18n } from '@/hooks/useI18n';
import { getMessageInitials } from '@/lib/avatar-utils';
import { cn } from '@/lib/utils';
import { useFixTranslationPopoverZIndex } from '@/hooks/use-fix-z-index'; 


interface BubbleMessageProps {
  message: Message & {
    location?: string;
    originalLanguage: string;
    translations: BubbleTranslation[];
    originalContent: string;
    readStatus?: Array<{ userId: string; readAt: Date }>;
  };
  currentUser: User;
  userLanguage: string;
  usedLanguages: string[];
  // Props pour les actions (remont√©es au parent)
  onForceTranslation?: (messageId: string, targetLanguage: string) => void;
  onEditMessage?: (messageId: string, newContent: string) => void;
  onDeleteMessage?: (messageId: string) => void;
  onLanguageSwitch?: (messageId: string, language: string) => void;
  // √âtats contr√¥l√©s depuis le parent
  currentDisplayLanguage: string;
  isTranslating?: boolean;
  translationError?: string;
  conversationType?: 'direct' | 'group' | 'public' | 'global';
  userRole?: 'USER' | 'MEMBER' | 'MODERATOR' | 'ADMIN' | 'CREATOR' | 'AUDIT' | 'ANALYST' | 'BIGBOSS';
}

function BubbleMessageInner({ 
  message, 
  currentUser, 
  userLanguage, 
  usedLanguages = [],
  onForceTranslation,
  onEditMessage,
  onDeleteMessage,
  onLanguageSwitch,
  currentDisplayLanguage,
  isTranslating = false,
  translationError,
  conversationType = 'direct',
  userRole = 'USER'
}: BubbleMessageProps) {
  const { t } = useI18n('conversations');
  
  // Hook pour fixer les z-index des popovers de traduction
  useFixTranslationPopoverZIndex();
  
  // √âtats UI locaux uniquement (pas de logique m√©tier)
  const [isFavorited, setIsFavorited] = useState(false);
  const [isTranslationPopoverOpen, setIsTranslationPopoverOpen] = useState(false);
  const [previousTranslationCount, setPreviousTranslationCount] = useState(0);
  const [isNewTranslation, setIsNewTranslation] = useState(false);
  
  // Timer pour la fermeture automatique au mouse leave
  const closeTimerRef = useRef<NodeJS.Timeout | null>(null);
  
  // Fonction pour g√©rer l'ouverture/fermeture de la popover de mani√®re contr√¥l√©e
  const handlePopoverOpenChange = useCallback((open: boolean) => {
    console.log(`üîß Popover ${open ? 'OUVERTURE' : 'FERMETURE'}:`, { messageId: message.id, open });
    
    // Annuler le timer de fermeture si on r√©ouvre
    if (open && closeTimerRef.current) {
      clearTimeout(closeTimerRef.current);
      closeTimerRef.current = null;
    }
    
    setIsTranslationPopoverOpen(open);
    if (!open) {
      setTranslationFilter(''); // R√©initialiser le filtre quand on ferme
    }
    
    // Debug z-index quand on ouvre
    if (open) {
      setTimeout(() => {
        const popover = document.querySelector(`[data-radix-popover-content]`);
        if (popover) {
          const style = window.getComputedStyle(popover);
          console.log(`üéØ Popover style:`, {
            zIndex: style.zIndex,
            position: style.position,
            display: style.display,
            visibility: style.visibility,
            opacity: style.opacity
          });
        }
      }, 100);
    }
  }, [message.id]);
  
  // G√©rer la fermeture automatique quand la souris quitte le popover
  const handlePopoverMouseLeave = useCallback(() => {
    console.log('üñ±Ô∏è Souris quitte le popover, fermeture dans 300ms');
    // D√©lai de 300ms pour permettre de revenir dans le popover
    closeTimerRef.current = setTimeout(() => {
      handlePopoverOpenChange(false);
    }, 300);
  }, [handlePopoverOpenChange]);
  
  // Annuler la fermeture si la souris revient dans le popover
  const handlePopoverMouseEnter = useCallback(() => {
    if (closeTimerRef.current) {
      console.log('üñ±Ô∏è Souris retourne dans le popover, annulation fermeture');
      clearTimeout(closeTimerRef.current);
      closeTimerRef.current = null;
    }
  }, []);
  
  // Cleanup du timer au d√©montage
  useEffect(() => {
    return () => {
      if (closeTimerRef.current) {
        clearTimeout(closeTimerRef.current);
      }
    };
  }, []);
  
  const [translationFilter, setTranslationFilter] = useState('');
  
  const contentRef = useRef<HTMLDivElement>(null);
  const messageRef = useRef<HTMLDivElement>(null);
  const filterInputRef = useRef<HTMLInputElement>(null);

  // Effet pour d√©tecter les nouvelles traductions et d√©clencher l'animation
  useEffect(() => {
    const currentCount = message.translations?.length || 0;
    
    if (currentCount > previousTranslationCount && previousTranslationCount > 0) {
      // Une nouvelle traduction a √©t√© ajout√©e
      setIsNewTranslation(true);
      
      // Si la nouvelle traduction est dans la langue de l'utilisateur, afficher une notification
      const newTranslation = message.translations?.find((t: any) => 
        (t.language || t.targetLanguage) === userLanguage
      );
      
      if (newTranslation && currentDisplayLanguage === userLanguage) {
        console.log(`üéâ [AUTO-TRANSLATION] Affichage automatique de la traduction en ${userLanguage} pour le message ${message.id}`);
        toast.success(t('bubbleStream.messageTranslatedTo', { language: userLanguage }), {
          duration: 2000,
          position: 'bottom-right'
        });
      }
      
      // Arr√™ter l'animation apr√®s 2 secondes
      const timer = setTimeout(() => {
        setIsNewTranslation(false);
      }, 2000);
      
      return () => clearTimeout(timer);
    }
    
    setPreviousTranslationCount(currentCount);
  }, [message.translations?.length, previousTranslationCount, userLanguage, currentDisplayLanguage, message.id]);

  // Les traductions sont d√©j√† normalis√©es
  const normalizedTranslations = message.translations || [];

  // Calculer si une traduction est r√©ellement en cours
  const isActuallyTranslating = useMemo(() => {
    // Si aucune traduction, on se base sur la prop
    if (!message.translations || message.translations.length === 0) {
      console.log(`üîç [BUBBLE] Message ${message.id}: Aucune traduction, isTranslating=${isTranslating}`);
      return isTranslating;
    }

    // Les traductions venant du backend sont d√©j√† compl√©t√©es
    // Seules les traductions en cours c√¥t√© frontend ont un statut 'pending'
    const hasOngoingTranslations = message.translations.some((t: any) => {
      const status = t.status;
      return status === 'pending' || status === 'processing';
    });

    // Si une traduction a un translatedContent et pas de statut, elle est compl√©t√©e
    const allCompleted = message.translations.every((t: any) => {
      const status = t.status;
      return !status || status === 'completed' || !!t.translatedContent;
    });

    // Debug uniquement en mode d√©veloppement et pour les cas probl√©matiques
    const shouldDebug = process.env.NODE_ENV === 'development' && (hasOngoingTranslations || isTranslating);
    
    if (shouldDebug) {
      console.log(`üîç [BUBBLE] Message ${message.id}:`, {
        translationsCount: message.translations.length,
        hasOngoingTranslations,
        allCompleted,
        isTranslatingProp: isTranslating,
        translationStatuses: message.translations.map((t: any) => ({ lang: t.language || t.targetLanguage, status: t.status || 'completed' }))
      });
    }

    // Si toutes les traductions sont compl√©t√©es, on n'est plus en cours de traduction
    if (allCompleted) {
      return false;
    }

    // Si on a des traductions en cours OU si le parent dit qu'on traduit ET qu'on n'a pas toutes les traductions compl√©t√©es
    const result = hasOngoingTranslations || (isTranslating && !allCompleted);
    return result;
  }, [message.translations, isTranslating]);

  // Fonctions utilitaires (pas d'effets de bord)
  const getCurrentContent = () => {
    const originalLang = message.originalLanguage || 'fr';
    
    if (currentDisplayLanguage === originalLang) {
      return message.originalContent || message.content;
    }
    
    const translation = message.translations?.find((t: any) => 
      (t?.language || t?.targetLanguage) === currentDisplayLanguage
    );
    
    return ((translation as any)?.content || (translation as any)?.translatedContent) || message.originalContent || message.content;
  };

  const formatTimeAgo = (timestamp: string | Date) => {
    const now = new Date();
    const messageTime = new Date(timestamp);
    const diffInMinutes = Math.floor((now.getTime() - messageTime.getTime()) / (1000 * 60));

    if (diffInMinutes < 1) return t('bubbleStream.justNow');
    if (diffInMinutes < 60) return t('bubbleStream.minutesAgo', { minutes: diffInMinutes });
    if (diffInMinutes < 1440) return t('bubbleStream.hoursAgo', { hours: Math.floor(diffInMinutes / 60) });
    return t('bubbleStream.daysAgo', { days: Math.floor(diffInMinutes / 1440) });
  };

  // Handlers qui remontent les actions au parent
  const handleLanguageSwitch = (langCode: string) => {
    handlePopoverOpenChange(false);
    onLanguageSwitch?.(message.id, langCode);
  };

  const handleForceTranslation = (targetLanguage: string) => {
    handlePopoverOpenChange(false);
    onForceTranslation?.(message.id, targetLanguage);
  };

  // Fonction pour obtenir le tier sup√©rieur
  const getNextTier = (currentTier: string) => {
    const tiers = ['basic', 'medium', 'premium'];
    const currentIndex = tiers.indexOf(currentTier);
    return currentIndex < tiers.length - 1 ? tiers[currentIndex + 1] : null;
  };

  // Fonction pour forcer une re-traduction avec tier sup√©rieur
  const handleUpgradeTier = async (targetLanguage: string, currentTier: string) => {
    const nextTier = getNextTier(currentTier);
    if (!nextTier) {
      toast.info(t('bubbleStream.maxModelReached'));
      return;
    }

    handlePopoverOpenChange(false);
    
    if (onForceTranslation) {
      try {
        // Pour l'instant, utiliser la fonction de traduction normale
        // TODO: Ajouter support pour sp√©cifier le mod√®le
        await onForceTranslation(message.id, targetLanguage);
        toast.success(t('bubbleStream.retranslatingTo', { 
          language: getLanguageInfo(targetLanguage).name, 
          model: nextTier 
        }));
      } catch (error) {
        toast.error(t('bubbleStream.upgradeError'));
      }
    }
  };

  const handleEditMessage = () => {
    const newContent = prompt(t('bubbleStream.editMessagePrompt'), message.content);
    if (newContent && newContent.trim() !== message.content) {
      onEditMessage?.(message.id, newContent.trim());
    }
  };

  const handleDeleteMessage = () => {
    const confirmed = confirm(t('bubbleStream.deleteMessageConfirm'));
    if (confirmed) {
      onDeleteMessage?.(message.id);
    }
  };

  // Logique de permissions (pure, pas d'effets de bord)
  const isOwnMessage = message.senderId === currentUser.id || 
                      message.anonymousSenderId === currentUser.id;
  
  const canModifyMessage = () => {
    if (isOwnMessage) return true;
    if (conversationType === 'group' || conversationType === 'public' || conversationType === 'global') {
      return ['MODERATOR', 'ADMIN', 'CREATOR', 'BIGBOSS'].includes(userRole);
    }
    return false;
  };

  const canDeleteMessage = () => {
    if (['BIGBOSS', 'ADMIN', 'MODERATOR'].includes(userRole)) return true;
    
    const messageAge = Date.now() - new Date(message.createdAt).getTime();
    const twelveHours = 12 * 60 * 60 * 1000;
    
    if (messageAge > twelveHours) return false;
    return canModifyMessage();
  };

  // Donn√©es d√©riv√©es pour l'affichage
  const availableVersions = [
    {
      language: message.originalLanguage || 'fr',
      content: message.originalContent || message.content,
      isOriginal: true,
      confidence: 1,
      model: 'original'
    },
    ...message.translations?.map((t: any) => ({
      language: t.language || t.targetLanguage,
      content: t.content || t.translatedContent,
      isOriginal: false,
      confidence: t.confidence || t.confidenceScore || 0.9,
      model: t.model || t.translationModel || 'basic'
    })) || []
  ];

  const getMissingLanguages = () => {
    const translatedLanguages = new Set([
      message.originalLanguage || 'fr',
      ...message.translations?.map((t: any) => t?.language || t?.targetLanguage).filter(Boolean) || []
    ]);
    
    return SUPPORTED_LANGUAGES.filter(lang => !translatedLanguages.has(lang.code));
  };


  const filteredVersions = availableVersions.filter(version => {
    if (!translationFilter.trim()) return true;
    const langInfo = getLanguageInfo((version as any).language);
    const searchTerm = translationFilter.toLowerCase();
    return (
      langInfo.name.toLowerCase().includes(searchTerm) ||
      langInfo.code.toLowerCase().includes(searchTerm) ||
      (version as any).content.toLowerCase().includes(searchTerm)
    );
  });

  const filteredMissingLanguages = getMissingLanguages().filter(lang => {
    if (!translationFilter.trim()) return true;
    const searchTerm = translationFilter.toLowerCase();
    return (
      lang.name.toLowerCase().includes(searchTerm) ||
      lang.code.toLowerCase().includes(searchTerm)
    );
  });

  return (
    <TooltipProvider>
      <Card 
        ref={messageRef}
        className={cn(
          "bubble-message relative transition-all duration-300 hover:shadow-lg mx-2",
          isOwnMessage 
            ? 'bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-800' 
            : 'bg-white border-gray-200 dark:bg-gray-800 dark:border-gray-700'
        )}
      >
        <CardContent className="p-4">
          {/* Header */}
          <div className="flex items-start justify-between mb-3">
            <div className="flex items-center space-x-3">
              <Avatar className="h-10 w-10">
                <AvatarImage 
                  src={(message.sender as any)?.avatar} 
                  alt={message.sender?.firstName} 
                />
                <AvatarFallback className="bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 font-medium">
                  {getMessageInitials(message)}
                </AvatarFallback>
              </Avatar>
              
              <div className="flex-1">
                <div className="flex items-center space-x-2">
                  <span className="font-medium text-gray-900 dark:text-gray-100">
                    @{message.sender?.username}
                  </span>
                  {message.anonymousSenderId && (
                    <Ghost className="h-4 w-4 text-gray-400 dark:text-gray-500" />
                  )}
                  <span className="text-gray-400 dark:text-gray-500">‚Ä¢</span>
                  <span className="text-gray-500 dark:text-gray-400 flex items-center text-sm">
                    <Timer className="h-3 w-3 mr-1" />
                    {formatTimeAgo(message.createdAt)}
                  </span>
                </div>
              </div>
            </div>

            {/* Indicateur de statut */}
            <div className="flex items-center space-x-2">
              {translationError && (
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div className="flex items-center space-x-1 text-red-600 dark:text-red-400">
                      <AlertTriangle className="h-3 w-3" />
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    {translationError}
                  </TooltipContent>
                </Tooltip>
              )}

              {/* Badge langue originale - indique aussi si traduit */}
              <Tooltip>
                <TooltipTrigger asChild>
                  <Badge 
                    variant="outline" 
                    className={cn(
                      "font-medium cursor-pointer transition-colors",
                      currentDisplayLanguage === (message.originalLanguage || 'fr')
                        ? "bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-600"
                        : "bg-blue-50 border-blue-300 text-blue-700 hover:bg-blue-100 dark:bg-blue-900 dark:border-blue-700 dark:text-blue-300 dark:hover:bg-blue-800"
                    )}
                    onClick={() => handleLanguageSwitch(message.originalLanguage || 'fr')}
                  >
                    <span className="mr-1">{getLanguageInfo(message.originalLanguage || 'fr').flag}</span>
                    {getLanguageInfo(message.originalLanguage || 'fr').code.toUpperCase()}
                  </Badge>
                </TooltipTrigger>
                <TooltipContent>
                  {currentDisplayLanguage === (message.originalLanguage || 'fr')
                    ? `${t('bubbleStream.originalLanguage')}: ${getLanguageInfo(message.originalLanguage || 'fr').name}`
                    : `${t('bubbleStream.originalLanguage')}: ${getLanguageInfo(message.originalLanguage || 'fr').name} ‚Ä¢ ${t('bubbleStream.viewing')}: ${getLanguageInfo(currentDisplayLanguage).name}`
                  }
                </TooltipContent>
              </Tooltip>
            </div>
          </div>

          {/* Contenu principal */}
          <div className="mb-3">
            <AnimatePresence mode="wait">
              <motion.div
                key={`${message.id}-${currentDisplayLanguage}`}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.3, ease: [0.4, 0, 0.2, 1] }}
                ref={contentRef}
              >
                <p className="text-gray-900 dark:text-gray-100 leading-relaxed whitespace-pre-wrap text-base">
                  {getCurrentContent()}
                </p>
              </motion.div>
            </AnimatePresence>
          </div>

          {/* Actions */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-1">
              {/* Bouton traduction avec popover */}
              <Popover 
                open={isTranslationPopoverOpen} 
                onOpenChange={handlePopoverOpenChange}
                modal={false}
              >
                <PopoverTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={(e) => {
                      e.stopPropagation();
                    }}
                    onMouseEnter={handlePopoverMouseEnter}
                    onMouseLeave={handlePopoverMouseLeave}
                    className={cn(
                      "relative p-2 rounded-full transition-all duration-200",
                      isNewTranslation
                        ? "text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-950 hover:bg-green-100 dark:hover:bg-green-900"
                        : "text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
                    )}
                    aria-label={t('bubbleStream.viewTranslations')}
                  >
                    <Languages className={cn(
                      "h-4 w-4 transition-transform",
                      isActuallyTranslating && "animate-pulse"
                    )} />
                    
                    {message.translations && message.translations.length > 0 && (
                      <span 
                        className={cn(
                          "absolute -top-1 -right-1 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium transition-all duration-300",
                          isNewTranslation 
                            ? "bg-green-500 shadow-lg shadow-green-500/50 scale-110" 
                            : "bg-blue-500"
                        )}
                      >
                        {message.translations.length}
                      </span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent 
                  className={cn(
                    "w-full max-w-xs md:w-80 p-0 shadow-2xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 backdrop-blur-sm",
                    Z_CLASSES.POPOVER
                  )}
                  side="top" 
                  align="start"
                  sideOffset={8}
                  alignOffset={0}
                  avoidCollisions={true}
                  collisionPadding={10}
                  onOpenAutoFocus={(e) => e.preventDefault()}
                  onInteractOutside={(e) => {
                    e.preventDefault();
                    handlePopoverOpenChange(false);
                  }}
                  onMouseEnter={handlePopoverMouseEnter}
                  onMouseLeave={handlePopoverMouseLeave}
                >
                  <Tabs defaultValue="translations" className="w-full">
                    <TabsList className="grid w-full grid-cols-2 mb-3">
                      <TabsTrigger value="translations" className="text-xs">
                        {t('bubbleStream.translations')} ({availableVersions.length})
                      </TabsTrigger>
                      <TabsTrigger value="translate" className="text-xs">
                        {t('bubbleStream.translateTo')} ({filteredMissingLanguages.length})
                      </TabsTrigger>
                    </TabsList>

                    {/* Onglet Traductions disponibles */}
                    <TabsContent value="translations" className="mt-0">
                      <div className="p-3 pt-0">
                        {/* Champ de filtre */}
                        {availableVersions.length > 1 && (
                          <div className="mb-3">
                            <div className="relative">
                              <Search className="absolute left-2.5 top-1/2 transform -translate-y-1/2 h-3.5 w-3.5 text-gray-400 dark:text-gray-500" />
                              <Input
                                ref={filterInputRef}
                                placeholder={t('bubbleStream.filterLanguages')}
                                value={translationFilter}
                                onChange={(e) => setTranslationFilter(e.target.value)}
                                className="pl-8 pr-8 h-8 text-xs bg-gray-50/80 dark:bg-gray-800/80 border-gray-200/60 dark:border-gray-600/60 focus:bg-white dark:focus:bg-gray-700 focus:border-blue-300 dark:focus:border-blue-600 transition-all text-gray-900 dark:text-gray-100"
                              />
                              {translationFilter && (
                                <button
                                  onClick={() => setTranslationFilter('')}
                                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
                                >
                                  <X className="h-3.5 w-3.5" />
                                </button>
                              )}
                            </div>
                          </div>
                        )}

                        <div className="space-y-1 max-h-[200px] overflow-y-auto scrollbar-thin">
                      {filteredVersions.length > 0 ? (
                        filteredVersions.map((version, index) => {
                          const versionAny = version as any;
                          const langInfo = getLanguageInfo(versionAny.language);
                          const isCurrentlyDisplayed = currentDisplayLanguage === versionAny.language;
                          
                          return (
                            <button
                              key={`${message.id}-version-${versionAny.language}-${index}`}
                              onClick={(e) => {
                                e.stopPropagation();
                                handleLanguageSwitch(versionAny.language);
                                handlePopoverOpenChange(false);
                              }}
                              className={`w-full p-2.5 rounded-lg text-left transition-all duration-200 group ${
                                isCurrentlyDisplayed 
                                  ? 'bg-blue-50/80 dark:bg-blue-900/40 border border-blue-200/60 dark:border-blue-700/60'
                                  : 'bg-white/60 dark:bg-gray-700/40 border border-transparent hover:bg-white/80 dark:hover:bg-gray-700/60 hover:border-gray-200/60 dark:hover:border-gray-600/60'
                              }`}
                            >
                              <div className="flex items-center justify-between mb-1.5">
                                <div className="flex items-center space-x-2">
                                  <span className="text-base">{langInfo.flag}</span>
                                  <span className={`font-medium text-sm ${
                                    isCurrentlyDisplayed ? 'text-blue-700 dark:text-blue-300' : 'text-gray-700 dark:text-gray-300'
                                  }`}>
                                    {langInfo.name}
                                  </span>
                                  {versionAny.isOriginal && (
                                    <span className="text-xs text-gray-500 dark:text-gray-400 bg-gray-100/60 dark:bg-gray-700/60 px-1.5 py-0.5 rounded">
                                      {t('bubbleStream.originalBadge')}
                                    </span>
                                  )}
                                  {isCurrentlyDisplayed && (
                                    <CheckCircle2 className="h-3.5 w-3.5 text-blue-600 dark:text-blue-400" />
                                  )}
                                </div>
                                {!versionAny.isOriginal && (
                                  <div className="flex items-center space-x-1">
                                    {/* Ic√¥ne d'upgrade vers tier sup√©rieur */}
                                    {getNextTier && getNextTier(versionAny.model || 'basic') && (
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <div
                                            onClick={(e) => {
                                              e.stopPropagation();
                                              handleUpgradeTier && handleUpgradeTier(versionAny.language, versionAny.model || 'basic');
                                            }}
                                            className="p-1 rounded hover:bg-green-100 dark:hover:bg-green-900 text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 transition-colors cursor-pointer"
                                          >
                                            <ArrowUp className="h-3 w-3" />
                                          </div>
                                        </TooltipTrigger>
                                        <TooltipContent>
                                          {t('bubbleStream.improveQuality', { 
                                            current: versionAny.model || 'basic', 
                                            next: getNextTier(versionAny.model || 'basic') 
                                          })}
                                        </TooltipContent>
                                      </Tooltip>
                                    )}
                                    <span className="text-xs text-gray-500 dark:text-gray-400 bg-gray-100/60 dark:bg-gray-700/60 px-1.5 py-0.5 rounded">
                                      {Math.round(versionAny.confidence * 100)}%
                                    </span>
                                    {versionAny.model && (
                                      <span className="text-xs text-blue-600 dark:text-blue-400 bg-blue-100/60 dark:bg-blue-900/60 px-1.5 py-0.5 rounded">
                                        {versionAny.model}
                                      </span>
                                    )}
                                  </div>
                                )}
                              </div>
                              
                              <p className="text-sm text-gray-600 dark:text-gray-300 leading-relaxed line-clamp-2 group-hover:text-gray-800 dark:group-hover:text-gray-200">
                                {versionAny.content}
                              </p>
                              
                              {/* Indicateur de qualit√© discret */}
                              {!versionAny.isOriginal && (
                                <div className="mt-1.5 flex items-center space-x-1">
                                  <div className="flex-1 bg-gray-200/40 dark:bg-gray-700/40 rounded-full h-0.5">
                                    <div 
                                      className="bg-green-400 dark:bg-green-500 h-0.5 rounded-full transition-all duration-300"
                                      style={{ width: `${Math.round((versionAny.confidence || 0.9) * 100)}%` }}
                                    />
                                  </div>
                                </div>
                              )}
                            </button>
                          );
                        })
                          ) : (
                            <div className="text-center p-4 text-gray-400 dark:text-gray-500">
                              <Languages className="h-6 w-6 mx-auto mb-2 opacity-60" />
                              <p className="text-xs">
                                {translationFilter ? t('bubbleStream.noTranslationFound') : t('bubbleStream.noTranslationAvailable')}
                              </p>
                            </div>
                          )}
                        </div>

                        {isActuallyTranslating && (
                          <div className="mt-3 pt-3 border-t border-gray-100 dark:border-gray-700">
                            <div className="flex items-center justify-center space-x-2 text-sm text-blue-600 dark:text-blue-400 py-2">
                              <Loader2 className="h-4 w-4 animate-spin" />
                              <span className="font-medium">{t('bubbleStream.translating')}</span>
                            </div>
                          </div>
                        )}
                      </div>
                    </TabsContent>

                    {/* Onglet Traduire vers */}
                    <TabsContent value="translate" className="mt-0">
                      <div className="p-3 pt-0">
                        {/* Champ de filtre */}
                        {getMissingLanguages().length > 3 && (
                          <div className="mb-3">
                            <div className="relative">
                              <Search className="absolute left-2.5 top-1/2 transform -translate-y-1/2 h-3.5 w-3.5 text-gray-400 dark:text-gray-500" />
                              <Input
                                placeholder={t('bubbleStream.filterLanguages')}
                                value={translationFilter}
                                onChange={(e) => setTranslationFilter(e.target.value)}
                                className="pl-8 pr-8 h-8 text-xs bg-gray-50/80 dark:bg-gray-800/80 border-gray-200/60 dark:border-gray-600/60 focus:bg-white dark:focus:bg-gray-700 focus:border-blue-300 dark:focus:border-blue-600 transition-all text-gray-900 dark:text-gray-100"
                              />
                              {translationFilter && (
                                <button
                                  onClick={() => setTranslationFilter('')}
                                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
                                >
                                  <X className="h-3.5 w-3.5" />
                                </button>
                              )}
                            </div>
                          </div>
                        )}

                        <div className="space-y-1 max-h-[200px] overflow-y-auto scrollbar-thin">
                          {filteredMissingLanguages.length > 0 ? (
                            filteredMissingLanguages.map((lang, index) => (
                              <button
                                key={`${message.id}-missing-${lang.code}-${index}`}
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleForceTranslation(lang.code);
                                  handlePopoverOpenChange(false);
                                }}
                                className="w-full p-2.5 rounded-lg border border-gray-100/60 dark:border-gray-700/60 text-left transition-all hover:shadow-sm hover:border-green-200/60 dark:hover:border-green-700/60 hover:bg-green-50/60 dark:hover:bg-green-900/40"
                              >
                                <div className="flex items-center space-x-2">
                                  <span className="text-base">{lang.flag}</span>
                                  <div className="flex-1">
                                    <span className="font-medium text-sm text-gray-700 dark:text-gray-300">{lang.name}</span>
                                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-0.5">{lang.translateText}</p>
                                  </div>
                                  <Languages className="h-3.5 w-3.5 text-green-600 dark:text-green-400 opacity-60" />
                                </div>
                              </button>
                            ))
                          ) : (
                            <div className="text-center p-4 text-gray-400 dark:text-gray-500">
                              <CheckCircle2 className="h-6 w-6 mx-auto mb-2 opacity-60" />
                              <p className="text-xs">
                                {t('bubbleStream.allLanguagesTranslated')}
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                    </TabsContent>
                  </Tabs>
                </PopoverContent>
              </Popover>

              {/* Autres boutons d'action */}
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsFavorited(!isFavorited)}
                aria-label={isFavorited ? t('bubbleStream.removeFavorite') : t('bubbleStream.addFavorite')}
                className={cn(
                  "p-2 rounded-full transition-colors",
                  isFavorited 
                    ? 'text-yellow-600 dark:text-yellow-400 hover:text-yellow-700 dark:hover:text-yellow-300 hover:bg-yellow-50 dark:hover:bg-yellow-900/40' 
                    : 'text-gray-500 dark:text-gray-400 hover:text-yellow-600 dark:hover:text-yellow-400 hover:bg-yellow-50 dark:hover:bg-yellow-900/40'
                )}
              >
                <Star className={cn("h-4 w-4", isFavorited && "fill-current")} />
              </Button>

              <Button
                variant="ghost"
                size="sm"
                onClick={async () => {
                  try {
                    await navigator.clipboard.writeText(getCurrentContent());
                    toast.success(t('bubbleStream.copied'), {
                      duration: 2000,
                    });
                  } catch (error) {
                    toast.error(t('bubbleStream.copyFailed'), {
                      duration: 2000,
                    });
                  }
                }}
                aria-label={t('bubbleStream.copyMessage')}
                className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 p-2 rounded-full"
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>

            {/* Menu d'options si permissions */}
            {canModifyMessage() && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 p-1 rounded-full"
                  >
                    <MoreHorizontal className="h-3 w-3" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem onClick={handleEditMessage}>
                    <Edit className="h-4 w-4 mr-2" />
                    <span>{t('bubbleStream.edit')}</span>
                  </DropdownMenuItem>
                  {canDeleteMessage() && (
                    <DropdownMenuItem 
                      onClick={handleDeleteMessage}
                      className="text-red-600 hover:text-red-700 hover:bg-red-50"
                    >
                      <Trash2 className="h-4 w-4 mr-2" />
                      <span>{t('bubbleStream.delete')}</span>
                    </DropdownMenuItem>
                  )}
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </div>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
}

export const BubbleMessage = memo(BubbleMessageInner, (prevProps, nextProps) => {
  // Comparaison approfondie pour d√©tecter les changements dans les traductions
  const prevTranslations = prevProps.message.translations || [];
  const nextTranslations = nextProps.message.translations || [];
  
  // Si le nombre de traductions a chang√©, re-render
  if (prevTranslations.length !== nextTranslations.length) {
    return false;
  }
  
  // V√©rifier si le contenu des traductions a chang√©
  const translationsChanged = prevTranslations.some((prevTrans, index) => {
    const nextTrans = nextTranslations[index];
    return !nextTrans || 
           prevTrans.targetLanguage !== nextTrans.targetLanguage ||
           prevTrans.translatedContent !== nextTrans.translatedContent ||
           prevTrans.translationModel !== nextTrans.translationModel;
  });
  
  if (translationsChanged) {
    return false;
  }
  
  // Comparaison des autres props
  return (
    prevProps.message.id === nextProps.message.id &&
    prevProps.message.content === nextProps.message.content &&
    prevProps.currentDisplayLanguage === nextProps.currentDisplayLanguage &&
    prevProps.isTranslating === nextProps.isTranslating &&
    prevProps.translationError === nextProps.translationError
  );
});

BubbleMessage.displayName = 'BubbleMessage';
BubbleMessage.displayName = 'BubbleMessage';