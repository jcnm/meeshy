"use strict";
/**
 * Utilitaires unifi√©s pour la gestion des langues dans Meeshy
 * Module partag√© entre Gateway, Frontend, et Translator
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TYPING_CANCELATION_DELAY = exports.TOAST_ERROR_DURATION = exports.TOAST_LONG_DURATION = exports.TOAST_SHORT_DURATION = exports.MAX_MESSAGE_LENGTH = exports.SUPPORTED_LANGUAGES = void 0;
exports.getLanguageInfo = getLanguageInfo;
exports.getLanguageName = getLanguageName;
exports.getLanguageFlag = getLanguageFlag;
exports.getLanguageColor = getLanguageColor;
exports.getLanguageTranslateText = getLanguageTranslateText;
exports.isSupportedLanguage = isSupportedLanguage;
exports.getSupportedLanguageCodes = getSupportedLanguageCodes;
exports.filterSupportedLanguages = filterSupportedLanguages;
/**
 * Liste compl√®te des langues support√©es avec toutes les propri√©t√©s
 * Fusion de toutes les versions existantes pour pr√©server la plus longue liste
 */
exports.SUPPORTED_LANGUAGES = [
    {
        code: 'fr',
        name: 'Fran√ßais',
        flag: 'üá´üá∑',
        color: 'bg-blue-500',
        translateText: 'Traduire ce message en fran√ßais'
    },
    {
        code: 'en',
        name: 'English',
        flag: 'üá¨üáß',
        color: 'bg-red-500',
        translateText: 'Translate this message to English'
    },
    {
        code: 'es',
        name: 'Espa√±ol',
        flag: 'üá™üá∏',
        color: 'bg-yellow-500',
        translateText: 'Traducir este mensaje al espa√±ol'
    },
    {
        code: 'de',
        name: 'Deutsch',
        flag: 'üá©üá™',
        color: 'bg-gray-800',
        translateText: 'Diese Nachricht ins Deutsche √ºbersetzen'
    },
    {
        code: 'pt',
        name: 'Portugu√™s',
        flag: 'üáµüáπ',
        color: 'bg-green-500',
        translateText: 'Traduzir esta mensagem para portugu√™s'
    },
    {
        code: 'zh',
        name: '‰∏≠Êñá',
        flag: 'üá®üá≥',
        color: 'bg-red-600',
        translateText: 'Â∞ÜÊ≠§Ê∂àÊÅØÁøªËØëÊàê‰∏≠Êñá'
    },
    {
        code: 'ja',
        name: 'Êó•Êú¨Ë™û',
        flag: 'üáØüáµ',
        color: 'bg-white border',
        translateText: '„Åì„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊó•Êú¨Ë™û„Å´ÁøªË®≥'
    },
    {
        code: 'ar',
        name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
        flag: 'üá∏üá¶',
        color: 'bg-green-600',
        translateText: 'ÿ™ÿ±ÿ¨ŸÖÿ© Ÿáÿ∞Ÿá ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ•ŸÑŸâ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
    },
];
/**
 * Cache pour am√©liorer les performances des recherches r√©p√©t√©es
 */
const languageCache = new Map();
/**
 * Initialise le cache des langues
 */
function initializeLanguageCache() {
    if (languageCache.size === 0) {
        exports.SUPPORTED_LANGUAGES.forEach(lang => {
            languageCache.set(lang.code, lang);
        });
    }
}
/**
 * Obtient les informations compl√®tes d'une langue par son code
 * Version optimis√©e avec cache et fallback robuste
 */
function getLanguageInfo(code) {
    // Initialiser le cache si n√©cessaire
    initializeLanguageCache();
    // G√©rer les cas edge
    if (!code || code.trim() === '' || code === 'unknown') {
        return {
            code: 'fr',
            name: 'Fran√ßais',
            flag: 'üá´üá∑',
            color: 'bg-blue-500',
            translateText: 'Traduire ce message en fran√ßais'
        };
    }
    // Normaliser le code (minuscules, trim)
    const normalizedCode = code.toLowerCase().trim();
    // Recherche dans le cache
    const found = languageCache.get(normalizedCode);
    if (found) {
        return found;
    }
    // Fallback: cr√©er un objet pour langues non support√©es
    return {
        code: normalizedCode,
        name: normalizedCode.toUpperCase(),
        flag: 'üåê',
        color: 'bg-gray-500',
        translateText: `Translate this message to ${normalizedCode}`
    };
}
/**
 * Obtient le nom d'une langue par son code
 */
function getLanguageName(code) {
    const lang = getLanguageInfo(code);
    return lang.name;
}
/**
 * Obtient le drapeau d'une langue par son code
 */
function getLanguageFlag(code) {
    const lang = getLanguageInfo(code);
    return lang.flag;
}
/**
 * Obtient la couleur d'une langue par son code
 */
function getLanguageColor(code) {
    const lang = getLanguageInfo(code);
    return lang.color || 'bg-gray-500';
}
/**
 * Obtient le texte de traduction d'une langue par son code
 */
function getLanguageTranslateText(code) {
    const lang = getLanguageInfo(code);
    return lang.translateText || `Translate this message to ${lang.name}`;
}
/**
 * V√©rifie si un code de langue est support√©
 */
function isSupportedLanguage(code) {
    if (!code)
        return false;
    initializeLanguageCache();
    return languageCache.has(code.toLowerCase().trim());
}
/**
 * Obtient tous les codes de langue support√©s
 */
function getSupportedLanguageCodes() {
    return exports.SUPPORTED_LANGUAGES.map(lang => lang.code);
}
/**
 * Filtre les langues support√©es selon un crit√®re
 */
function filterSupportedLanguages(predicate) {
    return exports.SUPPORTED_LANGUAGES.filter(predicate);
}
// Constants pour compatibilit√© avec les versions pr√©c√©dentes
exports.MAX_MESSAGE_LENGTH = 300;
exports.TOAST_SHORT_DURATION = 2000;
exports.TOAST_LONG_DURATION = 3000;
exports.TOAST_ERROR_DURATION = 5000;
exports.TYPING_CANCELATION_DELAY = 2000;
//# sourceMappingURL=languages.js.map