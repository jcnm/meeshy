# Frontend Dockerfile - ONNX WASM capable with Ubuntu base
FROM ubuntu:22.04 AS base

ARG DEBIAN_FRONTEND=noninteractive

# Install Node.js 22 and basic dependencies
RUN apt-get update --fix-missing && \
    apt-get install -y curl git wget build-essential && \
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g pnpm && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install tini for proper init handling
RUN apt-get update && apt-get install -y tini && rm -rf /var/lib/apt/lists/*
ENTRYPOINT ["/usr/bin/tini", "--"]

# Install WASM/ONNX support dependencies
RUN apt-get update && apt-get install -y \
    python3 python3-pip \
    cmake make gcc g++ \
    zlib1g-dev libncurses5-dev libgdbm-dev \
    libnss3-dev libssl-dev libreadline-dev libffi-dev \
    && rm -rf /var/lib/apt/lists/*

# === DEPENDENCIES STAGE ===
FROM base AS deps
WORKDIR /app

# Copy package files for frontend
COPY package.json pnpm-lock.yaml ./
# Install all dependencies at once (both prod and dev for build)
RUN pnpm install --no-frozen-lockfile

# === BUILDER STAGE ===
FROM base AS builder
WORKDIR /app

# Copy over the node_modules from the deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy the application source
COPY . .

# Set environment variables for ONNX Runtime and production build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_PUBLIC_DISABLE_CLIENT_TRANSLATION=true
ENV NEXT_PUBLIC_USE_API_TRANSLATION_ONLY=true

# Build the application
RUN pnpm build

# === PRODUCTION STAGE ===
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create system user
RUN groupadd --system --gid 1001 nodejs && \
    useradd --system --uid 1001 --gid nodejs nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3100
ENV PORT=3100

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3100', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Set environment for ONNX Runtime (disabled for client-side)
ENV NEXT_PUBLIC_DISABLE_CLIENT_TRANSLATION=true
ENV NEXT_PUBLIC_USE_API_TRANSLATION_ONLY=true

CMD ["node", "server.js"]
