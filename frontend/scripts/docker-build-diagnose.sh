#!/bin/bash
# Script de diagnostic pour identifier les probl√®mes avant build Docker

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç Diagnostic Build Docker Frontend${NC}"
echo -e "${BLUE}===================================${NC}"

ISSUES_FOUND=0

# Check 1: Docker version
echo -e "\n${YELLOW}üìã 1. V√©rification Docker...${NC}"
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version)
    echo -e "${GREEN}   ‚úì Docker install√©: $DOCKER_VERSION${NC}"
else
    echo -e "${RED}   ‚úó Docker n'est pas install√©!${NC}"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

# Check 2: Docker daemon
echo -e "\n${YELLOW}üìã 2. V√©rification Docker daemon...${NC}"
if docker info &> /dev/null; then
    echo -e "${GREEN}   ‚úì Docker daemon en cours d'ex√©cution${NC}"
else
    echo -e "${RED}   ‚úó Docker daemon n'est pas d√©marr√©!${NC}"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

# Check 3: Buildx
echo -e "\n${YELLOW}üìã 3. V√©rification Buildx...${NC}"
if docker buildx version &> /dev/null; then
    BUILDX_VERSION=$(docker buildx version)
    echo -e "${GREEN}   ‚úì Buildx install√©: $BUILDX_VERSION${NC}"
else
    echo -e "${RED}   ‚úó Buildx n'est pas install√©!${NC}"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

# Check 4: Builders
echo -e "\n${YELLOW}üìã 4. V√©rification Builders...${NC}"
if docker buildx ls | grep -q "meeshy-builder-fresh"; then
    echo -e "${GREEN}   ‚úì Builder meeshy-builder-fresh existe${NC}"
    
    # Check if running
    if docker buildx ls | grep "meeshy-builder-fresh" | grep -q "running"; then
        echo -e "${GREEN}   ‚úì Builder en cours d'ex√©cution${NC}"
    else
        echo -e "${YELLOW}   ‚ö† Builder pas en cours d'ex√©cution, sera d√©marr√© automatiquement${NC}"
    fi
else
    echo -e "${YELLOW}   ‚ö† Builder meeshy-builder-fresh n'existe pas (sera cr√©√©)${NC}"
fi

# Check 5: Docker Hub authentication
echo -e "\n${YELLOW}üìã 5. V√©rification authentification Docker Hub...${NC}"
if docker info 2>/dev/null | grep -q "Username"; then
    USERNAME=$(docker info 2>/dev/null | grep "Username" | awk '{print $2}')
    echo -e "${GREEN}   ‚úì Connect√© comme: $USERNAME${NC}"
else
    echo -e "${YELLOW}   ‚ö† Non connect√© √† Docker Hub (n√©cessaire pour push)${NC}"
    echo -e "${YELLOW}   ‚Üí Lancez: docker login${NC}"
fi

# Check 6: Disk space
echo -e "\n${YELLOW}üìã 6. V√©rification espace disque...${NC}"
AVAILABLE_SPACE=$(df -h . | tail -1 | awk '{print $4}')
AVAILABLE_SPACE_GB=$(df -k . | tail -1 | awk '{print $4}')
AVAILABLE_SPACE_GB=$((AVAILABLE_SPACE_GB / 1024 / 1024))

echo -e "   Espace disponible: $AVAILABLE_SPACE (${AVAILABLE_SPACE_GB}GB)"

if [ "$AVAILABLE_SPACE_GB" -lt 5 ]; then
    echo -e "${RED}   ‚úó Espace disque insuffisant (< 5GB)${NC}"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
elif [ "$AVAILABLE_SPACE_GB" -lt 10 ]; then
    echo -e "${YELLOW}   ‚ö† Espace disque limite (< 10GB)${NC}"
else
    echo -e "${GREEN}   ‚úì Espace disque OK${NC}"
fi

# Check 7: Docker cache
echo -e "\n${YELLOW}üìã 7. V√©rification cache Docker...${NC}"
if docker buildx du --verbose &> /dev/null; then
    CACHE_SIZE=$(docker buildx du 2>/dev/null | tail -1 | awk '{print $1}')
    echo -e "   Cache actuel: $CACHE_SIZE"
    echo -e "${GREEN}   ‚úì Cache disponible${NC}"
else
    echo -e "${YELLOW}   ‚ö† Impossible de v√©rifier le cache${NC}"
fi

# Check 8: Network connectivity
echo -e "\n${YELLOW}üìã 8. V√©rification connectivit√© r√©seau...${NC}"
if ping -c 1 docker.io &> /dev/null; then
    echo -e "${GREEN}   ‚úì Docker Hub accessible${NC}"
else
    echo -e "${RED}   ‚úó Impossible de joindre Docker Hub${NC}"
    echo -e "${YELLOW}   ‚Üí V√©rifiez votre connexion internet${NC}"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

if ping -c 1 registry.npmjs.org &> /dev/null; then
    echo -e "${GREEN}   ‚úì npm registry accessible${NC}"
else
    echo -e "${RED}   ‚úó Impossible de joindre npm registry${NC}"
    echo -e "${YELLOW}   ‚Üí V√©rifiez votre connexion internet${NC}"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

# Check 9: Required files
echo -e "\n${YELLOW}üìã 9. V√©rification fichiers requis...${NC}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
FRONTEND_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

FILES_TO_CHECK=(
    "package.json"
    "Dockerfile"
    "Dockerfile.optimized"
    "scripts/prepare-docker-build.sh"
    "scripts/docker-build-optimized.sh"
)

for file in "${FILES_TO_CHECK[@]}"; do
    if [ -f "$FRONTEND_ROOT/$file" ]; then
        echo -e "${GREEN}   ‚úì $file${NC}"
    else
        echo -e "${RED}   ‚úó $file manquant${NC}"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
done

# Check 10: Platform support
echo -e "\n${YELLOW}üìã 10. V√©rification plateformes support√©es...${NC}"
PLATFORMS=$(docker buildx inspect meeshy-builder-fresh 2>/dev/null | grep "Platforms:" | head -1 || echo "")
if echo "$PLATFORMS" | grep -q "linux/arm64"; then
    echo -e "${GREEN}   ‚úì linux/arm64 support√©e${NC}"
else
    echo -e "${YELLOW}   ‚ö† linux/arm64 non support√©e${NC}"
fi

if echo "$PLATFORMS" | grep -q "linux/amd64"; then
    echo -e "${GREEN}   ‚úì linux/amd64 support√©e${NC}"
else
    echo -e "${YELLOW}   ‚ö† linux/amd64 non support√©e${NC}"
fi

# Summary
echo -e "\n${BLUE}===========================================${NC}"
if [ $ISSUES_FOUND -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Aucun probl√®me d√©tect√©!${NC}"
    echo -e "${GREEN}‚úÖ Vous pouvez lancer la build en toute s√©curit√©${NC}"
    echo ""
    echo -e "${BLUE}Commandes disponibles:${NC}"
    echo -e "   1. Build rapide (cache): ${YELLOW}./scripts/docker-build-optimized.sh${NC}"
    echo -e "   2. Build locale: ${YELLOW}PUSH=false ./scripts/docker-build-optimized.sh${NC}"
    echo -e "   3. Build s√©par√©e: ${YELLOW}./scripts/docker-build-separate.sh${NC}"
else
    echo -e "${RED}‚ö†Ô∏è  $ISSUES_FOUND probl√®me(s) d√©tect√©(s)${NC}"
    echo -e "${YELLOW}‚Üí Corrigez les probl√®mes ci-dessus avant de continuer${NC}"
fi
echo ""

