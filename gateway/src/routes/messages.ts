import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import { createUnifiedAuthMiddleware, UnifiedAuthRequest } from '../middleware/auth.js';
import { AttachmentService } from '../services/AttachmentService.js';
import { TranslationService } from '../services/TranslationService.js';

interface MessageParams {
  messageId: string;
}

interface UpdateMessageBody {
  content?: string;
  isEdited?: boolean;
}

interface MessageStatusBody {
  status: 'read' | 'delivered';
  timestamp?: string;
}

export default async function messageRoutes(fastify: FastifyInstance) {
  // R√©cup√©rer prisma d√©cor√© par le serveur
  const prisma = fastify.prisma;
  
  // Instancier les services
  const attachmentService = new AttachmentService(prisma);
  const translationService: TranslationService = (fastify as any).translationService;
  const socketIOHandler = fastify.socketIOHandler;
  
  // Middleware d'authentification requis pour les messages
  const requiredAuth = createUnifiedAuthMiddleware(prisma, { 
    requireAuth: true, 
    allowAnonymous: false 
  });

  // Route pour r√©cup√©rer un message sp√©cifique
  fastify.get<{
    Params: MessageParams;
  }>('/messages/:messageId', {
    preValidation: [requiredAuth]
  }, async (request, reply) => {
    try {
      const { messageId } = request.params;
      const authRequest = request as UnifiedAuthRequest;
      const userId = authRequest.authContext.userId;

      // R√©cup√©rer le message avec ses d√©tails
      const message = await prisma.message.findFirst({
        where: {
          id: messageId,
          isDeleted: false
        },
        include: {
          sender: {
            select: {
              id: true,
              username: true,
              avatar: true,
              isOnline: true
            }
          },
          anonymousSender: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true
            }
          },
          conversation: {
            include: {
              members: {
                where: { userId: userId },
                select: { userId: true, role: true }
              }
            }
          },
          status: {
            include: {
              user: {
                select: {
                  id: true,
                  username: true
                }
              }
            }
          },
          translations: {
            select: {
              id: true,
              targetLanguage: true,
              translatedContent: true,
              sourceLanguage: true
            }
          }
        }
      });

      if (!message) {
        return reply.status(404).send({
          success: false,
          error: 'Message non trouv√©'
        });
      }

      // V√©rifier que l'utilisateur a acc√®s √† cette conversation
      if (!message.conversation.members.length) {
        return reply.status(403).send({
          success: false,
          error: 'Acc√®s non autoris√© √† ce message'
        });
      }

      return reply.send({
        success: true,
        data: message
      });

    } catch (error) {
      console.error('[MESSAGES] Error fetching message:', error);
      return reply.status(500).send({
        success: false,
        error: 'Erreur lors de la r√©cup√©ration du message'
      });
    }
  });

  // Route pour √©diter un message
  fastify.put<{
    Params: MessageParams;
    Body: UpdateMessageBody;
  }>('/messages/:messageId', {
    preValidation: [requiredAuth]
  }, async (request, reply) => {
    try {
      const { messageId } = request.params;
      const { content } = request.body;
      const authRequest = request as UnifiedAuthRequest;
      const userId = authRequest.authContext.userId;

      // V√©rifier que le message existe et appartient √† l'utilisateur
      const message = await prisma.message.findFirst({
        where: {
          id: messageId,
          senderId: userId,
          isDeleted: false
        },
        include: {
          attachments: true,
          conversation: {
            include: {
              members: {
                where: { userId: userId },
                select: { userId: true }
              }
            }
          }
        }
      });

      if (!message) {
        return reply.status(404).send({
          success: false,
          error: 'Message not found or you are not authorized to modify it'
        });
      }

      // Permettre l'√©dition de messages sans contenu si le message a des attachements
      const messageHasAttachments = message.attachments && message.attachments.length > 0;
      if ((!content || content.trim().length === 0) && !messageHasAttachments) {
        return reply.status(400).send({
          success: false,
          error: 'Message content cannot be empty (unless attachments are included)'
        });
      }

      // Mettre √† jour le message
      const updatedMessage = await prisma.message.update({
        where: { id: messageId },
        data: {
          content: content.trim(),
          isEdited: true,
          editedAt: new Date()
        },
        include: {
          sender: {
            select: {
              id: true,
              username: true,
              avatar: true
            }
          }
        }
      });

      // D√©clencher la retraduction automatique du message modifi√©
      try {
        // Invalider les traductions existantes en base de donn√©es
        const deletedCount = await prisma.messageTranslation.deleteMany({
          where: {
            messageId: messageId
          }
        });
        console.log(`üóëÔ∏è [MESSAGES] ${deletedCount.count} traductions supprim√©es pour le message ${messageId}`);
        
        // Cr√©er un objet message pour la retraduction
        const messageForRetranslation = {
          id: messageId,
          content: content.trim(),
          originalLanguage: message.originalLanguage,
          conversationId: message.conversationId,
          senderId: userId
        };
        
        // D√©clencher la retraduction via la m√©thode priv√©e existante
        if (translationService) {
          await (translationService as any)._processRetranslationAsync(messageId, messageForRetranslation);
          console.log('[MESSAGES] Retraduction initi√©e pour le message:', messageId);
        } else {
          console.warn('[MESSAGES] TranslationService non disponible, retraduction non effectu√©e');
        }

      } catch (translationError) {
        console.error('[MESSAGES] Erreur lors de la retraduction:', translationError);
        // Ne pas faire √©chouer l'√©dition si la retraduction √©choue
      }

      // Diffuser la mise √† jour via Socket.IO
      try {
        const socketIOManager = socketIOHandler.getManager();
        if (socketIOManager) {
          const room = `conversation_${message.conversationId}`;
          (socketIOManager as any).io.to(room).emit('message:edited', {
            ...updatedMessage,
            conversationId: message.conversationId
          });
          console.log(`‚úÖ [MESSAGES] Message √©dit√© diffus√© √† la conversation ${message.conversationId}`);
        }
      } catch (socketError) {
        console.error('[MESSAGES] Erreur lors de la diffusion Socket.IO:', socketError);
        // Ne pas faire √©chouer l'√©dition si la diffusion √©choue
      }

      return reply.send({
        success: true,
        data: updatedMessage,
        message: 'Message modifi√© avec succ√®s'
      });

    } catch (error) {
      console.error('[MESSAGES] Error updating message:', error);
      return reply.status(500).send({
        success: false,
        error: 'Erreur lors de la modification du message'
      });
    }
  });

  // Route pour supprimer un message (soft delete)
  fastify.delete<{
    Params: MessageParams;
  }>('/messages/:messageId', {
    preValidation: [requiredAuth]
  }, async (request, reply) => {
    try {
      const { messageId } = request.params;
      const authRequest = request as UnifiedAuthRequest;
      const userId = authRequest.authContext.userId;

      // V√©rifier que le message existe
      const message = await prisma.message.findFirst({
        where: {
          id: messageId,
          isDeleted: false
        },
        include: {
          sender: {
            select: {
              id: true,
              username: true
            }
          },
          conversation: {
            include: {
              members: {
                where: { userId: userId },
                select: { userId: true, role: true }
              }
            }
          },
          attachments: {
            select: {
              id: true
            }
          }
        }
      });

      if (!message) {
        return reply.status(404).send({
          success: false,
          error: 'Message non trouv√©'
        });
      }

      // V√©rifier les permissions de suppression
      const userMembership = message.conversation.members[0];
      const canDelete = 
        // L'auteur du message peut le supprimer
        message.senderId === userId ||
        // Les administrateurs et mod√©rateurs peuvent supprimer
        userMembership?.role === 'admin' ||
        userMembership?.role === 'moderator' ||
        authRequest.authContext.registeredUser?.role === 'ADMIN' ||
        authRequest.authContext.registeredUser?.role === 'BIGBOSS' ||
        authRequest.authContext.registeredUser?.role === 'MODERATOR' ||
        authRequest.authContext.registeredUser?.role === 'CREATOR';

      if (!canDelete) {
        return reply.status(403).send({
          success: false,
          error: 'Vous n\'√™tes pas autoris√© √† supprimer ce message'
        });
      }

      // Supprimer les attachments et leurs fichiers physiques
      if (message.attachments && message.attachments.length > 0) {
        console.log(`üóëÔ∏è [MESSAGES] Suppression de ${message.attachments.length} attachments pour le message ${messageId}`);
        for (const attachment of message.attachments) {
          try {
            await attachmentService.deleteAttachment(attachment.id);
            console.log(`‚úÖ [MESSAGES] Attachment ${attachment.id} supprim√© avec succ√®s`);
          } catch (error) {
            console.error(`‚ùå [MESSAGES] Erreur lors de la suppression de l'attachment ${attachment.id}:`, error);
            // Continuer m√™me en cas d'erreur pour supprimer les autres
          }
        }
      }

      // Supprimer les traductions du message
      const deletedTranslations = await prisma.messageTranslation.deleteMany({
        where: {
          messageId: messageId
        }
      });
      if (deletedTranslations.count > 0) {
        console.log(`üóëÔ∏è [MESSAGES] ${deletedTranslations.count} traductions supprim√©es pour le message ${messageId}`);
      }

      // Marquer le message comme supprim√© (soft delete)
      const deletedMessage = await prisma.message.update({
        where: { id: messageId },
        data: { 
          isDeleted: true,
          deletedAt: new Date()
          // Note: deletedBy n'existe pas dans le sch√©ma Prisma actuel
        }
      });

      // Mettre √† jour le lastMessageAt de la conversation avec le dernier message non supprim√©
      const lastNonDeletedMessage = await prisma.message.findFirst({
        where: {
          conversationId: message.conversationId,
          isDeleted: false
        },
        orderBy: { createdAt: 'desc' },
        select: { createdAt: true }
      });

      await prisma.conversation.update({
        where: { id: message.conversationId },
        data: { 
          lastMessageAt: lastNonDeletedMessage?.createdAt || message.conversation.createdAt
        }
      });

      // Diffuser la suppression via Socket.IO
      try {
        const socketIOManager = socketIOHandler.getManager();
        if (socketIOManager) {
          const room = `conversation_${message.conversationId}`;
          (socketIOManager as any).io.to(room).emit('message:deleted', {
            messageId,
            conversationId: message.conversationId
          });
          console.log(`‚úÖ [MESSAGES] Message supprim√© diffus√© √† la conversation ${message.conversationId}`);
        }
      } catch (socketError) {
        console.error('[MESSAGES] Erreur lors de la diffusion Socket.IO:', socketError);
        // Ne pas faire √©chouer la suppression si la diffusion √©choue
      }

      return reply.send({
        success: true,
        message: 'Message supprim√© avec succ√®s'
      });

    } catch (error) {
      console.error('[MESSAGES] Error deleting message:', error);
      return reply.status(500).send({
        success: false,
        error: 'Erreur lors de la suppression du message'
      });
    }
  });

  // Route pour marquer un message comme lu
  fastify.post<{
    Params: MessageParams;
    Body: MessageStatusBody;
  }>('/messages/:messageId/status', {
    preValidation: [requiredAuth]
  }, async (request, reply) => {
    try {
      const { messageId } = request.params;
      const { status } = request.body;
      const authRequest = request as UnifiedAuthRequest;
      const userId = authRequest.authContext.userId;

      if (!status || !['read', 'delivered'].includes(status)) {
        return reply.status(400).send({
          success: false,
          error: 'Statut invalide'
        });
      }

      // V√©rifier que le message existe et que l'utilisateur a acc√®s
      const message = await prisma.message.findFirst({
        where: {
          id: messageId,
          isDeleted: false
        },
        include: {
          conversation: {
            include: {
              members: {
                where: { userId: userId },
                select: { userId: true }
              }
            }
          }
        }
      });

      if (!message || !message.conversation.members.length) {
        return reply.status(404).send({
          success: false,
          error: 'Message non trouv√© ou acc√®s non autoris√©'
        });
      }

      // Ne pas marquer ses propres messages comme lus
      if (message.senderId === userId) {
        return reply.status(400).send({
          success: false,
          error: 'Vous ne pouvez pas marquer vos propres messages comme lus'
        });
      }

      if (status === 'read') {
        // V√©rifier si le statut de lecture existe d√©j√†
        const existingReadStatus = await prisma.messageStatus.findFirst({
          where: {
            messageId: messageId,
            userId: userId
          }
        });

        let status;
        if (existingReadStatus) {
          // Mettre √† jour
          status = await prisma.messageStatus.update({
            where: { id: existingReadStatus.id },
            data: { readAt: new Date() },
            include: {
              user: {
                select: {
                  id: true,
                  username: true
                }
              }
            }
          });
        } else {
          // Cr√©er nouveau
          status = await prisma.messageStatus.create({
            data: {
              messageId: messageId,
              userId: userId,
              readAt: new Date()
            },
            include: {
              user: {
                select: {
                  id: true,
                  username: true
                }
              }
            }
          });
        }

        // Diffuser le statut de lecture via Socket.IO
        try {
          const socketIOManager = socketIOHandler.getManager();
          if (socketIOManager) {
            const room = `conversation_${message.conversationId}`;
            (socketIOManager as any).io.to(room).emit('message:read', {
              messageId,
              userId,
              conversationId: message.conversationId,
              readAt: status.readAt
            });
            console.log(`‚úÖ [MESSAGES] Statut de lecture diffus√© √† la conversation ${message.conversationId}`);
          }
        } catch (socketError) {
          console.error('[MESSAGES] Erreur lors de la diffusion Socket.IO:', socketError);
          // Ne pas faire √©chouer la mise √† jour si la diffusion √©choue
        }

        return reply.send({
          success: true,
          data: status,
          message: 'Message marqu√© comme lu'
        });
      }

    } catch (error) {
      console.error('[MESSAGES] Error updating message status:', error);
      return reply.status(500).send({
        success: false,
        error: 'Erreur lors de la mise √† jour du statut du message'
      });
    }
  });

  // Route pour r√©cup√©rer l'historique des modifications d'un message
  fastify.get<{
    Params: MessageParams;
  }>('/messages/:messageId/history', {
    preValidation: [requiredAuth]
  }, async (request, reply) => {
    try {
      const { messageId } = request.params;
      const authRequest = request as UnifiedAuthRequest;
      const userId = authRequest.authContext.userId;

      // V√©rifier que le message existe et que l'utilisateur a acc√®s
      const message = await prisma.message.findFirst({
        where: {
          id: messageId
        },
        include: {
          conversation: {
            include: {
              members: {
                where: { userId: userId },
                select: { userId: true, role: true }
              }
            }
          }
        }
      });

      if (!message || !message.conversation.members.length) {
        return reply.status(404).send({
          success: false,
          error: 'Message non trouv√© ou acc√®s non autoris√©'
        });
      }

      // Seuls les mod√©rateurs/admins ou l'auteur peuvent voir l'historique
      const userMembership = message.conversation.members[0];
      const canViewHistory = 
        message.senderId === userId ||
        userMembership?.role === 'admin' ||
        userMembership?.role === 'moderator' ||
        authRequest.authContext.registeredUser?.role === 'ADMIN' ||
        authRequest.authContext.registeredUser?.role === 'BIGBOSS' ||
        authRequest.authContext.registeredUser?.role === 'MODERATOR';

      if (!canViewHistory) {
        return reply.status(403).send({
          success: false,
          error: 'Vous n\'√™tes pas autoris√© √† voir l\'historique de ce message'
        });
      }

      // Pour l'instant, retourner les informations de base
      // TODO: Impl√©menter un syst√®me d'historique des modifications si n√©cessaire
      const history = {
        messageId: message.id,
        originalContent: message.content,
        isEdited: message.isEdited,
        editedAt: message.editedAt,
        createdAt: message.createdAt,
        deletedAt: message.deletedAt,
        // Note: deletedBy n'existe pas dans le sch√©ma actuel
        isDeleted: message.isDeleted
      };

      return reply.send({
        success: true,
        data: history
      });

    } catch (error) {
      console.error('[MESSAGES] Error fetching message history:', error);
      return reply.status(500).send({
        success: false,
        error: 'Erreur lors de la r√©cup√©ration de l\'historique du message'
      });
    }
  });

  // Route pour r√©cup√©rer les traductions d'un message
  fastify.get<{
    Params: MessageParams;
  }>('/messages/:messageId/translations', {
    preValidation: [requiredAuth]
  }, async (request, reply) => {
    try {
      const { messageId } = request.params;
      const authRequest = request as UnifiedAuthRequest;
      const userId = authRequest.authContext.userId;

      // V√©rifier que le message existe et que l'utilisateur a acc√®s
      const message = await prisma.message.findFirst({
        where: {
          id: messageId,
          isDeleted: false
        },
        include: {
          conversation: {
            include: {
              members: {
                where: { userId: userId },
                select: { userId: true }
              }
            }
          },
          translations: {
            select: {
              id: true,
              sourceLanguage: true,
              targetLanguage: true,
              translatedContent: true,
              translationModel: true,
              confidenceScore: true,
              createdAt: true
            }
          }
        }
      });

      if (!message || !message.conversation.members.length) {
        return reply.status(404).send({
          success: false,
          error: 'Message non trouv√© ou acc√®s non autoris√©'
        });
      }

      return reply.send({
        success: true,
        data: {
          messageId: message.id,
          originalContent: message.content,
          originalLanguage: message.originalLanguage,
          translations: message.translations
        }
      });

    } catch (error) {
      console.error('[MESSAGES] Error fetching message translations:', error);
      return reply.status(500).send({
        success: false,
        error: 'Erreur lors de la r√©cup√©ration des traductions du message'
      });
    }
  });
}
