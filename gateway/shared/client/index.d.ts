
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * Utilisateur enregistré de la plateforme
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Conversation
 * Conversation entre utilisateurs (direct, group, public, global)
 */
export type Conversation = $Result.DefaultSelection<Prisma.$ConversationPayload>
/**
 * Model ConversationMember
 * Appartenance d'un utilisateur à une conversation
 */
export type ConversationMember = $Result.DefaultSelection<Prisma.$ConversationMemberPayload>
/**
 * Model ConversationShareLink
 * Lien de partage pour accès anonyme à une conversation
 */
export type ConversationShareLink = $Result.DefaultSelection<Prisma.$ConversationShareLinkPayload>
/**
 * Model AnonymousParticipant
 * Participant anonyme via lien de partage
 */
export type AnonymousParticipant = $Result.DefaultSelection<Prisma.$AnonymousParticipantPayload>
/**
 * Model Message
 * Message dans une conversation
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model MessageTranslation
 * Traduction d'un message
 */
export type MessageTranslation = $Result.DefaultSelection<Prisma.$MessageTranslationPayload>
/**
 * Model MessageReadStatus
 * Statut de lecture d'un message par un utilisateur
 */
export type MessageReadStatus = $Result.DefaultSelection<Prisma.$MessageReadStatusPayload>
/**
 * Model FriendRequest
 * Demande d'amitié entre utilisateurs
 */
export type FriendRequest = $Result.DefaultSelection<Prisma.$FriendRequestPayload>
/**
 * Model TypingIndicator
 * Indicateur de frappe en cours pour des tests... A supprimer après les tests
 */
export type TypingIndicator = $Result.DefaultSelection<Prisma.$TypingIndicatorPayload>
/**
 * Model Notification
 * Notification pour un utilisateur
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Community
 * Communauté (représente une communauté de conversation)
 */
export type Community = $Result.DefaultSelection<Prisma.$CommunityPayload>
/**
 * Model CommunityMember
 * Appartenance aux communautés (legacy)
 */
export type CommunityMember = $Result.DefaultSelection<Prisma.$CommunityMemberPayload>
/**
 * Model UserStats
 * Statistiques d'utilisation d'un utilisateur
 */
export type UserStats = $Result.DefaultSelection<Prisma.$UserStatsPayload>
/**
 * Model UserPreference
 * Préférence utilisateur générale
 */
export type UserPreference = $Result.DefaultSelection<Prisma.$UserPreferencePayload>
/**
 * Model ConversationPreference
 * Préférence spécifique à une conversation
 */
export type ConversationPreference = $Result.DefaultSelection<Prisma.$ConversationPreferencePayload>
/**
 * Model CommunityAdmin
 * Relation many-to-many pour les administrateurs de communauté
 */
export type CommunityAdmin = $Result.DefaultSelection<Prisma.$CommunityAdminPayload>
/**
 * Model CommunityModerator
 * Relation many-to-many pour les modérateurs de communauté
 */
export type CommunityModerator = $Result.DefaultSelection<Prisma.$CommunityModeratorPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs>;

  /**
   * `prisma.conversationMember`: Exposes CRUD operations for the **ConversationMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConversationMembers
    * const conversationMembers = await prisma.conversationMember.findMany()
    * ```
    */
  get conversationMember(): Prisma.ConversationMemberDelegate<ExtArgs>;

  /**
   * `prisma.conversationShareLink`: Exposes CRUD operations for the **ConversationShareLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConversationShareLinks
    * const conversationShareLinks = await prisma.conversationShareLink.findMany()
    * ```
    */
  get conversationShareLink(): Prisma.ConversationShareLinkDelegate<ExtArgs>;

  /**
   * `prisma.anonymousParticipant`: Exposes CRUD operations for the **AnonymousParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnonymousParticipants
    * const anonymousParticipants = await prisma.anonymousParticipant.findMany()
    * ```
    */
  get anonymousParticipant(): Prisma.AnonymousParticipantDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.messageTranslation`: Exposes CRUD operations for the **MessageTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageTranslations
    * const messageTranslations = await prisma.messageTranslation.findMany()
    * ```
    */
  get messageTranslation(): Prisma.MessageTranslationDelegate<ExtArgs>;

  /**
   * `prisma.messageReadStatus`: Exposes CRUD operations for the **MessageReadStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageReadStatuses
    * const messageReadStatuses = await prisma.messageReadStatus.findMany()
    * ```
    */
  get messageReadStatus(): Prisma.MessageReadStatusDelegate<ExtArgs>;

  /**
   * `prisma.friendRequest`: Exposes CRUD operations for the **FriendRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FriendRequests
    * const friendRequests = await prisma.friendRequest.findMany()
    * ```
    */
  get friendRequest(): Prisma.FriendRequestDelegate<ExtArgs>;

  /**
   * `prisma.typingIndicator`: Exposes CRUD operations for the **TypingIndicator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TypingIndicators
    * const typingIndicators = await prisma.typingIndicator.findMany()
    * ```
    */
  get typingIndicator(): Prisma.TypingIndicatorDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.community`: Exposes CRUD operations for the **Community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communities
    * const communities = await prisma.community.findMany()
    * ```
    */
  get community(): Prisma.CommunityDelegate<ExtArgs>;

  /**
   * `prisma.communityMember`: Exposes CRUD operations for the **CommunityMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommunityMembers
    * const communityMembers = await prisma.communityMember.findMany()
    * ```
    */
  get communityMember(): Prisma.CommunityMemberDelegate<ExtArgs>;

  /**
   * `prisma.userStats`: Exposes CRUD operations for the **UserStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStats
    * const userStats = await prisma.userStats.findMany()
    * ```
    */
  get userStats(): Prisma.UserStatsDelegate<ExtArgs>;

  /**
   * `prisma.userPreference`: Exposes CRUD operations for the **UserPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreference.findMany()
    * ```
    */
  get userPreference(): Prisma.UserPreferenceDelegate<ExtArgs>;

  /**
   * `prisma.conversationPreference`: Exposes CRUD operations for the **ConversationPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConversationPreferences
    * const conversationPreferences = await prisma.conversationPreference.findMany()
    * ```
    */
  get conversationPreference(): Prisma.ConversationPreferenceDelegate<ExtArgs>;

  /**
   * `prisma.communityAdmin`: Exposes CRUD operations for the **CommunityAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommunityAdmins
    * const communityAdmins = await prisma.communityAdmin.findMany()
    * ```
    */
  get communityAdmin(): Prisma.CommunityAdminDelegate<ExtArgs>;

  /**
   * `prisma.communityModerator`: Exposes CRUD operations for the **CommunityModerator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommunityModerators
    * const communityModerators = await prisma.communityModerator.findMany()
    * ```
    */
  get communityModerator(): Prisma.CommunityModeratorDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Conversation: 'Conversation',
    ConversationMember: 'ConversationMember',
    ConversationShareLink: 'ConversationShareLink',
    AnonymousParticipant: 'AnonymousParticipant',
    Message: 'Message',
    MessageTranslation: 'MessageTranslation',
    MessageReadStatus: 'MessageReadStatus',
    FriendRequest: 'FriendRequest',
    TypingIndicator: 'TypingIndicator',
    Notification: 'Notification',
    Community: 'Community',
    CommunityMember: 'CommunityMember',
    UserStats: 'UserStats',
    UserPreference: 'UserPreference',
    ConversationPreference: 'ConversationPreference',
    CommunityAdmin: 'CommunityAdmin',
    CommunityModerator: 'CommunityModerator'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "conversation" | "conversationMember" | "conversationShareLink" | "anonymousParticipant" | "message" | "messageTranslation" | "messageReadStatus" | "friendRequest" | "typingIndicator" | "notification" | "community" | "communityMember" | "userStats" | "userPreference" | "conversationPreference" | "communityAdmin" | "communityModerator"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Conversation: {
        payload: Prisma.$ConversationPayload<ExtArgs>
        fields: Prisma.ConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findFirst: {
            args: Prisma.ConversationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findMany: {
            args: Prisma.ConversationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          create: {
            args: Prisma.ConversationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          createMany: {
            args: Prisma.ConversationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConversationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          update: {
            args: Prisma.ConversationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          deleteMany: {
            args: Prisma.ConversationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConversationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          aggregate: {
            args: Prisma.ConversationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversation>
          }
          groupBy: {
            args: Prisma.ConversationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ConversationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ConversationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ConversationCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationCountAggregateOutputType> | number
          }
        }
      }
      ConversationMember: {
        payload: Prisma.$ConversationMemberPayload<ExtArgs>
        fields: Prisma.ConversationMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload>
          }
          findFirst: {
            args: Prisma.ConversationMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload>
          }
          findMany: {
            args: Prisma.ConversationMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload>[]
          }
          create: {
            args: Prisma.ConversationMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload>
          }
          createMany: {
            args: Prisma.ConversationMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConversationMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload>
          }
          update: {
            args: Prisma.ConversationMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload>
          }
          deleteMany: {
            args: Prisma.ConversationMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConversationMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationMemberPayload>
          }
          aggregate: {
            args: Prisma.ConversationMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversationMember>
          }
          groupBy: {
            args: Prisma.ConversationMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationMemberGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ConversationMemberFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ConversationMemberAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ConversationMemberCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationMemberCountAggregateOutputType> | number
          }
        }
      }
      ConversationShareLink: {
        payload: Prisma.$ConversationShareLinkPayload<ExtArgs>
        fields: Prisma.ConversationShareLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationShareLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationShareLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload>
          }
          findFirst: {
            args: Prisma.ConversationShareLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationShareLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload>
          }
          findMany: {
            args: Prisma.ConversationShareLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload>[]
          }
          create: {
            args: Prisma.ConversationShareLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload>
          }
          createMany: {
            args: Prisma.ConversationShareLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConversationShareLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload>
          }
          update: {
            args: Prisma.ConversationShareLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload>
          }
          deleteMany: {
            args: Prisma.ConversationShareLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationShareLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConversationShareLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationShareLinkPayload>
          }
          aggregate: {
            args: Prisma.ConversationShareLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversationShareLink>
          }
          groupBy: {
            args: Prisma.ConversationShareLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationShareLinkGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ConversationShareLinkFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ConversationShareLinkAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ConversationShareLinkCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationShareLinkCountAggregateOutputType> | number
          }
        }
      }
      AnonymousParticipant: {
        payload: Prisma.$AnonymousParticipantPayload<ExtArgs>
        fields: Prisma.AnonymousParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnonymousParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnonymousParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload>
          }
          findFirst: {
            args: Prisma.AnonymousParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnonymousParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload>
          }
          findMany: {
            args: Prisma.AnonymousParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload>[]
          }
          create: {
            args: Prisma.AnonymousParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload>
          }
          createMany: {
            args: Prisma.AnonymousParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AnonymousParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload>
          }
          update: {
            args: Prisma.AnonymousParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload>
          }
          deleteMany: {
            args: Prisma.AnonymousParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnonymousParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnonymousParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymousParticipantPayload>
          }
          aggregate: {
            args: Prisma.AnonymousParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnonymousParticipant>
          }
          groupBy: {
            args: Prisma.AnonymousParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnonymousParticipantGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AnonymousParticipantFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AnonymousParticipantAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AnonymousParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<AnonymousParticipantCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MessageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.MessageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      MessageTranslation: {
        payload: Prisma.$MessageTranslationPayload<ExtArgs>
        fields: Prisma.MessageTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload>
          }
          findFirst: {
            args: Prisma.MessageTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload>
          }
          findMany: {
            args: Prisma.MessageTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload>[]
          }
          create: {
            args: Prisma.MessageTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload>
          }
          createMany: {
            args: Prisma.MessageTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MessageTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload>
          }
          update: {
            args: Prisma.MessageTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload>
          }
          deleteMany: {
            args: Prisma.MessageTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTranslationPayload>
          }
          aggregate: {
            args: Prisma.MessageTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageTranslation>
          }
          groupBy: {
            args: Prisma.MessageTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageTranslationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MessageTranslationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.MessageTranslationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.MessageTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<MessageTranslationCountAggregateOutputType> | number
          }
        }
      }
      MessageReadStatus: {
        payload: Prisma.$MessageReadStatusPayload<ExtArgs>
        fields: Prisma.MessageReadStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageReadStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageReadStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload>
          }
          findFirst: {
            args: Prisma.MessageReadStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageReadStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload>
          }
          findMany: {
            args: Prisma.MessageReadStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload>[]
          }
          create: {
            args: Prisma.MessageReadStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload>
          }
          createMany: {
            args: Prisma.MessageReadStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MessageReadStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload>
          }
          update: {
            args: Prisma.MessageReadStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload>
          }
          deleteMany: {
            args: Prisma.MessageReadStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageReadStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageReadStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReadStatusPayload>
          }
          aggregate: {
            args: Prisma.MessageReadStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageReadStatus>
          }
          groupBy: {
            args: Prisma.MessageReadStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageReadStatusGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MessageReadStatusFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.MessageReadStatusAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.MessageReadStatusCountArgs<ExtArgs>
            result: $Utils.Optional<MessageReadStatusCountAggregateOutputType> | number
          }
        }
      }
      FriendRequest: {
        payload: Prisma.$FriendRequestPayload<ExtArgs>
        fields: Prisma.FriendRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FriendRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FriendRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload>
          }
          findFirst: {
            args: Prisma.FriendRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FriendRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload>
          }
          findMany: {
            args: Prisma.FriendRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload>[]
          }
          create: {
            args: Prisma.FriendRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload>
          }
          createMany: {
            args: Prisma.FriendRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FriendRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload>
          }
          update: {
            args: Prisma.FriendRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload>
          }
          deleteMany: {
            args: Prisma.FriendRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FriendRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FriendRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendRequestPayload>
          }
          aggregate: {
            args: Prisma.FriendRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFriendRequest>
          }
          groupBy: {
            args: Prisma.FriendRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<FriendRequestGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.FriendRequestFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.FriendRequestAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.FriendRequestCountArgs<ExtArgs>
            result: $Utils.Optional<FriendRequestCountAggregateOutputType> | number
          }
        }
      }
      TypingIndicator: {
        payload: Prisma.$TypingIndicatorPayload<ExtArgs>
        fields: Prisma.TypingIndicatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TypingIndicatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TypingIndicatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
          }
          findFirst: {
            args: Prisma.TypingIndicatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TypingIndicatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
          }
          findMany: {
            args: Prisma.TypingIndicatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>[]
          }
          create: {
            args: Prisma.TypingIndicatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
          }
          createMany: {
            args: Prisma.TypingIndicatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TypingIndicatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
          }
          update: {
            args: Prisma.TypingIndicatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
          }
          deleteMany: {
            args: Prisma.TypingIndicatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TypingIndicatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TypingIndicatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypingIndicatorPayload>
          }
          aggregate: {
            args: Prisma.TypingIndicatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTypingIndicator>
          }
          groupBy: {
            args: Prisma.TypingIndicatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<TypingIndicatorGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TypingIndicatorFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TypingIndicatorAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TypingIndicatorCountArgs<ExtArgs>
            result: $Utils.Optional<TypingIndicatorCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.NotificationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.NotificationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Community: {
        payload: Prisma.$CommunityPayload<ExtArgs>
        fields: Prisma.CommunityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          findFirst: {
            args: Prisma.CommunityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          findMany: {
            args: Prisma.CommunityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>[]
          }
          create: {
            args: Prisma.CommunityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          createMany: {
            args: Prisma.CommunityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommunityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          update: {
            args: Prisma.CommunityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          deleteMany: {
            args: Prisma.CommunityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommunityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          aggregate: {
            args: Prisma.CommunityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunity>
          }
          groupBy: {
            args: Prisma.CommunityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunityGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CommunityFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CommunityAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CommunityCountArgs<ExtArgs>
            result: $Utils.Optional<CommunityCountAggregateOutputType> | number
          }
        }
      }
      CommunityMember: {
        payload: Prisma.$CommunityMemberPayload<ExtArgs>
        fields: Prisma.CommunityMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload>
          }
          findFirst: {
            args: Prisma.CommunityMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload>
          }
          findMany: {
            args: Prisma.CommunityMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload>[]
          }
          create: {
            args: Prisma.CommunityMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload>
          }
          createMany: {
            args: Prisma.CommunityMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommunityMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload>
          }
          update: {
            args: Prisma.CommunityMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload>
          }
          deleteMany: {
            args: Prisma.CommunityMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommunityMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityMemberPayload>
          }
          aggregate: {
            args: Prisma.CommunityMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunityMember>
          }
          groupBy: {
            args: Prisma.CommunityMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunityMemberGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CommunityMemberFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CommunityMemberAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CommunityMemberCountArgs<ExtArgs>
            result: $Utils.Optional<CommunityMemberCountAggregateOutputType> | number
          }
        }
      }
      UserStats: {
        payload: Prisma.$UserStatsPayload<ExtArgs>
        fields: Prisma.UserStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          findFirst: {
            args: Prisma.UserStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          findMany: {
            args: Prisma.UserStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>[]
          }
          create: {
            args: Prisma.UserStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          createMany: {
            args: Prisma.UserStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          update: {
            args: Prisma.UserStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          deleteMany: {
            args: Prisma.UserStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          aggregate: {
            args: Prisma.UserStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStats>
          }
          groupBy: {
            args: Prisma.UserStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStatsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserStatsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserStatsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserStatsCountArgs<ExtArgs>
            result: $Utils.Optional<UserStatsCountAggregateOutputType> | number
          }
        }
      }
      UserPreference: {
        payload: Prisma.$UserPreferencePayload<ExtArgs>
        fields: Prisma.UserPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          findFirst: {
            args: Prisma.UserPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          findMany: {
            args: Prisma.UserPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>[]
          }
          create: {
            args: Prisma.UserPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          createMany: {
            args: Prisma.UserPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          update: {
            args: Prisma.UserPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          deleteMany: {
            args: Prisma.UserPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          aggregate: {
            args: Prisma.UserPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPreference>
          }
          groupBy: {
            args: Prisma.UserPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPreferenceGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserPreferenceFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserPreferenceAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<UserPreferenceCountAggregateOutputType> | number
          }
        }
      }
      ConversationPreference: {
        payload: Prisma.$ConversationPreferencePayload<ExtArgs>
        fields: Prisma.ConversationPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload>
          }
          findFirst: {
            args: Prisma.ConversationPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload>
          }
          findMany: {
            args: Prisma.ConversationPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload>[]
          }
          create: {
            args: Prisma.ConversationPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload>
          }
          createMany: {
            args: Prisma.ConversationPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConversationPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload>
          }
          update: {
            args: Prisma.ConversationPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload>
          }
          deleteMany: {
            args: Prisma.ConversationPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConversationPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPreferencePayload>
          }
          aggregate: {
            args: Prisma.ConversationPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversationPreference>
          }
          groupBy: {
            args: Prisma.ConversationPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationPreferenceGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ConversationPreferenceFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ConversationPreferenceAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ConversationPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationPreferenceCountAggregateOutputType> | number
          }
        }
      }
      CommunityAdmin: {
        payload: Prisma.$CommunityAdminPayload<ExtArgs>
        fields: Prisma.CommunityAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload>
          }
          findFirst: {
            args: Prisma.CommunityAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload>
          }
          findMany: {
            args: Prisma.CommunityAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload>[]
          }
          create: {
            args: Prisma.CommunityAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload>
          }
          createMany: {
            args: Prisma.CommunityAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommunityAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload>
          }
          update: {
            args: Prisma.CommunityAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload>
          }
          deleteMany: {
            args: Prisma.CommunityAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommunityAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityAdminPayload>
          }
          aggregate: {
            args: Prisma.CommunityAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunityAdmin>
          }
          groupBy: {
            args: Prisma.CommunityAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunityAdminGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CommunityAdminFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CommunityAdminAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CommunityAdminCountArgs<ExtArgs>
            result: $Utils.Optional<CommunityAdminCountAggregateOutputType> | number
          }
        }
      }
      CommunityModerator: {
        payload: Prisma.$CommunityModeratorPayload<ExtArgs>
        fields: Prisma.CommunityModeratorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityModeratorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityModeratorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload>
          }
          findFirst: {
            args: Prisma.CommunityModeratorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityModeratorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload>
          }
          findMany: {
            args: Prisma.CommunityModeratorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload>[]
          }
          create: {
            args: Prisma.CommunityModeratorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload>
          }
          createMany: {
            args: Prisma.CommunityModeratorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommunityModeratorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload>
          }
          update: {
            args: Prisma.CommunityModeratorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload>
          }
          deleteMany: {
            args: Prisma.CommunityModeratorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityModeratorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommunityModeratorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunityModeratorPayload>
          }
          aggregate: {
            args: Prisma.CommunityModeratorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunityModerator>
          }
          groupBy: {
            args: Prisma.CommunityModeratorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunityModeratorGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CommunityModeratorFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CommunityModeratorAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CommunityModeratorCountArgs<ExtArgs>
            result: $Utils.Optional<CommunityModeratorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdCommunities: number
    communityMemberships: number
    conversations: number
    conversationPreferences: number
    createdShareLinks: number
    receivedFriendRequests: number
    sentFriendRequests: number
    messageReadStatus: number
    sentMessages: number
    notifications: number
    typingIndicators: number
    preferences: number
    communityAdmins: number
    communityModerators: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdCommunities?: boolean | UserCountOutputTypeCountCreatedCommunitiesArgs
    communityMemberships?: boolean | UserCountOutputTypeCountCommunityMembershipsArgs
    conversations?: boolean | UserCountOutputTypeCountConversationsArgs
    conversationPreferences?: boolean | UserCountOutputTypeCountConversationPreferencesArgs
    createdShareLinks?: boolean | UserCountOutputTypeCountCreatedShareLinksArgs
    receivedFriendRequests?: boolean | UserCountOutputTypeCountReceivedFriendRequestsArgs
    sentFriendRequests?: boolean | UserCountOutputTypeCountSentFriendRequestsArgs
    messageReadStatus?: boolean | UserCountOutputTypeCountMessageReadStatusArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    typingIndicators?: boolean | UserCountOutputTypeCountTypingIndicatorsArgs
    preferences?: boolean | UserCountOutputTypeCountPreferencesArgs
    communityAdmins?: boolean | UserCountOutputTypeCountCommunityAdminsArgs
    communityModerators?: boolean | UserCountOutputTypeCountCommunityModeratorsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommunityMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConversationPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationPreferenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedShareLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationShareLinkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedFriendRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentFriendRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessageReadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageReadStatusWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTypingIndicatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypingIndicatorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommunityAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityAdminWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommunityModeratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityModeratorWhereInput
  }


  /**
   * Count Type ConversationCountOutputType
   */

  export type ConversationCountOutputType = {
    anonymousParticipants: number
    members: number
    preferences: number
    shareLinks: number
    messages: number
    typingIndicators: number
  }

  export type ConversationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anonymousParticipants?: boolean | ConversationCountOutputTypeCountAnonymousParticipantsArgs
    members?: boolean | ConversationCountOutputTypeCountMembersArgs
    preferences?: boolean | ConversationCountOutputTypeCountPreferencesArgs
    shareLinks?: boolean | ConversationCountOutputTypeCountShareLinksArgs
    messages?: boolean | ConversationCountOutputTypeCountMessagesArgs
    typingIndicators?: boolean | ConversationCountOutputTypeCountTypingIndicatorsArgs
  }

  // Custom InputTypes
  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationCountOutputType
     */
    select?: ConversationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountAnonymousParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnonymousParticipantWhereInput
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationMemberWhereInput
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationPreferenceWhereInput
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountShareLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationShareLinkWhereInput
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountTypingIndicatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypingIndicatorWhereInput
  }


  /**
   * Count Type ConversationShareLinkCountOutputType
   */

  export type ConversationShareLinkCountOutputType = {
    anonymousParticipants: number
  }

  export type ConversationShareLinkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anonymousParticipants?: boolean | ConversationShareLinkCountOutputTypeCountAnonymousParticipantsArgs
  }

  // Custom InputTypes
  /**
   * ConversationShareLinkCountOutputType without action
   */
  export type ConversationShareLinkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLinkCountOutputType
     */
    select?: ConversationShareLinkCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConversationShareLinkCountOutputType without action
   */
  export type ConversationShareLinkCountOutputTypeCountAnonymousParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnonymousParticipantWhereInput
  }


  /**
   * Count Type AnonymousParticipantCountOutputType
   */

  export type AnonymousParticipantCountOutputType = {
    sentMessages: number
  }

  export type AnonymousParticipantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentMessages?: boolean | AnonymousParticipantCountOutputTypeCountSentMessagesArgs
  }

  // Custom InputTypes
  /**
   * AnonymousParticipantCountOutputType without action
   */
  export type AnonymousParticipantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipantCountOutputType
     */
    select?: AnonymousParticipantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AnonymousParticipantCountOutputType without action
   */
  export type AnonymousParticipantCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    readStatus: number
    translations: number
    replies: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readStatus?: boolean | MessageCountOutputTypeCountReadStatusArgs
    translations?: boolean | MessageCountOutputTypeCountTranslationsArgs
    replies?: boolean | MessageCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountReadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageReadStatusWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageTranslationWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type CommunityCountOutputType
   */

  export type CommunityCountOutputType = {
    members: number
    admins: number
    moderators: number
    Conversation: number
  }

  export type CommunityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | CommunityCountOutputTypeCountMembersArgs
    admins?: boolean | CommunityCountOutputTypeCountAdminsArgs
    moderators?: boolean | CommunityCountOutputTypeCountModeratorsArgs
    Conversation?: boolean | CommunityCountOutputTypeCountConversationArgs
  }

  // Custom InputTypes
  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityCountOutputType
     */
    select?: CommunityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityMemberWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityAdminWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountModeratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityModeratorWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountConversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    displayName: string | null
    avatar: string | null
    isOnline: boolean | null
    lastSeen: Date | null
    lastActiveAt: Date | null
    systemLanguage: string | null
    regionalLanguage: string | null
    customDestinationLanguage: string | null
    autoTranslateEnabled: boolean | null
    translateToSystemLanguage: boolean | null
    translateToRegionalLanguage: boolean | null
    useCustomDestination: boolean | null
    role: string | null
    isActive: boolean | null
    deactivatedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    displayName: string | null
    avatar: string | null
    isOnline: boolean | null
    lastSeen: Date | null
    lastActiveAt: Date | null
    systemLanguage: string | null
    regionalLanguage: string | null
    customDestinationLanguage: string | null
    autoTranslateEnabled: boolean | null
    translateToSystemLanguage: boolean | null
    translateToRegionalLanguage: boolean | null
    useCustomDestination: boolean | null
    role: string | null
    isActive: boolean | null
    deactivatedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    firstName: number
    lastName: number
    email: number
    phoneNumber: number
    password: number
    displayName: number
    avatar: number
    isOnline: number
    lastSeen: number
    lastActiveAt: number
    systemLanguage: number
    regionalLanguage: number
    customDestinationLanguage: number
    autoTranslateEnabled: number
    translateToSystemLanguage: number
    translateToRegionalLanguage: number
    useCustomDestination: number
    role: number
    isActive: number
    deactivatedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    password?: true
    displayName?: true
    avatar?: true
    isOnline?: true
    lastSeen?: true
    lastActiveAt?: true
    systemLanguage?: true
    regionalLanguage?: true
    customDestinationLanguage?: true
    autoTranslateEnabled?: true
    translateToSystemLanguage?: true
    translateToRegionalLanguage?: true
    useCustomDestination?: true
    role?: true
    isActive?: true
    deactivatedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    password?: true
    displayName?: true
    avatar?: true
    isOnline?: true
    lastSeen?: true
    lastActiveAt?: true
    systemLanguage?: true
    regionalLanguage?: true
    customDestinationLanguage?: true
    autoTranslateEnabled?: true
    translateToSystemLanguage?: true
    translateToRegionalLanguage?: true
    useCustomDestination?: true
    role?: true
    isActive?: true
    deactivatedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    password?: true
    displayName?: true
    avatar?: true
    isOnline?: true
    lastSeen?: true
    lastActiveAt?: true
    systemLanguage?: true
    regionalLanguage?: true
    customDestinationLanguage?: true
    autoTranslateEnabled?: true
    translateToSystemLanguage?: true
    translateToRegionalLanguage?: true
    useCustomDestination?: true
    role?: true
    isActive?: true
    deactivatedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string | null
    password: string
    displayName: string | null
    avatar: string | null
    isOnline: boolean
    lastSeen: Date
    lastActiveAt: Date
    systemLanguage: string
    regionalLanguage: string
    customDestinationLanguage: string | null
    autoTranslateEnabled: boolean
    translateToSystemLanguage: boolean
    translateToRegionalLanguage: boolean
    useCustomDestination: boolean
    role: string
    isActive: boolean
    deactivatedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    displayName?: boolean
    avatar?: boolean
    isOnline?: boolean
    lastSeen?: boolean
    lastActiveAt?: boolean
    systemLanguage?: boolean
    regionalLanguage?: boolean
    customDestinationLanguage?: boolean
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: boolean
    isActive?: boolean
    deactivatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdCommunities?: boolean | User$createdCommunitiesArgs<ExtArgs>
    communityMemberships?: boolean | User$communityMembershipsArgs<ExtArgs>
    conversations?: boolean | User$conversationsArgs<ExtArgs>
    conversationPreferences?: boolean | User$conversationPreferencesArgs<ExtArgs>
    createdShareLinks?: boolean | User$createdShareLinksArgs<ExtArgs>
    receivedFriendRequests?: boolean | User$receivedFriendRequestsArgs<ExtArgs>
    sentFriendRequests?: boolean | User$sentFriendRequestsArgs<ExtArgs>
    messageReadStatus?: boolean | User$messageReadStatusArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    typingIndicators?: boolean | User$typingIndicatorsArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    stats?: boolean | User$statsArgs<ExtArgs>
    communityAdmins?: boolean | User$communityAdminsArgs<ExtArgs>
    communityModerators?: boolean | User$communityModeratorsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    displayName?: boolean
    avatar?: boolean
    isOnline?: boolean
    lastSeen?: boolean
    lastActiveAt?: boolean
    systemLanguage?: boolean
    regionalLanguage?: boolean
    customDestinationLanguage?: boolean
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: boolean
    isActive?: boolean
    deactivatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdCommunities?: boolean | User$createdCommunitiesArgs<ExtArgs>
    communityMemberships?: boolean | User$communityMembershipsArgs<ExtArgs>
    conversations?: boolean | User$conversationsArgs<ExtArgs>
    conversationPreferences?: boolean | User$conversationPreferencesArgs<ExtArgs>
    createdShareLinks?: boolean | User$createdShareLinksArgs<ExtArgs>
    receivedFriendRequests?: boolean | User$receivedFriendRequestsArgs<ExtArgs>
    sentFriendRequests?: boolean | User$sentFriendRequestsArgs<ExtArgs>
    messageReadStatus?: boolean | User$messageReadStatusArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    typingIndicators?: boolean | User$typingIndicatorsArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    stats?: boolean | User$statsArgs<ExtArgs>
    communityAdmins?: boolean | User$communityAdminsArgs<ExtArgs>
    communityModerators?: boolean | User$communityModeratorsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdCommunities: Prisma.$CommunityPayload<ExtArgs>[]
      communityMemberships: Prisma.$CommunityMemberPayload<ExtArgs>[]
      conversations: Prisma.$ConversationMemberPayload<ExtArgs>[]
      conversationPreferences: Prisma.$ConversationPreferencePayload<ExtArgs>[]
      createdShareLinks: Prisma.$ConversationShareLinkPayload<ExtArgs>[]
      receivedFriendRequests: Prisma.$FriendRequestPayload<ExtArgs>[]
      sentFriendRequests: Prisma.$FriendRequestPayload<ExtArgs>[]
      messageReadStatus: Prisma.$MessageReadStatusPayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      typingIndicators: Prisma.$TypingIndicatorPayload<ExtArgs>[]
      preferences: Prisma.$UserPreferencePayload<ExtArgs>[]
      stats: Prisma.$UserStatsPayload<ExtArgs> | null
      communityAdmins: Prisma.$CommunityAdminPayload<ExtArgs>[]
      communityModerators: Prisma.$CommunityModeratorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      firstName: string
      lastName: string
      email: string
      phoneNumber: string | null
      password: string
      displayName: string | null
      avatar: string | null
      isOnline: boolean
      lastSeen: Date
      lastActiveAt: Date
      systemLanguage: string
      regionalLanguage: string
      customDestinationLanguage: string | null
      autoTranslateEnabled: boolean
      translateToSystemLanguage: boolean
      translateToRegionalLanguage: boolean
      useCustomDestination: boolean
      /**
       * USER, ADMIN, MODO, AUDIT, ANALYST, BIGBOSS
       */
      role: string
      isActive: boolean
      deactivatedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdCommunities<T extends User$createdCommunitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCommunitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findMany"> | Null>
    communityMemberships<T extends User$communityMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$communityMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "findMany"> | Null>
    conversations<T extends User$conversationsArgs<ExtArgs> = {}>(args?: Subset<T, User$conversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "findMany"> | Null>
    conversationPreferences<T extends User$conversationPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$conversationPreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "findMany"> | Null>
    createdShareLinks<T extends User$createdShareLinksArgs<ExtArgs> = {}>(args?: Subset<T, User$createdShareLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "findMany"> | Null>
    receivedFriendRequests<T extends User$receivedFriendRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedFriendRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "findMany"> | Null>
    sentFriendRequests<T extends User$sentFriendRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentFriendRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "findMany"> | Null>
    messageReadStatus<T extends User$messageReadStatusArgs<ExtArgs> = {}>(args?: Subset<T, User$messageReadStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "findMany"> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    typingIndicators<T extends User$typingIndicatorsArgs<ExtArgs> = {}>(args?: Subset<T, User$typingIndicatorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findMany"> | Null>
    preferences<T extends User$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findMany"> | Null>
    stats<T extends User$statsArgs<ExtArgs> = {}>(args?: Subset<T, User$statsArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    communityAdmins<T extends User$communityAdminsArgs<ExtArgs> = {}>(args?: Subset<T, User$communityAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "findMany"> | Null>
    communityModerators<T extends User$communityModeratorsArgs<ExtArgs> = {}>(args?: Subset<T, User$communityModeratorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly isOnline: FieldRef<"User", 'Boolean'>
    readonly lastSeen: FieldRef<"User", 'DateTime'>
    readonly lastActiveAt: FieldRef<"User", 'DateTime'>
    readonly systemLanguage: FieldRef<"User", 'String'>
    readonly regionalLanguage: FieldRef<"User", 'String'>
    readonly customDestinationLanguage: FieldRef<"User", 'String'>
    readonly autoTranslateEnabled: FieldRef<"User", 'Boolean'>
    readonly translateToSystemLanguage: FieldRef<"User", 'Boolean'>
    readonly translateToRegionalLanguage: FieldRef<"User", 'Boolean'>
    readonly useCustomDestination: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly deactivatedAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.createdCommunities
   */
  export type User$createdCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    where?: CommunityWhereInput
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    cursor?: CommunityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * User.communityMemberships
   */
  export type User$communityMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    where?: CommunityMemberWhereInput
    orderBy?: CommunityMemberOrderByWithRelationInput | CommunityMemberOrderByWithRelationInput[]
    cursor?: CommunityMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityMemberScalarFieldEnum | CommunityMemberScalarFieldEnum[]
  }

  /**
   * User.conversations
   */
  export type User$conversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    where?: ConversationMemberWhereInput
    orderBy?: ConversationMemberOrderByWithRelationInput | ConversationMemberOrderByWithRelationInput[]
    cursor?: ConversationMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationMemberScalarFieldEnum | ConversationMemberScalarFieldEnum[]
  }

  /**
   * User.conversationPreferences
   */
  export type User$conversationPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    where?: ConversationPreferenceWhereInput
    orderBy?: ConversationPreferenceOrderByWithRelationInput | ConversationPreferenceOrderByWithRelationInput[]
    cursor?: ConversationPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationPreferenceScalarFieldEnum | ConversationPreferenceScalarFieldEnum[]
  }

  /**
   * User.createdShareLinks
   */
  export type User$createdShareLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    where?: ConversationShareLinkWhereInput
    orderBy?: ConversationShareLinkOrderByWithRelationInput | ConversationShareLinkOrderByWithRelationInput[]
    cursor?: ConversationShareLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationShareLinkScalarFieldEnum | ConversationShareLinkScalarFieldEnum[]
  }

  /**
   * User.receivedFriendRequests
   */
  export type User$receivedFriendRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    where?: FriendRequestWhereInput
    orderBy?: FriendRequestOrderByWithRelationInput | FriendRequestOrderByWithRelationInput[]
    cursor?: FriendRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendRequestScalarFieldEnum | FriendRequestScalarFieldEnum[]
  }

  /**
   * User.sentFriendRequests
   */
  export type User$sentFriendRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    where?: FriendRequestWhereInput
    orderBy?: FriendRequestOrderByWithRelationInput | FriendRequestOrderByWithRelationInput[]
    cursor?: FriendRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendRequestScalarFieldEnum | FriendRequestScalarFieldEnum[]
  }

  /**
   * User.messageReadStatus
   */
  export type User$messageReadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    where?: MessageReadStatusWhereInput
    orderBy?: MessageReadStatusOrderByWithRelationInput | MessageReadStatusOrderByWithRelationInput[]
    cursor?: MessageReadStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageReadStatusScalarFieldEnum | MessageReadStatusScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.typingIndicators
   */
  export type User$typingIndicatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    where?: TypingIndicatorWhereInput
    orderBy?: TypingIndicatorOrderByWithRelationInput | TypingIndicatorOrderByWithRelationInput[]
    cursor?: TypingIndicatorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TypingIndicatorScalarFieldEnum | TypingIndicatorScalarFieldEnum[]
  }

  /**
   * User.preferences
   */
  export type User$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    where?: UserPreferenceWhereInput
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    cursor?: UserPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * User.stats
   */
  export type User$statsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    where?: UserStatsWhereInput
  }

  /**
   * User.communityAdmins
   */
  export type User$communityAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    where?: CommunityAdminWhereInput
    orderBy?: CommunityAdminOrderByWithRelationInput | CommunityAdminOrderByWithRelationInput[]
    cursor?: CommunityAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityAdminScalarFieldEnum | CommunityAdminScalarFieldEnum[]
  }

  /**
   * User.communityModerators
   */
  export type User$communityModeratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    where?: CommunityModeratorWhereInput
    orderBy?: CommunityModeratorOrderByWithRelationInput | CommunityModeratorOrderByWithRelationInput[]
    cursor?: CommunityModeratorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityModeratorScalarFieldEnum | CommunityModeratorScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Conversation
   */

  export type AggregateConversation = {
    _count: ConversationCountAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    type: string | null
    title: string | null
    description: string | null
    image: string | null
    avatar: string | null
    communityId: string | null
    isActive: boolean | null
    isArchived: boolean | null
    lastMessageAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    type: string | null
    title: string | null
    description: string | null
    image: string | null
    avatar: string | null
    communityId: string | null
    isActive: boolean | null
    isArchived: boolean | null
    lastMessageAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationCountAggregateOutputType = {
    id: number
    identifier: number
    type: number
    title: number
    description: number
    image: number
    avatar: number
    communityId: number
    isActive: number
    isArchived: number
    lastMessageAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConversationMinAggregateInputType = {
    id?: true
    identifier?: true
    type?: true
    title?: true
    description?: true
    image?: true
    avatar?: true
    communityId?: true
    isActive?: true
    isArchived?: true
    lastMessageAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationMaxAggregateInputType = {
    id?: true
    identifier?: true
    type?: true
    title?: true
    description?: true
    image?: true
    avatar?: true
    communityId?: true
    isActive?: true
    isArchived?: true
    lastMessageAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationCountAggregateInputType = {
    id?: true
    identifier?: true
    type?: true
    title?: true
    description?: true
    image?: true
    avatar?: true
    communityId?: true
    isActive?: true
    isArchived?: true
    lastMessageAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConversationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversation to aggregate.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    _count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }




  export type ConversationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithAggregationInput | ConversationOrderByWithAggregationInput[]
    by: ConversationScalarFieldEnum[] | ConversationScalarFieldEnum
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationCountAggregateInputType | true
    _min?: ConversationMinAggregateInputType
    _max?: ConversationMaxAggregateInputType
  }

  export type ConversationGroupByOutputType = {
    id: string
    identifier: string | null
    type: string
    title: string | null
    description: string | null
    image: string | null
    avatar: string | null
    communityId: string | null
    isActive: boolean
    isArchived: boolean
    lastMessageAt: Date
    createdAt: Date
    updatedAt: Date
    _count: ConversationCountAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationGroupByOutputType[P]>
        }
      >
    >


  export type ConversationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    avatar?: boolean
    communityId?: boolean
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    anonymousParticipants?: boolean | Conversation$anonymousParticipantsArgs<ExtArgs>
    members?: boolean | Conversation$membersArgs<ExtArgs>
    preferences?: boolean | Conversation$preferencesArgs<ExtArgs>
    shareLinks?: boolean | Conversation$shareLinksArgs<ExtArgs>
    community?: boolean | Conversation$communityArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    typingIndicators?: boolean | Conversation$typingIndicatorsArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>


  export type ConversationSelectScalar = {
    id?: boolean
    identifier?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    avatar?: boolean
    communityId?: boolean
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConversationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anonymousParticipants?: boolean | Conversation$anonymousParticipantsArgs<ExtArgs>
    members?: boolean | Conversation$membersArgs<ExtArgs>
    preferences?: boolean | Conversation$preferencesArgs<ExtArgs>
    shareLinks?: boolean | Conversation$shareLinksArgs<ExtArgs>
    community?: boolean | Conversation$communityArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    typingIndicators?: boolean | Conversation$typingIndicatorsArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ConversationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conversation"
    objects: {
      anonymousParticipants: Prisma.$AnonymousParticipantPayload<ExtArgs>[]
      members: Prisma.$ConversationMemberPayload<ExtArgs>[]
      preferences: Prisma.$ConversationPreferencePayload<ExtArgs>[]
      shareLinks: Prisma.$ConversationShareLinkPayload<ExtArgs>[]
      community: Prisma.$CommunityPayload<ExtArgs> | null
      messages: Prisma.$MessagePayload<ExtArgs>[]
      typingIndicators: Prisma.$TypingIndicatorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      /**
       * Identifiant lisible par l'homme (ex: "meeshy", "general", "support")
       */
      identifier: string | null
      /**
       * direct, group, public, global
       */
      type: string
      title: string | null
      description: string | null
      image: string | null
      avatar: string | null
      communityId: string | null
      isActive: boolean
      isArchived: boolean
      lastMessageAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["conversation"]>
    composites: {}
  }

  type ConversationGetPayload<S extends boolean | null | undefined | ConversationDefaultArgs> = $Result.GetResult<Prisma.$ConversationPayload, S>

  type ConversationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConversationCountAggregateInputType | true
    }

  export interface ConversationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conversation'], meta: { name: 'Conversation' } }
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationFindUniqueArgs>(args: SelectSubset<T, ConversationFindUniqueArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Conversation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConversationFindUniqueOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationFindFirstArgs>(args?: SelectSubset<T, ConversationFindFirstArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Conversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationWithIdOnly = await prisma.conversation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationFindManyArgs>(args?: SelectSubset<T, ConversationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
     */
    create<T extends ConversationCreateArgs>(args: SelectSubset<T, ConversationCreateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Conversations.
     * @param {ConversationCreateManyArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationCreateManyArgs>(args?: SelectSubset<T, ConversationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
     */
    delete<T extends ConversationDeleteArgs>(args: SelectSubset<T, ConversationDeleteArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationUpdateArgs>(args: SelectSubset<T, ConversationUpdateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationDeleteManyArgs>(args?: SelectSubset<T, ConversationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationUpdateManyArgs>(args: SelectSubset<T, ConversationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
     */
    upsert<T extends ConversationUpsertArgs>(args: SelectSubset<T, ConversationUpsertArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Conversations that matches the filter.
     * @param {ConversationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const conversation = await prisma.conversation.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ConversationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Conversation.
     * @param {ConversationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const conversation = await prisma.conversation.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ConversationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): Prisma.PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conversation model
   */
  readonly fields: ConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anonymousParticipants<T extends Conversation$anonymousParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$anonymousParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    members<T extends Conversation$membersArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "findMany"> | Null>
    preferences<T extends Conversation$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "findMany"> | Null>
    shareLinks<T extends Conversation$shareLinksArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$shareLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "findMany"> | Null>
    community<T extends Conversation$communityArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$communityArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    messages<T extends Conversation$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    typingIndicators<T extends Conversation$typingIndicatorsArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$typingIndicatorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Conversation model
   */ 
  interface ConversationFieldRefs {
    readonly id: FieldRef<"Conversation", 'String'>
    readonly identifier: FieldRef<"Conversation", 'String'>
    readonly type: FieldRef<"Conversation", 'String'>
    readonly title: FieldRef<"Conversation", 'String'>
    readonly description: FieldRef<"Conversation", 'String'>
    readonly image: FieldRef<"Conversation", 'String'>
    readonly avatar: FieldRef<"Conversation", 'String'>
    readonly communityId: FieldRef<"Conversation", 'String'>
    readonly isActive: FieldRef<"Conversation", 'Boolean'>
    readonly isArchived: FieldRef<"Conversation", 'Boolean'>
    readonly lastMessageAt: FieldRef<"Conversation", 'DateTime'>
    readonly createdAt: FieldRef<"Conversation", 'DateTime'>
    readonly updatedAt: FieldRef<"Conversation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Conversation findUnique
   */
  export type ConversationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findUniqueOrThrow
   */
  export type ConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findFirst
   */
  export type ConversationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findFirstOrThrow
   */
  export type ConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversations to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation create
   */
  export type ConversationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a Conversation.
     */
    data: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }

  /**
   * Conversation createMany
   */
  export type ConversationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
  }

  /**
   * Conversation update
   */
  export type ConversationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a Conversation.
     */
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conversations.
     */
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     */
    where?: ConversationWhereInput
  }

  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the Conversation to update in case it exists.
     */
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
     */
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }

  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter which Conversation to delete.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversations to delete
     */
    where?: ConversationWhereInput
  }

  /**
   * Conversation findRaw
   */
  export type ConversationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Conversation aggregateRaw
   */
  export type ConversationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Conversation.anonymousParticipants
   */
  export type Conversation$anonymousParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    where?: AnonymousParticipantWhereInput
    orderBy?: AnonymousParticipantOrderByWithRelationInput | AnonymousParticipantOrderByWithRelationInput[]
    cursor?: AnonymousParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnonymousParticipantScalarFieldEnum | AnonymousParticipantScalarFieldEnum[]
  }

  /**
   * Conversation.members
   */
  export type Conversation$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    where?: ConversationMemberWhereInput
    orderBy?: ConversationMemberOrderByWithRelationInput | ConversationMemberOrderByWithRelationInput[]
    cursor?: ConversationMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationMemberScalarFieldEnum | ConversationMemberScalarFieldEnum[]
  }

  /**
   * Conversation.preferences
   */
  export type Conversation$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    where?: ConversationPreferenceWhereInput
    orderBy?: ConversationPreferenceOrderByWithRelationInput | ConversationPreferenceOrderByWithRelationInput[]
    cursor?: ConversationPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationPreferenceScalarFieldEnum | ConversationPreferenceScalarFieldEnum[]
  }

  /**
   * Conversation.shareLinks
   */
  export type Conversation$shareLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    where?: ConversationShareLinkWhereInput
    orderBy?: ConversationShareLinkOrderByWithRelationInput | ConversationShareLinkOrderByWithRelationInput[]
    cursor?: ConversationShareLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationShareLinkScalarFieldEnum | ConversationShareLinkScalarFieldEnum[]
  }

  /**
   * Conversation.community
   */
  export type Conversation$communityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    where?: CommunityWhereInput
  }

  /**
   * Conversation.messages
   */
  export type Conversation$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Conversation.typingIndicators
   */
  export type Conversation$typingIndicatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    where?: TypingIndicatorWhereInput
    orderBy?: TypingIndicatorOrderByWithRelationInput | TypingIndicatorOrderByWithRelationInput[]
    cursor?: TypingIndicatorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TypingIndicatorScalarFieldEnum | TypingIndicatorScalarFieldEnum[]
  }

  /**
   * Conversation without action
   */
  export type ConversationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
  }


  /**
   * Model ConversationMember
   */

  export type AggregateConversationMember = {
    _count: ConversationMemberCountAggregateOutputType | null
    _min: ConversationMemberMinAggregateOutputType | null
    _max: ConversationMemberMaxAggregateOutputType | null
  }

  export type ConversationMemberMinAggregateOutputType = {
    id: string | null
    conversationId: string | null
    userId: string | null
    role: string | null
    canSendMessage: boolean | null
    canSendFiles: boolean | null
    canSendImages: boolean | null
    canSendVideos: boolean | null
    canSendAudios: boolean | null
    canSendLocations: boolean | null
    canSendLinks: boolean | null
    joinedAt: Date | null
    leftAt: Date | null
    isActive: boolean | null
  }

  export type ConversationMemberMaxAggregateOutputType = {
    id: string | null
    conversationId: string | null
    userId: string | null
    role: string | null
    canSendMessage: boolean | null
    canSendFiles: boolean | null
    canSendImages: boolean | null
    canSendVideos: boolean | null
    canSendAudios: boolean | null
    canSendLocations: boolean | null
    canSendLinks: boolean | null
    joinedAt: Date | null
    leftAt: Date | null
    isActive: boolean | null
  }

  export type ConversationMemberCountAggregateOutputType = {
    id: number
    conversationId: number
    userId: number
    role: number
    canSendMessage: number
    canSendFiles: number
    canSendImages: number
    canSendVideos: number
    canSendAudios: number
    canSendLocations: number
    canSendLinks: number
    joinedAt: number
    leftAt: number
    isActive: number
    _all: number
  }


  export type ConversationMemberMinAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    role?: true
    canSendMessage?: true
    canSendFiles?: true
    canSendImages?: true
    canSendVideos?: true
    canSendAudios?: true
    canSendLocations?: true
    canSendLinks?: true
    joinedAt?: true
    leftAt?: true
    isActive?: true
  }

  export type ConversationMemberMaxAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    role?: true
    canSendMessage?: true
    canSendFiles?: true
    canSendImages?: true
    canSendVideos?: true
    canSendAudios?: true
    canSendLocations?: true
    canSendLinks?: true
    joinedAt?: true
    leftAt?: true
    isActive?: true
  }

  export type ConversationMemberCountAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    role?: true
    canSendMessage?: true
    canSendFiles?: true
    canSendImages?: true
    canSendVideos?: true
    canSendAudios?: true
    canSendLocations?: true
    canSendLinks?: true
    joinedAt?: true
    leftAt?: true
    isActive?: true
    _all?: true
  }

  export type ConversationMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationMember to aggregate.
     */
    where?: ConversationMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationMembers to fetch.
     */
    orderBy?: ConversationMemberOrderByWithRelationInput | ConversationMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConversationMembers
    **/
    _count?: true | ConversationMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMemberMaxAggregateInputType
  }

  export type GetConversationMemberAggregateType<T extends ConversationMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateConversationMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversationMember[P]>
      : GetScalarType<T[P], AggregateConversationMember[P]>
  }




  export type ConversationMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationMemberWhereInput
    orderBy?: ConversationMemberOrderByWithAggregationInput | ConversationMemberOrderByWithAggregationInput[]
    by: ConversationMemberScalarFieldEnum[] | ConversationMemberScalarFieldEnum
    having?: ConversationMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationMemberCountAggregateInputType | true
    _min?: ConversationMemberMinAggregateInputType
    _max?: ConversationMemberMaxAggregateInputType
  }

  export type ConversationMemberGroupByOutputType = {
    id: string
    conversationId: string
    userId: string
    role: string
    canSendMessage: boolean
    canSendFiles: boolean
    canSendImages: boolean
    canSendVideos: boolean
    canSendAudios: boolean
    canSendLocations: boolean
    canSendLinks: boolean
    joinedAt: Date
    leftAt: Date | null
    isActive: boolean
    _count: ConversationMemberCountAggregateOutputType | null
    _min: ConversationMemberMinAggregateOutputType | null
    _max: ConversationMemberMaxAggregateOutputType | null
  }

  type GetConversationMemberGroupByPayload<T extends ConversationMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationMemberGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationMemberGroupByOutputType[P]>
        }
      >
    >


  export type ConversationMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    role?: boolean
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: boolean
    leftAt?: boolean
    isActive?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversationMember"]>


  export type ConversationMemberSelectScalar = {
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    role?: boolean
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: boolean
    leftAt?: boolean
    isActive?: boolean
  }

  export type ConversationMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }

  export type $ConversationMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConversationMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conversationId: string
      userId: string
      /**
       * admin, moderator, member
       */
      role: string
      canSendMessage: boolean
      canSendFiles: boolean
      canSendImages: boolean
      canSendVideos: boolean
      canSendAudios: boolean
      canSendLocations: boolean
      canSendLinks: boolean
      joinedAt: Date
      leftAt: Date | null
      isActive: boolean
    }, ExtArgs["result"]["conversationMember"]>
    composites: {}
  }

  type ConversationMemberGetPayload<S extends boolean | null | undefined | ConversationMemberDefaultArgs> = $Result.GetResult<Prisma.$ConversationMemberPayload, S>

  type ConversationMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConversationMemberCountAggregateInputType | true
    }

  export interface ConversationMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConversationMember'], meta: { name: 'ConversationMember' } }
    /**
     * Find zero or one ConversationMember that matches the filter.
     * @param {ConversationMemberFindUniqueArgs} args - Arguments to find a ConversationMember
     * @example
     * // Get one ConversationMember
     * const conversationMember = await prisma.conversationMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationMemberFindUniqueArgs>(args: SelectSubset<T, ConversationMemberFindUniqueArgs<ExtArgs>>): Prisma__ConversationMemberClient<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConversationMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConversationMemberFindUniqueOrThrowArgs} args - Arguments to find a ConversationMember
     * @example
     * // Get one ConversationMember
     * const conversationMember = await prisma.conversationMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationMemberClient<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConversationMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemberFindFirstArgs} args - Arguments to find a ConversationMember
     * @example
     * // Get one ConversationMember
     * const conversationMember = await prisma.conversationMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationMemberFindFirstArgs>(args?: SelectSubset<T, ConversationMemberFindFirstArgs<ExtArgs>>): Prisma__ConversationMemberClient<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConversationMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemberFindFirstOrThrowArgs} args - Arguments to find a ConversationMember
     * @example
     * // Get one ConversationMember
     * const conversationMember = await prisma.conversationMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationMemberClient<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConversationMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConversationMembers
     * const conversationMembers = await prisma.conversationMember.findMany()
     * 
     * // Get first 10 ConversationMembers
     * const conversationMembers = await prisma.conversationMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationMemberWithIdOnly = await prisma.conversationMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationMemberFindManyArgs>(args?: SelectSubset<T, ConversationMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConversationMember.
     * @param {ConversationMemberCreateArgs} args - Arguments to create a ConversationMember.
     * @example
     * // Create one ConversationMember
     * const ConversationMember = await prisma.conversationMember.create({
     *   data: {
     *     // ... data to create a ConversationMember
     *   }
     * })
     * 
     */
    create<T extends ConversationMemberCreateArgs>(args: SelectSubset<T, ConversationMemberCreateArgs<ExtArgs>>): Prisma__ConversationMemberClient<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConversationMembers.
     * @param {ConversationMemberCreateManyArgs} args - Arguments to create many ConversationMembers.
     * @example
     * // Create many ConversationMembers
     * const conversationMember = await prisma.conversationMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationMemberCreateManyArgs>(args?: SelectSubset<T, ConversationMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ConversationMember.
     * @param {ConversationMemberDeleteArgs} args - Arguments to delete one ConversationMember.
     * @example
     * // Delete one ConversationMember
     * const ConversationMember = await prisma.conversationMember.delete({
     *   where: {
     *     // ... filter to delete one ConversationMember
     *   }
     * })
     * 
     */
    delete<T extends ConversationMemberDeleteArgs>(args: SelectSubset<T, ConversationMemberDeleteArgs<ExtArgs>>): Prisma__ConversationMemberClient<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConversationMember.
     * @param {ConversationMemberUpdateArgs} args - Arguments to update one ConversationMember.
     * @example
     * // Update one ConversationMember
     * const conversationMember = await prisma.conversationMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationMemberUpdateArgs>(args: SelectSubset<T, ConversationMemberUpdateArgs<ExtArgs>>): Prisma__ConversationMemberClient<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConversationMembers.
     * @param {ConversationMemberDeleteManyArgs} args - Arguments to filter ConversationMembers to delete.
     * @example
     * // Delete a few ConversationMembers
     * const { count } = await prisma.conversationMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationMemberDeleteManyArgs>(args?: SelectSubset<T, ConversationMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConversationMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConversationMembers
     * const conversationMember = await prisma.conversationMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationMemberUpdateManyArgs>(args: SelectSubset<T, ConversationMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConversationMember.
     * @param {ConversationMemberUpsertArgs} args - Arguments to update or create a ConversationMember.
     * @example
     * // Update or create a ConversationMember
     * const conversationMember = await prisma.conversationMember.upsert({
     *   create: {
     *     // ... data to create a ConversationMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConversationMember we want to update
     *   }
     * })
     */
    upsert<T extends ConversationMemberUpsertArgs>(args: SelectSubset<T, ConversationMemberUpsertArgs<ExtArgs>>): Prisma__ConversationMemberClient<$Result.GetResult<Prisma.$ConversationMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more ConversationMembers that matches the filter.
     * @param {ConversationMemberFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const conversationMember = await prisma.conversationMember.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ConversationMemberFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ConversationMember.
     * @param {ConversationMemberAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const conversationMember = await prisma.conversationMember.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ConversationMemberAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ConversationMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemberCountArgs} args - Arguments to filter ConversationMembers to count.
     * @example
     * // Count the number of ConversationMembers
     * const count = await prisma.conversationMember.count({
     *   where: {
     *     // ... the filter for the ConversationMembers we want to count
     *   }
     * })
    **/
    count<T extends ConversationMemberCountArgs>(
      args?: Subset<T, ConversationMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConversationMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationMemberAggregateArgs>(args: Subset<T, ConversationMemberAggregateArgs>): Prisma.PrismaPromise<GetConversationMemberAggregateType<T>>

    /**
     * Group by ConversationMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationMemberGroupByArgs['orderBy'] }
        : { orderBy?: ConversationMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConversationMember model
   */
  readonly fields: ConversationMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConversationMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConversationMember model
   */ 
  interface ConversationMemberFieldRefs {
    readonly id: FieldRef<"ConversationMember", 'String'>
    readonly conversationId: FieldRef<"ConversationMember", 'String'>
    readonly userId: FieldRef<"ConversationMember", 'String'>
    readonly role: FieldRef<"ConversationMember", 'String'>
    readonly canSendMessage: FieldRef<"ConversationMember", 'Boolean'>
    readonly canSendFiles: FieldRef<"ConversationMember", 'Boolean'>
    readonly canSendImages: FieldRef<"ConversationMember", 'Boolean'>
    readonly canSendVideos: FieldRef<"ConversationMember", 'Boolean'>
    readonly canSendAudios: FieldRef<"ConversationMember", 'Boolean'>
    readonly canSendLocations: FieldRef<"ConversationMember", 'Boolean'>
    readonly canSendLinks: FieldRef<"ConversationMember", 'Boolean'>
    readonly joinedAt: FieldRef<"ConversationMember", 'DateTime'>
    readonly leftAt: FieldRef<"ConversationMember", 'DateTime'>
    readonly isActive: FieldRef<"ConversationMember", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ConversationMember findUnique
   */
  export type ConversationMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMember to fetch.
     */
    where: ConversationMemberWhereUniqueInput
  }

  /**
   * ConversationMember findUniqueOrThrow
   */
  export type ConversationMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMember to fetch.
     */
    where: ConversationMemberWhereUniqueInput
  }

  /**
   * ConversationMember findFirst
   */
  export type ConversationMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMember to fetch.
     */
    where?: ConversationMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationMembers to fetch.
     */
    orderBy?: ConversationMemberOrderByWithRelationInput | ConversationMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationMembers.
     */
    cursor?: ConversationMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationMembers.
     */
    distinct?: ConversationMemberScalarFieldEnum | ConversationMemberScalarFieldEnum[]
  }

  /**
   * ConversationMember findFirstOrThrow
   */
  export type ConversationMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMember to fetch.
     */
    where?: ConversationMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationMembers to fetch.
     */
    orderBy?: ConversationMemberOrderByWithRelationInput | ConversationMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationMembers.
     */
    cursor?: ConversationMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationMembers.
     */
    distinct?: ConversationMemberScalarFieldEnum | ConversationMemberScalarFieldEnum[]
  }

  /**
   * ConversationMember findMany
   */
  export type ConversationMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * Filter, which ConversationMembers to fetch.
     */
    where?: ConversationMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationMembers to fetch.
     */
    orderBy?: ConversationMemberOrderByWithRelationInput | ConversationMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConversationMembers.
     */
    cursor?: ConversationMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationMembers.
     */
    skip?: number
    distinct?: ConversationMemberScalarFieldEnum | ConversationMemberScalarFieldEnum[]
  }

  /**
   * ConversationMember create
   */
  export type ConversationMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a ConversationMember.
     */
    data: XOR<ConversationMemberCreateInput, ConversationMemberUncheckedCreateInput>
  }

  /**
   * ConversationMember createMany
   */
  export type ConversationMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConversationMembers.
     */
    data: ConversationMemberCreateManyInput | ConversationMemberCreateManyInput[]
  }

  /**
   * ConversationMember update
   */
  export type ConversationMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a ConversationMember.
     */
    data: XOR<ConversationMemberUpdateInput, ConversationMemberUncheckedUpdateInput>
    /**
     * Choose, which ConversationMember to update.
     */
    where: ConversationMemberWhereUniqueInput
  }

  /**
   * ConversationMember updateMany
   */
  export type ConversationMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConversationMembers.
     */
    data: XOR<ConversationMemberUpdateManyMutationInput, ConversationMemberUncheckedUpdateManyInput>
    /**
     * Filter which ConversationMembers to update
     */
    where?: ConversationMemberWhereInput
  }

  /**
   * ConversationMember upsert
   */
  export type ConversationMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the ConversationMember to update in case it exists.
     */
    where: ConversationMemberWhereUniqueInput
    /**
     * In case the ConversationMember found by the `where` argument doesn't exist, create a new ConversationMember with this data.
     */
    create: XOR<ConversationMemberCreateInput, ConversationMemberUncheckedCreateInput>
    /**
     * In case the ConversationMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationMemberUpdateInput, ConversationMemberUncheckedUpdateInput>
  }

  /**
   * ConversationMember delete
   */
  export type ConversationMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
    /**
     * Filter which ConversationMember to delete.
     */
    where: ConversationMemberWhereUniqueInput
  }

  /**
   * ConversationMember deleteMany
   */
  export type ConversationMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationMembers to delete
     */
    where?: ConversationMemberWhereInput
  }

  /**
   * ConversationMember findRaw
   */
  export type ConversationMemberFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ConversationMember aggregateRaw
   */
  export type ConversationMemberAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ConversationMember without action
   */
  export type ConversationMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationMember
     */
    select?: ConversationMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationMemberInclude<ExtArgs> | null
  }


  /**
   * Model ConversationShareLink
   */

  export type AggregateConversationShareLink = {
    _count: ConversationShareLinkCountAggregateOutputType | null
    _avg: ConversationShareLinkAvgAggregateOutputType | null
    _sum: ConversationShareLinkSumAggregateOutputType | null
    _min: ConversationShareLinkMinAggregateOutputType | null
    _max: ConversationShareLinkMaxAggregateOutputType | null
  }

  export type ConversationShareLinkAvgAggregateOutputType = {
    maxUses: number | null
    currentUses: number | null
    maxConcurrentUsers: number | null
    currentConcurrentUsers: number | null
    maxUniqueSessions: number | null
    currentUniqueSessions: number | null
  }

  export type ConversationShareLinkSumAggregateOutputType = {
    maxUses: number | null
    currentUses: number | null
    maxConcurrentUsers: number | null
    currentConcurrentUsers: number | null
    maxUniqueSessions: number | null
    currentUniqueSessions: number | null
  }

  export type ConversationShareLinkMinAggregateOutputType = {
    id: string | null
    linkId: string | null
    identifier: string | null
    conversationId: string | null
    createdBy: string | null
    name: string | null
    description: string | null
    maxUses: number | null
    currentUses: number | null
    maxConcurrentUsers: number | null
    currentConcurrentUsers: number | null
    maxUniqueSessions: number | null
    currentUniqueSessions: number | null
    expiresAt: Date | null
    isActive: boolean | null
    allowAnonymousMessages: boolean | null
    allowAnonymousFiles: boolean | null
    allowAnonymousImages: boolean | null
    allowViewHistory: boolean | null
    requireNickname: boolean | null
    requireEmail: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationShareLinkMaxAggregateOutputType = {
    id: string | null
    linkId: string | null
    identifier: string | null
    conversationId: string | null
    createdBy: string | null
    name: string | null
    description: string | null
    maxUses: number | null
    currentUses: number | null
    maxConcurrentUsers: number | null
    currentConcurrentUsers: number | null
    maxUniqueSessions: number | null
    currentUniqueSessions: number | null
    expiresAt: Date | null
    isActive: boolean | null
    allowAnonymousMessages: boolean | null
    allowAnonymousFiles: boolean | null
    allowAnonymousImages: boolean | null
    allowViewHistory: boolean | null
    requireNickname: boolean | null
    requireEmail: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationShareLinkCountAggregateOutputType = {
    id: number
    linkId: number
    identifier: number
    conversationId: number
    createdBy: number
    name: number
    description: number
    maxUses: number
    currentUses: number
    maxConcurrentUsers: number
    currentConcurrentUsers: number
    maxUniqueSessions: number
    currentUniqueSessions: number
    expiresAt: number
    isActive: number
    allowAnonymousMessages: number
    allowAnonymousFiles: number
    allowAnonymousImages: number
    allowViewHistory: number
    requireNickname: number
    requireEmail: number
    allowedCountries: number
    allowedLanguages: number
    allowedIpRanges: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConversationShareLinkAvgAggregateInputType = {
    maxUses?: true
    currentUses?: true
    maxConcurrentUsers?: true
    currentConcurrentUsers?: true
    maxUniqueSessions?: true
    currentUniqueSessions?: true
  }

  export type ConversationShareLinkSumAggregateInputType = {
    maxUses?: true
    currentUses?: true
    maxConcurrentUsers?: true
    currentConcurrentUsers?: true
    maxUniqueSessions?: true
    currentUniqueSessions?: true
  }

  export type ConversationShareLinkMinAggregateInputType = {
    id?: true
    linkId?: true
    identifier?: true
    conversationId?: true
    createdBy?: true
    name?: true
    description?: true
    maxUses?: true
    currentUses?: true
    maxConcurrentUsers?: true
    currentConcurrentUsers?: true
    maxUniqueSessions?: true
    currentUniqueSessions?: true
    expiresAt?: true
    isActive?: true
    allowAnonymousMessages?: true
    allowAnonymousFiles?: true
    allowAnonymousImages?: true
    allowViewHistory?: true
    requireNickname?: true
    requireEmail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationShareLinkMaxAggregateInputType = {
    id?: true
    linkId?: true
    identifier?: true
    conversationId?: true
    createdBy?: true
    name?: true
    description?: true
    maxUses?: true
    currentUses?: true
    maxConcurrentUsers?: true
    currentConcurrentUsers?: true
    maxUniqueSessions?: true
    currentUniqueSessions?: true
    expiresAt?: true
    isActive?: true
    allowAnonymousMessages?: true
    allowAnonymousFiles?: true
    allowAnonymousImages?: true
    allowViewHistory?: true
    requireNickname?: true
    requireEmail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationShareLinkCountAggregateInputType = {
    id?: true
    linkId?: true
    identifier?: true
    conversationId?: true
    createdBy?: true
    name?: true
    description?: true
    maxUses?: true
    currentUses?: true
    maxConcurrentUsers?: true
    currentConcurrentUsers?: true
    maxUniqueSessions?: true
    currentUniqueSessions?: true
    expiresAt?: true
    isActive?: true
    allowAnonymousMessages?: true
    allowAnonymousFiles?: true
    allowAnonymousImages?: true
    allowViewHistory?: true
    requireNickname?: true
    requireEmail?: true
    allowedCountries?: true
    allowedLanguages?: true
    allowedIpRanges?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConversationShareLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationShareLink to aggregate.
     */
    where?: ConversationShareLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationShareLinks to fetch.
     */
    orderBy?: ConversationShareLinkOrderByWithRelationInput | ConversationShareLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationShareLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationShareLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationShareLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConversationShareLinks
    **/
    _count?: true | ConversationShareLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConversationShareLinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConversationShareLinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationShareLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationShareLinkMaxAggregateInputType
  }

  export type GetConversationShareLinkAggregateType<T extends ConversationShareLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateConversationShareLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversationShareLink[P]>
      : GetScalarType<T[P], AggregateConversationShareLink[P]>
  }




  export type ConversationShareLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationShareLinkWhereInput
    orderBy?: ConversationShareLinkOrderByWithAggregationInput | ConversationShareLinkOrderByWithAggregationInput[]
    by: ConversationShareLinkScalarFieldEnum[] | ConversationShareLinkScalarFieldEnum
    having?: ConversationShareLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationShareLinkCountAggregateInputType | true
    _avg?: ConversationShareLinkAvgAggregateInputType
    _sum?: ConversationShareLinkSumAggregateInputType
    _min?: ConversationShareLinkMinAggregateInputType
    _max?: ConversationShareLinkMaxAggregateInputType
  }

  export type ConversationShareLinkGroupByOutputType = {
    id: string
    linkId: string
    identifier: string | null
    conversationId: string
    createdBy: string
    name: string | null
    description: string | null
    maxUses: number | null
    currentUses: number
    maxConcurrentUsers: number | null
    currentConcurrentUsers: number
    maxUniqueSessions: number | null
    currentUniqueSessions: number
    expiresAt: Date | null
    isActive: boolean
    allowAnonymousMessages: boolean
    allowAnonymousFiles: boolean
    allowAnonymousImages: boolean
    allowViewHistory: boolean
    requireNickname: boolean
    requireEmail: boolean
    allowedCountries: string[]
    allowedLanguages: string[]
    allowedIpRanges: string[]
    createdAt: Date
    updatedAt: Date
    _count: ConversationShareLinkCountAggregateOutputType | null
    _avg: ConversationShareLinkAvgAggregateOutputType | null
    _sum: ConversationShareLinkSumAggregateOutputType | null
    _min: ConversationShareLinkMinAggregateOutputType | null
    _max: ConversationShareLinkMaxAggregateOutputType | null
  }

  type GetConversationShareLinkGroupByPayload<T extends ConversationShareLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationShareLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationShareLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationShareLinkGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationShareLinkGroupByOutputType[P]>
        }
      >
    >


  export type ConversationShareLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    linkId?: boolean
    identifier?: boolean
    conversationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    maxUses?: boolean
    currentUses?: boolean
    maxConcurrentUsers?: boolean
    currentConcurrentUsers?: boolean
    maxUniqueSessions?: boolean
    currentUniqueSessions?: boolean
    expiresAt?: boolean
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: boolean
    allowedLanguages?: boolean
    allowedIpRanges?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    anonymousParticipants?: boolean | ConversationShareLink$anonymousParticipantsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    _count?: boolean | ConversationShareLinkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversationShareLink"]>


  export type ConversationShareLinkSelectScalar = {
    id?: boolean
    linkId?: boolean
    identifier?: boolean
    conversationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    maxUses?: boolean
    currentUses?: boolean
    maxConcurrentUsers?: boolean
    currentConcurrentUsers?: boolean
    maxUniqueSessions?: boolean
    currentUniqueSessions?: boolean
    expiresAt?: boolean
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: boolean
    allowedLanguages?: boolean
    allowedIpRanges?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConversationShareLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anonymousParticipants?: boolean | ConversationShareLink$anonymousParticipantsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    _count?: boolean | ConversationShareLinkCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ConversationShareLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConversationShareLink"
    objects: {
      anonymousParticipants: Prisma.$AnonymousParticipantPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      linkId: string
      /**
       * Identifiant lisible par l'homme (ex: "meeshy-public", "support-link")
       */
      identifier: string | null
      conversationId: string
      createdBy: string
      name: string | null
      description: string | null
      maxUses: number | null
      currentUses: number
      maxConcurrentUsers: number | null
      currentConcurrentUsers: number
      maxUniqueSessions: number | null
      currentUniqueSessions: number
      expiresAt: Date | null
      isActive: boolean
      allowAnonymousMessages: boolean
      allowAnonymousFiles: boolean
      allowAnonymousImages: boolean
      allowViewHistory: boolean
      requireNickname: boolean
      requireEmail: boolean
      allowedCountries: string[]
      allowedLanguages: string[]
      allowedIpRanges: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["conversationShareLink"]>
    composites: {}
  }

  type ConversationShareLinkGetPayload<S extends boolean | null | undefined | ConversationShareLinkDefaultArgs> = $Result.GetResult<Prisma.$ConversationShareLinkPayload, S>

  type ConversationShareLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationShareLinkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConversationShareLinkCountAggregateInputType | true
    }

  export interface ConversationShareLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConversationShareLink'], meta: { name: 'ConversationShareLink' } }
    /**
     * Find zero or one ConversationShareLink that matches the filter.
     * @param {ConversationShareLinkFindUniqueArgs} args - Arguments to find a ConversationShareLink
     * @example
     * // Get one ConversationShareLink
     * const conversationShareLink = await prisma.conversationShareLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationShareLinkFindUniqueArgs>(args: SelectSubset<T, ConversationShareLinkFindUniqueArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConversationShareLink that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConversationShareLinkFindUniqueOrThrowArgs} args - Arguments to find a ConversationShareLink
     * @example
     * // Get one ConversationShareLink
     * const conversationShareLink = await prisma.conversationShareLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationShareLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationShareLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConversationShareLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationShareLinkFindFirstArgs} args - Arguments to find a ConversationShareLink
     * @example
     * // Get one ConversationShareLink
     * const conversationShareLink = await prisma.conversationShareLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationShareLinkFindFirstArgs>(args?: SelectSubset<T, ConversationShareLinkFindFirstArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConversationShareLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationShareLinkFindFirstOrThrowArgs} args - Arguments to find a ConversationShareLink
     * @example
     * // Get one ConversationShareLink
     * const conversationShareLink = await prisma.conversationShareLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationShareLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationShareLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConversationShareLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationShareLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConversationShareLinks
     * const conversationShareLinks = await prisma.conversationShareLink.findMany()
     * 
     * // Get first 10 ConversationShareLinks
     * const conversationShareLinks = await prisma.conversationShareLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationShareLinkWithIdOnly = await prisma.conversationShareLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationShareLinkFindManyArgs>(args?: SelectSubset<T, ConversationShareLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConversationShareLink.
     * @param {ConversationShareLinkCreateArgs} args - Arguments to create a ConversationShareLink.
     * @example
     * // Create one ConversationShareLink
     * const ConversationShareLink = await prisma.conversationShareLink.create({
     *   data: {
     *     // ... data to create a ConversationShareLink
     *   }
     * })
     * 
     */
    create<T extends ConversationShareLinkCreateArgs>(args: SelectSubset<T, ConversationShareLinkCreateArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConversationShareLinks.
     * @param {ConversationShareLinkCreateManyArgs} args - Arguments to create many ConversationShareLinks.
     * @example
     * // Create many ConversationShareLinks
     * const conversationShareLink = await prisma.conversationShareLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationShareLinkCreateManyArgs>(args?: SelectSubset<T, ConversationShareLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ConversationShareLink.
     * @param {ConversationShareLinkDeleteArgs} args - Arguments to delete one ConversationShareLink.
     * @example
     * // Delete one ConversationShareLink
     * const ConversationShareLink = await prisma.conversationShareLink.delete({
     *   where: {
     *     // ... filter to delete one ConversationShareLink
     *   }
     * })
     * 
     */
    delete<T extends ConversationShareLinkDeleteArgs>(args: SelectSubset<T, ConversationShareLinkDeleteArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConversationShareLink.
     * @param {ConversationShareLinkUpdateArgs} args - Arguments to update one ConversationShareLink.
     * @example
     * // Update one ConversationShareLink
     * const conversationShareLink = await prisma.conversationShareLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationShareLinkUpdateArgs>(args: SelectSubset<T, ConversationShareLinkUpdateArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConversationShareLinks.
     * @param {ConversationShareLinkDeleteManyArgs} args - Arguments to filter ConversationShareLinks to delete.
     * @example
     * // Delete a few ConversationShareLinks
     * const { count } = await prisma.conversationShareLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationShareLinkDeleteManyArgs>(args?: SelectSubset<T, ConversationShareLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConversationShareLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationShareLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConversationShareLinks
     * const conversationShareLink = await prisma.conversationShareLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationShareLinkUpdateManyArgs>(args: SelectSubset<T, ConversationShareLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConversationShareLink.
     * @param {ConversationShareLinkUpsertArgs} args - Arguments to update or create a ConversationShareLink.
     * @example
     * // Update or create a ConversationShareLink
     * const conversationShareLink = await prisma.conversationShareLink.upsert({
     *   create: {
     *     // ... data to create a ConversationShareLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConversationShareLink we want to update
     *   }
     * })
     */
    upsert<T extends ConversationShareLinkUpsertArgs>(args: SelectSubset<T, ConversationShareLinkUpsertArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more ConversationShareLinks that matches the filter.
     * @param {ConversationShareLinkFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const conversationShareLink = await prisma.conversationShareLink.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ConversationShareLinkFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ConversationShareLink.
     * @param {ConversationShareLinkAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const conversationShareLink = await prisma.conversationShareLink.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ConversationShareLinkAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ConversationShareLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationShareLinkCountArgs} args - Arguments to filter ConversationShareLinks to count.
     * @example
     * // Count the number of ConversationShareLinks
     * const count = await prisma.conversationShareLink.count({
     *   where: {
     *     // ... the filter for the ConversationShareLinks we want to count
     *   }
     * })
    **/
    count<T extends ConversationShareLinkCountArgs>(
      args?: Subset<T, ConversationShareLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationShareLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConversationShareLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationShareLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationShareLinkAggregateArgs>(args: Subset<T, ConversationShareLinkAggregateArgs>): Prisma.PrismaPromise<GetConversationShareLinkAggregateType<T>>

    /**
     * Group by ConversationShareLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationShareLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationShareLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationShareLinkGroupByArgs['orderBy'] }
        : { orderBy?: ConversationShareLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationShareLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationShareLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConversationShareLink model
   */
  readonly fields: ConversationShareLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConversationShareLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationShareLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anonymousParticipants<T extends ConversationShareLink$anonymousParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, ConversationShareLink$anonymousParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConversationShareLink model
   */ 
  interface ConversationShareLinkFieldRefs {
    readonly id: FieldRef<"ConversationShareLink", 'String'>
    readonly linkId: FieldRef<"ConversationShareLink", 'String'>
    readonly identifier: FieldRef<"ConversationShareLink", 'String'>
    readonly conversationId: FieldRef<"ConversationShareLink", 'String'>
    readonly createdBy: FieldRef<"ConversationShareLink", 'String'>
    readonly name: FieldRef<"ConversationShareLink", 'String'>
    readonly description: FieldRef<"ConversationShareLink", 'String'>
    readonly maxUses: FieldRef<"ConversationShareLink", 'Int'>
    readonly currentUses: FieldRef<"ConversationShareLink", 'Int'>
    readonly maxConcurrentUsers: FieldRef<"ConversationShareLink", 'Int'>
    readonly currentConcurrentUsers: FieldRef<"ConversationShareLink", 'Int'>
    readonly maxUniqueSessions: FieldRef<"ConversationShareLink", 'Int'>
    readonly currentUniqueSessions: FieldRef<"ConversationShareLink", 'Int'>
    readonly expiresAt: FieldRef<"ConversationShareLink", 'DateTime'>
    readonly isActive: FieldRef<"ConversationShareLink", 'Boolean'>
    readonly allowAnonymousMessages: FieldRef<"ConversationShareLink", 'Boolean'>
    readonly allowAnonymousFiles: FieldRef<"ConversationShareLink", 'Boolean'>
    readonly allowAnonymousImages: FieldRef<"ConversationShareLink", 'Boolean'>
    readonly allowViewHistory: FieldRef<"ConversationShareLink", 'Boolean'>
    readonly requireNickname: FieldRef<"ConversationShareLink", 'Boolean'>
    readonly requireEmail: FieldRef<"ConversationShareLink", 'Boolean'>
    readonly allowedCountries: FieldRef<"ConversationShareLink", 'String[]'>
    readonly allowedLanguages: FieldRef<"ConversationShareLink", 'String[]'>
    readonly allowedIpRanges: FieldRef<"ConversationShareLink", 'String[]'>
    readonly createdAt: FieldRef<"ConversationShareLink", 'DateTime'>
    readonly updatedAt: FieldRef<"ConversationShareLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConversationShareLink findUnique
   */
  export type ConversationShareLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * Filter, which ConversationShareLink to fetch.
     */
    where: ConversationShareLinkWhereUniqueInput
  }

  /**
   * ConversationShareLink findUniqueOrThrow
   */
  export type ConversationShareLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * Filter, which ConversationShareLink to fetch.
     */
    where: ConversationShareLinkWhereUniqueInput
  }

  /**
   * ConversationShareLink findFirst
   */
  export type ConversationShareLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * Filter, which ConversationShareLink to fetch.
     */
    where?: ConversationShareLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationShareLinks to fetch.
     */
    orderBy?: ConversationShareLinkOrderByWithRelationInput | ConversationShareLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationShareLinks.
     */
    cursor?: ConversationShareLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationShareLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationShareLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationShareLinks.
     */
    distinct?: ConversationShareLinkScalarFieldEnum | ConversationShareLinkScalarFieldEnum[]
  }

  /**
   * ConversationShareLink findFirstOrThrow
   */
  export type ConversationShareLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * Filter, which ConversationShareLink to fetch.
     */
    where?: ConversationShareLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationShareLinks to fetch.
     */
    orderBy?: ConversationShareLinkOrderByWithRelationInput | ConversationShareLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationShareLinks.
     */
    cursor?: ConversationShareLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationShareLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationShareLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationShareLinks.
     */
    distinct?: ConversationShareLinkScalarFieldEnum | ConversationShareLinkScalarFieldEnum[]
  }

  /**
   * ConversationShareLink findMany
   */
  export type ConversationShareLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * Filter, which ConversationShareLinks to fetch.
     */
    where?: ConversationShareLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationShareLinks to fetch.
     */
    orderBy?: ConversationShareLinkOrderByWithRelationInput | ConversationShareLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConversationShareLinks.
     */
    cursor?: ConversationShareLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationShareLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationShareLinks.
     */
    skip?: number
    distinct?: ConversationShareLinkScalarFieldEnum | ConversationShareLinkScalarFieldEnum[]
  }

  /**
   * ConversationShareLink create
   */
  export type ConversationShareLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a ConversationShareLink.
     */
    data: XOR<ConversationShareLinkCreateInput, ConversationShareLinkUncheckedCreateInput>
  }

  /**
   * ConversationShareLink createMany
   */
  export type ConversationShareLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConversationShareLinks.
     */
    data: ConversationShareLinkCreateManyInput | ConversationShareLinkCreateManyInput[]
  }

  /**
   * ConversationShareLink update
   */
  export type ConversationShareLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a ConversationShareLink.
     */
    data: XOR<ConversationShareLinkUpdateInput, ConversationShareLinkUncheckedUpdateInput>
    /**
     * Choose, which ConversationShareLink to update.
     */
    where: ConversationShareLinkWhereUniqueInput
  }

  /**
   * ConversationShareLink updateMany
   */
  export type ConversationShareLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConversationShareLinks.
     */
    data: XOR<ConversationShareLinkUpdateManyMutationInput, ConversationShareLinkUncheckedUpdateManyInput>
    /**
     * Filter which ConversationShareLinks to update
     */
    where?: ConversationShareLinkWhereInput
  }

  /**
   * ConversationShareLink upsert
   */
  export type ConversationShareLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the ConversationShareLink to update in case it exists.
     */
    where: ConversationShareLinkWhereUniqueInput
    /**
     * In case the ConversationShareLink found by the `where` argument doesn't exist, create a new ConversationShareLink with this data.
     */
    create: XOR<ConversationShareLinkCreateInput, ConversationShareLinkUncheckedCreateInput>
    /**
     * In case the ConversationShareLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationShareLinkUpdateInput, ConversationShareLinkUncheckedUpdateInput>
  }

  /**
   * ConversationShareLink delete
   */
  export type ConversationShareLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
    /**
     * Filter which ConversationShareLink to delete.
     */
    where: ConversationShareLinkWhereUniqueInput
  }

  /**
   * ConversationShareLink deleteMany
   */
  export type ConversationShareLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationShareLinks to delete
     */
    where?: ConversationShareLinkWhereInput
  }

  /**
   * ConversationShareLink findRaw
   */
  export type ConversationShareLinkFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ConversationShareLink aggregateRaw
   */
  export type ConversationShareLinkAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ConversationShareLink.anonymousParticipants
   */
  export type ConversationShareLink$anonymousParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    where?: AnonymousParticipantWhereInput
    orderBy?: AnonymousParticipantOrderByWithRelationInput | AnonymousParticipantOrderByWithRelationInput[]
    cursor?: AnonymousParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnonymousParticipantScalarFieldEnum | AnonymousParticipantScalarFieldEnum[]
  }

  /**
   * ConversationShareLink without action
   */
  export type ConversationShareLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationShareLink
     */
    select?: ConversationShareLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationShareLinkInclude<ExtArgs> | null
  }


  /**
   * Model AnonymousParticipant
   */

  export type AggregateAnonymousParticipant = {
    _count: AnonymousParticipantCountAggregateOutputType | null
    _min: AnonymousParticipantMinAggregateOutputType | null
    _max: AnonymousParticipantMaxAggregateOutputType | null
  }

  export type AnonymousParticipantMinAggregateOutputType = {
    id: string | null
    conversationId: string | null
    shareLinkId: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    sessionToken: string | null
    ipAddress: string | null
    country: string | null
    language: string | null
    deviceFingerprint: string | null
    isActive: boolean | null
    isOnline: boolean | null
    lastActiveAt: Date | null
    canSendMessages: boolean | null
    canSendFiles: boolean | null
    canSendImages: boolean | null
    joinedAt: Date | null
    lastSeenAt: Date | null
    leftAt: Date | null
  }

  export type AnonymousParticipantMaxAggregateOutputType = {
    id: string | null
    conversationId: string | null
    shareLinkId: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    sessionToken: string | null
    ipAddress: string | null
    country: string | null
    language: string | null
    deviceFingerprint: string | null
    isActive: boolean | null
    isOnline: boolean | null
    lastActiveAt: Date | null
    canSendMessages: boolean | null
    canSendFiles: boolean | null
    canSendImages: boolean | null
    joinedAt: Date | null
    lastSeenAt: Date | null
    leftAt: Date | null
  }

  export type AnonymousParticipantCountAggregateOutputType = {
    id: number
    conversationId: number
    shareLinkId: number
    firstName: number
    lastName: number
    username: number
    email: number
    sessionToken: number
    ipAddress: number
    country: number
    language: number
    deviceFingerprint: number
    isActive: number
    isOnline: number
    lastActiveAt: number
    canSendMessages: number
    canSendFiles: number
    canSendImages: number
    joinedAt: number
    lastSeenAt: number
    leftAt: number
    _all: number
  }


  export type AnonymousParticipantMinAggregateInputType = {
    id?: true
    conversationId?: true
    shareLinkId?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    sessionToken?: true
    ipAddress?: true
    country?: true
    language?: true
    deviceFingerprint?: true
    isActive?: true
    isOnline?: true
    lastActiveAt?: true
    canSendMessages?: true
    canSendFiles?: true
    canSendImages?: true
    joinedAt?: true
    lastSeenAt?: true
    leftAt?: true
  }

  export type AnonymousParticipantMaxAggregateInputType = {
    id?: true
    conversationId?: true
    shareLinkId?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    sessionToken?: true
    ipAddress?: true
    country?: true
    language?: true
    deviceFingerprint?: true
    isActive?: true
    isOnline?: true
    lastActiveAt?: true
    canSendMessages?: true
    canSendFiles?: true
    canSendImages?: true
    joinedAt?: true
    lastSeenAt?: true
    leftAt?: true
  }

  export type AnonymousParticipantCountAggregateInputType = {
    id?: true
    conversationId?: true
    shareLinkId?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    sessionToken?: true
    ipAddress?: true
    country?: true
    language?: true
    deviceFingerprint?: true
    isActive?: true
    isOnline?: true
    lastActiveAt?: true
    canSendMessages?: true
    canSendFiles?: true
    canSendImages?: true
    joinedAt?: true
    lastSeenAt?: true
    leftAt?: true
    _all?: true
  }

  export type AnonymousParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnonymousParticipant to aggregate.
     */
    where?: AnonymousParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymousParticipants to fetch.
     */
    orderBy?: AnonymousParticipantOrderByWithRelationInput | AnonymousParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnonymousParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymousParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymousParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnonymousParticipants
    **/
    _count?: true | AnonymousParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnonymousParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnonymousParticipantMaxAggregateInputType
  }

  export type GetAnonymousParticipantAggregateType<T extends AnonymousParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateAnonymousParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnonymousParticipant[P]>
      : GetScalarType<T[P], AggregateAnonymousParticipant[P]>
  }




  export type AnonymousParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnonymousParticipantWhereInput
    orderBy?: AnonymousParticipantOrderByWithAggregationInput | AnonymousParticipantOrderByWithAggregationInput[]
    by: AnonymousParticipantScalarFieldEnum[] | AnonymousParticipantScalarFieldEnum
    having?: AnonymousParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnonymousParticipantCountAggregateInputType | true
    _min?: AnonymousParticipantMinAggregateInputType
    _max?: AnonymousParticipantMaxAggregateInputType
  }

  export type AnonymousParticipantGroupByOutputType = {
    id: string
    conversationId: string
    shareLinkId: string
    firstName: string
    lastName: string
    username: string
    email: string | null
    sessionToken: string
    ipAddress: string | null
    country: string | null
    language: string
    deviceFingerprint: string | null
    isActive: boolean
    isOnline: boolean
    lastActiveAt: Date
    canSendMessages: boolean
    canSendFiles: boolean
    canSendImages: boolean
    joinedAt: Date
    lastSeenAt: Date
    leftAt: Date | null
    _count: AnonymousParticipantCountAggregateOutputType | null
    _min: AnonymousParticipantMinAggregateOutputType | null
    _max: AnonymousParticipantMaxAggregateOutputType | null
  }

  type GetAnonymousParticipantGroupByPayload<T extends AnonymousParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnonymousParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnonymousParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnonymousParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], AnonymousParticipantGroupByOutputType[P]>
        }
      >
    >


  export type AnonymousParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    shareLinkId?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    sessionToken?: boolean
    ipAddress?: boolean
    country?: boolean
    language?: boolean
    deviceFingerprint?: boolean
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: boolean
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: boolean
    lastSeenAt?: boolean
    leftAt?: boolean
    shareLink?: boolean | ConversationShareLinkDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sentMessages?: boolean | AnonymousParticipant$sentMessagesArgs<ExtArgs>
    _count?: boolean | AnonymousParticipantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anonymousParticipant"]>


  export type AnonymousParticipantSelectScalar = {
    id?: boolean
    conversationId?: boolean
    shareLinkId?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    sessionToken?: boolean
    ipAddress?: boolean
    country?: boolean
    language?: boolean
    deviceFingerprint?: boolean
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: boolean
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: boolean
    lastSeenAt?: boolean
    leftAt?: boolean
  }

  export type AnonymousParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareLink?: boolean | ConversationShareLinkDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sentMessages?: boolean | AnonymousParticipant$sentMessagesArgs<ExtArgs>
    _count?: boolean | AnonymousParticipantCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AnonymousParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnonymousParticipant"
    objects: {
      shareLink: Prisma.$ConversationShareLinkPayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs>
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conversationId: string
      shareLinkId: string
      firstName: string
      lastName: string
      username: string
      email: string | null
      sessionToken: string
      ipAddress: string | null
      country: string | null
      language: string
      deviceFingerprint: string | null
      isActive: boolean
      isOnline: boolean
      lastActiveAt: Date
      canSendMessages: boolean
      canSendFiles: boolean
      canSendImages: boolean
      joinedAt: Date
      lastSeenAt: Date
      leftAt: Date | null
    }, ExtArgs["result"]["anonymousParticipant"]>
    composites: {}
  }

  type AnonymousParticipantGetPayload<S extends boolean | null | undefined | AnonymousParticipantDefaultArgs> = $Result.GetResult<Prisma.$AnonymousParticipantPayload, S>

  type AnonymousParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AnonymousParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnonymousParticipantCountAggregateInputType | true
    }

  export interface AnonymousParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnonymousParticipant'], meta: { name: 'AnonymousParticipant' } }
    /**
     * Find zero or one AnonymousParticipant that matches the filter.
     * @param {AnonymousParticipantFindUniqueArgs} args - Arguments to find a AnonymousParticipant
     * @example
     * // Get one AnonymousParticipant
     * const anonymousParticipant = await prisma.anonymousParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnonymousParticipantFindUniqueArgs>(args: SelectSubset<T, AnonymousParticipantFindUniqueArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AnonymousParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AnonymousParticipantFindUniqueOrThrowArgs} args - Arguments to find a AnonymousParticipant
     * @example
     * // Get one AnonymousParticipant
     * const anonymousParticipant = await prisma.anonymousParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnonymousParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, AnonymousParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AnonymousParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousParticipantFindFirstArgs} args - Arguments to find a AnonymousParticipant
     * @example
     * // Get one AnonymousParticipant
     * const anonymousParticipant = await prisma.anonymousParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnonymousParticipantFindFirstArgs>(args?: SelectSubset<T, AnonymousParticipantFindFirstArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AnonymousParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousParticipantFindFirstOrThrowArgs} args - Arguments to find a AnonymousParticipant
     * @example
     * // Get one AnonymousParticipant
     * const anonymousParticipant = await prisma.anonymousParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnonymousParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, AnonymousParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AnonymousParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnonymousParticipants
     * const anonymousParticipants = await prisma.anonymousParticipant.findMany()
     * 
     * // Get first 10 AnonymousParticipants
     * const anonymousParticipants = await prisma.anonymousParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anonymousParticipantWithIdOnly = await prisma.anonymousParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnonymousParticipantFindManyArgs>(args?: SelectSubset<T, AnonymousParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AnonymousParticipant.
     * @param {AnonymousParticipantCreateArgs} args - Arguments to create a AnonymousParticipant.
     * @example
     * // Create one AnonymousParticipant
     * const AnonymousParticipant = await prisma.anonymousParticipant.create({
     *   data: {
     *     // ... data to create a AnonymousParticipant
     *   }
     * })
     * 
     */
    create<T extends AnonymousParticipantCreateArgs>(args: SelectSubset<T, AnonymousParticipantCreateArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AnonymousParticipants.
     * @param {AnonymousParticipantCreateManyArgs} args - Arguments to create many AnonymousParticipants.
     * @example
     * // Create many AnonymousParticipants
     * const anonymousParticipant = await prisma.anonymousParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnonymousParticipantCreateManyArgs>(args?: SelectSubset<T, AnonymousParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AnonymousParticipant.
     * @param {AnonymousParticipantDeleteArgs} args - Arguments to delete one AnonymousParticipant.
     * @example
     * // Delete one AnonymousParticipant
     * const AnonymousParticipant = await prisma.anonymousParticipant.delete({
     *   where: {
     *     // ... filter to delete one AnonymousParticipant
     *   }
     * })
     * 
     */
    delete<T extends AnonymousParticipantDeleteArgs>(args: SelectSubset<T, AnonymousParticipantDeleteArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AnonymousParticipant.
     * @param {AnonymousParticipantUpdateArgs} args - Arguments to update one AnonymousParticipant.
     * @example
     * // Update one AnonymousParticipant
     * const anonymousParticipant = await prisma.anonymousParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnonymousParticipantUpdateArgs>(args: SelectSubset<T, AnonymousParticipantUpdateArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AnonymousParticipants.
     * @param {AnonymousParticipantDeleteManyArgs} args - Arguments to filter AnonymousParticipants to delete.
     * @example
     * // Delete a few AnonymousParticipants
     * const { count } = await prisma.anonymousParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnonymousParticipantDeleteManyArgs>(args?: SelectSubset<T, AnonymousParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnonymousParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnonymousParticipants
     * const anonymousParticipant = await prisma.anonymousParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnonymousParticipantUpdateManyArgs>(args: SelectSubset<T, AnonymousParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AnonymousParticipant.
     * @param {AnonymousParticipantUpsertArgs} args - Arguments to update or create a AnonymousParticipant.
     * @example
     * // Update or create a AnonymousParticipant
     * const anonymousParticipant = await prisma.anonymousParticipant.upsert({
     *   create: {
     *     // ... data to create a AnonymousParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnonymousParticipant we want to update
     *   }
     * })
     */
    upsert<T extends AnonymousParticipantUpsertArgs>(args: SelectSubset<T, AnonymousParticipantUpsertArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more AnonymousParticipants that matches the filter.
     * @param {AnonymousParticipantFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const anonymousParticipant = await prisma.anonymousParticipant.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: AnonymousParticipantFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a AnonymousParticipant.
     * @param {AnonymousParticipantAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const anonymousParticipant = await prisma.anonymousParticipant.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AnonymousParticipantAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of AnonymousParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousParticipantCountArgs} args - Arguments to filter AnonymousParticipants to count.
     * @example
     * // Count the number of AnonymousParticipants
     * const count = await prisma.anonymousParticipant.count({
     *   where: {
     *     // ... the filter for the AnonymousParticipants we want to count
     *   }
     * })
    **/
    count<T extends AnonymousParticipantCountArgs>(
      args?: Subset<T, AnonymousParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnonymousParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnonymousParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnonymousParticipantAggregateArgs>(args: Subset<T, AnonymousParticipantAggregateArgs>): Prisma.PrismaPromise<GetAnonymousParticipantAggregateType<T>>

    /**
     * Group by AnonymousParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnonymousParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnonymousParticipantGroupByArgs['orderBy'] }
        : { orderBy?: AnonymousParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnonymousParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnonymousParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnonymousParticipant model
   */
  readonly fields: AnonymousParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnonymousParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnonymousParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shareLink<T extends ConversationShareLinkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationShareLinkDefaultArgs<ExtArgs>>): Prisma__ConversationShareLinkClient<$Result.GetResult<Prisma.$ConversationShareLinkPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sentMessages<T extends AnonymousParticipant$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, AnonymousParticipant$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnonymousParticipant model
   */ 
  interface AnonymousParticipantFieldRefs {
    readonly id: FieldRef<"AnonymousParticipant", 'String'>
    readonly conversationId: FieldRef<"AnonymousParticipant", 'String'>
    readonly shareLinkId: FieldRef<"AnonymousParticipant", 'String'>
    readonly firstName: FieldRef<"AnonymousParticipant", 'String'>
    readonly lastName: FieldRef<"AnonymousParticipant", 'String'>
    readonly username: FieldRef<"AnonymousParticipant", 'String'>
    readonly email: FieldRef<"AnonymousParticipant", 'String'>
    readonly sessionToken: FieldRef<"AnonymousParticipant", 'String'>
    readonly ipAddress: FieldRef<"AnonymousParticipant", 'String'>
    readonly country: FieldRef<"AnonymousParticipant", 'String'>
    readonly language: FieldRef<"AnonymousParticipant", 'String'>
    readonly deviceFingerprint: FieldRef<"AnonymousParticipant", 'String'>
    readonly isActive: FieldRef<"AnonymousParticipant", 'Boolean'>
    readonly isOnline: FieldRef<"AnonymousParticipant", 'Boolean'>
    readonly lastActiveAt: FieldRef<"AnonymousParticipant", 'DateTime'>
    readonly canSendMessages: FieldRef<"AnonymousParticipant", 'Boolean'>
    readonly canSendFiles: FieldRef<"AnonymousParticipant", 'Boolean'>
    readonly canSendImages: FieldRef<"AnonymousParticipant", 'Boolean'>
    readonly joinedAt: FieldRef<"AnonymousParticipant", 'DateTime'>
    readonly lastSeenAt: FieldRef<"AnonymousParticipant", 'DateTime'>
    readonly leftAt: FieldRef<"AnonymousParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnonymousParticipant findUnique
   */
  export type AnonymousParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * Filter, which AnonymousParticipant to fetch.
     */
    where: AnonymousParticipantWhereUniqueInput
  }

  /**
   * AnonymousParticipant findUniqueOrThrow
   */
  export type AnonymousParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * Filter, which AnonymousParticipant to fetch.
     */
    where: AnonymousParticipantWhereUniqueInput
  }

  /**
   * AnonymousParticipant findFirst
   */
  export type AnonymousParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * Filter, which AnonymousParticipant to fetch.
     */
    where?: AnonymousParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymousParticipants to fetch.
     */
    orderBy?: AnonymousParticipantOrderByWithRelationInput | AnonymousParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnonymousParticipants.
     */
    cursor?: AnonymousParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymousParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymousParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnonymousParticipants.
     */
    distinct?: AnonymousParticipantScalarFieldEnum | AnonymousParticipantScalarFieldEnum[]
  }

  /**
   * AnonymousParticipant findFirstOrThrow
   */
  export type AnonymousParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * Filter, which AnonymousParticipant to fetch.
     */
    where?: AnonymousParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymousParticipants to fetch.
     */
    orderBy?: AnonymousParticipantOrderByWithRelationInput | AnonymousParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnonymousParticipants.
     */
    cursor?: AnonymousParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymousParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymousParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnonymousParticipants.
     */
    distinct?: AnonymousParticipantScalarFieldEnum | AnonymousParticipantScalarFieldEnum[]
  }

  /**
   * AnonymousParticipant findMany
   */
  export type AnonymousParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * Filter, which AnonymousParticipants to fetch.
     */
    where?: AnonymousParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymousParticipants to fetch.
     */
    orderBy?: AnonymousParticipantOrderByWithRelationInput | AnonymousParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnonymousParticipants.
     */
    cursor?: AnonymousParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymousParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymousParticipants.
     */
    skip?: number
    distinct?: AnonymousParticipantScalarFieldEnum | AnonymousParticipantScalarFieldEnum[]
  }

  /**
   * AnonymousParticipant create
   */
  export type AnonymousParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a AnonymousParticipant.
     */
    data: XOR<AnonymousParticipantCreateInput, AnonymousParticipantUncheckedCreateInput>
  }

  /**
   * AnonymousParticipant createMany
   */
  export type AnonymousParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnonymousParticipants.
     */
    data: AnonymousParticipantCreateManyInput | AnonymousParticipantCreateManyInput[]
  }

  /**
   * AnonymousParticipant update
   */
  export type AnonymousParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a AnonymousParticipant.
     */
    data: XOR<AnonymousParticipantUpdateInput, AnonymousParticipantUncheckedUpdateInput>
    /**
     * Choose, which AnonymousParticipant to update.
     */
    where: AnonymousParticipantWhereUniqueInput
  }

  /**
   * AnonymousParticipant updateMany
   */
  export type AnonymousParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnonymousParticipants.
     */
    data: XOR<AnonymousParticipantUpdateManyMutationInput, AnonymousParticipantUncheckedUpdateManyInput>
    /**
     * Filter which AnonymousParticipants to update
     */
    where?: AnonymousParticipantWhereInput
  }

  /**
   * AnonymousParticipant upsert
   */
  export type AnonymousParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the AnonymousParticipant to update in case it exists.
     */
    where: AnonymousParticipantWhereUniqueInput
    /**
     * In case the AnonymousParticipant found by the `where` argument doesn't exist, create a new AnonymousParticipant with this data.
     */
    create: XOR<AnonymousParticipantCreateInput, AnonymousParticipantUncheckedCreateInput>
    /**
     * In case the AnonymousParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnonymousParticipantUpdateInput, AnonymousParticipantUncheckedUpdateInput>
  }

  /**
   * AnonymousParticipant delete
   */
  export type AnonymousParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    /**
     * Filter which AnonymousParticipant to delete.
     */
    where: AnonymousParticipantWhereUniqueInput
  }

  /**
   * AnonymousParticipant deleteMany
   */
  export type AnonymousParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnonymousParticipants to delete
     */
    where?: AnonymousParticipantWhereInput
  }

  /**
   * AnonymousParticipant findRaw
   */
  export type AnonymousParticipantFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * AnonymousParticipant aggregateRaw
   */
  export type AnonymousParticipantAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * AnonymousParticipant.sentMessages
   */
  export type AnonymousParticipant$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * AnonymousParticipant without action
   */
  export type AnonymousParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    conversationId: string | null
    senderId: string | null
    anonymousSenderId: string | null
    content: string | null
    originalLanguage: string | null
    messageType: string | null
    isEdited: boolean | null
    editedAt: Date | null
    isDeleted: boolean | null
    deletedAt: Date | null
    replyToId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    conversationId: string | null
    senderId: string | null
    anonymousSenderId: string | null
    content: string | null
    originalLanguage: string | null
    messageType: string | null
    isEdited: boolean | null
    editedAt: Date | null
    isDeleted: boolean | null
    deletedAt: Date | null
    replyToId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    conversationId: number
    senderId: number
    anonymousSenderId: number
    content: number
    originalLanguage: number
    messageType: number
    isEdited: number
    editedAt: number
    isDeleted: number
    deletedAt: number
    replyToId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    conversationId?: true
    senderId?: true
    anonymousSenderId?: true
    content?: true
    originalLanguage?: true
    messageType?: true
    isEdited?: true
    editedAt?: true
    isDeleted?: true
    deletedAt?: true
    replyToId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    conversationId?: true
    senderId?: true
    anonymousSenderId?: true
    content?: true
    originalLanguage?: true
    messageType?: true
    isEdited?: true
    editedAt?: true
    isDeleted?: true
    deletedAt?: true
    replyToId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    conversationId?: true
    senderId?: true
    anonymousSenderId?: true
    content?: true
    originalLanguage?: true
    messageType?: true
    isEdited?: true
    editedAt?: true
    isDeleted?: true
    deletedAt?: true
    replyToId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    conversationId: string
    senderId: string | null
    anonymousSenderId: string | null
    content: string
    originalLanguage: string
    messageType: string
    isEdited: boolean
    editedAt: Date | null
    isDeleted: boolean
    deletedAt: Date | null
    replyToId: string | null
    createdAt: Date
    updatedAt: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    senderId?: boolean
    anonymousSenderId?: boolean
    content?: boolean
    originalLanguage?: boolean
    messageType?: boolean
    isEdited?: boolean
    editedAt?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    replyToId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    readStatus?: boolean | Message$readStatusArgs<ExtArgs>
    translations?: boolean | Message$translationsArgs<ExtArgs>
    replyTo?: boolean | Message$replyToArgs<ExtArgs>
    replies?: boolean | Message$repliesArgs<ExtArgs>
    anonymousSender?: boolean | Message$anonymousSenderArgs<ExtArgs>
    sender?: boolean | Message$senderArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>


  export type MessageSelectScalar = {
    id?: boolean
    conversationId?: boolean
    senderId?: boolean
    anonymousSenderId?: boolean
    content?: boolean
    originalLanguage?: boolean
    messageType?: boolean
    isEdited?: boolean
    editedAt?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    replyToId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readStatus?: boolean | Message$readStatusArgs<ExtArgs>
    translations?: boolean | Message$translationsArgs<ExtArgs>
    replyTo?: boolean | Message$replyToArgs<ExtArgs>
    replies?: boolean | Message$repliesArgs<ExtArgs>
    anonymousSender?: boolean | Message$anonymousSenderArgs<ExtArgs>
    sender?: boolean | Message$senderArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      readStatus: Prisma.$MessageReadStatusPayload<ExtArgs>[]
      translations: Prisma.$MessageTranslationPayload<ExtArgs>[]
      replyTo: Prisma.$MessagePayload<ExtArgs> | null
      replies: Prisma.$MessagePayload<ExtArgs>[]
      anonymousSender: Prisma.$AnonymousParticipantPayload<ExtArgs> | null
      sender: Prisma.$UserPayload<ExtArgs> | null
      conversation: Prisma.$ConversationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conversationId: string
      senderId: string | null
      anonymousSenderId: string | null
      content: string
      originalLanguage: string
      /**
       * text, image, file, audio, video, location, system
       */
      messageType: string
      isEdited: boolean
      editedAt: Date | null
      isDeleted: boolean
      deletedAt: Date | null
      replyToId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * @param {MessageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const message = await prisma.message.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: MessageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Message.
     * @param {MessageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const message = await prisma.message.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: MessageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    readStatus<T extends Message$readStatusArgs<ExtArgs> = {}>(args?: Subset<T, Message$readStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "findMany"> | Null>
    translations<T extends Message$translationsArgs<ExtArgs> = {}>(args?: Subset<T, Message$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "findMany"> | Null>
    replyTo<T extends Message$replyToArgs<ExtArgs> = {}>(args?: Subset<T, Message$replyToArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    replies<T extends Message$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Message$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    anonymousSender<T extends Message$anonymousSenderArgs<ExtArgs> = {}>(args?: Subset<T, Message$anonymousSenderArgs<ExtArgs>>): Prisma__AnonymousParticipantClient<$Result.GetResult<Prisma.$AnonymousParticipantPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sender<T extends Message$senderArgs<ExtArgs> = {}>(args?: Subset<T, Message$senderArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly conversationId: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly anonymousSenderId: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly originalLanguage: FieldRef<"Message", 'String'>
    readonly messageType: FieldRef<"Message", 'String'>
    readonly isEdited: FieldRef<"Message", 'Boolean'>
    readonly editedAt: FieldRef<"Message", 'DateTime'>
    readonly isDeleted: FieldRef<"Message", 'Boolean'>
    readonly deletedAt: FieldRef<"Message", 'DateTime'>
    readonly replyToId: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly updatedAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message findRaw
   */
  export type MessageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Message aggregateRaw
   */
  export type MessageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Message.readStatus
   */
  export type Message$readStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    where?: MessageReadStatusWhereInput
    orderBy?: MessageReadStatusOrderByWithRelationInput | MessageReadStatusOrderByWithRelationInput[]
    cursor?: MessageReadStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageReadStatusScalarFieldEnum | MessageReadStatusScalarFieldEnum[]
  }

  /**
   * Message.translations
   */
  export type Message$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    where?: MessageTranslationWhereInput
    orderBy?: MessageTranslationOrderByWithRelationInput | MessageTranslationOrderByWithRelationInput[]
    cursor?: MessageTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageTranslationScalarFieldEnum | MessageTranslationScalarFieldEnum[]
  }

  /**
   * Message.replyTo
   */
  export type Message$replyToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
  }

  /**
   * Message.replies
   */
  export type Message$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message.anonymousSender
   */
  export type Message$anonymousSenderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymousParticipant
     */
    select?: AnonymousParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnonymousParticipantInclude<ExtArgs> | null
    where?: AnonymousParticipantWhereInput
  }

  /**
   * Message.sender
   */
  export type Message$senderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model MessageTranslation
   */

  export type AggregateMessageTranslation = {
    _count: MessageTranslationCountAggregateOutputType | null
    _avg: MessageTranslationAvgAggregateOutputType | null
    _sum: MessageTranslationSumAggregateOutputType | null
    _min: MessageTranslationMinAggregateOutputType | null
    _max: MessageTranslationMaxAggregateOutputType | null
  }

  export type MessageTranslationAvgAggregateOutputType = {
    confidenceScore: number | null
  }

  export type MessageTranslationSumAggregateOutputType = {
    confidenceScore: number | null
  }

  export type MessageTranslationMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    sourceLanguage: string | null
    targetLanguage: string | null
    translatedContent: string | null
    translationModel: string | null
    cacheKey: string | null
    confidenceScore: number | null
    createdAt: Date | null
  }

  export type MessageTranslationMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    sourceLanguage: string | null
    targetLanguage: string | null
    translatedContent: string | null
    translationModel: string | null
    cacheKey: string | null
    confidenceScore: number | null
    createdAt: Date | null
  }

  export type MessageTranslationCountAggregateOutputType = {
    id: number
    messageId: number
    sourceLanguage: number
    targetLanguage: number
    translatedContent: number
    translationModel: number
    cacheKey: number
    confidenceScore: number
    createdAt: number
    _all: number
  }


  export type MessageTranslationAvgAggregateInputType = {
    confidenceScore?: true
  }

  export type MessageTranslationSumAggregateInputType = {
    confidenceScore?: true
  }

  export type MessageTranslationMinAggregateInputType = {
    id?: true
    messageId?: true
    sourceLanguage?: true
    targetLanguage?: true
    translatedContent?: true
    translationModel?: true
    cacheKey?: true
    confidenceScore?: true
    createdAt?: true
  }

  export type MessageTranslationMaxAggregateInputType = {
    id?: true
    messageId?: true
    sourceLanguage?: true
    targetLanguage?: true
    translatedContent?: true
    translationModel?: true
    cacheKey?: true
    confidenceScore?: true
    createdAt?: true
  }

  export type MessageTranslationCountAggregateInputType = {
    id?: true
    messageId?: true
    sourceLanguage?: true
    targetLanguage?: true
    translatedContent?: true
    translationModel?: true
    cacheKey?: true
    confidenceScore?: true
    createdAt?: true
    _all?: true
  }

  export type MessageTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageTranslation to aggregate.
     */
    where?: MessageTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageTranslations to fetch.
     */
    orderBy?: MessageTranslationOrderByWithRelationInput | MessageTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageTranslations
    **/
    _count?: true | MessageTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageTranslationMaxAggregateInputType
  }

  export type GetMessageTranslationAggregateType<T extends MessageTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageTranslation[P]>
      : GetScalarType<T[P], AggregateMessageTranslation[P]>
  }




  export type MessageTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageTranslationWhereInput
    orderBy?: MessageTranslationOrderByWithAggregationInput | MessageTranslationOrderByWithAggregationInput[]
    by: MessageTranslationScalarFieldEnum[] | MessageTranslationScalarFieldEnum
    having?: MessageTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageTranslationCountAggregateInputType | true
    _avg?: MessageTranslationAvgAggregateInputType
    _sum?: MessageTranslationSumAggregateInputType
    _min?: MessageTranslationMinAggregateInputType
    _max?: MessageTranslationMaxAggregateInputType
  }

  export type MessageTranslationGroupByOutputType = {
    id: string
    messageId: string
    sourceLanguage: string
    targetLanguage: string
    translatedContent: string
    translationModel: string
    cacheKey: string
    confidenceScore: number | null
    createdAt: Date
    _count: MessageTranslationCountAggregateOutputType | null
    _avg: MessageTranslationAvgAggregateOutputType | null
    _sum: MessageTranslationSumAggregateOutputType | null
    _min: MessageTranslationMinAggregateOutputType | null
    _max: MessageTranslationMaxAggregateOutputType | null
  }

  type GetMessageTranslationGroupByPayload<T extends MessageTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], MessageTranslationGroupByOutputType[P]>
        }
      >
    >


  export type MessageTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    sourceLanguage?: boolean
    targetLanguage?: boolean
    translatedContent?: boolean
    translationModel?: boolean
    cacheKey?: boolean
    confidenceScore?: boolean
    createdAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageTranslation"]>


  export type MessageTranslationSelectScalar = {
    id?: boolean
    messageId?: boolean
    sourceLanguage?: boolean
    targetLanguage?: boolean
    translatedContent?: boolean
    translationModel?: boolean
    cacheKey?: boolean
    confidenceScore?: boolean
    createdAt?: boolean
  }

  export type MessageTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $MessageTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageTranslation"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      sourceLanguage: string
      targetLanguage: string
      translatedContent: string
      translationModel: string
      cacheKey: string
      confidenceScore: number | null
      createdAt: Date
    }, ExtArgs["result"]["messageTranslation"]>
    composites: {}
  }

  type MessageTranslationGetPayload<S extends boolean | null | undefined | MessageTranslationDefaultArgs> = $Result.GetResult<Prisma.$MessageTranslationPayload, S>

  type MessageTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageTranslationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageTranslationCountAggregateInputType | true
    }

  export interface MessageTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageTranslation'], meta: { name: 'MessageTranslation' } }
    /**
     * Find zero or one MessageTranslation that matches the filter.
     * @param {MessageTranslationFindUniqueArgs} args - Arguments to find a MessageTranslation
     * @example
     * // Get one MessageTranslation
     * const messageTranslation = await prisma.messageTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageTranslationFindUniqueArgs>(args: SelectSubset<T, MessageTranslationFindUniqueArgs<ExtArgs>>): Prisma__MessageTranslationClient<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MessageTranslation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageTranslationFindUniqueOrThrowArgs} args - Arguments to find a MessageTranslation
     * @example
     * // Get one MessageTranslation
     * const messageTranslation = await prisma.messageTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageTranslationClient<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MessageTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTranslationFindFirstArgs} args - Arguments to find a MessageTranslation
     * @example
     * // Get one MessageTranslation
     * const messageTranslation = await prisma.messageTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageTranslationFindFirstArgs>(args?: SelectSubset<T, MessageTranslationFindFirstArgs<ExtArgs>>): Prisma__MessageTranslationClient<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MessageTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTranslationFindFirstOrThrowArgs} args - Arguments to find a MessageTranslation
     * @example
     * // Get one MessageTranslation
     * const messageTranslation = await prisma.messageTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageTranslationClient<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MessageTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageTranslations
     * const messageTranslations = await prisma.messageTranslation.findMany()
     * 
     * // Get first 10 MessageTranslations
     * const messageTranslations = await prisma.messageTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageTranslationWithIdOnly = await prisma.messageTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageTranslationFindManyArgs>(args?: SelectSubset<T, MessageTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MessageTranslation.
     * @param {MessageTranslationCreateArgs} args - Arguments to create a MessageTranslation.
     * @example
     * // Create one MessageTranslation
     * const MessageTranslation = await prisma.messageTranslation.create({
     *   data: {
     *     // ... data to create a MessageTranslation
     *   }
     * })
     * 
     */
    create<T extends MessageTranslationCreateArgs>(args: SelectSubset<T, MessageTranslationCreateArgs<ExtArgs>>): Prisma__MessageTranslationClient<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MessageTranslations.
     * @param {MessageTranslationCreateManyArgs} args - Arguments to create many MessageTranslations.
     * @example
     * // Create many MessageTranslations
     * const messageTranslation = await prisma.messageTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageTranslationCreateManyArgs>(args?: SelectSubset<T, MessageTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MessageTranslation.
     * @param {MessageTranslationDeleteArgs} args - Arguments to delete one MessageTranslation.
     * @example
     * // Delete one MessageTranslation
     * const MessageTranslation = await prisma.messageTranslation.delete({
     *   where: {
     *     // ... filter to delete one MessageTranslation
     *   }
     * })
     * 
     */
    delete<T extends MessageTranslationDeleteArgs>(args: SelectSubset<T, MessageTranslationDeleteArgs<ExtArgs>>): Prisma__MessageTranslationClient<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MessageTranslation.
     * @param {MessageTranslationUpdateArgs} args - Arguments to update one MessageTranslation.
     * @example
     * // Update one MessageTranslation
     * const messageTranslation = await prisma.messageTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageTranslationUpdateArgs>(args: SelectSubset<T, MessageTranslationUpdateArgs<ExtArgs>>): Prisma__MessageTranslationClient<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MessageTranslations.
     * @param {MessageTranslationDeleteManyArgs} args - Arguments to filter MessageTranslations to delete.
     * @example
     * // Delete a few MessageTranslations
     * const { count } = await prisma.messageTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageTranslationDeleteManyArgs>(args?: SelectSubset<T, MessageTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageTranslations
     * const messageTranslation = await prisma.messageTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageTranslationUpdateManyArgs>(args: SelectSubset<T, MessageTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MessageTranslation.
     * @param {MessageTranslationUpsertArgs} args - Arguments to update or create a MessageTranslation.
     * @example
     * // Update or create a MessageTranslation
     * const messageTranslation = await prisma.messageTranslation.upsert({
     *   create: {
     *     // ... data to create a MessageTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageTranslation we want to update
     *   }
     * })
     */
    upsert<T extends MessageTranslationUpsertArgs>(args: SelectSubset<T, MessageTranslationUpsertArgs<ExtArgs>>): Prisma__MessageTranslationClient<$Result.GetResult<Prisma.$MessageTranslationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more MessageTranslations that matches the filter.
     * @param {MessageTranslationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const messageTranslation = await prisma.messageTranslation.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: MessageTranslationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a MessageTranslation.
     * @param {MessageTranslationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const messageTranslation = await prisma.messageTranslation.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: MessageTranslationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of MessageTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTranslationCountArgs} args - Arguments to filter MessageTranslations to count.
     * @example
     * // Count the number of MessageTranslations
     * const count = await prisma.messageTranslation.count({
     *   where: {
     *     // ... the filter for the MessageTranslations we want to count
     *   }
     * })
    **/
    count<T extends MessageTranslationCountArgs>(
      args?: Subset<T, MessageTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageTranslationAggregateArgs>(args: Subset<T, MessageTranslationAggregateArgs>): Prisma.PrismaPromise<GetMessageTranslationAggregateType<T>>

    /**
     * Group by MessageTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageTranslationGroupByArgs['orderBy'] }
        : { orderBy?: MessageTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageTranslation model
   */
  readonly fields: MessageTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageTranslation model
   */ 
  interface MessageTranslationFieldRefs {
    readonly id: FieldRef<"MessageTranslation", 'String'>
    readonly messageId: FieldRef<"MessageTranslation", 'String'>
    readonly sourceLanguage: FieldRef<"MessageTranslation", 'String'>
    readonly targetLanguage: FieldRef<"MessageTranslation", 'String'>
    readonly translatedContent: FieldRef<"MessageTranslation", 'String'>
    readonly translationModel: FieldRef<"MessageTranslation", 'String'>
    readonly cacheKey: FieldRef<"MessageTranslation", 'String'>
    readonly confidenceScore: FieldRef<"MessageTranslation", 'Float'>
    readonly createdAt: FieldRef<"MessageTranslation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageTranslation findUnique
   */
  export type MessageTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * Filter, which MessageTranslation to fetch.
     */
    where: MessageTranslationWhereUniqueInput
  }

  /**
   * MessageTranslation findUniqueOrThrow
   */
  export type MessageTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * Filter, which MessageTranslation to fetch.
     */
    where: MessageTranslationWhereUniqueInput
  }

  /**
   * MessageTranslation findFirst
   */
  export type MessageTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * Filter, which MessageTranslation to fetch.
     */
    where?: MessageTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageTranslations to fetch.
     */
    orderBy?: MessageTranslationOrderByWithRelationInput | MessageTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageTranslations.
     */
    cursor?: MessageTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageTranslations.
     */
    distinct?: MessageTranslationScalarFieldEnum | MessageTranslationScalarFieldEnum[]
  }

  /**
   * MessageTranslation findFirstOrThrow
   */
  export type MessageTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * Filter, which MessageTranslation to fetch.
     */
    where?: MessageTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageTranslations to fetch.
     */
    orderBy?: MessageTranslationOrderByWithRelationInput | MessageTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageTranslations.
     */
    cursor?: MessageTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageTranslations.
     */
    distinct?: MessageTranslationScalarFieldEnum | MessageTranslationScalarFieldEnum[]
  }

  /**
   * MessageTranslation findMany
   */
  export type MessageTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * Filter, which MessageTranslations to fetch.
     */
    where?: MessageTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageTranslations to fetch.
     */
    orderBy?: MessageTranslationOrderByWithRelationInput | MessageTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageTranslations.
     */
    cursor?: MessageTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageTranslations.
     */
    skip?: number
    distinct?: MessageTranslationScalarFieldEnum | MessageTranslationScalarFieldEnum[]
  }

  /**
   * MessageTranslation create
   */
  export type MessageTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageTranslation.
     */
    data: XOR<MessageTranslationCreateInput, MessageTranslationUncheckedCreateInput>
  }

  /**
   * MessageTranslation createMany
   */
  export type MessageTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageTranslations.
     */
    data: MessageTranslationCreateManyInput | MessageTranslationCreateManyInput[]
  }

  /**
   * MessageTranslation update
   */
  export type MessageTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageTranslation.
     */
    data: XOR<MessageTranslationUpdateInput, MessageTranslationUncheckedUpdateInput>
    /**
     * Choose, which MessageTranslation to update.
     */
    where: MessageTranslationWhereUniqueInput
  }

  /**
   * MessageTranslation updateMany
   */
  export type MessageTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageTranslations.
     */
    data: XOR<MessageTranslationUpdateManyMutationInput, MessageTranslationUncheckedUpdateManyInput>
    /**
     * Filter which MessageTranslations to update
     */
    where?: MessageTranslationWhereInput
  }

  /**
   * MessageTranslation upsert
   */
  export type MessageTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageTranslation to update in case it exists.
     */
    where: MessageTranslationWhereUniqueInput
    /**
     * In case the MessageTranslation found by the `where` argument doesn't exist, create a new MessageTranslation with this data.
     */
    create: XOR<MessageTranslationCreateInput, MessageTranslationUncheckedCreateInput>
    /**
     * In case the MessageTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageTranslationUpdateInput, MessageTranslationUncheckedUpdateInput>
  }

  /**
   * MessageTranslation delete
   */
  export type MessageTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
    /**
     * Filter which MessageTranslation to delete.
     */
    where: MessageTranslationWhereUniqueInput
  }

  /**
   * MessageTranslation deleteMany
   */
  export type MessageTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageTranslations to delete
     */
    where?: MessageTranslationWhereInput
  }

  /**
   * MessageTranslation findRaw
   */
  export type MessageTranslationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MessageTranslation aggregateRaw
   */
  export type MessageTranslationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MessageTranslation without action
   */
  export type MessageTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTranslation
     */
    select?: MessageTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTranslationInclude<ExtArgs> | null
  }


  /**
   * Model MessageReadStatus
   */

  export type AggregateMessageReadStatus = {
    _count: MessageReadStatusCountAggregateOutputType | null
    _min: MessageReadStatusMinAggregateOutputType | null
    _max: MessageReadStatusMaxAggregateOutputType | null
  }

  export type MessageReadStatusMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    userId: string | null
    readAt: Date | null
  }

  export type MessageReadStatusMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    userId: string | null
    readAt: Date | null
  }

  export type MessageReadStatusCountAggregateOutputType = {
    id: number
    messageId: number
    userId: number
    readAt: number
    _all: number
  }


  export type MessageReadStatusMinAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    readAt?: true
  }

  export type MessageReadStatusMaxAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    readAt?: true
  }

  export type MessageReadStatusCountAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    readAt?: true
    _all?: true
  }

  export type MessageReadStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageReadStatus to aggregate.
     */
    where?: MessageReadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReadStatuses to fetch.
     */
    orderBy?: MessageReadStatusOrderByWithRelationInput | MessageReadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageReadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageReadStatuses
    **/
    _count?: true | MessageReadStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageReadStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageReadStatusMaxAggregateInputType
  }

  export type GetMessageReadStatusAggregateType<T extends MessageReadStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageReadStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageReadStatus[P]>
      : GetScalarType<T[P], AggregateMessageReadStatus[P]>
  }




  export type MessageReadStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageReadStatusWhereInput
    orderBy?: MessageReadStatusOrderByWithAggregationInput | MessageReadStatusOrderByWithAggregationInput[]
    by: MessageReadStatusScalarFieldEnum[] | MessageReadStatusScalarFieldEnum
    having?: MessageReadStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageReadStatusCountAggregateInputType | true
    _min?: MessageReadStatusMinAggregateInputType
    _max?: MessageReadStatusMaxAggregateInputType
  }

  export type MessageReadStatusGroupByOutputType = {
    id: string
    messageId: string
    userId: string
    readAt: Date
    _count: MessageReadStatusCountAggregateOutputType | null
    _min: MessageReadStatusMinAggregateOutputType | null
    _max: MessageReadStatusMaxAggregateOutputType | null
  }

  type GetMessageReadStatusGroupByPayload<T extends MessageReadStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageReadStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageReadStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageReadStatusGroupByOutputType[P]>
            : GetScalarType<T[P], MessageReadStatusGroupByOutputType[P]>
        }
      >
    >


  export type MessageReadStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    readAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageReadStatus"]>


  export type MessageReadStatusSelectScalar = {
    id?: boolean
    messageId?: boolean
    userId?: boolean
    readAt?: boolean
  }

  export type MessageReadStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $MessageReadStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageReadStatus"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      userId: string
      readAt: Date
    }, ExtArgs["result"]["messageReadStatus"]>
    composites: {}
  }

  type MessageReadStatusGetPayload<S extends boolean | null | undefined | MessageReadStatusDefaultArgs> = $Result.GetResult<Prisma.$MessageReadStatusPayload, S>

  type MessageReadStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageReadStatusFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageReadStatusCountAggregateInputType | true
    }

  export interface MessageReadStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageReadStatus'], meta: { name: 'MessageReadStatus' } }
    /**
     * Find zero or one MessageReadStatus that matches the filter.
     * @param {MessageReadStatusFindUniqueArgs} args - Arguments to find a MessageReadStatus
     * @example
     * // Get one MessageReadStatus
     * const messageReadStatus = await prisma.messageReadStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageReadStatusFindUniqueArgs>(args: SelectSubset<T, MessageReadStatusFindUniqueArgs<ExtArgs>>): Prisma__MessageReadStatusClient<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MessageReadStatus that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageReadStatusFindUniqueOrThrowArgs} args - Arguments to find a MessageReadStatus
     * @example
     * // Get one MessageReadStatus
     * const messageReadStatus = await prisma.messageReadStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageReadStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageReadStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageReadStatusClient<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MessageReadStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadStatusFindFirstArgs} args - Arguments to find a MessageReadStatus
     * @example
     * // Get one MessageReadStatus
     * const messageReadStatus = await prisma.messageReadStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageReadStatusFindFirstArgs>(args?: SelectSubset<T, MessageReadStatusFindFirstArgs<ExtArgs>>): Prisma__MessageReadStatusClient<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MessageReadStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadStatusFindFirstOrThrowArgs} args - Arguments to find a MessageReadStatus
     * @example
     * // Get one MessageReadStatus
     * const messageReadStatus = await prisma.messageReadStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageReadStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageReadStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageReadStatusClient<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MessageReadStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageReadStatuses
     * const messageReadStatuses = await prisma.messageReadStatus.findMany()
     * 
     * // Get first 10 MessageReadStatuses
     * const messageReadStatuses = await prisma.messageReadStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageReadStatusWithIdOnly = await prisma.messageReadStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageReadStatusFindManyArgs>(args?: SelectSubset<T, MessageReadStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MessageReadStatus.
     * @param {MessageReadStatusCreateArgs} args - Arguments to create a MessageReadStatus.
     * @example
     * // Create one MessageReadStatus
     * const MessageReadStatus = await prisma.messageReadStatus.create({
     *   data: {
     *     // ... data to create a MessageReadStatus
     *   }
     * })
     * 
     */
    create<T extends MessageReadStatusCreateArgs>(args: SelectSubset<T, MessageReadStatusCreateArgs<ExtArgs>>): Prisma__MessageReadStatusClient<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MessageReadStatuses.
     * @param {MessageReadStatusCreateManyArgs} args - Arguments to create many MessageReadStatuses.
     * @example
     * // Create many MessageReadStatuses
     * const messageReadStatus = await prisma.messageReadStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageReadStatusCreateManyArgs>(args?: SelectSubset<T, MessageReadStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MessageReadStatus.
     * @param {MessageReadStatusDeleteArgs} args - Arguments to delete one MessageReadStatus.
     * @example
     * // Delete one MessageReadStatus
     * const MessageReadStatus = await prisma.messageReadStatus.delete({
     *   where: {
     *     // ... filter to delete one MessageReadStatus
     *   }
     * })
     * 
     */
    delete<T extends MessageReadStatusDeleteArgs>(args: SelectSubset<T, MessageReadStatusDeleteArgs<ExtArgs>>): Prisma__MessageReadStatusClient<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MessageReadStatus.
     * @param {MessageReadStatusUpdateArgs} args - Arguments to update one MessageReadStatus.
     * @example
     * // Update one MessageReadStatus
     * const messageReadStatus = await prisma.messageReadStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageReadStatusUpdateArgs>(args: SelectSubset<T, MessageReadStatusUpdateArgs<ExtArgs>>): Prisma__MessageReadStatusClient<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MessageReadStatuses.
     * @param {MessageReadStatusDeleteManyArgs} args - Arguments to filter MessageReadStatuses to delete.
     * @example
     * // Delete a few MessageReadStatuses
     * const { count } = await prisma.messageReadStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageReadStatusDeleteManyArgs>(args?: SelectSubset<T, MessageReadStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageReadStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageReadStatuses
     * const messageReadStatus = await prisma.messageReadStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageReadStatusUpdateManyArgs>(args: SelectSubset<T, MessageReadStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MessageReadStatus.
     * @param {MessageReadStatusUpsertArgs} args - Arguments to update or create a MessageReadStatus.
     * @example
     * // Update or create a MessageReadStatus
     * const messageReadStatus = await prisma.messageReadStatus.upsert({
     *   create: {
     *     // ... data to create a MessageReadStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageReadStatus we want to update
     *   }
     * })
     */
    upsert<T extends MessageReadStatusUpsertArgs>(args: SelectSubset<T, MessageReadStatusUpsertArgs<ExtArgs>>): Prisma__MessageReadStatusClient<$Result.GetResult<Prisma.$MessageReadStatusPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more MessageReadStatuses that matches the filter.
     * @param {MessageReadStatusFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const messageReadStatus = await prisma.messageReadStatus.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: MessageReadStatusFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a MessageReadStatus.
     * @param {MessageReadStatusAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const messageReadStatus = await prisma.messageReadStatus.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: MessageReadStatusAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of MessageReadStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadStatusCountArgs} args - Arguments to filter MessageReadStatuses to count.
     * @example
     * // Count the number of MessageReadStatuses
     * const count = await prisma.messageReadStatus.count({
     *   where: {
     *     // ... the filter for the MessageReadStatuses we want to count
     *   }
     * })
    **/
    count<T extends MessageReadStatusCountArgs>(
      args?: Subset<T, MessageReadStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageReadStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageReadStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageReadStatusAggregateArgs>(args: Subset<T, MessageReadStatusAggregateArgs>): Prisma.PrismaPromise<GetMessageReadStatusAggregateType<T>>

    /**
     * Group by MessageReadStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReadStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageReadStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageReadStatusGroupByArgs['orderBy'] }
        : { orderBy?: MessageReadStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageReadStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageReadStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageReadStatus model
   */
  readonly fields: MessageReadStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageReadStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageReadStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageReadStatus model
   */ 
  interface MessageReadStatusFieldRefs {
    readonly id: FieldRef<"MessageReadStatus", 'String'>
    readonly messageId: FieldRef<"MessageReadStatus", 'String'>
    readonly userId: FieldRef<"MessageReadStatus", 'String'>
    readonly readAt: FieldRef<"MessageReadStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageReadStatus findUnique
   */
  export type MessageReadStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageReadStatus to fetch.
     */
    where: MessageReadStatusWhereUniqueInput
  }

  /**
   * MessageReadStatus findUniqueOrThrow
   */
  export type MessageReadStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageReadStatus to fetch.
     */
    where: MessageReadStatusWhereUniqueInput
  }

  /**
   * MessageReadStatus findFirst
   */
  export type MessageReadStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageReadStatus to fetch.
     */
    where?: MessageReadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReadStatuses to fetch.
     */
    orderBy?: MessageReadStatusOrderByWithRelationInput | MessageReadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageReadStatuses.
     */
    cursor?: MessageReadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageReadStatuses.
     */
    distinct?: MessageReadStatusScalarFieldEnum | MessageReadStatusScalarFieldEnum[]
  }

  /**
   * MessageReadStatus findFirstOrThrow
   */
  export type MessageReadStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageReadStatus to fetch.
     */
    where?: MessageReadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReadStatuses to fetch.
     */
    orderBy?: MessageReadStatusOrderByWithRelationInput | MessageReadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageReadStatuses.
     */
    cursor?: MessageReadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageReadStatuses.
     */
    distinct?: MessageReadStatusScalarFieldEnum | MessageReadStatusScalarFieldEnum[]
  }

  /**
   * MessageReadStatus findMany
   */
  export type MessageReadStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageReadStatuses to fetch.
     */
    where?: MessageReadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReadStatuses to fetch.
     */
    orderBy?: MessageReadStatusOrderByWithRelationInput | MessageReadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageReadStatuses.
     */
    cursor?: MessageReadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReadStatuses.
     */
    skip?: number
    distinct?: MessageReadStatusScalarFieldEnum | MessageReadStatusScalarFieldEnum[]
  }

  /**
   * MessageReadStatus create
   */
  export type MessageReadStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageReadStatus.
     */
    data: XOR<MessageReadStatusCreateInput, MessageReadStatusUncheckedCreateInput>
  }

  /**
   * MessageReadStatus createMany
   */
  export type MessageReadStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageReadStatuses.
     */
    data: MessageReadStatusCreateManyInput | MessageReadStatusCreateManyInput[]
  }

  /**
   * MessageReadStatus update
   */
  export type MessageReadStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageReadStatus.
     */
    data: XOR<MessageReadStatusUpdateInput, MessageReadStatusUncheckedUpdateInput>
    /**
     * Choose, which MessageReadStatus to update.
     */
    where: MessageReadStatusWhereUniqueInput
  }

  /**
   * MessageReadStatus updateMany
   */
  export type MessageReadStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageReadStatuses.
     */
    data: XOR<MessageReadStatusUpdateManyMutationInput, MessageReadStatusUncheckedUpdateManyInput>
    /**
     * Filter which MessageReadStatuses to update
     */
    where?: MessageReadStatusWhereInput
  }

  /**
   * MessageReadStatus upsert
   */
  export type MessageReadStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageReadStatus to update in case it exists.
     */
    where: MessageReadStatusWhereUniqueInput
    /**
     * In case the MessageReadStatus found by the `where` argument doesn't exist, create a new MessageReadStatus with this data.
     */
    create: XOR<MessageReadStatusCreateInput, MessageReadStatusUncheckedCreateInput>
    /**
     * In case the MessageReadStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageReadStatusUpdateInput, MessageReadStatusUncheckedUpdateInput>
  }

  /**
   * MessageReadStatus delete
   */
  export type MessageReadStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
    /**
     * Filter which MessageReadStatus to delete.
     */
    where: MessageReadStatusWhereUniqueInput
  }

  /**
   * MessageReadStatus deleteMany
   */
  export type MessageReadStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageReadStatuses to delete
     */
    where?: MessageReadStatusWhereInput
  }

  /**
   * MessageReadStatus findRaw
   */
  export type MessageReadStatusFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MessageReadStatus aggregateRaw
   */
  export type MessageReadStatusAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MessageReadStatus without action
   */
  export type MessageReadStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReadStatus
     */
    select?: MessageReadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReadStatusInclude<ExtArgs> | null
  }


  /**
   * Model FriendRequest
   */

  export type AggregateFriendRequest = {
    _count: FriendRequestCountAggregateOutputType | null
    _min: FriendRequestMinAggregateOutputType | null
    _max: FriendRequestMaxAggregateOutputType | null
  }

  export type FriendRequestMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FriendRequestMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FriendRequestCountAggregateOutputType = {
    id: number
    senderId: number
    receiverId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FriendRequestMinAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FriendRequestMaxAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FriendRequestCountAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FriendRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FriendRequest to aggregate.
     */
    where?: FriendRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendRequests to fetch.
     */
    orderBy?: FriendRequestOrderByWithRelationInput | FriendRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FriendRequests
    **/
    _count?: true | FriendRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendRequestMaxAggregateInputType
  }

  export type GetFriendRequestAggregateType<T extends FriendRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendRequest[P]>
      : GetScalarType<T[P], AggregateFriendRequest[P]>
  }




  export type FriendRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendRequestWhereInput
    orderBy?: FriendRequestOrderByWithAggregationInput | FriendRequestOrderByWithAggregationInput[]
    by: FriendRequestScalarFieldEnum[] | FriendRequestScalarFieldEnum
    having?: FriendRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendRequestCountAggregateInputType | true
    _min?: FriendRequestMinAggregateInputType
    _max?: FriendRequestMaxAggregateInputType
  }

  export type FriendRequestGroupByOutputType = {
    id: string
    senderId: string
    receiverId: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: FriendRequestCountAggregateOutputType | null
    _min: FriendRequestMinAggregateOutputType | null
    _max: FriendRequestMaxAggregateOutputType | null
  }

  type GetFriendRequestGroupByPayload<T extends FriendRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FriendRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendRequestGroupByOutputType[P]>
            : GetScalarType<T[P], FriendRequestGroupByOutputType[P]>
        }
      >
    >


  export type FriendRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendRequest"]>


  export type FriendRequestSelectScalar = {
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FriendRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FriendRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FriendRequest"
    objects: {
      receiver: Prisma.$UserPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderId: string
      receiverId: string
      /**
       * pending, accepted, rejected, blocked
       */
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["friendRequest"]>
    composites: {}
  }

  type FriendRequestGetPayload<S extends boolean | null | undefined | FriendRequestDefaultArgs> = $Result.GetResult<Prisma.$FriendRequestPayload, S>

  type FriendRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FriendRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FriendRequestCountAggregateInputType | true
    }

  export interface FriendRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FriendRequest'], meta: { name: 'FriendRequest' } }
    /**
     * Find zero or one FriendRequest that matches the filter.
     * @param {FriendRequestFindUniqueArgs} args - Arguments to find a FriendRequest
     * @example
     * // Get one FriendRequest
     * const friendRequest = await prisma.friendRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FriendRequestFindUniqueArgs>(args: SelectSubset<T, FriendRequestFindUniqueArgs<ExtArgs>>): Prisma__FriendRequestClient<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FriendRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FriendRequestFindUniqueOrThrowArgs} args - Arguments to find a FriendRequest
     * @example
     * // Get one FriendRequest
     * const friendRequest = await prisma.friendRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FriendRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, FriendRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FriendRequestClient<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FriendRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendRequestFindFirstArgs} args - Arguments to find a FriendRequest
     * @example
     * // Get one FriendRequest
     * const friendRequest = await prisma.friendRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FriendRequestFindFirstArgs>(args?: SelectSubset<T, FriendRequestFindFirstArgs<ExtArgs>>): Prisma__FriendRequestClient<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FriendRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendRequestFindFirstOrThrowArgs} args - Arguments to find a FriendRequest
     * @example
     * // Get one FriendRequest
     * const friendRequest = await prisma.friendRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FriendRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, FriendRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__FriendRequestClient<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FriendRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FriendRequests
     * const friendRequests = await prisma.friendRequest.findMany()
     * 
     * // Get first 10 FriendRequests
     * const friendRequests = await prisma.friendRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendRequestWithIdOnly = await prisma.friendRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FriendRequestFindManyArgs>(args?: SelectSubset<T, FriendRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FriendRequest.
     * @param {FriendRequestCreateArgs} args - Arguments to create a FriendRequest.
     * @example
     * // Create one FriendRequest
     * const FriendRequest = await prisma.friendRequest.create({
     *   data: {
     *     // ... data to create a FriendRequest
     *   }
     * })
     * 
     */
    create<T extends FriendRequestCreateArgs>(args: SelectSubset<T, FriendRequestCreateArgs<ExtArgs>>): Prisma__FriendRequestClient<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FriendRequests.
     * @param {FriendRequestCreateManyArgs} args - Arguments to create many FriendRequests.
     * @example
     * // Create many FriendRequests
     * const friendRequest = await prisma.friendRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FriendRequestCreateManyArgs>(args?: SelectSubset<T, FriendRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FriendRequest.
     * @param {FriendRequestDeleteArgs} args - Arguments to delete one FriendRequest.
     * @example
     * // Delete one FriendRequest
     * const FriendRequest = await prisma.friendRequest.delete({
     *   where: {
     *     // ... filter to delete one FriendRequest
     *   }
     * })
     * 
     */
    delete<T extends FriendRequestDeleteArgs>(args: SelectSubset<T, FriendRequestDeleteArgs<ExtArgs>>): Prisma__FriendRequestClient<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FriendRequest.
     * @param {FriendRequestUpdateArgs} args - Arguments to update one FriendRequest.
     * @example
     * // Update one FriendRequest
     * const friendRequest = await prisma.friendRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FriendRequestUpdateArgs>(args: SelectSubset<T, FriendRequestUpdateArgs<ExtArgs>>): Prisma__FriendRequestClient<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FriendRequests.
     * @param {FriendRequestDeleteManyArgs} args - Arguments to filter FriendRequests to delete.
     * @example
     * // Delete a few FriendRequests
     * const { count } = await prisma.friendRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FriendRequestDeleteManyArgs>(args?: SelectSubset<T, FriendRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FriendRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FriendRequests
     * const friendRequest = await prisma.friendRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FriendRequestUpdateManyArgs>(args: SelectSubset<T, FriendRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FriendRequest.
     * @param {FriendRequestUpsertArgs} args - Arguments to update or create a FriendRequest.
     * @example
     * // Update or create a FriendRequest
     * const friendRequest = await prisma.friendRequest.upsert({
     *   create: {
     *     // ... data to create a FriendRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FriendRequest we want to update
     *   }
     * })
     */
    upsert<T extends FriendRequestUpsertArgs>(args: SelectSubset<T, FriendRequestUpsertArgs<ExtArgs>>): Prisma__FriendRequestClient<$Result.GetResult<Prisma.$FriendRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more FriendRequests that matches the filter.
     * @param {FriendRequestFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const friendRequest = await prisma.friendRequest.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: FriendRequestFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a FriendRequest.
     * @param {FriendRequestAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const friendRequest = await prisma.friendRequest.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: FriendRequestAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of FriendRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendRequestCountArgs} args - Arguments to filter FriendRequests to count.
     * @example
     * // Count the number of FriendRequests
     * const count = await prisma.friendRequest.count({
     *   where: {
     *     // ... the filter for the FriendRequests we want to count
     *   }
     * })
    **/
    count<T extends FriendRequestCountArgs>(
      args?: Subset<T, FriendRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FriendRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendRequestAggregateArgs>(args: Subset<T, FriendRequestAggregateArgs>): Prisma.PrismaPromise<GetFriendRequestAggregateType<T>>

    /**
     * Group by FriendRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendRequestGroupByArgs['orderBy'] }
        : { orderBy?: FriendRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FriendRequest model
   */
  readonly fields: FriendRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FriendRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FriendRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FriendRequest model
   */ 
  interface FriendRequestFieldRefs {
    readonly id: FieldRef<"FriendRequest", 'String'>
    readonly senderId: FieldRef<"FriendRequest", 'String'>
    readonly receiverId: FieldRef<"FriendRequest", 'String'>
    readonly status: FieldRef<"FriendRequest", 'String'>
    readonly createdAt: FieldRef<"FriendRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"FriendRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FriendRequest findUnique
   */
  export type FriendRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * Filter, which FriendRequest to fetch.
     */
    where: FriendRequestWhereUniqueInput
  }

  /**
   * FriendRequest findUniqueOrThrow
   */
  export type FriendRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * Filter, which FriendRequest to fetch.
     */
    where: FriendRequestWhereUniqueInput
  }

  /**
   * FriendRequest findFirst
   */
  export type FriendRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * Filter, which FriendRequest to fetch.
     */
    where?: FriendRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendRequests to fetch.
     */
    orderBy?: FriendRequestOrderByWithRelationInput | FriendRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FriendRequests.
     */
    cursor?: FriendRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FriendRequests.
     */
    distinct?: FriendRequestScalarFieldEnum | FriendRequestScalarFieldEnum[]
  }

  /**
   * FriendRequest findFirstOrThrow
   */
  export type FriendRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * Filter, which FriendRequest to fetch.
     */
    where?: FriendRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendRequests to fetch.
     */
    orderBy?: FriendRequestOrderByWithRelationInput | FriendRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FriendRequests.
     */
    cursor?: FriendRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FriendRequests.
     */
    distinct?: FriendRequestScalarFieldEnum | FriendRequestScalarFieldEnum[]
  }

  /**
   * FriendRequest findMany
   */
  export type FriendRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * Filter, which FriendRequests to fetch.
     */
    where?: FriendRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FriendRequests to fetch.
     */
    orderBy?: FriendRequestOrderByWithRelationInput | FriendRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FriendRequests.
     */
    cursor?: FriendRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FriendRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FriendRequests.
     */
    skip?: number
    distinct?: FriendRequestScalarFieldEnum | FriendRequestScalarFieldEnum[]
  }

  /**
   * FriendRequest create
   */
  export type FriendRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a FriendRequest.
     */
    data: XOR<FriendRequestCreateInput, FriendRequestUncheckedCreateInput>
  }

  /**
   * FriendRequest createMany
   */
  export type FriendRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FriendRequests.
     */
    data: FriendRequestCreateManyInput | FriendRequestCreateManyInput[]
  }

  /**
   * FriendRequest update
   */
  export type FriendRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a FriendRequest.
     */
    data: XOR<FriendRequestUpdateInput, FriendRequestUncheckedUpdateInput>
    /**
     * Choose, which FriendRequest to update.
     */
    where: FriendRequestWhereUniqueInput
  }

  /**
   * FriendRequest updateMany
   */
  export type FriendRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FriendRequests.
     */
    data: XOR<FriendRequestUpdateManyMutationInput, FriendRequestUncheckedUpdateManyInput>
    /**
     * Filter which FriendRequests to update
     */
    where?: FriendRequestWhereInput
  }

  /**
   * FriendRequest upsert
   */
  export type FriendRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the FriendRequest to update in case it exists.
     */
    where: FriendRequestWhereUniqueInput
    /**
     * In case the FriendRequest found by the `where` argument doesn't exist, create a new FriendRequest with this data.
     */
    create: XOR<FriendRequestCreateInput, FriendRequestUncheckedCreateInput>
    /**
     * In case the FriendRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendRequestUpdateInput, FriendRequestUncheckedUpdateInput>
  }

  /**
   * FriendRequest delete
   */
  export type FriendRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
    /**
     * Filter which FriendRequest to delete.
     */
    where: FriendRequestWhereUniqueInput
  }

  /**
   * FriendRequest deleteMany
   */
  export type FriendRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FriendRequests to delete
     */
    where?: FriendRequestWhereInput
  }

  /**
   * FriendRequest findRaw
   */
  export type FriendRequestFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * FriendRequest aggregateRaw
   */
  export type FriendRequestAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * FriendRequest without action
   */
  export type FriendRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FriendRequest
     */
    select?: FriendRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendRequestInclude<ExtArgs> | null
  }


  /**
   * Model TypingIndicator
   */

  export type AggregateTypingIndicator = {
    _count: TypingIndicatorCountAggregateOutputType | null
    _min: TypingIndicatorMinAggregateOutputType | null
    _max: TypingIndicatorMaxAggregateOutputType | null
  }

  export type TypingIndicatorMinAggregateOutputType = {
    id: string | null
    conversationId: string | null
    userId: string | null
    isTyping: boolean | null
    startedAt: Date | null
    updatedAt: Date | null
  }

  export type TypingIndicatorMaxAggregateOutputType = {
    id: string | null
    conversationId: string | null
    userId: string | null
    isTyping: boolean | null
    startedAt: Date | null
    updatedAt: Date | null
  }

  export type TypingIndicatorCountAggregateOutputType = {
    id: number
    conversationId: number
    userId: number
    isTyping: number
    startedAt: number
    updatedAt: number
    _all: number
  }


  export type TypingIndicatorMinAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    isTyping?: true
    startedAt?: true
    updatedAt?: true
  }

  export type TypingIndicatorMaxAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    isTyping?: true
    startedAt?: true
    updatedAt?: true
  }

  export type TypingIndicatorCountAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    isTyping?: true
    startedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TypingIndicatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TypingIndicator to aggregate.
     */
    where?: TypingIndicatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypingIndicators to fetch.
     */
    orderBy?: TypingIndicatorOrderByWithRelationInput | TypingIndicatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypingIndicatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypingIndicators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypingIndicators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TypingIndicators
    **/
    _count?: true | TypingIndicatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypingIndicatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypingIndicatorMaxAggregateInputType
  }

  export type GetTypingIndicatorAggregateType<T extends TypingIndicatorAggregateArgs> = {
        [P in keyof T & keyof AggregateTypingIndicator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypingIndicator[P]>
      : GetScalarType<T[P], AggregateTypingIndicator[P]>
  }




  export type TypingIndicatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypingIndicatorWhereInput
    orderBy?: TypingIndicatorOrderByWithAggregationInput | TypingIndicatorOrderByWithAggregationInput[]
    by: TypingIndicatorScalarFieldEnum[] | TypingIndicatorScalarFieldEnum
    having?: TypingIndicatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypingIndicatorCountAggregateInputType | true
    _min?: TypingIndicatorMinAggregateInputType
    _max?: TypingIndicatorMaxAggregateInputType
  }

  export type TypingIndicatorGroupByOutputType = {
    id: string
    conversationId: string
    userId: string
    isTyping: boolean
    startedAt: Date
    updatedAt: Date
    _count: TypingIndicatorCountAggregateOutputType | null
    _min: TypingIndicatorMinAggregateOutputType | null
    _max: TypingIndicatorMaxAggregateOutputType | null
  }

  type GetTypingIndicatorGroupByPayload<T extends TypingIndicatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypingIndicatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypingIndicatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypingIndicatorGroupByOutputType[P]>
            : GetScalarType<T[P], TypingIndicatorGroupByOutputType[P]>
        }
      >
    >


  export type TypingIndicatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    isTyping?: boolean
    startedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["typingIndicator"]>


  export type TypingIndicatorSelectScalar = {
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    isTyping?: boolean
    startedAt?: boolean
    updatedAt?: boolean
  }

  export type TypingIndicatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }

  export type $TypingIndicatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TypingIndicator"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conversationId: string
      userId: string
      isTyping: boolean
      startedAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["typingIndicator"]>
    composites: {}
  }

  type TypingIndicatorGetPayload<S extends boolean | null | undefined | TypingIndicatorDefaultArgs> = $Result.GetResult<Prisma.$TypingIndicatorPayload, S>

  type TypingIndicatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TypingIndicatorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TypingIndicatorCountAggregateInputType | true
    }

  export interface TypingIndicatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TypingIndicator'], meta: { name: 'TypingIndicator' } }
    /**
     * Find zero or one TypingIndicator that matches the filter.
     * @param {TypingIndicatorFindUniqueArgs} args - Arguments to find a TypingIndicator
     * @example
     * // Get one TypingIndicator
     * const typingIndicator = await prisma.typingIndicator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TypingIndicatorFindUniqueArgs>(args: SelectSubset<T, TypingIndicatorFindUniqueArgs<ExtArgs>>): Prisma__TypingIndicatorClient<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TypingIndicator that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TypingIndicatorFindUniqueOrThrowArgs} args - Arguments to find a TypingIndicator
     * @example
     * // Get one TypingIndicator
     * const typingIndicator = await prisma.typingIndicator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TypingIndicatorFindUniqueOrThrowArgs>(args: SelectSubset<T, TypingIndicatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TypingIndicatorClient<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TypingIndicator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypingIndicatorFindFirstArgs} args - Arguments to find a TypingIndicator
     * @example
     * // Get one TypingIndicator
     * const typingIndicator = await prisma.typingIndicator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TypingIndicatorFindFirstArgs>(args?: SelectSubset<T, TypingIndicatorFindFirstArgs<ExtArgs>>): Prisma__TypingIndicatorClient<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TypingIndicator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypingIndicatorFindFirstOrThrowArgs} args - Arguments to find a TypingIndicator
     * @example
     * // Get one TypingIndicator
     * const typingIndicator = await prisma.typingIndicator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TypingIndicatorFindFirstOrThrowArgs>(args?: SelectSubset<T, TypingIndicatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__TypingIndicatorClient<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TypingIndicators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypingIndicatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TypingIndicators
     * const typingIndicators = await prisma.typingIndicator.findMany()
     * 
     * // Get first 10 TypingIndicators
     * const typingIndicators = await prisma.typingIndicator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typingIndicatorWithIdOnly = await prisma.typingIndicator.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TypingIndicatorFindManyArgs>(args?: SelectSubset<T, TypingIndicatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TypingIndicator.
     * @param {TypingIndicatorCreateArgs} args - Arguments to create a TypingIndicator.
     * @example
     * // Create one TypingIndicator
     * const TypingIndicator = await prisma.typingIndicator.create({
     *   data: {
     *     // ... data to create a TypingIndicator
     *   }
     * })
     * 
     */
    create<T extends TypingIndicatorCreateArgs>(args: SelectSubset<T, TypingIndicatorCreateArgs<ExtArgs>>): Prisma__TypingIndicatorClient<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TypingIndicators.
     * @param {TypingIndicatorCreateManyArgs} args - Arguments to create many TypingIndicators.
     * @example
     * // Create many TypingIndicators
     * const typingIndicator = await prisma.typingIndicator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TypingIndicatorCreateManyArgs>(args?: SelectSubset<T, TypingIndicatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TypingIndicator.
     * @param {TypingIndicatorDeleteArgs} args - Arguments to delete one TypingIndicator.
     * @example
     * // Delete one TypingIndicator
     * const TypingIndicator = await prisma.typingIndicator.delete({
     *   where: {
     *     // ... filter to delete one TypingIndicator
     *   }
     * })
     * 
     */
    delete<T extends TypingIndicatorDeleteArgs>(args: SelectSubset<T, TypingIndicatorDeleteArgs<ExtArgs>>): Prisma__TypingIndicatorClient<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TypingIndicator.
     * @param {TypingIndicatorUpdateArgs} args - Arguments to update one TypingIndicator.
     * @example
     * // Update one TypingIndicator
     * const typingIndicator = await prisma.typingIndicator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TypingIndicatorUpdateArgs>(args: SelectSubset<T, TypingIndicatorUpdateArgs<ExtArgs>>): Prisma__TypingIndicatorClient<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TypingIndicators.
     * @param {TypingIndicatorDeleteManyArgs} args - Arguments to filter TypingIndicators to delete.
     * @example
     * // Delete a few TypingIndicators
     * const { count } = await prisma.typingIndicator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TypingIndicatorDeleteManyArgs>(args?: SelectSubset<T, TypingIndicatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TypingIndicators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypingIndicatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TypingIndicators
     * const typingIndicator = await prisma.typingIndicator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TypingIndicatorUpdateManyArgs>(args: SelectSubset<T, TypingIndicatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TypingIndicator.
     * @param {TypingIndicatorUpsertArgs} args - Arguments to update or create a TypingIndicator.
     * @example
     * // Update or create a TypingIndicator
     * const typingIndicator = await prisma.typingIndicator.upsert({
     *   create: {
     *     // ... data to create a TypingIndicator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TypingIndicator we want to update
     *   }
     * })
     */
    upsert<T extends TypingIndicatorUpsertArgs>(args: SelectSubset<T, TypingIndicatorUpsertArgs<ExtArgs>>): Prisma__TypingIndicatorClient<$Result.GetResult<Prisma.$TypingIndicatorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more TypingIndicators that matches the filter.
     * @param {TypingIndicatorFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const typingIndicator = await prisma.typingIndicator.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: TypingIndicatorFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TypingIndicator.
     * @param {TypingIndicatorAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const typingIndicator = await prisma.typingIndicator.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TypingIndicatorAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of TypingIndicators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypingIndicatorCountArgs} args - Arguments to filter TypingIndicators to count.
     * @example
     * // Count the number of TypingIndicators
     * const count = await prisma.typingIndicator.count({
     *   where: {
     *     // ... the filter for the TypingIndicators we want to count
     *   }
     * })
    **/
    count<T extends TypingIndicatorCountArgs>(
      args?: Subset<T, TypingIndicatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypingIndicatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TypingIndicator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypingIndicatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypingIndicatorAggregateArgs>(args: Subset<T, TypingIndicatorAggregateArgs>): Prisma.PrismaPromise<GetTypingIndicatorAggregateType<T>>

    /**
     * Group by TypingIndicator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypingIndicatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypingIndicatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypingIndicatorGroupByArgs['orderBy'] }
        : { orderBy?: TypingIndicatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypingIndicatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypingIndicatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TypingIndicator model
   */
  readonly fields: TypingIndicatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TypingIndicator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TypingIndicatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TypingIndicator model
   */ 
  interface TypingIndicatorFieldRefs {
    readonly id: FieldRef<"TypingIndicator", 'String'>
    readonly conversationId: FieldRef<"TypingIndicator", 'String'>
    readonly userId: FieldRef<"TypingIndicator", 'String'>
    readonly isTyping: FieldRef<"TypingIndicator", 'Boolean'>
    readonly startedAt: FieldRef<"TypingIndicator", 'DateTime'>
    readonly updatedAt: FieldRef<"TypingIndicator", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TypingIndicator findUnique
   */
  export type TypingIndicatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * Filter, which TypingIndicator to fetch.
     */
    where: TypingIndicatorWhereUniqueInput
  }

  /**
   * TypingIndicator findUniqueOrThrow
   */
  export type TypingIndicatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * Filter, which TypingIndicator to fetch.
     */
    where: TypingIndicatorWhereUniqueInput
  }

  /**
   * TypingIndicator findFirst
   */
  export type TypingIndicatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * Filter, which TypingIndicator to fetch.
     */
    where?: TypingIndicatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypingIndicators to fetch.
     */
    orderBy?: TypingIndicatorOrderByWithRelationInput | TypingIndicatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypingIndicators.
     */
    cursor?: TypingIndicatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypingIndicators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypingIndicators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypingIndicators.
     */
    distinct?: TypingIndicatorScalarFieldEnum | TypingIndicatorScalarFieldEnum[]
  }

  /**
   * TypingIndicator findFirstOrThrow
   */
  export type TypingIndicatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * Filter, which TypingIndicator to fetch.
     */
    where?: TypingIndicatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypingIndicators to fetch.
     */
    orderBy?: TypingIndicatorOrderByWithRelationInput | TypingIndicatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypingIndicators.
     */
    cursor?: TypingIndicatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypingIndicators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypingIndicators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypingIndicators.
     */
    distinct?: TypingIndicatorScalarFieldEnum | TypingIndicatorScalarFieldEnum[]
  }

  /**
   * TypingIndicator findMany
   */
  export type TypingIndicatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * Filter, which TypingIndicators to fetch.
     */
    where?: TypingIndicatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypingIndicators to fetch.
     */
    orderBy?: TypingIndicatorOrderByWithRelationInput | TypingIndicatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TypingIndicators.
     */
    cursor?: TypingIndicatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypingIndicators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypingIndicators.
     */
    skip?: number
    distinct?: TypingIndicatorScalarFieldEnum | TypingIndicatorScalarFieldEnum[]
  }

  /**
   * TypingIndicator create
   */
  export type TypingIndicatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * The data needed to create a TypingIndicator.
     */
    data: XOR<TypingIndicatorCreateInput, TypingIndicatorUncheckedCreateInput>
  }

  /**
   * TypingIndicator createMany
   */
  export type TypingIndicatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TypingIndicators.
     */
    data: TypingIndicatorCreateManyInput | TypingIndicatorCreateManyInput[]
  }

  /**
   * TypingIndicator update
   */
  export type TypingIndicatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * The data needed to update a TypingIndicator.
     */
    data: XOR<TypingIndicatorUpdateInput, TypingIndicatorUncheckedUpdateInput>
    /**
     * Choose, which TypingIndicator to update.
     */
    where: TypingIndicatorWhereUniqueInput
  }

  /**
   * TypingIndicator updateMany
   */
  export type TypingIndicatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TypingIndicators.
     */
    data: XOR<TypingIndicatorUpdateManyMutationInput, TypingIndicatorUncheckedUpdateManyInput>
    /**
     * Filter which TypingIndicators to update
     */
    where?: TypingIndicatorWhereInput
  }

  /**
   * TypingIndicator upsert
   */
  export type TypingIndicatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * The filter to search for the TypingIndicator to update in case it exists.
     */
    where: TypingIndicatorWhereUniqueInput
    /**
     * In case the TypingIndicator found by the `where` argument doesn't exist, create a new TypingIndicator with this data.
     */
    create: XOR<TypingIndicatorCreateInput, TypingIndicatorUncheckedCreateInput>
    /**
     * In case the TypingIndicator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypingIndicatorUpdateInput, TypingIndicatorUncheckedUpdateInput>
  }

  /**
   * TypingIndicator delete
   */
  export type TypingIndicatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
    /**
     * Filter which TypingIndicator to delete.
     */
    where: TypingIndicatorWhereUniqueInput
  }

  /**
   * TypingIndicator deleteMany
   */
  export type TypingIndicatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TypingIndicators to delete
     */
    where?: TypingIndicatorWhereInput
  }

  /**
   * TypingIndicator findRaw
   */
  export type TypingIndicatorFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TypingIndicator aggregateRaw
   */
  export type TypingIndicatorAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TypingIndicator without action
   */
  export type TypingIndicatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypingIndicator
     */
    select?: TypingIndicatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypingIndicatorInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    content: string | null
    data: string | null
    priority: string | null
    isRead: boolean | null
    emailSent: boolean | null
    pushSent: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    content: string | null
    data: string | null
    priority: string | null
    isRead: boolean | null
    emailSent: boolean | null
    pushSent: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    content: number
    data: number
    priority: number
    isRead: number
    emailSent: number
    pushSent: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    content?: true
    data?: true
    priority?: true
    isRead?: true
    emailSent?: true
    pushSent?: true
    expiresAt?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    content?: true
    data?: true
    priority?: true
    isRead?: true
    emailSent?: true
    pushSent?: true
    expiresAt?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    content?: true
    data?: true
    priority?: true
    isRead?: true
    emailSent?: true
    pushSent?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: string
    title: string
    content: string
    data: string | null
    priority: string
    isRead: boolean
    emailSent: boolean
    pushSent: boolean
    expiresAt: Date | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    data?: boolean
    priority?: boolean
    isRead?: boolean
    emailSent?: boolean
    pushSent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>


  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    data?: boolean
    priority?: boolean
    isRead?: boolean
    emailSent?: boolean
    pushSent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      /**
       * new_conversation, new_message, message_edited, friend_request, etc.
       */
      type: string
      title: string
      content: string
      data: string | null
      priority: string
      isRead: boolean
      emailSent: boolean
      pushSent: boolean
      expiresAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * @param {NotificationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const notification = await prisma.notification.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: NotificationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Notification.
     * @param {NotificationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const notification = await prisma.notification.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: NotificationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly content: FieldRef<"Notification", 'String'>
    readonly data: FieldRef<"Notification", 'String'>
    readonly priority: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly emailSent: FieldRef<"Notification", 'Boolean'>
    readonly pushSent: FieldRef<"Notification", 'Boolean'>
    readonly expiresAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification findRaw
   */
  export type NotificationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Notification aggregateRaw
   */
  export type NotificationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Community
   */

  export type AggregateCommunity = {
    _count: CommunityCountAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  export type CommunityMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    avatar: string | null
    isPrivate: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommunityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    avatar: string | null
    isPrivate: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommunityCountAggregateOutputType = {
    id: number
    name: number
    description: number
    avatar: number
    isPrivate: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommunityMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    avatar?: true
    isPrivate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommunityMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    avatar?: true
    isPrivate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommunityCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    avatar?: true
    isPrivate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommunityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Community to aggregate.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Communities
    **/
    _count?: true | CommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityMaxAggregateInputType
  }

  export type GetCommunityAggregateType<T extends CommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunity[P]>
      : GetScalarType<T[P], AggregateCommunity[P]>
  }




  export type CommunityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityWhereInput
    orderBy?: CommunityOrderByWithAggregationInput | CommunityOrderByWithAggregationInput[]
    by: CommunityScalarFieldEnum[] | CommunityScalarFieldEnum
    having?: CommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityCountAggregateInputType | true
    _min?: CommunityMinAggregateInputType
    _max?: CommunityMaxAggregateInputType
  }

  export type CommunityGroupByOutputType = {
    id: string
    name: string
    description: string | null
    avatar: string | null
    isPrivate: boolean
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: CommunityCountAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  type GetCommunityGroupByPayload<T extends CommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityGroupByOutputType[P]>
        }
      >
    >


  export type CommunitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    avatar?: boolean
    isPrivate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Community$membersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    admins?: boolean | Community$adminsArgs<ExtArgs>
    moderators?: boolean | Community$moderatorsArgs<ExtArgs>
    Conversation?: boolean | Community$ConversationArgs<ExtArgs>
    _count?: boolean | CommunityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["community"]>


  export type CommunitySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    avatar?: boolean
    isPrivate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommunityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Community$membersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    admins?: boolean | Community$adminsArgs<ExtArgs>
    moderators?: boolean | Community$moderatorsArgs<ExtArgs>
    Conversation?: boolean | Community$ConversationArgs<ExtArgs>
    _count?: boolean | CommunityCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CommunityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Community"
    objects: {
      members: Prisma.$CommunityMemberPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
      admins: Prisma.$CommunityAdminPayload<ExtArgs>[]
      moderators: Prisma.$CommunityModeratorPayload<ExtArgs>[]
      Conversation: Prisma.$ConversationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      avatar: string | null
      isPrivate: boolean
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["community"]>
    composites: {}
  }

  type CommunityGetPayload<S extends boolean | null | undefined | CommunityDefaultArgs> = $Result.GetResult<Prisma.$CommunityPayload, S>

  type CommunityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunityCountAggregateInputType | true
    }

  export interface CommunityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Community'], meta: { name: 'Community' } }
    /**
     * Find zero or one Community that matches the filter.
     * @param {CommunityFindUniqueArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunityFindUniqueArgs>(args: SelectSubset<T, CommunityFindUniqueArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Community that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommunityFindUniqueOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunityFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunityFindFirstArgs>(args?: SelectSubset<T, CommunityFindFirstArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Community that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunityFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communities
     * const communities = await prisma.community.findMany()
     * 
     * // Get first 10 Communities
     * const communities = await prisma.community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityWithIdOnly = await prisma.community.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunityFindManyArgs>(args?: SelectSubset<T, CommunityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Community.
     * @param {CommunityCreateArgs} args - Arguments to create a Community.
     * @example
     * // Create one Community
     * const Community = await prisma.community.create({
     *   data: {
     *     // ... data to create a Community
     *   }
     * })
     * 
     */
    create<T extends CommunityCreateArgs>(args: SelectSubset<T, CommunityCreateArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Communities.
     * @param {CommunityCreateManyArgs} args - Arguments to create many Communities.
     * @example
     * // Create many Communities
     * const community = await prisma.community.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunityCreateManyArgs>(args?: SelectSubset<T, CommunityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Community.
     * @param {CommunityDeleteArgs} args - Arguments to delete one Community.
     * @example
     * // Delete one Community
     * const Community = await prisma.community.delete({
     *   where: {
     *     // ... filter to delete one Community
     *   }
     * })
     * 
     */
    delete<T extends CommunityDeleteArgs>(args: SelectSubset<T, CommunityDeleteArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Community.
     * @param {CommunityUpdateArgs} args - Arguments to update one Community.
     * @example
     * // Update one Community
     * const community = await prisma.community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunityUpdateArgs>(args: SelectSubset<T, CommunityUpdateArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Communities.
     * @param {CommunityDeleteManyArgs} args - Arguments to filter Communities to delete.
     * @example
     * // Delete a few Communities
     * const { count } = await prisma.community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunityDeleteManyArgs>(args?: SelectSubset<T, CommunityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communities
     * const community = await prisma.community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunityUpdateManyArgs>(args: SelectSubset<T, CommunityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Community.
     * @param {CommunityUpsertArgs} args - Arguments to update or create a Community.
     * @example
     * // Update or create a Community
     * const community = await prisma.community.upsert({
     *   create: {
     *     // ... data to create a Community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Community we want to update
     *   }
     * })
     */
    upsert<T extends CommunityUpsertArgs>(args: SelectSubset<T, CommunityUpsertArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Communities that matches the filter.
     * @param {CommunityFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const community = await prisma.community.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: CommunityFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Community.
     * @param {CommunityAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const community = await prisma.community.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CommunityAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityCountArgs} args - Arguments to filter Communities to count.
     * @example
     * // Count the number of Communities
     * const count = await prisma.community.count({
     *   where: {
     *     // ... the filter for the Communities we want to count
     *   }
     * })
    **/
    count<T extends CommunityCountArgs>(
      args?: Subset<T, CommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityAggregateArgs>(args: Subset<T, CommunityAggregateArgs>): Prisma.PrismaPromise<GetCommunityAggregateType<T>>

    /**
     * Group by Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityGroupByArgs['orderBy'] }
        : { orderBy?: CommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Community model
   */
  readonly fields: CommunityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Community$membersArgs<ExtArgs> = {}>(args?: Subset<T, Community$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "findMany"> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    admins<T extends Community$adminsArgs<ExtArgs> = {}>(args?: Subset<T, Community$adminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "findMany"> | Null>
    moderators<T extends Community$moderatorsArgs<ExtArgs> = {}>(args?: Subset<T, Community$moderatorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "findMany"> | Null>
    Conversation<T extends Community$ConversationArgs<ExtArgs> = {}>(args?: Subset<T, Community$ConversationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Community model
   */ 
  interface CommunityFieldRefs {
    readonly id: FieldRef<"Community", 'String'>
    readonly name: FieldRef<"Community", 'String'>
    readonly description: FieldRef<"Community", 'String'>
    readonly avatar: FieldRef<"Community", 'String'>
    readonly isPrivate: FieldRef<"Community", 'Boolean'>
    readonly createdBy: FieldRef<"Community", 'String'>
    readonly createdAt: FieldRef<"Community", 'DateTime'>
    readonly updatedAt: FieldRef<"Community", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Community findUnique
   */
  export type CommunityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findUniqueOrThrow
   */
  export type CommunityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findFirst
   */
  export type CommunityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community findFirstOrThrow
   */
  export type CommunityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community findMany
   */
  export type CommunityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Communities to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community create
   */
  export type CommunityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The data needed to create a Community.
     */
    data: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
  }

  /**
   * Community createMany
   */
  export type CommunityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Communities.
     */
    data: CommunityCreateManyInput | CommunityCreateManyInput[]
  }

  /**
   * Community update
   */
  export type CommunityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The data needed to update a Community.
     */
    data: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
    /**
     * Choose, which Community to update.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community updateMany
   */
  export type CommunityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Communities.
     */
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyInput>
    /**
     * Filter which Communities to update
     */
    where?: CommunityWhereInput
  }

  /**
   * Community upsert
   */
  export type CommunityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The filter to search for the Community to update in case it exists.
     */
    where: CommunityWhereUniqueInput
    /**
     * In case the Community found by the `where` argument doesn't exist, create a new Community with this data.
     */
    create: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
    /**
     * In case the Community was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
  }

  /**
   * Community delete
   */
  export type CommunityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter which Community to delete.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community deleteMany
   */
  export type CommunityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Communities to delete
     */
    where?: CommunityWhereInput
  }

  /**
   * Community findRaw
   */
  export type CommunityFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Community aggregateRaw
   */
  export type CommunityAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Community.members
   */
  export type Community$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    where?: CommunityMemberWhereInput
    orderBy?: CommunityMemberOrderByWithRelationInput | CommunityMemberOrderByWithRelationInput[]
    cursor?: CommunityMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityMemberScalarFieldEnum | CommunityMemberScalarFieldEnum[]
  }

  /**
   * Community.admins
   */
  export type Community$adminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    where?: CommunityAdminWhereInput
    orderBy?: CommunityAdminOrderByWithRelationInput | CommunityAdminOrderByWithRelationInput[]
    cursor?: CommunityAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityAdminScalarFieldEnum | CommunityAdminScalarFieldEnum[]
  }

  /**
   * Community.moderators
   */
  export type Community$moderatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    where?: CommunityModeratorWhereInput
    orderBy?: CommunityModeratorOrderByWithRelationInput | CommunityModeratorOrderByWithRelationInput[]
    cursor?: CommunityModeratorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityModeratorScalarFieldEnum | CommunityModeratorScalarFieldEnum[]
  }

  /**
   * Community.Conversation
   */
  export type Community$ConversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Community without action
   */
  export type CommunityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
  }


  /**
   * Model CommunityMember
   */

  export type AggregateCommunityMember = {
    _count: CommunityMemberCountAggregateOutputType | null
    _min: CommunityMemberMinAggregateOutputType | null
    _max: CommunityMemberMaxAggregateOutputType | null
  }

  export type CommunityMemberMinAggregateOutputType = {
    id: string | null
    communityId: string | null
    userId: string | null
    joinedAt: Date | null
  }

  export type CommunityMemberMaxAggregateOutputType = {
    id: string | null
    communityId: string | null
    userId: string | null
    joinedAt: Date | null
  }

  export type CommunityMemberCountAggregateOutputType = {
    id: number
    communityId: number
    userId: number
    joinedAt: number
    _all: number
  }


  export type CommunityMemberMinAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    joinedAt?: true
  }

  export type CommunityMemberMaxAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    joinedAt?: true
  }

  export type CommunityMemberCountAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    joinedAt?: true
    _all?: true
  }

  export type CommunityMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunityMember to aggregate.
     */
    where?: CommunityMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityMembers to fetch.
     */
    orderBy?: CommunityMemberOrderByWithRelationInput | CommunityMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommunityMembers
    **/
    _count?: true | CommunityMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityMemberMaxAggregateInputType
  }

  export type GetCommunityMemberAggregateType<T extends CommunityMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunityMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunityMember[P]>
      : GetScalarType<T[P], AggregateCommunityMember[P]>
  }




  export type CommunityMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityMemberWhereInput
    orderBy?: CommunityMemberOrderByWithAggregationInput | CommunityMemberOrderByWithAggregationInput[]
    by: CommunityMemberScalarFieldEnum[] | CommunityMemberScalarFieldEnum
    having?: CommunityMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityMemberCountAggregateInputType | true
    _min?: CommunityMemberMinAggregateInputType
    _max?: CommunityMemberMaxAggregateInputType
  }

  export type CommunityMemberGroupByOutputType = {
    id: string
    communityId: string
    userId: string
    joinedAt: Date
    _count: CommunityMemberCountAggregateOutputType | null
    _min: CommunityMemberMinAggregateOutputType | null
    _max: CommunityMemberMaxAggregateOutputType | null
  }

  type GetCommunityMemberGroupByPayload<T extends CommunityMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityMemberGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityMemberGroupByOutputType[P]>
        }
      >
    >


  export type CommunityMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    communityId?: boolean
    userId?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["communityMember"]>


  export type CommunityMemberSelectScalar = {
    id?: boolean
    communityId?: boolean
    userId?: boolean
    joinedAt?: boolean
  }

  export type CommunityMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }

  export type $CommunityMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommunityMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      community: Prisma.$CommunityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      communityId: string
      userId: string
      joinedAt: Date
    }, ExtArgs["result"]["communityMember"]>
    composites: {}
  }

  type CommunityMemberGetPayload<S extends boolean | null | undefined | CommunityMemberDefaultArgs> = $Result.GetResult<Prisma.$CommunityMemberPayload, S>

  type CommunityMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunityMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunityMemberCountAggregateInputType | true
    }

  export interface CommunityMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommunityMember'], meta: { name: 'CommunityMember' } }
    /**
     * Find zero or one CommunityMember that matches the filter.
     * @param {CommunityMemberFindUniqueArgs} args - Arguments to find a CommunityMember
     * @example
     * // Get one CommunityMember
     * const communityMember = await prisma.communityMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunityMemberFindUniqueArgs>(args: SelectSubset<T, CommunityMemberFindUniqueArgs<ExtArgs>>): Prisma__CommunityMemberClient<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommunityMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommunityMemberFindUniqueOrThrowArgs} args - Arguments to find a CommunityMember
     * @example
     * // Get one CommunityMember
     * const communityMember = await prisma.communityMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunityMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunityMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunityMemberClient<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommunityMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityMemberFindFirstArgs} args - Arguments to find a CommunityMember
     * @example
     * // Get one CommunityMember
     * const communityMember = await prisma.communityMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunityMemberFindFirstArgs>(args?: SelectSubset<T, CommunityMemberFindFirstArgs<ExtArgs>>): Prisma__CommunityMemberClient<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommunityMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityMemberFindFirstOrThrowArgs} args - Arguments to find a CommunityMember
     * @example
     * // Get one CommunityMember
     * const communityMember = await prisma.communityMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunityMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunityMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunityMemberClient<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommunityMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommunityMembers
     * const communityMembers = await prisma.communityMember.findMany()
     * 
     * // Get first 10 CommunityMembers
     * const communityMembers = await prisma.communityMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityMemberWithIdOnly = await prisma.communityMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunityMemberFindManyArgs>(args?: SelectSubset<T, CommunityMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommunityMember.
     * @param {CommunityMemberCreateArgs} args - Arguments to create a CommunityMember.
     * @example
     * // Create one CommunityMember
     * const CommunityMember = await prisma.communityMember.create({
     *   data: {
     *     // ... data to create a CommunityMember
     *   }
     * })
     * 
     */
    create<T extends CommunityMemberCreateArgs>(args: SelectSubset<T, CommunityMemberCreateArgs<ExtArgs>>): Prisma__CommunityMemberClient<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommunityMembers.
     * @param {CommunityMemberCreateManyArgs} args - Arguments to create many CommunityMembers.
     * @example
     * // Create many CommunityMembers
     * const communityMember = await prisma.communityMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunityMemberCreateManyArgs>(args?: SelectSubset<T, CommunityMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommunityMember.
     * @param {CommunityMemberDeleteArgs} args - Arguments to delete one CommunityMember.
     * @example
     * // Delete one CommunityMember
     * const CommunityMember = await prisma.communityMember.delete({
     *   where: {
     *     // ... filter to delete one CommunityMember
     *   }
     * })
     * 
     */
    delete<T extends CommunityMemberDeleteArgs>(args: SelectSubset<T, CommunityMemberDeleteArgs<ExtArgs>>): Prisma__CommunityMemberClient<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommunityMember.
     * @param {CommunityMemberUpdateArgs} args - Arguments to update one CommunityMember.
     * @example
     * // Update one CommunityMember
     * const communityMember = await prisma.communityMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunityMemberUpdateArgs>(args: SelectSubset<T, CommunityMemberUpdateArgs<ExtArgs>>): Prisma__CommunityMemberClient<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommunityMembers.
     * @param {CommunityMemberDeleteManyArgs} args - Arguments to filter CommunityMembers to delete.
     * @example
     * // Delete a few CommunityMembers
     * const { count } = await prisma.communityMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunityMemberDeleteManyArgs>(args?: SelectSubset<T, CommunityMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommunityMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommunityMembers
     * const communityMember = await prisma.communityMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunityMemberUpdateManyArgs>(args: SelectSubset<T, CommunityMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommunityMember.
     * @param {CommunityMemberUpsertArgs} args - Arguments to update or create a CommunityMember.
     * @example
     * // Update or create a CommunityMember
     * const communityMember = await prisma.communityMember.upsert({
     *   create: {
     *     // ... data to create a CommunityMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommunityMember we want to update
     *   }
     * })
     */
    upsert<T extends CommunityMemberUpsertArgs>(args: SelectSubset<T, CommunityMemberUpsertArgs<ExtArgs>>): Prisma__CommunityMemberClient<$Result.GetResult<Prisma.$CommunityMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more CommunityMembers that matches the filter.
     * @param {CommunityMemberFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const communityMember = await prisma.communityMember.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: CommunityMemberFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a CommunityMember.
     * @param {CommunityMemberAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const communityMember = await prisma.communityMember.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CommunityMemberAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of CommunityMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityMemberCountArgs} args - Arguments to filter CommunityMembers to count.
     * @example
     * // Count the number of CommunityMembers
     * const count = await prisma.communityMember.count({
     *   where: {
     *     // ... the filter for the CommunityMembers we want to count
     *   }
     * })
    **/
    count<T extends CommunityMemberCountArgs>(
      args?: Subset<T, CommunityMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommunityMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityMemberAggregateArgs>(args: Subset<T, CommunityMemberAggregateArgs>): Prisma.PrismaPromise<GetCommunityMemberAggregateType<T>>

    /**
     * Group by CommunityMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityMemberGroupByArgs['orderBy'] }
        : { orderBy?: CommunityMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommunityMember model
   */
  readonly fields: CommunityMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommunityMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunityMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommunityMember model
   */ 
  interface CommunityMemberFieldRefs {
    readonly id: FieldRef<"CommunityMember", 'String'>
    readonly communityId: FieldRef<"CommunityMember", 'String'>
    readonly userId: FieldRef<"CommunityMember", 'String'>
    readonly joinedAt: FieldRef<"CommunityMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommunityMember findUnique
   */
  export type CommunityMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * Filter, which CommunityMember to fetch.
     */
    where: CommunityMemberWhereUniqueInput
  }

  /**
   * CommunityMember findUniqueOrThrow
   */
  export type CommunityMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * Filter, which CommunityMember to fetch.
     */
    where: CommunityMemberWhereUniqueInput
  }

  /**
   * CommunityMember findFirst
   */
  export type CommunityMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * Filter, which CommunityMember to fetch.
     */
    where?: CommunityMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityMembers to fetch.
     */
    orderBy?: CommunityMemberOrderByWithRelationInput | CommunityMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunityMembers.
     */
    cursor?: CommunityMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunityMembers.
     */
    distinct?: CommunityMemberScalarFieldEnum | CommunityMemberScalarFieldEnum[]
  }

  /**
   * CommunityMember findFirstOrThrow
   */
  export type CommunityMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * Filter, which CommunityMember to fetch.
     */
    where?: CommunityMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityMembers to fetch.
     */
    orderBy?: CommunityMemberOrderByWithRelationInput | CommunityMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunityMembers.
     */
    cursor?: CommunityMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunityMembers.
     */
    distinct?: CommunityMemberScalarFieldEnum | CommunityMemberScalarFieldEnum[]
  }

  /**
   * CommunityMember findMany
   */
  export type CommunityMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * Filter, which CommunityMembers to fetch.
     */
    where?: CommunityMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityMembers to fetch.
     */
    orderBy?: CommunityMemberOrderByWithRelationInput | CommunityMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommunityMembers.
     */
    cursor?: CommunityMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityMembers.
     */
    skip?: number
    distinct?: CommunityMemberScalarFieldEnum | CommunityMemberScalarFieldEnum[]
  }

  /**
   * CommunityMember create
   */
  export type CommunityMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a CommunityMember.
     */
    data: XOR<CommunityMemberCreateInput, CommunityMemberUncheckedCreateInput>
  }

  /**
   * CommunityMember createMany
   */
  export type CommunityMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommunityMembers.
     */
    data: CommunityMemberCreateManyInput | CommunityMemberCreateManyInput[]
  }

  /**
   * CommunityMember update
   */
  export type CommunityMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a CommunityMember.
     */
    data: XOR<CommunityMemberUpdateInput, CommunityMemberUncheckedUpdateInput>
    /**
     * Choose, which CommunityMember to update.
     */
    where: CommunityMemberWhereUniqueInput
  }

  /**
   * CommunityMember updateMany
   */
  export type CommunityMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommunityMembers.
     */
    data: XOR<CommunityMemberUpdateManyMutationInput, CommunityMemberUncheckedUpdateManyInput>
    /**
     * Filter which CommunityMembers to update
     */
    where?: CommunityMemberWhereInput
  }

  /**
   * CommunityMember upsert
   */
  export type CommunityMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the CommunityMember to update in case it exists.
     */
    where: CommunityMemberWhereUniqueInput
    /**
     * In case the CommunityMember found by the `where` argument doesn't exist, create a new CommunityMember with this data.
     */
    create: XOR<CommunityMemberCreateInput, CommunityMemberUncheckedCreateInput>
    /**
     * In case the CommunityMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityMemberUpdateInput, CommunityMemberUncheckedUpdateInput>
  }

  /**
   * CommunityMember delete
   */
  export type CommunityMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
    /**
     * Filter which CommunityMember to delete.
     */
    where: CommunityMemberWhereUniqueInput
  }

  /**
   * CommunityMember deleteMany
   */
  export type CommunityMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunityMembers to delete
     */
    where?: CommunityMemberWhereInput
  }

  /**
   * CommunityMember findRaw
   */
  export type CommunityMemberFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CommunityMember aggregateRaw
   */
  export type CommunityMemberAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CommunityMember without action
   */
  export type CommunityMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityMember
     */
    select?: CommunityMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityMemberInclude<ExtArgs> | null
  }


  /**
   * Model UserStats
   */

  export type AggregateUserStats = {
    _count: UserStatsCountAggregateOutputType | null
    _avg: UserStatsAvgAggregateOutputType | null
    _sum: UserStatsSumAggregateOutputType | null
    _min: UserStatsMinAggregateOutputType | null
    _max: UserStatsMaxAggregateOutputType | null
  }

  export type UserStatsAvgAggregateOutputType = {
    messagesSent: number | null
    messagesReceived: number | null
    charactersTyped: number | null
    imageMessagesSent: number | null
    filesShared: number | null
    conversationsJoined: number | null
    communitiesCreated: number | null
    friendsAdded: number | null
    friendRequestsSent: number | null
    translationsUsed: number | null
    languagesDetected: number | null
    autoTranslateTimeMinutes: number | null
    totalOnlineTimeMinutes: number | null
    sessionCount: number | null
  }

  export type UserStatsSumAggregateOutputType = {
    messagesSent: number | null
    messagesReceived: number | null
    charactersTyped: number | null
    imageMessagesSent: number | null
    filesShared: number | null
    conversationsJoined: number | null
    communitiesCreated: number | null
    friendsAdded: number | null
    friendRequestsSent: number | null
    translationsUsed: number | null
    languagesDetected: number | null
    autoTranslateTimeMinutes: number | null
    totalOnlineTimeMinutes: number | null
    sessionCount: number | null
  }

  export type UserStatsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    messagesSent: number | null
    messagesReceived: number | null
    charactersTyped: number | null
    imageMessagesSent: number | null
    filesShared: number | null
    conversationsJoined: number | null
    communitiesCreated: number | null
    friendsAdded: number | null
    friendRequestsSent: number | null
    translationsUsed: number | null
    languagesDetected: number | null
    autoTranslateTimeMinutes: number | null
    totalOnlineTimeMinutes: number | null
    sessionCount: number | null
    lastActiveAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStatsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    messagesSent: number | null
    messagesReceived: number | null
    charactersTyped: number | null
    imageMessagesSent: number | null
    filesShared: number | null
    conversationsJoined: number | null
    communitiesCreated: number | null
    friendsAdded: number | null
    friendRequestsSent: number | null
    translationsUsed: number | null
    languagesDetected: number | null
    autoTranslateTimeMinutes: number | null
    totalOnlineTimeMinutes: number | null
    sessionCount: number | null
    lastActiveAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStatsCountAggregateOutputType = {
    id: number
    userId: number
    messagesSent: number
    messagesReceived: number
    charactersTyped: number
    imageMessagesSent: number
    filesShared: number
    conversationsJoined: number
    communitiesCreated: number
    friendsAdded: number
    friendRequestsSent: number
    translationsUsed: number
    languagesDetected: number
    autoTranslateTimeMinutes: number
    totalOnlineTimeMinutes: number
    sessionCount: number
    lastActiveAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserStatsAvgAggregateInputType = {
    messagesSent?: true
    messagesReceived?: true
    charactersTyped?: true
    imageMessagesSent?: true
    filesShared?: true
    conversationsJoined?: true
    communitiesCreated?: true
    friendsAdded?: true
    friendRequestsSent?: true
    translationsUsed?: true
    languagesDetected?: true
    autoTranslateTimeMinutes?: true
    totalOnlineTimeMinutes?: true
    sessionCount?: true
  }

  export type UserStatsSumAggregateInputType = {
    messagesSent?: true
    messagesReceived?: true
    charactersTyped?: true
    imageMessagesSent?: true
    filesShared?: true
    conversationsJoined?: true
    communitiesCreated?: true
    friendsAdded?: true
    friendRequestsSent?: true
    translationsUsed?: true
    languagesDetected?: true
    autoTranslateTimeMinutes?: true
    totalOnlineTimeMinutes?: true
    sessionCount?: true
  }

  export type UserStatsMinAggregateInputType = {
    id?: true
    userId?: true
    messagesSent?: true
    messagesReceived?: true
    charactersTyped?: true
    imageMessagesSent?: true
    filesShared?: true
    conversationsJoined?: true
    communitiesCreated?: true
    friendsAdded?: true
    friendRequestsSent?: true
    translationsUsed?: true
    languagesDetected?: true
    autoTranslateTimeMinutes?: true
    totalOnlineTimeMinutes?: true
    sessionCount?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStatsMaxAggregateInputType = {
    id?: true
    userId?: true
    messagesSent?: true
    messagesReceived?: true
    charactersTyped?: true
    imageMessagesSent?: true
    filesShared?: true
    conversationsJoined?: true
    communitiesCreated?: true
    friendsAdded?: true
    friendRequestsSent?: true
    translationsUsed?: true
    languagesDetected?: true
    autoTranslateTimeMinutes?: true
    totalOnlineTimeMinutes?: true
    sessionCount?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStatsCountAggregateInputType = {
    id?: true
    userId?: true
    messagesSent?: true
    messagesReceived?: true
    charactersTyped?: true
    imageMessagesSent?: true
    filesShared?: true
    conversationsJoined?: true
    communitiesCreated?: true
    friendsAdded?: true
    friendRequestsSent?: true
    translationsUsed?: true
    languagesDetected?: true
    autoTranslateTimeMinutes?: true
    totalOnlineTimeMinutes?: true
    sessionCount?: true
    lastActiveAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStats to aggregate.
     */
    where?: UserStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStats to fetch.
     */
    orderBy?: UserStatsOrderByWithRelationInput | UserStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStats
    **/
    _count?: true | UserStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStatsMaxAggregateInputType
  }

  export type GetUserStatsAggregateType<T extends UserStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStats[P]>
      : GetScalarType<T[P], AggregateUserStats[P]>
  }




  export type UserStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStatsWhereInput
    orderBy?: UserStatsOrderByWithAggregationInput | UserStatsOrderByWithAggregationInput[]
    by: UserStatsScalarFieldEnum[] | UserStatsScalarFieldEnum
    having?: UserStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStatsCountAggregateInputType | true
    _avg?: UserStatsAvgAggregateInputType
    _sum?: UserStatsSumAggregateInputType
    _min?: UserStatsMinAggregateInputType
    _max?: UserStatsMaxAggregateInputType
  }

  export type UserStatsGroupByOutputType = {
    id: string
    userId: string
    messagesSent: number
    messagesReceived: number
    charactersTyped: number
    imageMessagesSent: number
    filesShared: number
    conversationsJoined: number
    communitiesCreated: number
    friendsAdded: number
    friendRequestsSent: number
    translationsUsed: number
    languagesDetected: number
    autoTranslateTimeMinutes: number
    totalOnlineTimeMinutes: number
    sessionCount: number
    lastActiveAt: Date
    createdAt: Date
    updatedAt: Date
    _count: UserStatsCountAggregateOutputType | null
    _avg: UserStatsAvgAggregateOutputType | null
    _sum: UserStatsSumAggregateOutputType | null
    _min: UserStatsMinAggregateOutputType | null
    _max: UserStatsMaxAggregateOutputType | null
  }

  type GetUserStatsGroupByPayload<T extends UserStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStatsGroupByOutputType[P]>
            : GetScalarType<T[P], UserStatsGroupByOutputType[P]>
        }
      >
    >


  export type UserStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    messagesSent?: boolean
    messagesReceived?: boolean
    charactersTyped?: boolean
    imageMessagesSent?: boolean
    filesShared?: boolean
    conversationsJoined?: boolean
    communitiesCreated?: boolean
    friendsAdded?: boolean
    friendRequestsSent?: boolean
    translationsUsed?: boolean
    languagesDetected?: boolean
    autoTranslateTimeMinutes?: boolean
    totalOnlineTimeMinutes?: boolean
    sessionCount?: boolean
    lastActiveAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStats"]>


  export type UserStatsSelectScalar = {
    id?: boolean
    userId?: boolean
    messagesSent?: boolean
    messagesReceived?: boolean
    charactersTyped?: boolean
    imageMessagesSent?: boolean
    filesShared?: boolean
    conversationsJoined?: boolean
    communitiesCreated?: boolean
    friendsAdded?: boolean
    friendRequestsSent?: boolean
    translationsUsed?: boolean
    languagesDetected?: boolean
    autoTranslateTimeMinutes?: boolean
    totalOnlineTimeMinutes?: boolean
    sessionCount?: boolean
    lastActiveAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStats"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      messagesSent: number
      messagesReceived: number
      charactersTyped: number
      imageMessagesSent: number
      filesShared: number
      conversationsJoined: number
      communitiesCreated: number
      friendsAdded: number
      friendRequestsSent: number
      translationsUsed: number
      languagesDetected: number
      autoTranslateTimeMinutes: number
      totalOnlineTimeMinutes: number
      sessionCount: number
      lastActiveAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userStats"]>
    composites: {}
  }

  type UserStatsGetPayload<S extends boolean | null | undefined | UserStatsDefaultArgs> = $Result.GetResult<Prisma.$UserStatsPayload, S>

  type UserStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserStatsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserStatsCountAggregateInputType | true
    }

  export interface UserStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStats'], meta: { name: 'UserStats' } }
    /**
     * Find zero or one UserStats that matches the filter.
     * @param {UserStatsFindUniqueArgs} args - Arguments to find a UserStats
     * @example
     * // Get one UserStats
     * const userStats = await prisma.userStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStatsFindUniqueArgs>(args: SelectSubset<T, UserStatsFindUniqueArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserStatsFindUniqueOrThrowArgs} args - Arguments to find a UserStats
     * @example
     * // Get one UserStats
     * const userStats = await prisma.userStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsFindFirstArgs} args - Arguments to find a UserStats
     * @example
     * // Get one UserStats
     * const userStats = await prisma.userStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStatsFindFirstArgs>(args?: SelectSubset<T, UserStatsFindFirstArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsFindFirstOrThrowArgs} args - Arguments to find a UserStats
     * @example
     * // Get one UserStats
     * const userStats = await prisma.userStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStats
     * const userStats = await prisma.userStats.findMany()
     * 
     * // Get first 10 UserStats
     * const userStats = await prisma.userStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStatsWithIdOnly = await prisma.userStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStatsFindManyArgs>(args?: SelectSubset<T, UserStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserStats.
     * @param {UserStatsCreateArgs} args - Arguments to create a UserStats.
     * @example
     * // Create one UserStats
     * const UserStats = await prisma.userStats.create({
     *   data: {
     *     // ... data to create a UserStats
     *   }
     * })
     * 
     */
    create<T extends UserStatsCreateArgs>(args: SelectSubset<T, UserStatsCreateArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserStats.
     * @param {UserStatsCreateManyArgs} args - Arguments to create many UserStats.
     * @example
     * // Create many UserStats
     * const userStats = await prisma.userStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStatsCreateManyArgs>(args?: SelectSubset<T, UserStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserStats.
     * @param {UserStatsDeleteArgs} args - Arguments to delete one UserStats.
     * @example
     * // Delete one UserStats
     * const UserStats = await prisma.userStats.delete({
     *   where: {
     *     // ... filter to delete one UserStats
     *   }
     * })
     * 
     */
    delete<T extends UserStatsDeleteArgs>(args: SelectSubset<T, UserStatsDeleteArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserStats.
     * @param {UserStatsUpdateArgs} args - Arguments to update one UserStats.
     * @example
     * // Update one UserStats
     * const userStats = await prisma.userStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStatsUpdateArgs>(args: SelectSubset<T, UserStatsUpdateArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserStats.
     * @param {UserStatsDeleteManyArgs} args - Arguments to filter UserStats to delete.
     * @example
     * // Delete a few UserStats
     * const { count } = await prisma.userStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStatsDeleteManyArgs>(args?: SelectSubset<T, UserStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStats
     * const userStats = await prisma.userStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStatsUpdateManyArgs>(args: SelectSubset<T, UserStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserStats.
     * @param {UserStatsUpsertArgs} args - Arguments to update or create a UserStats.
     * @example
     * // Update or create a UserStats
     * const userStats = await prisma.userStats.upsert({
     *   create: {
     *     // ... data to create a UserStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStats we want to update
     *   }
     * })
     */
    upsert<T extends UserStatsUpsertArgs>(args: SelectSubset<T, UserStatsUpsertArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more UserStats that matches the filter.
     * @param {UserStatsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userStats = await prisma.userStats.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserStatsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserStats.
     * @param {UserStatsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userStats = await prisma.userStats.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserStatsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of UserStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsCountArgs} args - Arguments to filter UserStats to count.
     * @example
     * // Count the number of UserStats
     * const count = await prisma.userStats.count({
     *   where: {
     *     // ... the filter for the UserStats we want to count
     *   }
     * })
    **/
    count<T extends UserStatsCountArgs>(
      args?: Subset<T, UserStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStatsAggregateArgs>(args: Subset<T, UserStatsAggregateArgs>): Prisma.PrismaPromise<GetUserStatsAggregateType<T>>

    /**
     * Group by UserStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStatsGroupByArgs['orderBy'] }
        : { orderBy?: UserStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStats model
   */
  readonly fields: UserStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStats model
   */ 
  interface UserStatsFieldRefs {
    readonly id: FieldRef<"UserStats", 'String'>
    readonly userId: FieldRef<"UserStats", 'String'>
    readonly messagesSent: FieldRef<"UserStats", 'Int'>
    readonly messagesReceived: FieldRef<"UserStats", 'Int'>
    readonly charactersTyped: FieldRef<"UserStats", 'Int'>
    readonly imageMessagesSent: FieldRef<"UserStats", 'Int'>
    readonly filesShared: FieldRef<"UserStats", 'Int'>
    readonly conversationsJoined: FieldRef<"UserStats", 'Int'>
    readonly communitiesCreated: FieldRef<"UserStats", 'Int'>
    readonly friendsAdded: FieldRef<"UserStats", 'Int'>
    readonly friendRequestsSent: FieldRef<"UserStats", 'Int'>
    readonly translationsUsed: FieldRef<"UserStats", 'Int'>
    readonly languagesDetected: FieldRef<"UserStats", 'Int'>
    readonly autoTranslateTimeMinutes: FieldRef<"UserStats", 'Int'>
    readonly totalOnlineTimeMinutes: FieldRef<"UserStats", 'Int'>
    readonly sessionCount: FieldRef<"UserStats", 'Int'>
    readonly lastActiveAt: FieldRef<"UserStats", 'DateTime'>
    readonly createdAt: FieldRef<"UserStats", 'DateTime'>
    readonly updatedAt: FieldRef<"UserStats", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserStats findUnique
   */
  export type UserStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where: UserStatsWhereUniqueInput
  }

  /**
   * UserStats findUniqueOrThrow
   */
  export type UserStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where: UserStatsWhereUniqueInput
  }

  /**
   * UserStats findFirst
   */
  export type UserStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where?: UserStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStats to fetch.
     */
    orderBy?: UserStatsOrderByWithRelationInput | UserStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStats.
     */
    cursor?: UserStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStats.
     */
    distinct?: UserStatsScalarFieldEnum | UserStatsScalarFieldEnum[]
  }

  /**
   * UserStats findFirstOrThrow
   */
  export type UserStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where?: UserStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStats to fetch.
     */
    orderBy?: UserStatsOrderByWithRelationInput | UserStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStats.
     */
    cursor?: UserStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStats.
     */
    distinct?: UserStatsScalarFieldEnum | UserStatsScalarFieldEnum[]
  }

  /**
   * UserStats findMany
   */
  export type UserStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where?: UserStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStats to fetch.
     */
    orderBy?: UserStatsOrderByWithRelationInput | UserStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStats.
     */
    cursor?: UserStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStats.
     */
    skip?: number
    distinct?: UserStatsScalarFieldEnum | UserStatsScalarFieldEnum[]
  }

  /**
   * UserStats create
   */
  export type UserStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStats.
     */
    data: XOR<UserStatsCreateInput, UserStatsUncheckedCreateInput>
  }

  /**
   * UserStats createMany
   */
  export type UserStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStats.
     */
    data: UserStatsCreateManyInput | UserStatsCreateManyInput[]
  }

  /**
   * UserStats update
   */
  export type UserStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStats.
     */
    data: XOR<UserStatsUpdateInput, UserStatsUncheckedUpdateInput>
    /**
     * Choose, which UserStats to update.
     */
    where: UserStatsWhereUniqueInput
  }

  /**
   * UserStats updateMany
   */
  export type UserStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStats.
     */
    data: XOR<UserStatsUpdateManyMutationInput, UserStatsUncheckedUpdateManyInput>
    /**
     * Filter which UserStats to update
     */
    where?: UserStatsWhereInput
  }

  /**
   * UserStats upsert
   */
  export type UserStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStats to update in case it exists.
     */
    where: UserStatsWhereUniqueInput
    /**
     * In case the UserStats found by the `where` argument doesn't exist, create a new UserStats with this data.
     */
    create: XOR<UserStatsCreateInput, UserStatsUncheckedCreateInput>
    /**
     * In case the UserStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStatsUpdateInput, UserStatsUncheckedUpdateInput>
  }

  /**
   * UserStats delete
   */
  export type UserStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter which UserStats to delete.
     */
    where: UserStatsWhereUniqueInput
  }

  /**
   * UserStats deleteMany
   */
  export type UserStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStats to delete
     */
    where?: UserStatsWhereInput
  }

  /**
   * UserStats findRaw
   */
  export type UserStatsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserStats aggregateRaw
   */
  export type UserStatsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserStats without action
   */
  export type UserStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
  }


  /**
   * Model UserPreference
   */

  export type AggregateUserPreference = {
    _count: UserPreferenceCountAggregateOutputType | null
    _min: UserPreferenceMinAggregateOutputType | null
    _max: UserPreferenceMaxAggregateOutputType | null
  }

  export type UserPreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    key: string | null
    value: string | null
    valueType: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    key: string | null
    value: string | null
    valueType: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    key: number
    value: number
    valueType: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    key?: true
    value?: true
    valueType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    key?: true
    value?: true
    valueType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    key?: true
    value?: true
    valueType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreference to aggregate.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferenceMaxAggregateInputType
  }

  export type GetUserPreferenceAggregateType<T extends UserPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreference[P]>
      : GetScalarType<T[P], AggregateUserPreference[P]>
  }




  export type UserPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferenceWhereInput
    orderBy?: UserPreferenceOrderByWithAggregationInput | UserPreferenceOrderByWithAggregationInput[]
    by: UserPreferenceScalarFieldEnum[] | UserPreferenceScalarFieldEnum
    having?: UserPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferenceCountAggregateInputType | true
    _min?: UserPreferenceMinAggregateInputType
    _max?: UserPreferenceMaxAggregateInputType
  }

  export type UserPreferenceGroupByOutputType = {
    id: string
    userId: string
    key: string
    value: string
    valueType: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserPreferenceCountAggregateOutputType | null
    _min: UserPreferenceMinAggregateOutputType | null
    _max: UserPreferenceMaxAggregateOutputType | null
  }

  type GetUserPreferenceGroupByPayload<T extends UserPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    key?: boolean
    value?: boolean
    valueType?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreference"]>


  export type UserPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    key?: boolean
    value?: boolean
    valueType?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      key: string
      value: string
      valueType: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPreference"]>
    composites: {}
  }

  type UserPreferenceGetPayload<S extends boolean | null | undefined | UserPreferenceDefaultArgs> = $Result.GetResult<Prisma.$UserPreferencePayload, S>

  type UserPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPreferenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPreferenceCountAggregateInputType | true
    }

  export interface UserPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreference'], meta: { name: 'UserPreference' } }
    /**
     * Find zero or one UserPreference that matches the filter.
     * @param {UserPreferenceFindUniqueArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPreferenceFindUniqueArgs>(args: SelectSubset<T, UserPreferenceFindUniqueArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPreference that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPreferenceFindUniqueOrThrowArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindFirstArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPreferenceFindFirstArgs>(args?: SelectSubset<T, UserPreferenceFindFirstArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindFirstOrThrowArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreference.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPreferenceWithIdOnly = await prisma.userPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPreferenceFindManyArgs>(args?: SelectSubset<T, UserPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPreference.
     * @param {UserPreferenceCreateArgs} args - Arguments to create a UserPreference.
     * @example
     * // Create one UserPreference
     * const UserPreference = await prisma.userPreference.create({
     *   data: {
     *     // ... data to create a UserPreference
     *   }
     * })
     * 
     */
    create<T extends UserPreferenceCreateArgs>(args: SelectSubset<T, UserPreferenceCreateArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPreferences.
     * @param {UserPreferenceCreateManyArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreference = await prisma.userPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPreferenceCreateManyArgs>(args?: SelectSubset<T, UserPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserPreference.
     * @param {UserPreferenceDeleteArgs} args - Arguments to delete one UserPreference.
     * @example
     * // Delete one UserPreference
     * const UserPreference = await prisma.userPreference.delete({
     *   where: {
     *     // ... filter to delete one UserPreference
     *   }
     * })
     * 
     */
    delete<T extends UserPreferenceDeleteArgs>(args: SelectSubset<T, UserPreferenceDeleteArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPreference.
     * @param {UserPreferenceUpdateArgs} args - Arguments to update one UserPreference.
     * @example
     * // Update one UserPreference
     * const userPreference = await prisma.userPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPreferenceUpdateArgs>(args: SelectSubset<T, UserPreferenceUpdateArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferenceDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPreferenceDeleteManyArgs>(args?: SelectSubset<T, UserPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreference = await prisma.userPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPreferenceUpdateManyArgs>(args: SelectSubset<T, UserPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPreference.
     * @param {UserPreferenceUpsertArgs} args - Arguments to update or create a UserPreference.
     * @example
     * // Update or create a UserPreference
     * const userPreference = await prisma.userPreference.upsert({
     *   create: {
     *     // ... data to create a UserPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreference we want to update
     *   }
     * })
     */
    upsert<T extends UserPreferenceUpsertArgs>(args: SelectSubset<T, UserPreferenceUpsertArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * @param {UserPreferenceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userPreference = await prisma.userPreference.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserPreferenceFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserPreference.
     * @param {UserPreferenceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userPreference = await prisma.userPreference.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserPreferenceAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreference.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferenceCountArgs>(
      args?: Subset<T, UserPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferenceAggregateArgs>(args: Subset<T, UserPreferenceAggregateArgs>): Prisma.PrismaPromise<GetUserPreferenceAggregateType<T>>

    /**
     * Group by UserPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPreference model
   */
  readonly fields: UserPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPreference model
   */ 
  interface UserPreferenceFieldRefs {
    readonly id: FieldRef<"UserPreference", 'String'>
    readonly userId: FieldRef<"UserPreference", 'String'>
    readonly key: FieldRef<"UserPreference", 'String'>
    readonly value: FieldRef<"UserPreference", 'String'>
    readonly valueType: FieldRef<"UserPreference", 'String'>
    readonly description: FieldRef<"UserPreference", 'String'>
    readonly createdAt: FieldRef<"UserPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPreference findUnique
   */
  export type UserPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference findUniqueOrThrow
   */
  export type UserPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference findFirst
   */
  export type UserPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference findFirstOrThrow
   */
  export type UserPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference findMany
   */
  export type UserPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference create
   */
  export type UserPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreference.
     */
    data: XOR<UserPreferenceCreateInput, UserPreferenceUncheckedCreateInput>
  }

  /**
   * UserPreference createMany
   */
  export type UserPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferenceCreateManyInput | UserPreferenceCreateManyInput[]
  }

  /**
   * UserPreference update
   */
  export type UserPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreference.
     */
    data: XOR<UserPreferenceUpdateInput, UserPreferenceUncheckedUpdateInput>
    /**
     * Choose, which UserPreference to update.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference updateMany
   */
  export type UserPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferenceUpdateManyMutationInput, UserPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferenceWhereInput
  }

  /**
   * UserPreference upsert
   */
  export type UserPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreference to update in case it exists.
     */
    where: UserPreferenceWhereUniqueInput
    /**
     * In case the UserPreference found by the `where` argument doesn't exist, create a new UserPreference with this data.
     */
    create: XOR<UserPreferenceCreateInput, UserPreferenceUncheckedCreateInput>
    /**
     * In case the UserPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferenceUpdateInput, UserPreferenceUncheckedUpdateInput>
  }

  /**
   * UserPreference delete
   */
  export type UserPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter which UserPreference to delete.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference deleteMany
   */
  export type UserPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferenceWhereInput
  }

  /**
   * UserPreference findRaw
   */
  export type UserPreferenceFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserPreference aggregateRaw
   */
  export type UserPreferenceAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserPreference without action
   */
  export type UserPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model ConversationPreference
   */

  export type AggregateConversationPreference = {
    _count: ConversationPreferenceCountAggregateOutputType | null
    _min: ConversationPreferenceMinAggregateOutputType | null
    _max: ConversationPreferenceMaxAggregateOutputType | null
  }

  export type ConversationPreferenceMinAggregateOutputType = {
    id: string | null
    conversationId: string | null
    userId: string | null
    key: string | null
    value: string | null
    valueType: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationPreferenceMaxAggregateOutputType = {
    id: string | null
    conversationId: string | null
    userId: string | null
    key: string | null
    value: string | null
    valueType: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationPreferenceCountAggregateOutputType = {
    id: number
    conversationId: number
    userId: number
    key: number
    value: number
    valueType: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConversationPreferenceMinAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    key?: true
    value?: true
    valueType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationPreferenceMaxAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    key?: true
    value?: true
    valueType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationPreferenceCountAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    key?: true
    value?: true
    valueType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConversationPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationPreference to aggregate.
     */
    where?: ConversationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationPreferences to fetch.
     */
    orderBy?: ConversationPreferenceOrderByWithRelationInput | ConversationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConversationPreferences
    **/
    _count?: true | ConversationPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationPreferenceMaxAggregateInputType
  }

  export type GetConversationPreferenceAggregateType<T extends ConversationPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateConversationPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversationPreference[P]>
      : GetScalarType<T[P], AggregateConversationPreference[P]>
  }




  export type ConversationPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationPreferenceWhereInput
    orderBy?: ConversationPreferenceOrderByWithAggregationInput | ConversationPreferenceOrderByWithAggregationInput[]
    by: ConversationPreferenceScalarFieldEnum[] | ConversationPreferenceScalarFieldEnum
    having?: ConversationPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationPreferenceCountAggregateInputType | true
    _min?: ConversationPreferenceMinAggregateInputType
    _max?: ConversationPreferenceMaxAggregateInputType
  }

  export type ConversationPreferenceGroupByOutputType = {
    id: string
    conversationId: string
    userId: string
    key: string
    value: string
    valueType: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ConversationPreferenceCountAggregateOutputType | null
    _min: ConversationPreferenceMinAggregateOutputType | null
    _max: ConversationPreferenceMaxAggregateOutputType | null
  }

  type GetConversationPreferenceGroupByPayload<T extends ConversationPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type ConversationPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    key?: boolean
    value?: boolean
    valueType?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversationPreference"]>


  export type ConversationPreferenceSelectScalar = {
    id?: boolean
    conversationId?: boolean
    userId?: boolean
    key?: boolean
    value?: boolean
    valueType?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConversationPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }

  export type $ConversationPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConversationPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conversationId: string
      userId: string
      key: string
      value: string
      valueType: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["conversationPreference"]>
    composites: {}
  }

  type ConversationPreferenceGetPayload<S extends boolean | null | undefined | ConversationPreferenceDefaultArgs> = $Result.GetResult<Prisma.$ConversationPreferencePayload, S>

  type ConversationPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationPreferenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConversationPreferenceCountAggregateInputType | true
    }

  export interface ConversationPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConversationPreference'], meta: { name: 'ConversationPreference' } }
    /**
     * Find zero or one ConversationPreference that matches the filter.
     * @param {ConversationPreferenceFindUniqueArgs} args - Arguments to find a ConversationPreference
     * @example
     * // Get one ConversationPreference
     * const conversationPreference = await prisma.conversationPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationPreferenceFindUniqueArgs>(args: SelectSubset<T, ConversationPreferenceFindUniqueArgs<ExtArgs>>): Prisma__ConversationPreferenceClient<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConversationPreference that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConversationPreferenceFindUniqueOrThrowArgs} args - Arguments to find a ConversationPreference
     * @example
     * // Get one ConversationPreference
     * const conversationPreference = await prisma.conversationPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationPreferenceClient<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConversationPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationPreferenceFindFirstArgs} args - Arguments to find a ConversationPreference
     * @example
     * // Get one ConversationPreference
     * const conversationPreference = await prisma.conversationPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationPreferenceFindFirstArgs>(args?: SelectSubset<T, ConversationPreferenceFindFirstArgs<ExtArgs>>): Prisma__ConversationPreferenceClient<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConversationPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationPreferenceFindFirstOrThrowArgs} args - Arguments to find a ConversationPreference
     * @example
     * // Get one ConversationPreference
     * const conversationPreference = await prisma.conversationPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationPreferenceClient<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConversationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConversationPreferences
     * const conversationPreferences = await prisma.conversationPreference.findMany()
     * 
     * // Get first 10 ConversationPreferences
     * const conversationPreferences = await prisma.conversationPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationPreferenceWithIdOnly = await prisma.conversationPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationPreferenceFindManyArgs>(args?: SelectSubset<T, ConversationPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConversationPreference.
     * @param {ConversationPreferenceCreateArgs} args - Arguments to create a ConversationPreference.
     * @example
     * // Create one ConversationPreference
     * const ConversationPreference = await prisma.conversationPreference.create({
     *   data: {
     *     // ... data to create a ConversationPreference
     *   }
     * })
     * 
     */
    create<T extends ConversationPreferenceCreateArgs>(args: SelectSubset<T, ConversationPreferenceCreateArgs<ExtArgs>>): Prisma__ConversationPreferenceClient<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConversationPreferences.
     * @param {ConversationPreferenceCreateManyArgs} args - Arguments to create many ConversationPreferences.
     * @example
     * // Create many ConversationPreferences
     * const conversationPreference = await prisma.conversationPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationPreferenceCreateManyArgs>(args?: SelectSubset<T, ConversationPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ConversationPreference.
     * @param {ConversationPreferenceDeleteArgs} args - Arguments to delete one ConversationPreference.
     * @example
     * // Delete one ConversationPreference
     * const ConversationPreference = await prisma.conversationPreference.delete({
     *   where: {
     *     // ... filter to delete one ConversationPreference
     *   }
     * })
     * 
     */
    delete<T extends ConversationPreferenceDeleteArgs>(args: SelectSubset<T, ConversationPreferenceDeleteArgs<ExtArgs>>): Prisma__ConversationPreferenceClient<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConversationPreference.
     * @param {ConversationPreferenceUpdateArgs} args - Arguments to update one ConversationPreference.
     * @example
     * // Update one ConversationPreference
     * const conversationPreference = await prisma.conversationPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationPreferenceUpdateArgs>(args: SelectSubset<T, ConversationPreferenceUpdateArgs<ExtArgs>>): Prisma__ConversationPreferenceClient<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConversationPreferences.
     * @param {ConversationPreferenceDeleteManyArgs} args - Arguments to filter ConversationPreferences to delete.
     * @example
     * // Delete a few ConversationPreferences
     * const { count } = await prisma.conversationPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationPreferenceDeleteManyArgs>(args?: SelectSubset<T, ConversationPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConversationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConversationPreferences
     * const conversationPreference = await prisma.conversationPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationPreferenceUpdateManyArgs>(args: SelectSubset<T, ConversationPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConversationPreference.
     * @param {ConversationPreferenceUpsertArgs} args - Arguments to update or create a ConversationPreference.
     * @example
     * // Update or create a ConversationPreference
     * const conversationPreference = await prisma.conversationPreference.upsert({
     *   create: {
     *     // ... data to create a ConversationPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConversationPreference we want to update
     *   }
     * })
     */
    upsert<T extends ConversationPreferenceUpsertArgs>(args: SelectSubset<T, ConversationPreferenceUpsertArgs<ExtArgs>>): Prisma__ConversationPreferenceClient<$Result.GetResult<Prisma.$ConversationPreferencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more ConversationPreferences that matches the filter.
     * @param {ConversationPreferenceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const conversationPreference = await prisma.conversationPreference.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ConversationPreferenceFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ConversationPreference.
     * @param {ConversationPreferenceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const conversationPreference = await prisma.conversationPreference.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ConversationPreferenceAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ConversationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationPreferenceCountArgs} args - Arguments to filter ConversationPreferences to count.
     * @example
     * // Count the number of ConversationPreferences
     * const count = await prisma.conversationPreference.count({
     *   where: {
     *     // ... the filter for the ConversationPreferences we want to count
     *   }
     * })
    **/
    count<T extends ConversationPreferenceCountArgs>(
      args?: Subset<T, ConversationPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConversationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationPreferenceAggregateArgs>(args: Subset<T, ConversationPreferenceAggregateArgs>): Prisma.PrismaPromise<GetConversationPreferenceAggregateType<T>>

    /**
     * Group by ConversationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: ConversationPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConversationPreference model
   */
  readonly fields: ConversationPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConversationPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConversationPreference model
   */ 
  interface ConversationPreferenceFieldRefs {
    readonly id: FieldRef<"ConversationPreference", 'String'>
    readonly conversationId: FieldRef<"ConversationPreference", 'String'>
    readonly userId: FieldRef<"ConversationPreference", 'String'>
    readonly key: FieldRef<"ConversationPreference", 'String'>
    readonly value: FieldRef<"ConversationPreference", 'String'>
    readonly valueType: FieldRef<"ConversationPreference", 'String'>
    readonly description: FieldRef<"ConversationPreference", 'String'>
    readonly createdAt: FieldRef<"ConversationPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"ConversationPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConversationPreference findUnique
   */
  export type ConversationPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ConversationPreference to fetch.
     */
    where: ConversationPreferenceWhereUniqueInput
  }

  /**
   * ConversationPreference findUniqueOrThrow
   */
  export type ConversationPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ConversationPreference to fetch.
     */
    where: ConversationPreferenceWhereUniqueInput
  }

  /**
   * ConversationPreference findFirst
   */
  export type ConversationPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ConversationPreference to fetch.
     */
    where?: ConversationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationPreferences to fetch.
     */
    orderBy?: ConversationPreferenceOrderByWithRelationInput | ConversationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationPreferences.
     */
    cursor?: ConversationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationPreferences.
     */
    distinct?: ConversationPreferenceScalarFieldEnum | ConversationPreferenceScalarFieldEnum[]
  }

  /**
   * ConversationPreference findFirstOrThrow
   */
  export type ConversationPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ConversationPreference to fetch.
     */
    where?: ConversationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationPreferences to fetch.
     */
    orderBy?: ConversationPreferenceOrderByWithRelationInput | ConversationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConversationPreferences.
     */
    cursor?: ConversationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConversationPreferences.
     */
    distinct?: ConversationPreferenceScalarFieldEnum | ConversationPreferenceScalarFieldEnum[]
  }

  /**
   * ConversationPreference findMany
   */
  export type ConversationPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which ConversationPreferences to fetch.
     */
    where?: ConversationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConversationPreferences to fetch.
     */
    orderBy?: ConversationPreferenceOrderByWithRelationInput | ConversationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConversationPreferences.
     */
    cursor?: ConversationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConversationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConversationPreferences.
     */
    skip?: number
    distinct?: ConversationPreferenceScalarFieldEnum | ConversationPreferenceScalarFieldEnum[]
  }

  /**
   * ConversationPreference create
   */
  export type ConversationPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a ConversationPreference.
     */
    data: XOR<ConversationPreferenceCreateInput, ConversationPreferenceUncheckedCreateInput>
  }

  /**
   * ConversationPreference createMany
   */
  export type ConversationPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConversationPreferences.
     */
    data: ConversationPreferenceCreateManyInput | ConversationPreferenceCreateManyInput[]
  }

  /**
   * ConversationPreference update
   */
  export type ConversationPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a ConversationPreference.
     */
    data: XOR<ConversationPreferenceUpdateInput, ConversationPreferenceUncheckedUpdateInput>
    /**
     * Choose, which ConversationPreference to update.
     */
    where: ConversationPreferenceWhereUniqueInput
  }

  /**
   * ConversationPreference updateMany
   */
  export type ConversationPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConversationPreferences.
     */
    data: XOR<ConversationPreferenceUpdateManyMutationInput, ConversationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which ConversationPreferences to update
     */
    where?: ConversationPreferenceWhereInput
  }

  /**
   * ConversationPreference upsert
   */
  export type ConversationPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the ConversationPreference to update in case it exists.
     */
    where: ConversationPreferenceWhereUniqueInput
    /**
     * In case the ConversationPreference found by the `where` argument doesn't exist, create a new ConversationPreference with this data.
     */
    create: XOR<ConversationPreferenceCreateInput, ConversationPreferenceUncheckedCreateInput>
    /**
     * In case the ConversationPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationPreferenceUpdateInput, ConversationPreferenceUncheckedUpdateInput>
  }

  /**
   * ConversationPreference delete
   */
  export type ConversationPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
    /**
     * Filter which ConversationPreference to delete.
     */
    where: ConversationPreferenceWhereUniqueInput
  }

  /**
   * ConversationPreference deleteMany
   */
  export type ConversationPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConversationPreferences to delete
     */
    where?: ConversationPreferenceWhereInput
  }

  /**
   * ConversationPreference findRaw
   */
  export type ConversationPreferenceFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ConversationPreference aggregateRaw
   */
  export type ConversationPreferenceAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ConversationPreference without action
   */
  export type ConversationPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationPreference
     */
    select?: ConversationPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model CommunityAdmin
   */

  export type AggregateCommunityAdmin = {
    _count: CommunityAdminCountAggregateOutputType | null
    _min: CommunityAdminMinAggregateOutputType | null
    _max: CommunityAdminMaxAggregateOutputType | null
  }

  export type CommunityAdminMinAggregateOutputType = {
    id: string | null
    communityId: string | null
    userId: string | null
    assignedAt: Date | null
  }

  export type CommunityAdminMaxAggregateOutputType = {
    id: string | null
    communityId: string | null
    userId: string | null
    assignedAt: Date | null
  }

  export type CommunityAdminCountAggregateOutputType = {
    id: number
    communityId: number
    userId: number
    assignedAt: number
    _all: number
  }


  export type CommunityAdminMinAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    assignedAt?: true
  }

  export type CommunityAdminMaxAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    assignedAt?: true
  }

  export type CommunityAdminCountAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    assignedAt?: true
    _all?: true
  }

  export type CommunityAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunityAdmin to aggregate.
     */
    where?: CommunityAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityAdmins to fetch.
     */
    orderBy?: CommunityAdminOrderByWithRelationInput | CommunityAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommunityAdmins
    **/
    _count?: true | CommunityAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityAdminMaxAggregateInputType
  }

  export type GetCommunityAdminAggregateType<T extends CommunityAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunityAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunityAdmin[P]>
      : GetScalarType<T[P], AggregateCommunityAdmin[P]>
  }




  export type CommunityAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityAdminWhereInput
    orderBy?: CommunityAdminOrderByWithAggregationInput | CommunityAdminOrderByWithAggregationInput[]
    by: CommunityAdminScalarFieldEnum[] | CommunityAdminScalarFieldEnum
    having?: CommunityAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityAdminCountAggregateInputType | true
    _min?: CommunityAdminMinAggregateInputType
    _max?: CommunityAdminMaxAggregateInputType
  }

  export type CommunityAdminGroupByOutputType = {
    id: string
    communityId: string
    userId: string
    assignedAt: Date
    _count: CommunityAdminCountAggregateOutputType | null
    _min: CommunityAdminMinAggregateOutputType | null
    _max: CommunityAdminMaxAggregateOutputType | null
  }

  type GetCommunityAdminGroupByPayload<T extends CommunityAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityAdminGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityAdminGroupByOutputType[P]>
        }
      >
    >


  export type CommunityAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    communityId?: boolean
    userId?: boolean
    assignedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["communityAdmin"]>


  export type CommunityAdminSelectScalar = {
    id?: boolean
    communityId?: boolean
    userId?: boolean
    assignedAt?: boolean
  }

  export type CommunityAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }

  export type $CommunityAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommunityAdmin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      community: Prisma.$CommunityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      communityId: string
      userId: string
      assignedAt: Date
    }, ExtArgs["result"]["communityAdmin"]>
    composites: {}
  }

  type CommunityAdminGetPayload<S extends boolean | null | undefined | CommunityAdminDefaultArgs> = $Result.GetResult<Prisma.$CommunityAdminPayload, S>

  type CommunityAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunityAdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunityAdminCountAggregateInputType | true
    }

  export interface CommunityAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommunityAdmin'], meta: { name: 'CommunityAdmin' } }
    /**
     * Find zero or one CommunityAdmin that matches the filter.
     * @param {CommunityAdminFindUniqueArgs} args - Arguments to find a CommunityAdmin
     * @example
     * // Get one CommunityAdmin
     * const communityAdmin = await prisma.communityAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunityAdminFindUniqueArgs>(args: SelectSubset<T, CommunityAdminFindUniqueArgs<ExtArgs>>): Prisma__CommunityAdminClient<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommunityAdmin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommunityAdminFindUniqueOrThrowArgs} args - Arguments to find a CommunityAdmin
     * @example
     * // Get one CommunityAdmin
     * const communityAdmin = await prisma.communityAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunityAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunityAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunityAdminClient<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommunityAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAdminFindFirstArgs} args - Arguments to find a CommunityAdmin
     * @example
     * // Get one CommunityAdmin
     * const communityAdmin = await prisma.communityAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunityAdminFindFirstArgs>(args?: SelectSubset<T, CommunityAdminFindFirstArgs<ExtArgs>>): Prisma__CommunityAdminClient<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommunityAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAdminFindFirstOrThrowArgs} args - Arguments to find a CommunityAdmin
     * @example
     * // Get one CommunityAdmin
     * const communityAdmin = await prisma.communityAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunityAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunityAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunityAdminClient<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommunityAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommunityAdmins
     * const communityAdmins = await prisma.communityAdmin.findMany()
     * 
     * // Get first 10 CommunityAdmins
     * const communityAdmins = await prisma.communityAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityAdminWithIdOnly = await prisma.communityAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunityAdminFindManyArgs>(args?: SelectSubset<T, CommunityAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommunityAdmin.
     * @param {CommunityAdminCreateArgs} args - Arguments to create a CommunityAdmin.
     * @example
     * // Create one CommunityAdmin
     * const CommunityAdmin = await prisma.communityAdmin.create({
     *   data: {
     *     // ... data to create a CommunityAdmin
     *   }
     * })
     * 
     */
    create<T extends CommunityAdminCreateArgs>(args: SelectSubset<T, CommunityAdminCreateArgs<ExtArgs>>): Prisma__CommunityAdminClient<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommunityAdmins.
     * @param {CommunityAdminCreateManyArgs} args - Arguments to create many CommunityAdmins.
     * @example
     * // Create many CommunityAdmins
     * const communityAdmin = await prisma.communityAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunityAdminCreateManyArgs>(args?: SelectSubset<T, CommunityAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommunityAdmin.
     * @param {CommunityAdminDeleteArgs} args - Arguments to delete one CommunityAdmin.
     * @example
     * // Delete one CommunityAdmin
     * const CommunityAdmin = await prisma.communityAdmin.delete({
     *   where: {
     *     // ... filter to delete one CommunityAdmin
     *   }
     * })
     * 
     */
    delete<T extends CommunityAdminDeleteArgs>(args: SelectSubset<T, CommunityAdminDeleteArgs<ExtArgs>>): Prisma__CommunityAdminClient<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommunityAdmin.
     * @param {CommunityAdminUpdateArgs} args - Arguments to update one CommunityAdmin.
     * @example
     * // Update one CommunityAdmin
     * const communityAdmin = await prisma.communityAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunityAdminUpdateArgs>(args: SelectSubset<T, CommunityAdminUpdateArgs<ExtArgs>>): Prisma__CommunityAdminClient<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommunityAdmins.
     * @param {CommunityAdminDeleteManyArgs} args - Arguments to filter CommunityAdmins to delete.
     * @example
     * // Delete a few CommunityAdmins
     * const { count } = await prisma.communityAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunityAdminDeleteManyArgs>(args?: SelectSubset<T, CommunityAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommunityAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommunityAdmins
     * const communityAdmin = await prisma.communityAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunityAdminUpdateManyArgs>(args: SelectSubset<T, CommunityAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommunityAdmin.
     * @param {CommunityAdminUpsertArgs} args - Arguments to update or create a CommunityAdmin.
     * @example
     * // Update or create a CommunityAdmin
     * const communityAdmin = await prisma.communityAdmin.upsert({
     *   create: {
     *     // ... data to create a CommunityAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommunityAdmin we want to update
     *   }
     * })
     */
    upsert<T extends CommunityAdminUpsertArgs>(args: SelectSubset<T, CommunityAdminUpsertArgs<ExtArgs>>): Prisma__CommunityAdminClient<$Result.GetResult<Prisma.$CommunityAdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more CommunityAdmins that matches the filter.
     * @param {CommunityAdminFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const communityAdmin = await prisma.communityAdmin.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: CommunityAdminFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a CommunityAdmin.
     * @param {CommunityAdminAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const communityAdmin = await prisma.communityAdmin.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CommunityAdminAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of CommunityAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAdminCountArgs} args - Arguments to filter CommunityAdmins to count.
     * @example
     * // Count the number of CommunityAdmins
     * const count = await prisma.communityAdmin.count({
     *   where: {
     *     // ... the filter for the CommunityAdmins we want to count
     *   }
     * })
    **/
    count<T extends CommunityAdminCountArgs>(
      args?: Subset<T, CommunityAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommunityAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityAdminAggregateArgs>(args: Subset<T, CommunityAdminAggregateArgs>): Prisma.PrismaPromise<GetCommunityAdminAggregateType<T>>

    /**
     * Group by CommunityAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityAdminGroupByArgs['orderBy'] }
        : { orderBy?: CommunityAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommunityAdmin model
   */
  readonly fields: CommunityAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommunityAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunityAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommunityAdmin model
   */ 
  interface CommunityAdminFieldRefs {
    readonly id: FieldRef<"CommunityAdmin", 'String'>
    readonly communityId: FieldRef<"CommunityAdmin", 'String'>
    readonly userId: FieldRef<"CommunityAdmin", 'String'>
    readonly assignedAt: FieldRef<"CommunityAdmin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommunityAdmin findUnique
   */
  export type CommunityAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * Filter, which CommunityAdmin to fetch.
     */
    where: CommunityAdminWhereUniqueInput
  }

  /**
   * CommunityAdmin findUniqueOrThrow
   */
  export type CommunityAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * Filter, which CommunityAdmin to fetch.
     */
    where: CommunityAdminWhereUniqueInput
  }

  /**
   * CommunityAdmin findFirst
   */
  export type CommunityAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * Filter, which CommunityAdmin to fetch.
     */
    where?: CommunityAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityAdmins to fetch.
     */
    orderBy?: CommunityAdminOrderByWithRelationInput | CommunityAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunityAdmins.
     */
    cursor?: CommunityAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunityAdmins.
     */
    distinct?: CommunityAdminScalarFieldEnum | CommunityAdminScalarFieldEnum[]
  }

  /**
   * CommunityAdmin findFirstOrThrow
   */
  export type CommunityAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * Filter, which CommunityAdmin to fetch.
     */
    where?: CommunityAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityAdmins to fetch.
     */
    orderBy?: CommunityAdminOrderByWithRelationInput | CommunityAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunityAdmins.
     */
    cursor?: CommunityAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunityAdmins.
     */
    distinct?: CommunityAdminScalarFieldEnum | CommunityAdminScalarFieldEnum[]
  }

  /**
   * CommunityAdmin findMany
   */
  export type CommunityAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * Filter, which CommunityAdmins to fetch.
     */
    where?: CommunityAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityAdmins to fetch.
     */
    orderBy?: CommunityAdminOrderByWithRelationInput | CommunityAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommunityAdmins.
     */
    cursor?: CommunityAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityAdmins.
     */
    skip?: number
    distinct?: CommunityAdminScalarFieldEnum | CommunityAdminScalarFieldEnum[]
  }

  /**
   * CommunityAdmin create
   */
  export type CommunityAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a CommunityAdmin.
     */
    data: XOR<CommunityAdminCreateInput, CommunityAdminUncheckedCreateInput>
  }

  /**
   * CommunityAdmin createMany
   */
  export type CommunityAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommunityAdmins.
     */
    data: CommunityAdminCreateManyInput | CommunityAdminCreateManyInput[]
  }

  /**
   * CommunityAdmin update
   */
  export type CommunityAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a CommunityAdmin.
     */
    data: XOR<CommunityAdminUpdateInput, CommunityAdminUncheckedUpdateInput>
    /**
     * Choose, which CommunityAdmin to update.
     */
    where: CommunityAdminWhereUniqueInput
  }

  /**
   * CommunityAdmin updateMany
   */
  export type CommunityAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommunityAdmins.
     */
    data: XOR<CommunityAdminUpdateManyMutationInput, CommunityAdminUncheckedUpdateManyInput>
    /**
     * Filter which CommunityAdmins to update
     */
    where?: CommunityAdminWhereInput
  }

  /**
   * CommunityAdmin upsert
   */
  export type CommunityAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the CommunityAdmin to update in case it exists.
     */
    where: CommunityAdminWhereUniqueInput
    /**
     * In case the CommunityAdmin found by the `where` argument doesn't exist, create a new CommunityAdmin with this data.
     */
    create: XOR<CommunityAdminCreateInput, CommunityAdminUncheckedCreateInput>
    /**
     * In case the CommunityAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityAdminUpdateInput, CommunityAdminUncheckedUpdateInput>
  }

  /**
   * CommunityAdmin delete
   */
  export type CommunityAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
    /**
     * Filter which CommunityAdmin to delete.
     */
    where: CommunityAdminWhereUniqueInput
  }

  /**
   * CommunityAdmin deleteMany
   */
  export type CommunityAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunityAdmins to delete
     */
    where?: CommunityAdminWhereInput
  }

  /**
   * CommunityAdmin findRaw
   */
  export type CommunityAdminFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CommunityAdmin aggregateRaw
   */
  export type CommunityAdminAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CommunityAdmin without action
   */
  export type CommunityAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityAdmin
     */
    select?: CommunityAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityAdminInclude<ExtArgs> | null
  }


  /**
   * Model CommunityModerator
   */

  export type AggregateCommunityModerator = {
    _count: CommunityModeratorCountAggregateOutputType | null
    _min: CommunityModeratorMinAggregateOutputType | null
    _max: CommunityModeratorMaxAggregateOutputType | null
  }

  export type CommunityModeratorMinAggregateOutputType = {
    id: string | null
    communityId: string | null
    userId: string | null
    assignedAt: Date | null
  }

  export type CommunityModeratorMaxAggregateOutputType = {
    id: string | null
    communityId: string | null
    userId: string | null
    assignedAt: Date | null
  }

  export type CommunityModeratorCountAggregateOutputType = {
    id: number
    communityId: number
    userId: number
    assignedAt: number
    _all: number
  }


  export type CommunityModeratorMinAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    assignedAt?: true
  }

  export type CommunityModeratorMaxAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    assignedAt?: true
  }

  export type CommunityModeratorCountAggregateInputType = {
    id?: true
    communityId?: true
    userId?: true
    assignedAt?: true
    _all?: true
  }

  export type CommunityModeratorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunityModerator to aggregate.
     */
    where?: CommunityModeratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityModerators to fetch.
     */
    orderBy?: CommunityModeratorOrderByWithRelationInput | CommunityModeratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityModeratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityModerators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityModerators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommunityModerators
    **/
    _count?: true | CommunityModeratorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityModeratorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityModeratorMaxAggregateInputType
  }

  export type GetCommunityModeratorAggregateType<T extends CommunityModeratorAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunityModerator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunityModerator[P]>
      : GetScalarType<T[P], AggregateCommunityModerator[P]>
  }




  export type CommunityModeratorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityModeratorWhereInput
    orderBy?: CommunityModeratorOrderByWithAggregationInput | CommunityModeratorOrderByWithAggregationInput[]
    by: CommunityModeratorScalarFieldEnum[] | CommunityModeratorScalarFieldEnum
    having?: CommunityModeratorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityModeratorCountAggregateInputType | true
    _min?: CommunityModeratorMinAggregateInputType
    _max?: CommunityModeratorMaxAggregateInputType
  }

  export type CommunityModeratorGroupByOutputType = {
    id: string
    communityId: string
    userId: string
    assignedAt: Date
    _count: CommunityModeratorCountAggregateOutputType | null
    _min: CommunityModeratorMinAggregateOutputType | null
    _max: CommunityModeratorMaxAggregateOutputType | null
  }

  type GetCommunityModeratorGroupByPayload<T extends CommunityModeratorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityModeratorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityModeratorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityModeratorGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityModeratorGroupByOutputType[P]>
        }
      >
    >


  export type CommunityModeratorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    communityId?: boolean
    userId?: boolean
    assignedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["communityModerator"]>


  export type CommunityModeratorSelectScalar = {
    id?: boolean
    communityId?: boolean
    userId?: boolean
    assignedAt?: boolean
  }

  export type CommunityModeratorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
  }

  export type $CommunityModeratorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommunityModerator"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      community: Prisma.$CommunityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      communityId: string
      userId: string
      assignedAt: Date
    }, ExtArgs["result"]["communityModerator"]>
    composites: {}
  }

  type CommunityModeratorGetPayload<S extends boolean | null | undefined | CommunityModeratorDefaultArgs> = $Result.GetResult<Prisma.$CommunityModeratorPayload, S>

  type CommunityModeratorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunityModeratorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunityModeratorCountAggregateInputType | true
    }

  export interface CommunityModeratorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommunityModerator'], meta: { name: 'CommunityModerator' } }
    /**
     * Find zero or one CommunityModerator that matches the filter.
     * @param {CommunityModeratorFindUniqueArgs} args - Arguments to find a CommunityModerator
     * @example
     * // Get one CommunityModerator
     * const communityModerator = await prisma.communityModerator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunityModeratorFindUniqueArgs>(args: SelectSubset<T, CommunityModeratorFindUniqueArgs<ExtArgs>>): Prisma__CommunityModeratorClient<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommunityModerator that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommunityModeratorFindUniqueOrThrowArgs} args - Arguments to find a CommunityModerator
     * @example
     * // Get one CommunityModerator
     * const communityModerator = await prisma.communityModerator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunityModeratorFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunityModeratorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunityModeratorClient<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommunityModerator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityModeratorFindFirstArgs} args - Arguments to find a CommunityModerator
     * @example
     * // Get one CommunityModerator
     * const communityModerator = await prisma.communityModerator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunityModeratorFindFirstArgs>(args?: SelectSubset<T, CommunityModeratorFindFirstArgs<ExtArgs>>): Prisma__CommunityModeratorClient<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommunityModerator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityModeratorFindFirstOrThrowArgs} args - Arguments to find a CommunityModerator
     * @example
     * // Get one CommunityModerator
     * const communityModerator = await prisma.communityModerator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunityModeratorFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunityModeratorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunityModeratorClient<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommunityModerators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityModeratorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommunityModerators
     * const communityModerators = await prisma.communityModerator.findMany()
     * 
     * // Get first 10 CommunityModerators
     * const communityModerators = await prisma.communityModerator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityModeratorWithIdOnly = await prisma.communityModerator.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunityModeratorFindManyArgs>(args?: SelectSubset<T, CommunityModeratorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommunityModerator.
     * @param {CommunityModeratorCreateArgs} args - Arguments to create a CommunityModerator.
     * @example
     * // Create one CommunityModerator
     * const CommunityModerator = await prisma.communityModerator.create({
     *   data: {
     *     // ... data to create a CommunityModerator
     *   }
     * })
     * 
     */
    create<T extends CommunityModeratorCreateArgs>(args: SelectSubset<T, CommunityModeratorCreateArgs<ExtArgs>>): Prisma__CommunityModeratorClient<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommunityModerators.
     * @param {CommunityModeratorCreateManyArgs} args - Arguments to create many CommunityModerators.
     * @example
     * // Create many CommunityModerators
     * const communityModerator = await prisma.communityModerator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunityModeratorCreateManyArgs>(args?: SelectSubset<T, CommunityModeratorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommunityModerator.
     * @param {CommunityModeratorDeleteArgs} args - Arguments to delete one CommunityModerator.
     * @example
     * // Delete one CommunityModerator
     * const CommunityModerator = await prisma.communityModerator.delete({
     *   where: {
     *     // ... filter to delete one CommunityModerator
     *   }
     * })
     * 
     */
    delete<T extends CommunityModeratorDeleteArgs>(args: SelectSubset<T, CommunityModeratorDeleteArgs<ExtArgs>>): Prisma__CommunityModeratorClient<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommunityModerator.
     * @param {CommunityModeratorUpdateArgs} args - Arguments to update one CommunityModerator.
     * @example
     * // Update one CommunityModerator
     * const communityModerator = await prisma.communityModerator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunityModeratorUpdateArgs>(args: SelectSubset<T, CommunityModeratorUpdateArgs<ExtArgs>>): Prisma__CommunityModeratorClient<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommunityModerators.
     * @param {CommunityModeratorDeleteManyArgs} args - Arguments to filter CommunityModerators to delete.
     * @example
     * // Delete a few CommunityModerators
     * const { count } = await prisma.communityModerator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunityModeratorDeleteManyArgs>(args?: SelectSubset<T, CommunityModeratorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommunityModerators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityModeratorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommunityModerators
     * const communityModerator = await prisma.communityModerator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunityModeratorUpdateManyArgs>(args: SelectSubset<T, CommunityModeratorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommunityModerator.
     * @param {CommunityModeratorUpsertArgs} args - Arguments to update or create a CommunityModerator.
     * @example
     * // Update or create a CommunityModerator
     * const communityModerator = await prisma.communityModerator.upsert({
     *   create: {
     *     // ... data to create a CommunityModerator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommunityModerator we want to update
     *   }
     * })
     */
    upsert<T extends CommunityModeratorUpsertArgs>(args: SelectSubset<T, CommunityModeratorUpsertArgs<ExtArgs>>): Prisma__CommunityModeratorClient<$Result.GetResult<Prisma.$CommunityModeratorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more CommunityModerators that matches the filter.
     * @param {CommunityModeratorFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const communityModerator = await prisma.communityModerator.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: CommunityModeratorFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a CommunityModerator.
     * @param {CommunityModeratorAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const communityModerator = await prisma.communityModerator.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CommunityModeratorAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of CommunityModerators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityModeratorCountArgs} args - Arguments to filter CommunityModerators to count.
     * @example
     * // Count the number of CommunityModerators
     * const count = await prisma.communityModerator.count({
     *   where: {
     *     // ... the filter for the CommunityModerators we want to count
     *   }
     * })
    **/
    count<T extends CommunityModeratorCountArgs>(
      args?: Subset<T, CommunityModeratorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityModeratorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommunityModerator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityModeratorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityModeratorAggregateArgs>(args: Subset<T, CommunityModeratorAggregateArgs>): Prisma.PrismaPromise<GetCommunityModeratorAggregateType<T>>

    /**
     * Group by CommunityModerator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityModeratorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityModeratorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityModeratorGroupByArgs['orderBy'] }
        : { orderBy?: CommunityModeratorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityModeratorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityModeratorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommunityModerator model
   */
  readonly fields: CommunityModeratorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommunityModerator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunityModeratorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommunityModerator model
   */ 
  interface CommunityModeratorFieldRefs {
    readonly id: FieldRef<"CommunityModerator", 'String'>
    readonly communityId: FieldRef<"CommunityModerator", 'String'>
    readonly userId: FieldRef<"CommunityModerator", 'String'>
    readonly assignedAt: FieldRef<"CommunityModerator", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommunityModerator findUnique
   */
  export type CommunityModeratorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * Filter, which CommunityModerator to fetch.
     */
    where: CommunityModeratorWhereUniqueInput
  }

  /**
   * CommunityModerator findUniqueOrThrow
   */
  export type CommunityModeratorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * Filter, which CommunityModerator to fetch.
     */
    where: CommunityModeratorWhereUniqueInput
  }

  /**
   * CommunityModerator findFirst
   */
  export type CommunityModeratorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * Filter, which CommunityModerator to fetch.
     */
    where?: CommunityModeratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityModerators to fetch.
     */
    orderBy?: CommunityModeratorOrderByWithRelationInput | CommunityModeratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunityModerators.
     */
    cursor?: CommunityModeratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityModerators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityModerators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunityModerators.
     */
    distinct?: CommunityModeratorScalarFieldEnum | CommunityModeratorScalarFieldEnum[]
  }

  /**
   * CommunityModerator findFirstOrThrow
   */
  export type CommunityModeratorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * Filter, which CommunityModerator to fetch.
     */
    where?: CommunityModeratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityModerators to fetch.
     */
    orderBy?: CommunityModeratorOrderByWithRelationInput | CommunityModeratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunityModerators.
     */
    cursor?: CommunityModeratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityModerators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityModerators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunityModerators.
     */
    distinct?: CommunityModeratorScalarFieldEnum | CommunityModeratorScalarFieldEnum[]
  }

  /**
   * CommunityModerator findMany
   */
  export type CommunityModeratorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * Filter, which CommunityModerators to fetch.
     */
    where?: CommunityModeratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunityModerators to fetch.
     */
    orderBy?: CommunityModeratorOrderByWithRelationInput | CommunityModeratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommunityModerators.
     */
    cursor?: CommunityModeratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunityModerators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunityModerators.
     */
    skip?: number
    distinct?: CommunityModeratorScalarFieldEnum | CommunityModeratorScalarFieldEnum[]
  }

  /**
   * CommunityModerator create
   */
  export type CommunityModeratorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * The data needed to create a CommunityModerator.
     */
    data: XOR<CommunityModeratorCreateInput, CommunityModeratorUncheckedCreateInput>
  }

  /**
   * CommunityModerator createMany
   */
  export type CommunityModeratorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommunityModerators.
     */
    data: CommunityModeratorCreateManyInput | CommunityModeratorCreateManyInput[]
  }

  /**
   * CommunityModerator update
   */
  export type CommunityModeratorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * The data needed to update a CommunityModerator.
     */
    data: XOR<CommunityModeratorUpdateInput, CommunityModeratorUncheckedUpdateInput>
    /**
     * Choose, which CommunityModerator to update.
     */
    where: CommunityModeratorWhereUniqueInput
  }

  /**
   * CommunityModerator updateMany
   */
  export type CommunityModeratorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommunityModerators.
     */
    data: XOR<CommunityModeratorUpdateManyMutationInput, CommunityModeratorUncheckedUpdateManyInput>
    /**
     * Filter which CommunityModerators to update
     */
    where?: CommunityModeratorWhereInput
  }

  /**
   * CommunityModerator upsert
   */
  export type CommunityModeratorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * The filter to search for the CommunityModerator to update in case it exists.
     */
    where: CommunityModeratorWhereUniqueInput
    /**
     * In case the CommunityModerator found by the `where` argument doesn't exist, create a new CommunityModerator with this data.
     */
    create: XOR<CommunityModeratorCreateInput, CommunityModeratorUncheckedCreateInput>
    /**
     * In case the CommunityModerator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityModeratorUpdateInput, CommunityModeratorUncheckedUpdateInput>
  }

  /**
   * CommunityModerator delete
   */
  export type CommunityModeratorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
    /**
     * Filter which CommunityModerator to delete.
     */
    where: CommunityModeratorWhereUniqueInput
  }

  /**
   * CommunityModerator deleteMany
   */
  export type CommunityModeratorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunityModerators to delete
     */
    where?: CommunityModeratorWhereInput
  }

  /**
   * CommunityModerator findRaw
   */
  export type CommunityModeratorFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CommunityModerator aggregateRaw
   */
  export type CommunityModeratorAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CommunityModerator without action
   */
  export type CommunityModeratorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityModerator
     */
    select?: CommunityModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityModeratorInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    password: 'password',
    displayName: 'displayName',
    avatar: 'avatar',
    isOnline: 'isOnline',
    lastSeen: 'lastSeen',
    lastActiveAt: 'lastActiveAt',
    systemLanguage: 'systemLanguage',
    regionalLanguage: 'regionalLanguage',
    customDestinationLanguage: 'customDestinationLanguage',
    autoTranslateEnabled: 'autoTranslateEnabled',
    translateToSystemLanguage: 'translateToSystemLanguage',
    translateToRegionalLanguage: 'translateToRegionalLanguage',
    useCustomDestination: 'useCustomDestination',
    role: 'role',
    isActive: 'isActive',
    deactivatedAt: 'deactivatedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    type: 'type',
    title: 'title',
    description: 'description',
    image: 'image',
    avatar: 'avatar',
    communityId: 'communityId',
    isActive: 'isActive',
    isArchived: 'isArchived',
    lastMessageAt: 'lastMessageAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const ConversationMemberScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    userId: 'userId',
    role: 'role',
    canSendMessage: 'canSendMessage',
    canSendFiles: 'canSendFiles',
    canSendImages: 'canSendImages',
    canSendVideos: 'canSendVideos',
    canSendAudios: 'canSendAudios',
    canSendLocations: 'canSendLocations',
    canSendLinks: 'canSendLinks',
    joinedAt: 'joinedAt',
    leftAt: 'leftAt',
    isActive: 'isActive'
  };

  export type ConversationMemberScalarFieldEnum = (typeof ConversationMemberScalarFieldEnum)[keyof typeof ConversationMemberScalarFieldEnum]


  export const ConversationShareLinkScalarFieldEnum: {
    id: 'id',
    linkId: 'linkId',
    identifier: 'identifier',
    conversationId: 'conversationId',
    createdBy: 'createdBy',
    name: 'name',
    description: 'description',
    maxUses: 'maxUses',
    currentUses: 'currentUses',
    maxConcurrentUsers: 'maxConcurrentUsers',
    currentConcurrentUsers: 'currentConcurrentUsers',
    maxUniqueSessions: 'maxUniqueSessions',
    currentUniqueSessions: 'currentUniqueSessions',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    allowAnonymousMessages: 'allowAnonymousMessages',
    allowAnonymousFiles: 'allowAnonymousFiles',
    allowAnonymousImages: 'allowAnonymousImages',
    allowViewHistory: 'allowViewHistory',
    requireNickname: 'requireNickname',
    requireEmail: 'requireEmail',
    allowedCountries: 'allowedCountries',
    allowedLanguages: 'allowedLanguages',
    allowedIpRanges: 'allowedIpRanges',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConversationShareLinkScalarFieldEnum = (typeof ConversationShareLinkScalarFieldEnum)[keyof typeof ConversationShareLinkScalarFieldEnum]


  export const AnonymousParticipantScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    shareLinkId: 'shareLinkId',
    firstName: 'firstName',
    lastName: 'lastName',
    username: 'username',
    email: 'email',
    sessionToken: 'sessionToken',
    ipAddress: 'ipAddress',
    country: 'country',
    language: 'language',
    deviceFingerprint: 'deviceFingerprint',
    isActive: 'isActive',
    isOnline: 'isOnline',
    lastActiveAt: 'lastActiveAt',
    canSendMessages: 'canSendMessages',
    canSendFiles: 'canSendFiles',
    canSendImages: 'canSendImages',
    joinedAt: 'joinedAt',
    lastSeenAt: 'lastSeenAt',
    leftAt: 'leftAt'
  };

  export type AnonymousParticipantScalarFieldEnum = (typeof AnonymousParticipantScalarFieldEnum)[keyof typeof AnonymousParticipantScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    senderId: 'senderId',
    anonymousSenderId: 'anonymousSenderId',
    content: 'content',
    originalLanguage: 'originalLanguage',
    messageType: 'messageType',
    isEdited: 'isEdited',
    editedAt: 'editedAt',
    isDeleted: 'isDeleted',
    deletedAt: 'deletedAt',
    replyToId: 'replyToId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const MessageTranslationScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    sourceLanguage: 'sourceLanguage',
    targetLanguage: 'targetLanguage',
    translatedContent: 'translatedContent',
    translationModel: 'translationModel',
    cacheKey: 'cacheKey',
    confidenceScore: 'confidenceScore',
    createdAt: 'createdAt'
  };

  export type MessageTranslationScalarFieldEnum = (typeof MessageTranslationScalarFieldEnum)[keyof typeof MessageTranslationScalarFieldEnum]


  export const MessageReadStatusScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    userId: 'userId',
    readAt: 'readAt'
  };

  export type MessageReadStatusScalarFieldEnum = (typeof MessageReadStatusScalarFieldEnum)[keyof typeof MessageReadStatusScalarFieldEnum]


  export const FriendRequestScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    receiverId: 'receiverId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FriendRequestScalarFieldEnum = (typeof FriendRequestScalarFieldEnum)[keyof typeof FriendRequestScalarFieldEnum]


  export const TypingIndicatorScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    userId: 'userId',
    isTyping: 'isTyping',
    startedAt: 'startedAt',
    updatedAt: 'updatedAt'
  };

  export type TypingIndicatorScalarFieldEnum = (typeof TypingIndicatorScalarFieldEnum)[keyof typeof TypingIndicatorScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    content: 'content',
    data: 'data',
    priority: 'priority',
    isRead: 'isRead',
    emailSent: 'emailSent',
    pushSent: 'pushSent',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const CommunityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    avatar: 'avatar',
    isPrivate: 'isPrivate',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommunityScalarFieldEnum = (typeof CommunityScalarFieldEnum)[keyof typeof CommunityScalarFieldEnum]


  export const CommunityMemberScalarFieldEnum: {
    id: 'id',
    communityId: 'communityId',
    userId: 'userId',
    joinedAt: 'joinedAt'
  };

  export type CommunityMemberScalarFieldEnum = (typeof CommunityMemberScalarFieldEnum)[keyof typeof CommunityMemberScalarFieldEnum]


  export const UserStatsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    messagesSent: 'messagesSent',
    messagesReceived: 'messagesReceived',
    charactersTyped: 'charactersTyped',
    imageMessagesSent: 'imageMessagesSent',
    filesShared: 'filesShared',
    conversationsJoined: 'conversationsJoined',
    communitiesCreated: 'communitiesCreated',
    friendsAdded: 'friendsAdded',
    friendRequestsSent: 'friendRequestsSent',
    translationsUsed: 'translationsUsed',
    languagesDetected: 'languagesDetected',
    autoTranslateTimeMinutes: 'autoTranslateTimeMinutes',
    totalOnlineTimeMinutes: 'totalOnlineTimeMinutes',
    sessionCount: 'sessionCount',
    lastActiveAt: 'lastActiveAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserStatsScalarFieldEnum = (typeof UserStatsScalarFieldEnum)[keyof typeof UserStatsScalarFieldEnum]


  export const UserPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    key: 'key',
    value: 'value',
    valueType: 'valueType',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPreferenceScalarFieldEnum = (typeof UserPreferenceScalarFieldEnum)[keyof typeof UserPreferenceScalarFieldEnum]


  export const ConversationPreferenceScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    userId: 'userId',
    key: 'key',
    value: 'value',
    valueType: 'valueType',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConversationPreferenceScalarFieldEnum = (typeof ConversationPreferenceScalarFieldEnum)[keyof typeof ConversationPreferenceScalarFieldEnum]


  export const CommunityAdminScalarFieldEnum: {
    id: 'id',
    communityId: 'communityId',
    userId: 'userId',
    assignedAt: 'assignedAt'
  };

  export type CommunityAdminScalarFieldEnum = (typeof CommunityAdminScalarFieldEnum)[keyof typeof CommunityAdminScalarFieldEnum]


  export const CommunityModeratorScalarFieldEnum: {
    id: 'id',
    communityId: 'communityId',
    userId: 'userId',
    assignedAt: 'assignedAt'
  };

  export type CommunityModeratorScalarFieldEnum = (typeof CommunityModeratorScalarFieldEnum)[keyof typeof CommunityModeratorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    displayName?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    isOnline?: BoolFilter<"User"> | boolean
    lastSeen?: DateTimeFilter<"User"> | Date | string
    lastActiveAt?: DateTimeFilter<"User"> | Date | string
    systemLanguage?: StringFilter<"User"> | string
    regionalLanguage?: StringFilter<"User"> | string
    customDestinationLanguage?: StringNullableFilter<"User"> | string | null
    autoTranslateEnabled?: BoolFilter<"User"> | boolean
    translateToSystemLanguage?: BoolFilter<"User"> | boolean
    translateToRegionalLanguage?: BoolFilter<"User"> | boolean
    useCustomDestination?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    deactivatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdCommunities?: CommunityListRelationFilter
    communityMemberships?: CommunityMemberListRelationFilter
    conversations?: ConversationMemberListRelationFilter
    conversationPreferences?: ConversationPreferenceListRelationFilter
    createdShareLinks?: ConversationShareLinkListRelationFilter
    receivedFriendRequests?: FriendRequestListRelationFilter
    sentFriendRequests?: FriendRequestListRelationFilter
    messageReadStatus?: MessageReadStatusListRelationFilter
    sentMessages?: MessageListRelationFilter
    notifications?: NotificationListRelationFilter
    typingIndicators?: TypingIndicatorListRelationFilter
    preferences?: UserPreferenceListRelationFilter
    stats?: XOR<UserStatsNullableRelationFilter, UserStatsWhereInput> | null
    communityAdmins?: CommunityAdminListRelationFilter
    communityModerators?: CommunityModeratorListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatar?: SortOrder
    isOnline?: SortOrder
    lastSeen?: SortOrder
    lastActiveAt?: SortOrder
    systemLanguage?: SortOrder
    regionalLanguage?: SortOrder
    customDestinationLanguage?: SortOrder
    autoTranslateEnabled?: SortOrder
    translateToSystemLanguage?: SortOrder
    translateToRegionalLanguage?: SortOrder
    useCustomDestination?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    deactivatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdCommunities?: CommunityOrderByRelationAggregateInput
    communityMemberships?: CommunityMemberOrderByRelationAggregateInput
    conversations?: ConversationMemberOrderByRelationAggregateInput
    conversationPreferences?: ConversationPreferenceOrderByRelationAggregateInput
    createdShareLinks?: ConversationShareLinkOrderByRelationAggregateInput
    receivedFriendRequests?: FriendRequestOrderByRelationAggregateInput
    sentFriendRequests?: FriendRequestOrderByRelationAggregateInput
    messageReadStatus?: MessageReadStatusOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    typingIndicators?: TypingIndicatorOrderByRelationAggregateInput
    preferences?: UserPreferenceOrderByRelationAggregateInput
    stats?: UserStatsOrderByWithRelationInput
    communityAdmins?: CommunityAdminOrderByRelationAggregateInput
    communityModerators?: CommunityModeratorOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    displayName?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    isOnline?: BoolFilter<"User"> | boolean
    lastSeen?: DateTimeFilter<"User"> | Date | string
    lastActiveAt?: DateTimeFilter<"User"> | Date | string
    systemLanguage?: StringFilter<"User"> | string
    regionalLanguage?: StringFilter<"User"> | string
    customDestinationLanguage?: StringNullableFilter<"User"> | string | null
    autoTranslateEnabled?: BoolFilter<"User"> | boolean
    translateToSystemLanguage?: BoolFilter<"User"> | boolean
    translateToRegionalLanguage?: BoolFilter<"User"> | boolean
    useCustomDestination?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    deactivatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdCommunities?: CommunityListRelationFilter
    communityMemberships?: CommunityMemberListRelationFilter
    conversations?: ConversationMemberListRelationFilter
    conversationPreferences?: ConversationPreferenceListRelationFilter
    createdShareLinks?: ConversationShareLinkListRelationFilter
    receivedFriendRequests?: FriendRequestListRelationFilter
    sentFriendRequests?: FriendRequestListRelationFilter
    messageReadStatus?: MessageReadStatusListRelationFilter
    sentMessages?: MessageListRelationFilter
    notifications?: NotificationListRelationFilter
    typingIndicators?: TypingIndicatorListRelationFilter
    preferences?: UserPreferenceListRelationFilter
    stats?: XOR<UserStatsNullableRelationFilter, UserStatsWhereInput> | null
    communityAdmins?: CommunityAdminListRelationFilter
    communityModerators?: CommunityModeratorListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatar?: SortOrder
    isOnline?: SortOrder
    lastSeen?: SortOrder
    lastActiveAt?: SortOrder
    systemLanguage?: SortOrder
    regionalLanguage?: SortOrder
    customDestinationLanguage?: SortOrder
    autoTranslateEnabled?: SortOrder
    translateToSystemLanguage?: SortOrder
    translateToRegionalLanguage?: SortOrder
    useCustomDestination?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    deactivatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    displayName?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    isOnline?: BoolWithAggregatesFilter<"User"> | boolean
    lastSeen?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastActiveAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    systemLanguage?: StringWithAggregatesFilter<"User"> | string
    regionalLanguage?: StringWithAggregatesFilter<"User"> | string
    customDestinationLanguage?: StringNullableWithAggregatesFilter<"User"> | string | null
    autoTranslateEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    translateToSystemLanguage?: BoolWithAggregatesFilter<"User"> | boolean
    translateToRegionalLanguage?: BoolWithAggregatesFilter<"User"> | boolean
    useCustomDestination?: BoolWithAggregatesFilter<"User"> | boolean
    role?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    deactivatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ConversationWhereInput = {
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    id?: StringFilter<"Conversation"> | string
    identifier?: StringNullableFilter<"Conversation"> | string | null
    type?: StringFilter<"Conversation"> | string
    title?: StringNullableFilter<"Conversation"> | string | null
    description?: StringNullableFilter<"Conversation"> | string | null
    image?: StringNullableFilter<"Conversation"> | string | null
    avatar?: StringNullableFilter<"Conversation"> | string | null
    communityId?: StringNullableFilter<"Conversation"> | string | null
    isActive?: BoolFilter<"Conversation"> | boolean
    isArchived?: BoolFilter<"Conversation"> | boolean
    lastMessageAt?: DateTimeFilter<"Conversation"> | Date | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
    anonymousParticipants?: AnonymousParticipantListRelationFilter
    members?: ConversationMemberListRelationFilter
    preferences?: ConversationPreferenceListRelationFilter
    shareLinks?: ConversationShareLinkListRelationFilter
    community?: XOR<CommunityNullableRelationFilter, CommunityWhereInput> | null
    messages?: MessageListRelationFilter
    typingIndicators?: TypingIndicatorListRelationFilter
  }

  export type ConversationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    avatar?: SortOrder
    communityId?: SortOrder
    isActive?: SortOrder
    isArchived?: SortOrder
    lastMessageAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    anonymousParticipants?: AnonymousParticipantOrderByRelationAggregateInput
    members?: ConversationMemberOrderByRelationAggregateInput
    preferences?: ConversationPreferenceOrderByRelationAggregateInput
    shareLinks?: ConversationShareLinkOrderByRelationAggregateInput
    community?: CommunityOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
    typingIndicators?: TypingIndicatorOrderByRelationAggregateInput
  }

  export type ConversationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    identifier?: string
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    type?: StringFilter<"Conversation"> | string
    title?: StringNullableFilter<"Conversation"> | string | null
    description?: StringNullableFilter<"Conversation"> | string | null
    image?: StringNullableFilter<"Conversation"> | string | null
    avatar?: StringNullableFilter<"Conversation"> | string | null
    communityId?: StringNullableFilter<"Conversation"> | string | null
    isActive?: BoolFilter<"Conversation"> | boolean
    isArchived?: BoolFilter<"Conversation"> | boolean
    lastMessageAt?: DateTimeFilter<"Conversation"> | Date | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
    anonymousParticipants?: AnonymousParticipantListRelationFilter
    members?: ConversationMemberListRelationFilter
    preferences?: ConversationPreferenceListRelationFilter
    shareLinks?: ConversationShareLinkListRelationFilter
    community?: XOR<CommunityNullableRelationFilter, CommunityWhereInput> | null
    messages?: MessageListRelationFilter
    typingIndicators?: TypingIndicatorListRelationFilter
  }, "id" | "identifier">

  export type ConversationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    avatar?: SortOrder
    communityId?: SortOrder
    isActive?: SortOrder
    isArchived?: SortOrder
    lastMessageAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConversationCountOrderByAggregateInput
    _max?: ConversationMaxOrderByAggregateInput
    _min?: ConversationMinOrderByAggregateInput
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    OR?: ConversationScalarWhereWithAggregatesInput[]
    NOT?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Conversation"> | string
    identifier?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
    type?: StringWithAggregatesFilter<"Conversation"> | string
    title?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
    description?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
    image?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
    communityId?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
    isActive?: BoolWithAggregatesFilter<"Conversation"> | boolean
    isArchived?: BoolWithAggregatesFilter<"Conversation"> | boolean
    lastMessageAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
  }

  export type ConversationMemberWhereInput = {
    AND?: ConversationMemberWhereInput | ConversationMemberWhereInput[]
    OR?: ConversationMemberWhereInput[]
    NOT?: ConversationMemberWhereInput | ConversationMemberWhereInput[]
    id?: StringFilter<"ConversationMember"> | string
    conversationId?: StringFilter<"ConversationMember"> | string
    userId?: StringFilter<"ConversationMember"> | string
    role?: StringFilter<"ConversationMember"> | string
    canSendMessage?: BoolFilter<"ConversationMember"> | boolean
    canSendFiles?: BoolFilter<"ConversationMember"> | boolean
    canSendImages?: BoolFilter<"ConversationMember"> | boolean
    canSendVideos?: BoolFilter<"ConversationMember"> | boolean
    canSendAudios?: BoolFilter<"ConversationMember"> | boolean
    canSendLocations?: BoolFilter<"ConversationMember"> | boolean
    canSendLinks?: BoolFilter<"ConversationMember"> | boolean
    joinedAt?: DateTimeFilter<"ConversationMember"> | Date | string
    leftAt?: DateTimeNullableFilter<"ConversationMember"> | Date | string | null
    isActive?: BoolFilter<"ConversationMember"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }

  export type ConversationMemberOrderByWithRelationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    canSendMessage?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    canSendVideos?: SortOrder
    canSendAudios?: SortOrder
    canSendLocations?: SortOrder
    canSendLinks?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrder
    isActive?: SortOrder
    user?: UserOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
  }

  export type ConversationMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConversationMemberWhereInput | ConversationMemberWhereInput[]
    OR?: ConversationMemberWhereInput[]
    NOT?: ConversationMemberWhereInput | ConversationMemberWhereInput[]
    conversationId?: StringFilter<"ConversationMember"> | string
    userId?: StringFilter<"ConversationMember"> | string
    role?: StringFilter<"ConversationMember"> | string
    canSendMessage?: BoolFilter<"ConversationMember"> | boolean
    canSendFiles?: BoolFilter<"ConversationMember"> | boolean
    canSendImages?: BoolFilter<"ConversationMember"> | boolean
    canSendVideos?: BoolFilter<"ConversationMember"> | boolean
    canSendAudios?: BoolFilter<"ConversationMember"> | boolean
    canSendLocations?: BoolFilter<"ConversationMember"> | boolean
    canSendLinks?: BoolFilter<"ConversationMember"> | boolean
    joinedAt?: DateTimeFilter<"ConversationMember"> | Date | string
    leftAt?: DateTimeNullableFilter<"ConversationMember"> | Date | string | null
    isActive?: BoolFilter<"ConversationMember"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }, "id">

  export type ConversationMemberOrderByWithAggregationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    canSendMessage?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    canSendVideos?: SortOrder
    canSendAudios?: SortOrder
    canSendLocations?: SortOrder
    canSendLinks?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrder
    isActive?: SortOrder
    _count?: ConversationMemberCountOrderByAggregateInput
    _max?: ConversationMemberMaxOrderByAggregateInput
    _min?: ConversationMemberMinOrderByAggregateInput
  }

  export type ConversationMemberScalarWhereWithAggregatesInput = {
    AND?: ConversationMemberScalarWhereWithAggregatesInput | ConversationMemberScalarWhereWithAggregatesInput[]
    OR?: ConversationMemberScalarWhereWithAggregatesInput[]
    NOT?: ConversationMemberScalarWhereWithAggregatesInput | ConversationMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConversationMember"> | string
    conversationId?: StringWithAggregatesFilter<"ConversationMember"> | string
    userId?: StringWithAggregatesFilter<"ConversationMember"> | string
    role?: StringWithAggregatesFilter<"ConversationMember"> | string
    canSendMessage?: BoolWithAggregatesFilter<"ConversationMember"> | boolean
    canSendFiles?: BoolWithAggregatesFilter<"ConversationMember"> | boolean
    canSendImages?: BoolWithAggregatesFilter<"ConversationMember"> | boolean
    canSendVideos?: BoolWithAggregatesFilter<"ConversationMember"> | boolean
    canSendAudios?: BoolWithAggregatesFilter<"ConversationMember"> | boolean
    canSendLocations?: BoolWithAggregatesFilter<"ConversationMember"> | boolean
    canSendLinks?: BoolWithAggregatesFilter<"ConversationMember"> | boolean
    joinedAt?: DateTimeWithAggregatesFilter<"ConversationMember"> | Date | string
    leftAt?: DateTimeNullableWithAggregatesFilter<"ConversationMember"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"ConversationMember"> | boolean
  }

  export type ConversationShareLinkWhereInput = {
    AND?: ConversationShareLinkWhereInput | ConversationShareLinkWhereInput[]
    OR?: ConversationShareLinkWhereInput[]
    NOT?: ConversationShareLinkWhereInput | ConversationShareLinkWhereInput[]
    id?: StringFilter<"ConversationShareLink"> | string
    linkId?: StringFilter<"ConversationShareLink"> | string
    identifier?: StringNullableFilter<"ConversationShareLink"> | string | null
    conversationId?: StringFilter<"ConversationShareLink"> | string
    createdBy?: StringFilter<"ConversationShareLink"> | string
    name?: StringNullableFilter<"ConversationShareLink"> | string | null
    description?: StringNullableFilter<"ConversationShareLink"> | string | null
    maxUses?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentUses?: IntFilter<"ConversationShareLink"> | number
    maxConcurrentUsers?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentConcurrentUsers?: IntFilter<"ConversationShareLink"> | number
    maxUniqueSessions?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentUniqueSessions?: IntFilter<"ConversationShareLink"> | number
    expiresAt?: DateTimeNullableFilter<"ConversationShareLink"> | Date | string | null
    isActive?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousMessages?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousFiles?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousImages?: BoolFilter<"ConversationShareLink"> | boolean
    allowViewHistory?: BoolFilter<"ConversationShareLink"> | boolean
    requireNickname?: BoolFilter<"ConversationShareLink"> | boolean
    requireEmail?: BoolFilter<"ConversationShareLink"> | boolean
    allowedCountries?: StringNullableListFilter<"ConversationShareLink">
    allowedLanguages?: StringNullableListFilter<"ConversationShareLink">
    allowedIpRanges?: StringNullableListFilter<"ConversationShareLink">
    createdAt?: DateTimeFilter<"ConversationShareLink"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationShareLink"> | Date | string
    anonymousParticipants?: AnonymousParticipantListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }

  export type ConversationShareLinkOrderByWithRelationInput = {
    id?: SortOrder
    linkId?: SortOrder
    identifier?: SortOrder
    conversationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    currentUses?: SortOrder
    maxConcurrentUsers?: SortOrder
    currentConcurrentUsers?: SortOrder
    maxUniqueSessions?: SortOrder
    currentUniqueSessions?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    allowAnonymousMessages?: SortOrder
    allowAnonymousFiles?: SortOrder
    allowAnonymousImages?: SortOrder
    allowViewHistory?: SortOrder
    requireNickname?: SortOrder
    requireEmail?: SortOrder
    allowedCountries?: SortOrder
    allowedLanguages?: SortOrder
    allowedIpRanges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    anonymousParticipants?: AnonymousParticipantOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
  }

  export type ConversationShareLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    linkId?: string
    identifier?: string
    AND?: ConversationShareLinkWhereInput | ConversationShareLinkWhereInput[]
    OR?: ConversationShareLinkWhereInput[]
    NOT?: ConversationShareLinkWhereInput | ConversationShareLinkWhereInput[]
    conversationId?: StringFilter<"ConversationShareLink"> | string
    createdBy?: StringFilter<"ConversationShareLink"> | string
    name?: StringNullableFilter<"ConversationShareLink"> | string | null
    description?: StringNullableFilter<"ConversationShareLink"> | string | null
    maxUses?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentUses?: IntFilter<"ConversationShareLink"> | number
    maxConcurrentUsers?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentConcurrentUsers?: IntFilter<"ConversationShareLink"> | number
    maxUniqueSessions?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentUniqueSessions?: IntFilter<"ConversationShareLink"> | number
    expiresAt?: DateTimeNullableFilter<"ConversationShareLink"> | Date | string | null
    isActive?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousMessages?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousFiles?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousImages?: BoolFilter<"ConversationShareLink"> | boolean
    allowViewHistory?: BoolFilter<"ConversationShareLink"> | boolean
    requireNickname?: BoolFilter<"ConversationShareLink"> | boolean
    requireEmail?: BoolFilter<"ConversationShareLink"> | boolean
    allowedCountries?: StringNullableListFilter<"ConversationShareLink">
    allowedLanguages?: StringNullableListFilter<"ConversationShareLink">
    allowedIpRanges?: StringNullableListFilter<"ConversationShareLink">
    createdAt?: DateTimeFilter<"ConversationShareLink"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationShareLink"> | Date | string
    anonymousParticipants?: AnonymousParticipantListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }, "id" | "linkId" | "identifier">

  export type ConversationShareLinkOrderByWithAggregationInput = {
    id?: SortOrder
    linkId?: SortOrder
    identifier?: SortOrder
    conversationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    currentUses?: SortOrder
    maxConcurrentUsers?: SortOrder
    currentConcurrentUsers?: SortOrder
    maxUniqueSessions?: SortOrder
    currentUniqueSessions?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    allowAnonymousMessages?: SortOrder
    allowAnonymousFiles?: SortOrder
    allowAnonymousImages?: SortOrder
    allowViewHistory?: SortOrder
    requireNickname?: SortOrder
    requireEmail?: SortOrder
    allowedCountries?: SortOrder
    allowedLanguages?: SortOrder
    allowedIpRanges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConversationShareLinkCountOrderByAggregateInput
    _avg?: ConversationShareLinkAvgOrderByAggregateInput
    _max?: ConversationShareLinkMaxOrderByAggregateInput
    _min?: ConversationShareLinkMinOrderByAggregateInput
    _sum?: ConversationShareLinkSumOrderByAggregateInput
  }

  export type ConversationShareLinkScalarWhereWithAggregatesInput = {
    AND?: ConversationShareLinkScalarWhereWithAggregatesInput | ConversationShareLinkScalarWhereWithAggregatesInput[]
    OR?: ConversationShareLinkScalarWhereWithAggregatesInput[]
    NOT?: ConversationShareLinkScalarWhereWithAggregatesInput | ConversationShareLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConversationShareLink"> | string
    linkId?: StringWithAggregatesFilter<"ConversationShareLink"> | string
    identifier?: StringNullableWithAggregatesFilter<"ConversationShareLink"> | string | null
    conversationId?: StringWithAggregatesFilter<"ConversationShareLink"> | string
    createdBy?: StringWithAggregatesFilter<"ConversationShareLink"> | string
    name?: StringNullableWithAggregatesFilter<"ConversationShareLink"> | string | null
    description?: StringNullableWithAggregatesFilter<"ConversationShareLink"> | string | null
    maxUses?: IntNullableWithAggregatesFilter<"ConversationShareLink"> | number | null
    currentUses?: IntWithAggregatesFilter<"ConversationShareLink"> | number
    maxConcurrentUsers?: IntNullableWithAggregatesFilter<"ConversationShareLink"> | number | null
    currentConcurrentUsers?: IntWithAggregatesFilter<"ConversationShareLink"> | number
    maxUniqueSessions?: IntNullableWithAggregatesFilter<"ConversationShareLink"> | number | null
    currentUniqueSessions?: IntWithAggregatesFilter<"ConversationShareLink"> | number
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ConversationShareLink"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"ConversationShareLink"> | boolean
    allowAnonymousMessages?: BoolWithAggregatesFilter<"ConversationShareLink"> | boolean
    allowAnonymousFiles?: BoolWithAggregatesFilter<"ConversationShareLink"> | boolean
    allowAnonymousImages?: BoolWithAggregatesFilter<"ConversationShareLink"> | boolean
    allowViewHistory?: BoolWithAggregatesFilter<"ConversationShareLink"> | boolean
    requireNickname?: BoolWithAggregatesFilter<"ConversationShareLink"> | boolean
    requireEmail?: BoolWithAggregatesFilter<"ConversationShareLink"> | boolean
    allowedCountries?: StringNullableListFilter<"ConversationShareLink">
    allowedLanguages?: StringNullableListFilter<"ConversationShareLink">
    allowedIpRanges?: StringNullableListFilter<"ConversationShareLink">
    createdAt?: DateTimeWithAggregatesFilter<"ConversationShareLink"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ConversationShareLink"> | Date | string
  }

  export type AnonymousParticipantWhereInput = {
    AND?: AnonymousParticipantWhereInput | AnonymousParticipantWhereInput[]
    OR?: AnonymousParticipantWhereInput[]
    NOT?: AnonymousParticipantWhereInput | AnonymousParticipantWhereInput[]
    id?: StringFilter<"AnonymousParticipant"> | string
    conversationId?: StringFilter<"AnonymousParticipant"> | string
    shareLinkId?: StringFilter<"AnonymousParticipant"> | string
    firstName?: StringFilter<"AnonymousParticipant"> | string
    lastName?: StringFilter<"AnonymousParticipant"> | string
    username?: StringFilter<"AnonymousParticipant"> | string
    email?: StringNullableFilter<"AnonymousParticipant"> | string | null
    sessionToken?: StringFilter<"AnonymousParticipant"> | string
    ipAddress?: StringNullableFilter<"AnonymousParticipant"> | string | null
    country?: StringNullableFilter<"AnonymousParticipant"> | string | null
    language?: StringFilter<"AnonymousParticipant"> | string
    deviceFingerprint?: StringNullableFilter<"AnonymousParticipant"> | string | null
    isActive?: BoolFilter<"AnonymousParticipant"> | boolean
    isOnline?: BoolFilter<"AnonymousParticipant"> | boolean
    lastActiveAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    canSendMessages?: BoolFilter<"AnonymousParticipant"> | boolean
    canSendFiles?: BoolFilter<"AnonymousParticipant"> | boolean
    canSendImages?: BoolFilter<"AnonymousParticipant"> | boolean
    joinedAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    lastSeenAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    leftAt?: DateTimeNullableFilter<"AnonymousParticipant"> | Date | string | null
    shareLink?: XOR<ConversationShareLinkRelationFilter, ConversationShareLinkWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    sentMessages?: MessageListRelationFilter
  }

  export type AnonymousParticipantOrderByWithRelationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    shareLinkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrder
    country?: SortOrder
    language?: SortOrder
    deviceFingerprint?: SortOrder
    isActive?: SortOrder
    isOnline?: SortOrder
    lastActiveAt?: SortOrder
    canSendMessages?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    leftAt?: SortOrder
    shareLink?: ConversationShareLinkOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
    sentMessages?: MessageOrderByRelationAggregateInput
  }

  export type AnonymousParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: AnonymousParticipantWhereInput | AnonymousParticipantWhereInput[]
    OR?: AnonymousParticipantWhereInput[]
    NOT?: AnonymousParticipantWhereInput | AnonymousParticipantWhereInput[]
    conversationId?: StringFilter<"AnonymousParticipant"> | string
    shareLinkId?: StringFilter<"AnonymousParticipant"> | string
    firstName?: StringFilter<"AnonymousParticipant"> | string
    lastName?: StringFilter<"AnonymousParticipant"> | string
    username?: StringFilter<"AnonymousParticipant"> | string
    email?: StringNullableFilter<"AnonymousParticipant"> | string | null
    ipAddress?: StringNullableFilter<"AnonymousParticipant"> | string | null
    country?: StringNullableFilter<"AnonymousParticipant"> | string | null
    language?: StringFilter<"AnonymousParticipant"> | string
    deviceFingerprint?: StringNullableFilter<"AnonymousParticipant"> | string | null
    isActive?: BoolFilter<"AnonymousParticipant"> | boolean
    isOnline?: BoolFilter<"AnonymousParticipant"> | boolean
    lastActiveAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    canSendMessages?: BoolFilter<"AnonymousParticipant"> | boolean
    canSendFiles?: BoolFilter<"AnonymousParticipant"> | boolean
    canSendImages?: BoolFilter<"AnonymousParticipant"> | boolean
    joinedAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    lastSeenAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    leftAt?: DateTimeNullableFilter<"AnonymousParticipant"> | Date | string | null
    shareLink?: XOR<ConversationShareLinkRelationFilter, ConversationShareLinkWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    sentMessages?: MessageListRelationFilter
  }, "id" | "sessionToken">

  export type AnonymousParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    shareLinkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrder
    country?: SortOrder
    language?: SortOrder
    deviceFingerprint?: SortOrder
    isActive?: SortOrder
    isOnline?: SortOrder
    lastActiveAt?: SortOrder
    canSendMessages?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    leftAt?: SortOrder
    _count?: AnonymousParticipantCountOrderByAggregateInput
    _max?: AnonymousParticipantMaxOrderByAggregateInput
    _min?: AnonymousParticipantMinOrderByAggregateInput
  }

  export type AnonymousParticipantScalarWhereWithAggregatesInput = {
    AND?: AnonymousParticipantScalarWhereWithAggregatesInput | AnonymousParticipantScalarWhereWithAggregatesInput[]
    OR?: AnonymousParticipantScalarWhereWithAggregatesInput[]
    NOT?: AnonymousParticipantScalarWhereWithAggregatesInput | AnonymousParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AnonymousParticipant"> | string
    conversationId?: StringWithAggregatesFilter<"AnonymousParticipant"> | string
    shareLinkId?: StringWithAggregatesFilter<"AnonymousParticipant"> | string
    firstName?: StringWithAggregatesFilter<"AnonymousParticipant"> | string
    lastName?: StringWithAggregatesFilter<"AnonymousParticipant"> | string
    username?: StringWithAggregatesFilter<"AnonymousParticipant"> | string
    email?: StringNullableWithAggregatesFilter<"AnonymousParticipant"> | string | null
    sessionToken?: StringWithAggregatesFilter<"AnonymousParticipant"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"AnonymousParticipant"> | string | null
    country?: StringNullableWithAggregatesFilter<"AnonymousParticipant"> | string | null
    language?: StringWithAggregatesFilter<"AnonymousParticipant"> | string
    deviceFingerprint?: StringNullableWithAggregatesFilter<"AnonymousParticipant"> | string | null
    isActive?: BoolWithAggregatesFilter<"AnonymousParticipant"> | boolean
    isOnline?: BoolWithAggregatesFilter<"AnonymousParticipant"> | boolean
    lastActiveAt?: DateTimeWithAggregatesFilter<"AnonymousParticipant"> | Date | string
    canSendMessages?: BoolWithAggregatesFilter<"AnonymousParticipant"> | boolean
    canSendFiles?: BoolWithAggregatesFilter<"AnonymousParticipant"> | boolean
    canSendImages?: BoolWithAggregatesFilter<"AnonymousParticipant"> | boolean
    joinedAt?: DateTimeWithAggregatesFilter<"AnonymousParticipant"> | Date | string
    lastSeenAt?: DateTimeWithAggregatesFilter<"AnonymousParticipant"> | Date | string
    leftAt?: DateTimeNullableWithAggregatesFilter<"AnonymousParticipant"> | Date | string | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringNullableFilter<"Message"> | string | null
    anonymousSenderId?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    originalLanguage?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    isEdited?: BoolFilter<"Message"> | boolean
    editedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    isDeleted?: BoolFilter<"Message"> | boolean
    deletedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    replyToId?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    readStatus?: MessageReadStatusListRelationFilter
    translations?: MessageTranslationListRelationFilter
    replyTo?: XOR<MessageNullableRelationFilter, MessageWhereInput> | null
    replies?: MessageListRelationFilter
    anonymousSender?: XOR<AnonymousParticipantNullableRelationFilter, AnonymousParticipantWhereInput> | null
    sender?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    anonymousSenderId?: SortOrder
    content?: SortOrder
    originalLanguage?: SortOrder
    messageType?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    replyToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    readStatus?: MessageReadStatusOrderByRelationAggregateInput
    translations?: MessageTranslationOrderByRelationAggregateInput
    replyTo?: MessageOrderByWithRelationInput
    replies?: MessageOrderByRelationAggregateInput
    anonymousSender?: AnonymousParticipantOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringNullableFilter<"Message"> | string | null
    anonymousSenderId?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    originalLanguage?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    isEdited?: BoolFilter<"Message"> | boolean
    editedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    isDeleted?: BoolFilter<"Message"> | boolean
    deletedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    replyToId?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    readStatus?: MessageReadStatusListRelationFilter
    translations?: MessageTranslationListRelationFilter
    replyTo?: XOR<MessageNullableRelationFilter, MessageWhereInput> | null
    replies?: MessageListRelationFilter
    anonymousSender?: XOR<AnonymousParticipantNullableRelationFilter, AnonymousParticipantWhereInput> | null
    sender?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    anonymousSenderId?: SortOrder
    content?: SortOrder
    originalLanguage?: SortOrder
    messageType?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    replyToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    conversationId?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    anonymousSenderId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    content?: StringWithAggregatesFilter<"Message"> | string
    originalLanguage?: StringWithAggregatesFilter<"Message"> | string
    messageType?: StringWithAggregatesFilter<"Message"> | string
    isEdited?: BoolWithAggregatesFilter<"Message"> | boolean
    editedAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Message"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    replyToId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type MessageTranslationWhereInput = {
    AND?: MessageTranslationWhereInput | MessageTranslationWhereInput[]
    OR?: MessageTranslationWhereInput[]
    NOT?: MessageTranslationWhereInput | MessageTranslationWhereInput[]
    id?: StringFilter<"MessageTranslation"> | string
    messageId?: StringFilter<"MessageTranslation"> | string
    sourceLanguage?: StringFilter<"MessageTranslation"> | string
    targetLanguage?: StringFilter<"MessageTranslation"> | string
    translatedContent?: StringFilter<"MessageTranslation"> | string
    translationModel?: StringFilter<"MessageTranslation"> | string
    cacheKey?: StringFilter<"MessageTranslation"> | string
    confidenceScore?: FloatNullableFilter<"MessageTranslation"> | number | null
    createdAt?: DateTimeFilter<"MessageTranslation"> | Date | string
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }

  export type MessageTranslationOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    sourceLanguage?: SortOrder
    targetLanguage?: SortOrder
    translatedContent?: SortOrder
    translationModel?: SortOrder
    cacheKey?: SortOrder
    confidenceScore?: SortOrder
    createdAt?: SortOrder
    message?: MessageOrderByWithRelationInput
  }

  export type MessageTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cacheKey?: string
    AND?: MessageTranslationWhereInput | MessageTranslationWhereInput[]
    OR?: MessageTranslationWhereInput[]
    NOT?: MessageTranslationWhereInput | MessageTranslationWhereInput[]
    messageId?: StringFilter<"MessageTranslation"> | string
    sourceLanguage?: StringFilter<"MessageTranslation"> | string
    targetLanguage?: StringFilter<"MessageTranslation"> | string
    translatedContent?: StringFilter<"MessageTranslation"> | string
    translationModel?: StringFilter<"MessageTranslation"> | string
    confidenceScore?: FloatNullableFilter<"MessageTranslation"> | number | null
    createdAt?: DateTimeFilter<"MessageTranslation"> | Date | string
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }, "id" | "cacheKey">

  export type MessageTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    sourceLanguage?: SortOrder
    targetLanguage?: SortOrder
    translatedContent?: SortOrder
    translationModel?: SortOrder
    cacheKey?: SortOrder
    confidenceScore?: SortOrder
    createdAt?: SortOrder
    _count?: MessageTranslationCountOrderByAggregateInput
    _avg?: MessageTranslationAvgOrderByAggregateInput
    _max?: MessageTranslationMaxOrderByAggregateInput
    _min?: MessageTranslationMinOrderByAggregateInput
    _sum?: MessageTranslationSumOrderByAggregateInput
  }

  export type MessageTranslationScalarWhereWithAggregatesInput = {
    AND?: MessageTranslationScalarWhereWithAggregatesInput | MessageTranslationScalarWhereWithAggregatesInput[]
    OR?: MessageTranslationScalarWhereWithAggregatesInput[]
    NOT?: MessageTranslationScalarWhereWithAggregatesInput | MessageTranslationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessageTranslation"> | string
    messageId?: StringWithAggregatesFilter<"MessageTranslation"> | string
    sourceLanguage?: StringWithAggregatesFilter<"MessageTranslation"> | string
    targetLanguage?: StringWithAggregatesFilter<"MessageTranslation"> | string
    translatedContent?: StringWithAggregatesFilter<"MessageTranslation"> | string
    translationModel?: StringWithAggregatesFilter<"MessageTranslation"> | string
    cacheKey?: StringWithAggregatesFilter<"MessageTranslation"> | string
    confidenceScore?: FloatNullableWithAggregatesFilter<"MessageTranslation"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"MessageTranslation"> | Date | string
  }

  export type MessageReadStatusWhereInput = {
    AND?: MessageReadStatusWhereInput | MessageReadStatusWhereInput[]
    OR?: MessageReadStatusWhereInput[]
    NOT?: MessageReadStatusWhereInput | MessageReadStatusWhereInput[]
    id?: StringFilter<"MessageReadStatus"> | string
    messageId?: StringFilter<"MessageReadStatus"> | string
    userId?: StringFilter<"MessageReadStatus"> | string
    readAt?: DateTimeFilter<"MessageReadStatus"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }

  export type MessageReadStatusOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
    user?: UserOrderByWithRelationInput
    message?: MessageOrderByWithRelationInput
  }

  export type MessageReadStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageReadStatusWhereInput | MessageReadStatusWhereInput[]
    OR?: MessageReadStatusWhereInput[]
    NOT?: MessageReadStatusWhereInput | MessageReadStatusWhereInput[]
    messageId?: StringFilter<"MessageReadStatus"> | string
    userId?: StringFilter<"MessageReadStatus"> | string
    readAt?: DateTimeFilter<"MessageReadStatus"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }, "id">

  export type MessageReadStatusOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
    _count?: MessageReadStatusCountOrderByAggregateInput
    _max?: MessageReadStatusMaxOrderByAggregateInput
    _min?: MessageReadStatusMinOrderByAggregateInput
  }

  export type MessageReadStatusScalarWhereWithAggregatesInput = {
    AND?: MessageReadStatusScalarWhereWithAggregatesInput | MessageReadStatusScalarWhereWithAggregatesInput[]
    OR?: MessageReadStatusScalarWhereWithAggregatesInput[]
    NOT?: MessageReadStatusScalarWhereWithAggregatesInput | MessageReadStatusScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessageReadStatus"> | string
    messageId?: StringWithAggregatesFilter<"MessageReadStatus"> | string
    userId?: StringWithAggregatesFilter<"MessageReadStatus"> | string
    readAt?: DateTimeWithAggregatesFilter<"MessageReadStatus"> | Date | string
  }

  export type FriendRequestWhereInput = {
    AND?: FriendRequestWhereInput | FriendRequestWhereInput[]
    OR?: FriendRequestWhereInput[]
    NOT?: FriendRequestWhereInput | FriendRequestWhereInput[]
    id?: StringFilter<"FriendRequest"> | string
    senderId?: StringFilter<"FriendRequest"> | string
    receiverId?: StringFilter<"FriendRequest"> | string
    status?: StringFilter<"FriendRequest"> | string
    createdAt?: DateTimeFilter<"FriendRequest"> | Date | string
    updatedAt?: DateTimeFilter<"FriendRequest"> | Date | string
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FriendRequestOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    receiver?: UserOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type FriendRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FriendRequestWhereInput | FriendRequestWhereInput[]
    OR?: FriendRequestWhereInput[]
    NOT?: FriendRequestWhereInput | FriendRequestWhereInput[]
    senderId?: StringFilter<"FriendRequest"> | string
    receiverId?: StringFilter<"FriendRequest"> | string
    status?: StringFilter<"FriendRequest"> | string
    createdAt?: DateTimeFilter<"FriendRequest"> | Date | string
    updatedAt?: DateTimeFilter<"FriendRequest"> | Date | string
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FriendRequestOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FriendRequestCountOrderByAggregateInput
    _max?: FriendRequestMaxOrderByAggregateInput
    _min?: FriendRequestMinOrderByAggregateInput
  }

  export type FriendRequestScalarWhereWithAggregatesInput = {
    AND?: FriendRequestScalarWhereWithAggregatesInput | FriendRequestScalarWhereWithAggregatesInput[]
    OR?: FriendRequestScalarWhereWithAggregatesInput[]
    NOT?: FriendRequestScalarWhereWithAggregatesInput | FriendRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FriendRequest"> | string
    senderId?: StringWithAggregatesFilter<"FriendRequest"> | string
    receiverId?: StringWithAggregatesFilter<"FriendRequest"> | string
    status?: StringWithAggregatesFilter<"FriendRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FriendRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FriendRequest"> | Date | string
  }

  export type TypingIndicatorWhereInput = {
    AND?: TypingIndicatorWhereInput | TypingIndicatorWhereInput[]
    OR?: TypingIndicatorWhereInput[]
    NOT?: TypingIndicatorWhereInput | TypingIndicatorWhereInput[]
    id?: StringFilter<"TypingIndicator"> | string
    conversationId?: StringFilter<"TypingIndicator"> | string
    userId?: StringFilter<"TypingIndicator"> | string
    isTyping?: BoolFilter<"TypingIndicator"> | boolean
    startedAt?: DateTimeFilter<"TypingIndicator"> | Date | string
    updatedAt?: DateTimeFilter<"TypingIndicator"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }

  export type TypingIndicatorOrderByWithRelationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    isTyping?: SortOrder
    startedAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
  }

  export type TypingIndicatorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TypingIndicatorWhereInput | TypingIndicatorWhereInput[]
    OR?: TypingIndicatorWhereInput[]
    NOT?: TypingIndicatorWhereInput | TypingIndicatorWhereInput[]
    conversationId?: StringFilter<"TypingIndicator"> | string
    userId?: StringFilter<"TypingIndicator"> | string
    isTyping?: BoolFilter<"TypingIndicator"> | boolean
    startedAt?: DateTimeFilter<"TypingIndicator"> | Date | string
    updatedAt?: DateTimeFilter<"TypingIndicator"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }, "id">

  export type TypingIndicatorOrderByWithAggregationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    isTyping?: SortOrder
    startedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TypingIndicatorCountOrderByAggregateInput
    _max?: TypingIndicatorMaxOrderByAggregateInput
    _min?: TypingIndicatorMinOrderByAggregateInput
  }

  export type TypingIndicatorScalarWhereWithAggregatesInput = {
    AND?: TypingIndicatorScalarWhereWithAggregatesInput | TypingIndicatorScalarWhereWithAggregatesInput[]
    OR?: TypingIndicatorScalarWhereWithAggregatesInput[]
    NOT?: TypingIndicatorScalarWhereWithAggregatesInput | TypingIndicatorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TypingIndicator"> | string
    conversationId?: StringWithAggregatesFilter<"TypingIndicator"> | string
    userId?: StringWithAggregatesFilter<"TypingIndicator"> | string
    isTyping?: BoolWithAggregatesFilter<"TypingIndicator"> | boolean
    startedAt?: DateTimeWithAggregatesFilter<"TypingIndicator"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TypingIndicator"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    data?: StringNullableFilter<"Notification"> | string | null
    priority?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    emailSent?: BoolFilter<"Notification"> | boolean
    pushSent?: BoolFilter<"Notification"> | boolean
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    emailSent?: SortOrder
    pushSent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    data?: StringNullableFilter<"Notification"> | string | null
    priority?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    emailSent?: BoolFilter<"Notification"> | boolean
    pushSent?: BoolFilter<"Notification"> | boolean
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    emailSent?: SortOrder
    pushSent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    content?: StringWithAggregatesFilter<"Notification"> | string
    data?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    priority?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    emailSent?: BoolWithAggregatesFilter<"Notification"> | boolean
    pushSent?: BoolWithAggregatesFilter<"Notification"> | boolean
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type CommunityWhereInput = {
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    id?: StringFilter<"Community"> | string
    name?: StringFilter<"Community"> | string
    description?: StringNullableFilter<"Community"> | string | null
    avatar?: StringNullableFilter<"Community"> | string | null
    isPrivate?: BoolFilter<"Community"> | boolean
    createdBy?: StringFilter<"Community"> | string
    createdAt?: DateTimeFilter<"Community"> | Date | string
    updatedAt?: DateTimeFilter<"Community"> | Date | string
    members?: CommunityMemberListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
    admins?: CommunityAdminListRelationFilter
    moderators?: CommunityModeratorListRelationFilter
    Conversation?: ConversationListRelationFilter
  }

  export type CommunityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    avatar?: SortOrder
    isPrivate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: CommunityMemberOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
    admins?: CommunityAdminOrderByRelationAggregateInput
    moderators?: CommunityModeratorOrderByRelationAggregateInput
    Conversation?: ConversationOrderByRelationAggregateInput
  }

  export type CommunityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    name?: StringFilter<"Community"> | string
    description?: StringNullableFilter<"Community"> | string | null
    avatar?: StringNullableFilter<"Community"> | string | null
    isPrivate?: BoolFilter<"Community"> | boolean
    createdBy?: StringFilter<"Community"> | string
    createdAt?: DateTimeFilter<"Community"> | Date | string
    updatedAt?: DateTimeFilter<"Community"> | Date | string
    members?: CommunityMemberListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
    admins?: CommunityAdminListRelationFilter
    moderators?: CommunityModeratorListRelationFilter
    Conversation?: ConversationListRelationFilter
  }, "id">

  export type CommunityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    avatar?: SortOrder
    isPrivate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommunityCountOrderByAggregateInput
    _max?: CommunityMaxOrderByAggregateInput
    _min?: CommunityMinOrderByAggregateInput
  }

  export type CommunityScalarWhereWithAggregatesInput = {
    AND?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    OR?: CommunityScalarWhereWithAggregatesInput[]
    NOT?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Community"> | string
    name?: StringWithAggregatesFilter<"Community"> | string
    description?: StringNullableWithAggregatesFilter<"Community"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Community"> | string | null
    isPrivate?: BoolWithAggregatesFilter<"Community"> | boolean
    createdBy?: StringWithAggregatesFilter<"Community"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Community"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Community"> | Date | string
  }

  export type CommunityMemberWhereInput = {
    AND?: CommunityMemberWhereInput | CommunityMemberWhereInput[]
    OR?: CommunityMemberWhereInput[]
    NOT?: CommunityMemberWhereInput | CommunityMemberWhereInput[]
    id?: StringFilter<"CommunityMember"> | string
    communityId?: StringFilter<"CommunityMember"> | string
    userId?: StringFilter<"CommunityMember"> | string
    joinedAt?: DateTimeFilter<"CommunityMember"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }

  export type CommunityMemberOrderByWithRelationInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
  }

  export type CommunityMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommunityMemberWhereInput | CommunityMemberWhereInput[]
    OR?: CommunityMemberWhereInput[]
    NOT?: CommunityMemberWhereInput | CommunityMemberWhereInput[]
    communityId?: StringFilter<"CommunityMember"> | string
    userId?: StringFilter<"CommunityMember"> | string
    joinedAt?: DateTimeFilter<"CommunityMember"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }, "id">

  export type CommunityMemberOrderByWithAggregationInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    _count?: CommunityMemberCountOrderByAggregateInput
    _max?: CommunityMemberMaxOrderByAggregateInput
    _min?: CommunityMemberMinOrderByAggregateInput
  }

  export type CommunityMemberScalarWhereWithAggregatesInput = {
    AND?: CommunityMemberScalarWhereWithAggregatesInput | CommunityMemberScalarWhereWithAggregatesInput[]
    OR?: CommunityMemberScalarWhereWithAggregatesInput[]
    NOT?: CommunityMemberScalarWhereWithAggregatesInput | CommunityMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CommunityMember"> | string
    communityId?: StringWithAggregatesFilter<"CommunityMember"> | string
    userId?: StringWithAggregatesFilter<"CommunityMember"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"CommunityMember"> | Date | string
  }

  export type UserStatsWhereInput = {
    AND?: UserStatsWhereInput | UserStatsWhereInput[]
    OR?: UserStatsWhereInput[]
    NOT?: UserStatsWhereInput | UserStatsWhereInput[]
    id?: StringFilter<"UserStats"> | string
    userId?: StringFilter<"UserStats"> | string
    messagesSent?: IntFilter<"UserStats"> | number
    messagesReceived?: IntFilter<"UserStats"> | number
    charactersTyped?: IntFilter<"UserStats"> | number
    imageMessagesSent?: IntFilter<"UserStats"> | number
    filesShared?: IntFilter<"UserStats"> | number
    conversationsJoined?: IntFilter<"UserStats"> | number
    communitiesCreated?: IntFilter<"UserStats"> | number
    friendsAdded?: IntFilter<"UserStats"> | number
    friendRequestsSent?: IntFilter<"UserStats"> | number
    translationsUsed?: IntFilter<"UserStats"> | number
    languagesDetected?: IntFilter<"UserStats"> | number
    autoTranslateTimeMinutes?: IntFilter<"UserStats"> | number
    totalOnlineTimeMinutes?: IntFilter<"UserStats"> | number
    sessionCount?: IntFilter<"UserStats"> | number
    lastActiveAt?: DateTimeFilter<"UserStats"> | Date | string
    createdAt?: DateTimeFilter<"UserStats"> | Date | string
    updatedAt?: DateTimeFilter<"UserStats"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserStatsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    charactersTyped?: SortOrder
    imageMessagesSent?: SortOrder
    filesShared?: SortOrder
    conversationsJoined?: SortOrder
    communitiesCreated?: SortOrder
    friendsAdded?: SortOrder
    friendRequestsSent?: SortOrder
    translationsUsed?: SortOrder
    languagesDetected?: SortOrder
    autoTranslateTimeMinutes?: SortOrder
    totalOnlineTimeMinutes?: SortOrder
    sessionCount?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserStatsWhereInput | UserStatsWhereInput[]
    OR?: UserStatsWhereInput[]
    NOT?: UserStatsWhereInput | UserStatsWhereInput[]
    messagesSent?: IntFilter<"UserStats"> | number
    messagesReceived?: IntFilter<"UserStats"> | number
    charactersTyped?: IntFilter<"UserStats"> | number
    imageMessagesSent?: IntFilter<"UserStats"> | number
    filesShared?: IntFilter<"UserStats"> | number
    conversationsJoined?: IntFilter<"UserStats"> | number
    communitiesCreated?: IntFilter<"UserStats"> | number
    friendsAdded?: IntFilter<"UserStats"> | number
    friendRequestsSent?: IntFilter<"UserStats"> | number
    translationsUsed?: IntFilter<"UserStats"> | number
    languagesDetected?: IntFilter<"UserStats"> | number
    autoTranslateTimeMinutes?: IntFilter<"UserStats"> | number
    totalOnlineTimeMinutes?: IntFilter<"UserStats"> | number
    sessionCount?: IntFilter<"UserStats"> | number
    lastActiveAt?: DateTimeFilter<"UserStats"> | Date | string
    createdAt?: DateTimeFilter<"UserStats"> | Date | string
    updatedAt?: DateTimeFilter<"UserStats"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserStatsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    charactersTyped?: SortOrder
    imageMessagesSent?: SortOrder
    filesShared?: SortOrder
    conversationsJoined?: SortOrder
    communitiesCreated?: SortOrder
    friendsAdded?: SortOrder
    friendRequestsSent?: SortOrder
    translationsUsed?: SortOrder
    languagesDetected?: SortOrder
    autoTranslateTimeMinutes?: SortOrder
    totalOnlineTimeMinutes?: SortOrder
    sessionCount?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserStatsCountOrderByAggregateInput
    _avg?: UserStatsAvgOrderByAggregateInput
    _max?: UserStatsMaxOrderByAggregateInput
    _min?: UserStatsMinOrderByAggregateInput
    _sum?: UserStatsSumOrderByAggregateInput
  }

  export type UserStatsScalarWhereWithAggregatesInput = {
    AND?: UserStatsScalarWhereWithAggregatesInput | UserStatsScalarWhereWithAggregatesInput[]
    OR?: UserStatsScalarWhereWithAggregatesInput[]
    NOT?: UserStatsScalarWhereWithAggregatesInput | UserStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserStats"> | string
    userId?: StringWithAggregatesFilter<"UserStats"> | string
    messagesSent?: IntWithAggregatesFilter<"UserStats"> | number
    messagesReceived?: IntWithAggregatesFilter<"UserStats"> | number
    charactersTyped?: IntWithAggregatesFilter<"UserStats"> | number
    imageMessagesSent?: IntWithAggregatesFilter<"UserStats"> | number
    filesShared?: IntWithAggregatesFilter<"UserStats"> | number
    conversationsJoined?: IntWithAggregatesFilter<"UserStats"> | number
    communitiesCreated?: IntWithAggregatesFilter<"UserStats"> | number
    friendsAdded?: IntWithAggregatesFilter<"UserStats"> | number
    friendRequestsSent?: IntWithAggregatesFilter<"UserStats"> | number
    translationsUsed?: IntWithAggregatesFilter<"UserStats"> | number
    languagesDetected?: IntWithAggregatesFilter<"UserStats"> | number
    autoTranslateTimeMinutes?: IntWithAggregatesFilter<"UserStats"> | number
    totalOnlineTimeMinutes?: IntWithAggregatesFilter<"UserStats"> | number
    sessionCount?: IntWithAggregatesFilter<"UserStats"> | number
    lastActiveAt?: DateTimeWithAggregatesFilter<"UserStats"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserStats"> | Date | string
  }

  export type UserPreferenceWhereInput = {
    AND?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    OR?: UserPreferenceWhereInput[]
    NOT?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    id?: StringFilter<"UserPreference"> | string
    userId?: StringFilter<"UserPreference"> | string
    key?: StringFilter<"UserPreference"> | string
    value?: StringFilter<"UserPreference"> | string
    valueType?: StringFilter<"UserPreference"> | string
    description?: StringNullableFilter<"UserPreference"> | string | null
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    OR?: UserPreferenceWhereInput[]
    NOT?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    userId?: StringFilter<"UserPreference"> | string
    key?: StringFilter<"UserPreference"> | string
    value?: StringFilter<"UserPreference"> | string
    valueType?: StringFilter<"UserPreference"> | string
    description?: StringNullableFilter<"UserPreference"> | string | null
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPreferenceCountOrderByAggregateInput
    _max?: UserPreferenceMaxOrderByAggregateInput
    _min?: UserPreferenceMinOrderByAggregateInput
  }

  export type UserPreferenceScalarWhereWithAggregatesInput = {
    AND?: UserPreferenceScalarWhereWithAggregatesInput | UserPreferenceScalarWhereWithAggregatesInput[]
    OR?: UserPreferenceScalarWhereWithAggregatesInput[]
    NOT?: UserPreferenceScalarWhereWithAggregatesInput | UserPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPreference"> | string
    userId?: StringWithAggregatesFilter<"UserPreference"> | string
    key?: StringWithAggregatesFilter<"UserPreference"> | string
    value?: StringWithAggregatesFilter<"UserPreference"> | string
    valueType?: StringWithAggregatesFilter<"UserPreference"> | string
    description?: StringNullableWithAggregatesFilter<"UserPreference"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPreference"> | Date | string
  }

  export type ConversationPreferenceWhereInput = {
    AND?: ConversationPreferenceWhereInput | ConversationPreferenceWhereInput[]
    OR?: ConversationPreferenceWhereInput[]
    NOT?: ConversationPreferenceWhereInput | ConversationPreferenceWhereInput[]
    id?: StringFilter<"ConversationPreference"> | string
    conversationId?: StringFilter<"ConversationPreference"> | string
    userId?: StringFilter<"ConversationPreference"> | string
    key?: StringFilter<"ConversationPreference"> | string
    value?: StringFilter<"ConversationPreference"> | string
    valueType?: StringFilter<"ConversationPreference"> | string
    description?: StringNullableFilter<"ConversationPreference"> | string | null
    createdAt?: DateTimeFilter<"ConversationPreference"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationPreference"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }

  export type ConversationPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
  }

  export type ConversationPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConversationPreferenceWhereInput | ConversationPreferenceWhereInput[]
    OR?: ConversationPreferenceWhereInput[]
    NOT?: ConversationPreferenceWhereInput | ConversationPreferenceWhereInput[]
    conversationId?: StringFilter<"ConversationPreference"> | string
    userId?: StringFilter<"ConversationPreference"> | string
    key?: StringFilter<"ConversationPreference"> | string
    value?: StringFilter<"ConversationPreference"> | string
    valueType?: StringFilter<"ConversationPreference"> | string
    description?: StringNullableFilter<"ConversationPreference"> | string | null
    createdAt?: DateTimeFilter<"ConversationPreference"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationPreference"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }, "id">

  export type ConversationPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConversationPreferenceCountOrderByAggregateInput
    _max?: ConversationPreferenceMaxOrderByAggregateInput
    _min?: ConversationPreferenceMinOrderByAggregateInput
  }

  export type ConversationPreferenceScalarWhereWithAggregatesInput = {
    AND?: ConversationPreferenceScalarWhereWithAggregatesInput | ConversationPreferenceScalarWhereWithAggregatesInput[]
    OR?: ConversationPreferenceScalarWhereWithAggregatesInput[]
    NOT?: ConversationPreferenceScalarWhereWithAggregatesInput | ConversationPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConversationPreference"> | string
    conversationId?: StringWithAggregatesFilter<"ConversationPreference"> | string
    userId?: StringWithAggregatesFilter<"ConversationPreference"> | string
    key?: StringWithAggregatesFilter<"ConversationPreference"> | string
    value?: StringWithAggregatesFilter<"ConversationPreference"> | string
    valueType?: StringWithAggregatesFilter<"ConversationPreference"> | string
    description?: StringNullableWithAggregatesFilter<"ConversationPreference"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ConversationPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ConversationPreference"> | Date | string
  }

  export type CommunityAdminWhereInput = {
    AND?: CommunityAdminWhereInput | CommunityAdminWhereInput[]
    OR?: CommunityAdminWhereInput[]
    NOT?: CommunityAdminWhereInput | CommunityAdminWhereInput[]
    id?: StringFilter<"CommunityAdmin"> | string
    communityId?: StringFilter<"CommunityAdmin"> | string
    userId?: StringFilter<"CommunityAdmin"> | string
    assignedAt?: DateTimeFilter<"CommunityAdmin"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }

  export type CommunityAdminOrderByWithRelationInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
  }

  export type CommunityAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommunityAdminWhereInput | CommunityAdminWhereInput[]
    OR?: CommunityAdminWhereInput[]
    NOT?: CommunityAdminWhereInput | CommunityAdminWhereInput[]
    communityId?: StringFilter<"CommunityAdmin"> | string
    userId?: StringFilter<"CommunityAdmin"> | string
    assignedAt?: DateTimeFilter<"CommunityAdmin"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }, "id">

  export type CommunityAdminOrderByWithAggregationInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    _count?: CommunityAdminCountOrderByAggregateInput
    _max?: CommunityAdminMaxOrderByAggregateInput
    _min?: CommunityAdminMinOrderByAggregateInput
  }

  export type CommunityAdminScalarWhereWithAggregatesInput = {
    AND?: CommunityAdminScalarWhereWithAggregatesInput | CommunityAdminScalarWhereWithAggregatesInput[]
    OR?: CommunityAdminScalarWhereWithAggregatesInput[]
    NOT?: CommunityAdminScalarWhereWithAggregatesInput | CommunityAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CommunityAdmin"> | string
    communityId?: StringWithAggregatesFilter<"CommunityAdmin"> | string
    userId?: StringWithAggregatesFilter<"CommunityAdmin"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"CommunityAdmin"> | Date | string
  }

  export type CommunityModeratorWhereInput = {
    AND?: CommunityModeratorWhereInput | CommunityModeratorWhereInput[]
    OR?: CommunityModeratorWhereInput[]
    NOT?: CommunityModeratorWhereInput | CommunityModeratorWhereInput[]
    id?: StringFilter<"CommunityModerator"> | string
    communityId?: StringFilter<"CommunityModerator"> | string
    userId?: StringFilter<"CommunityModerator"> | string
    assignedAt?: DateTimeFilter<"CommunityModerator"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }

  export type CommunityModeratorOrderByWithRelationInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
  }

  export type CommunityModeratorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommunityModeratorWhereInput | CommunityModeratorWhereInput[]
    OR?: CommunityModeratorWhereInput[]
    NOT?: CommunityModeratorWhereInput | CommunityModeratorWhereInput[]
    communityId?: StringFilter<"CommunityModerator"> | string
    userId?: StringFilter<"CommunityModerator"> | string
    assignedAt?: DateTimeFilter<"CommunityModerator"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }, "id">

  export type CommunityModeratorOrderByWithAggregationInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    _count?: CommunityModeratorCountOrderByAggregateInput
    _max?: CommunityModeratorMaxOrderByAggregateInput
    _min?: CommunityModeratorMinOrderByAggregateInput
  }

  export type CommunityModeratorScalarWhereWithAggregatesInput = {
    AND?: CommunityModeratorScalarWhereWithAggregatesInput | CommunityModeratorScalarWhereWithAggregatesInput[]
    OR?: CommunityModeratorScalarWhereWithAggregatesInput[]
    NOT?: CommunityModeratorScalarWhereWithAggregatesInput | CommunityModeratorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CommunityModerator"> | string
    communityId?: StringWithAggregatesFilter<"CommunityModerator"> | string
    userId?: StringWithAggregatesFilter<"CommunityModerator"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"CommunityModerator"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationCreateInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutConversationInput
    members?: ConversationMemberCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkCreateNestedManyWithoutConversationInput
    community?: CommunityCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    communityId?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutConversationInput
    members?: ConversationMemberUncheckedCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationUpdateInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUpdateManyWithoutConversationNestedInput
    community?: CommunityUpdateOneWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUncheckedUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUncheckedUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutConversationNestedInput
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationCreateManyInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    communityId?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationUpdateManyMutationInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateManyInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemberCreateInput = {
    id?: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    user: UserCreateNestedOneWithoutConversationsInput
    conversation: ConversationCreateNestedOneWithoutMembersInput
  }

  export type ConversationMemberUncheckedCreateInput = {
    id?: string
    conversationId: string
    userId: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
  }

  export type ConversationMemberUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutConversationsNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ConversationMemberUncheckedUpdateInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationMemberCreateManyInput = {
    id?: string
    conversationId: string
    userId: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
  }

  export type ConversationMemberUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationMemberUncheckedUpdateManyInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationShareLinkCreateInput = {
    id?: string
    linkId: string
    identifier?: string | null
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutShareLinkInput
    creator: UserCreateNestedOneWithoutCreatedShareLinksInput
    conversation: ConversationCreateNestedOneWithoutShareLinksInput
  }

  export type ConversationShareLinkUncheckedCreateInput = {
    id?: string
    linkId: string
    identifier?: string | null
    conversationId: string
    createdBy: string
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutShareLinkInput
  }

  export type ConversationShareLinkUpdateInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutShareLinkNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedShareLinksNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutShareLinksNestedInput
  }

  export type ConversationShareLinkUncheckedUpdateInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    conversationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutShareLinkNestedInput
  }

  export type ConversationShareLinkCreateManyInput = {
    id?: string
    linkId: string
    identifier?: string | null
    conversationId: string
    createdBy: string
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationShareLinkUpdateManyMutationInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationShareLinkUncheckedUpdateManyInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    conversationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnonymousParticipantCreateInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
    shareLink: ConversationShareLinkCreateNestedOneWithoutAnonymousParticipantsInput
    conversation: ConversationCreateNestedOneWithoutAnonymousParticipantsInput
    sentMessages?: MessageCreateNestedManyWithoutAnonymousSenderInput
  }

  export type AnonymousParticipantUncheckedCreateInput = {
    id?: string
    conversationId: string
    shareLinkId: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutAnonymousSenderInput
  }

  export type AnonymousParticipantUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shareLink?: ConversationShareLinkUpdateOneRequiredWithoutAnonymousParticipantsNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutAnonymousParticipantsNestedInput
    sentMessages?: MessageUpdateManyWithoutAnonymousSenderNestedInput
  }

  export type AnonymousParticipantUncheckedUpdateInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    shareLinkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutAnonymousSenderNestedInput
  }

  export type AnonymousParticipantCreateManyInput = {
    id?: string
    conversationId: string
    shareLinkId: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
  }

  export type AnonymousParticipantUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnonymousParticipantUncheckedUpdateManyInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    shareLinkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationCreateNestedManyWithoutMessageInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    anonymousSender?: AnonymousParticipantCreateNestedOneWithoutSentMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type MessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUpdateManyWithoutMessageNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    anonymousSender?: AnonymousParticipantUpdateOneWithoutSentMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUncheckedUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type MessageCreateManyInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTranslationCreateInput = {
    id?: string
    sourceLanguage: string
    targetLanguage: string
    translatedContent: string
    translationModel: string
    cacheKey: string
    confidenceScore?: number | null
    createdAt?: Date | string
    message: MessageCreateNestedOneWithoutTranslationsInput
  }

  export type MessageTranslationUncheckedCreateInput = {
    id?: string
    messageId: string
    sourceLanguage: string
    targetLanguage: string
    translatedContent: string
    translationModel: string
    cacheKey: string
    confidenceScore?: number | null
    createdAt?: Date | string
  }

  export type MessageTranslationUpdateInput = {
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    targetLanguage?: StringFieldUpdateOperationsInput | string
    translatedContent?: StringFieldUpdateOperationsInput | string
    translationModel?: StringFieldUpdateOperationsInput | string
    cacheKey?: StringFieldUpdateOperationsInput | string
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: MessageUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type MessageTranslationUncheckedUpdateInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    targetLanguage?: StringFieldUpdateOperationsInput | string
    translatedContent?: StringFieldUpdateOperationsInput | string
    translationModel?: StringFieldUpdateOperationsInput | string
    cacheKey?: StringFieldUpdateOperationsInput | string
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTranslationCreateManyInput = {
    id?: string
    messageId: string
    sourceLanguage: string
    targetLanguage: string
    translatedContent: string
    translationModel: string
    cacheKey: string
    confidenceScore?: number | null
    createdAt?: Date | string
  }

  export type MessageTranslationUpdateManyMutationInput = {
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    targetLanguage?: StringFieldUpdateOperationsInput | string
    translatedContent?: StringFieldUpdateOperationsInput | string
    translationModel?: StringFieldUpdateOperationsInput | string
    cacheKey?: StringFieldUpdateOperationsInput | string
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTranslationUncheckedUpdateManyInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    targetLanguage?: StringFieldUpdateOperationsInput | string
    translatedContent?: StringFieldUpdateOperationsInput | string
    translationModel?: StringFieldUpdateOperationsInput | string
    cacheKey?: StringFieldUpdateOperationsInput | string
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadStatusCreateInput = {
    id?: string
    readAt?: Date | string
    user: UserCreateNestedOneWithoutMessageReadStatusInput
    message: MessageCreateNestedOneWithoutReadStatusInput
  }

  export type MessageReadStatusUncheckedCreateInput = {
    id?: string
    messageId: string
    userId: string
    readAt?: Date | string
  }

  export type MessageReadStatusUpdateInput = {
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessageReadStatusNestedInput
    message?: MessageUpdateOneRequiredWithoutReadStatusNestedInput
  }

  export type MessageReadStatusUncheckedUpdateInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadStatusCreateManyInput = {
    id?: string
    messageId: string
    userId: string
    readAt?: Date | string
  }

  export type MessageReadStatusUpdateManyMutationInput = {
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadStatusUncheckedUpdateManyInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendRequestCreateInput = {
    id?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receiver: UserCreateNestedOneWithoutReceivedFriendRequestsInput
    sender: UserCreateNestedOneWithoutSentFriendRequestsInput
  }

  export type FriendRequestUncheckedCreateInput = {
    id?: string
    senderId: string
    receiverId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendRequestUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutReceivedFriendRequestsNestedInput
    sender?: UserUpdateOneRequiredWithoutSentFriendRequestsNestedInput
  }

  export type FriendRequestUncheckedUpdateInput = {
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendRequestCreateManyInput = {
    id?: string
    senderId: string
    receiverId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendRequestUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendRequestUncheckedUpdateManyInput = {
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypingIndicatorCreateInput = {
    id?: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTypingIndicatorsInput
    conversation: ConversationCreateNestedOneWithoutTypingIndicatorsInput
  }

  export type TypingIndicatorUncheckedCreateInput = {
    id?: string
    conversationId: string
    userId: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
  }

  export type TypingIndicatorUpdateInput = {
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTypingIndicatorsNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutTypingIndicatorsNestedInput
  }

  export type TypingIndicatorUncheckedUpdateInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypingIndicatorCreateManyInput = {
    id?: string
    conversationId: string
    userId: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
  }

  export type TypingIndicatorUpdateManyMutationInput = {
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypingIndicatorUncheckedUpdateManyInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    content: string
    data?: string | null
    priority?: string
    isRead?: boolean
    emailSent?: boolean
    pushSent?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    title: string
    content: string
    data?: string | null
    priority?: string
    isRead?: boolean
    emailSent?: boolean
    pushSent?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    pushSent?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    pushSent?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: string
    title: string
    content: string
    data?: string | null
    priority?: string
    isRead?: boolean
    emailSent?: boolean
    pushSent?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    pushSent?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    pushSent?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityCreateInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberCreateNestedManyWithoutCommunityInput
    creator: UserCreateNestedOneWithoutCreatedCommunitiesInput
    admins?: CommunityAdminCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberUncheckedCreateNestedManyWithoutCommunityInput
    admins?: CommunityAdminUncheckedCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorUncheckedCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUpdateManyWithoutCommunityNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedCommunitiesNestedInput
    admins?: CommunityAdminUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUncheckedUpdateManyWithoutCommunityNestedInput
    admins?: CommunityAdminUncheckedUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUncheckedUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommunityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityMemberCreateInput = {
    id?: string
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutCommunityMembershipsInput
    community: CommunityCreateNestedOneWithoutMembersInput
  }

  export type CommunityMemberUncheckedCreateInput = {
    id?: string
    communityId: string
    userId: string
    joinedAt?: Date | string
  }

  export type CommunityMemberUpdateInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommunityMembershipsNestedInput
    community?: CommunityUpdateOneRequiredWithoutMembersNestedInput
  }

  export type CommunityMemberUncheckedUpdateInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityMemberCreateManyInput = {
    id?: string
    communityId: string
    userId: string
    joinedAt?: Date | string
  }

  export type CommunityMemberUpdateManyMutationInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityMemberUncheckedUpdateManyInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatsCreateInput = {
    id?: string
    messagesSent?: number
    messagesReceived?: number
    charactersTyped?: number
    imageMessagesSent?: number
    filesShared?: number
    conversationsJoined?: number
    communitiesCreated?: number
    friendsAdded?: number
    friendRequestsSent?: number
    translationsUsed?: number
    languagesDetected?: number
    autoTranslateTimeMinutes?: number
    totalOnlineTimeMinutes?: number
    sessionCount?: number
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStatsInput
  }

  export type UserStatsUncheckedCreateInput = {
    id?: string
    userId: string
    messagesSent?: number
    messagesReceived?: number
    charactersTyped?: number
    imageMessagesSent?: number
    filesShared?: number
    conversationsJoined?: number
    communitiesCreated?: number
    friendsAdded?: number
    friendRequestsSent?: number
    translationsUsed?: number
    languagesDetected?: number
    autoTranslateTimeMinutes?: number
    totalOnlineTimeMinutes?: number
    sessionCount?: number
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatsUpdateInput = {
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    charactersTyped?: IntFieldUpdateOperationsInput | number
    imageMessagesSent?: IntFieldUpdateOperationsInput | number
    filesShared?: IntFieldUpdateOperationsInput | number
    conversationsJoined?: IntFieldUpdateOperationsInput | number
    communitiesCreated?: IntFieldUpdateOperationsInput | number
    friendsAdded?: IntFieldUpdateOperationsInput | number
    friendRequestsSent?: IntFieldUpdateOperationsInput | number
    translationsUsed?: IntFieldUpdateOperationsInput | number
    languagesDetected?: IntFieldUpdateOperationsInput | number
    autoTranslateTimeMinutes?: IntFieldUpdateOperationsInput | number
    totalOnlineTimeMinutes?: IntFieldUpdateOperationsInput | number
    sessionCount?: IntFieldUpdateOperationsInput | number
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStatsNestedInput
  }

  export type UserStatsUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    charactersTyped?: IntFieldUpdateOperationsInput | number
    imageMessagesSent?: IntFieldUpdateOperationsInput | number
    filesShared?: IntFieldUpdateOperationsInput | number
    conversationsJoined?: IntFieldUpdateOperationsInput | number
    communitiesCreated?: IntFieldUpdateOperationsInput | number
    friendsAdded?: IntFieldUpdateOperationsInput | number
    friendRequestsSent?: IntFieldUpdateOperationsInput | number
    translationsUsed?: IntFieldUpdateOperationsInput | number
    languagesDetected?: IntFieldUpdateOperationsInput | number
    autoTranslateTimeMinutes?: IntFieldUpdateOperationsInput | number
    totalOnlineTimeMinutes?: IntFieldUpdateOperationsInput | number
    sessionCount?: IntFieldUpdateOperationsInput | number
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatsCreateManyInput = {
    id?: string
    userId: string
    messagesSent?: number
    messagesReceived?: number
    charactersTyped?: number
    imageMessagesSent?: number
    filesShared?: number
    conversationsJoined?: number
    communitiesCreated?: number
    friendsAdded?: number
    friendRequestsSent?: number
    translationsUsed?: number
    languagesDetected?: number
    autoTranslateTimeMinutes?: number
    totalOnlineTimeMinutes?: number
    sessionCount?: number
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatsUpdateManyMutationInput = {
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    charactersTyped?: IntFieldUpdateOperationsInput | number
    imageMessagesSent?: IntFieldUpdateOperationsInput | number
    filesShared?: IntFieldUpdateOperationsInput | number
    conversationsJoined?: IntFieldUpdateOperationsInput | number
    communitiesCreated?: IntFieldUpdateOperationsInput | number
    friendsAdded?: IntFieldUpdateOperationsInput | number
    friendRequestsSent?: IntFieldUpdateOperationsInput | number
    translationsUsed?: IntFieldUpdateOperationsInput | number
    languagesDetected?: IntFieldUpdateOperationsInput | number
    autoTranslateTimeMinutes?: IntFieldUpdateOperationsInput | number
    totalOnlineTimeMinutes?: IntFieldUpdateOperationsInput | number
    sessionCount?: IntFieldUpdateOperationsInput | number
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatsUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    charactersTyped?: IntFieldUpdateOperationsInput | number
    imageMessagesSent?: IntFieldUpdateOperationsInput | number
    filesShared?: IntFieldUpdateOperationsInput | number
    conversationsJoined?: IntFieldUpdateOperationsInput | number
    communitiesCreated?: IntFieldUpdateOperationsInput | number
    friendsAdded?: IntFieldUpdateOperationsInput | number
    friendRequestsSent?: IntFieldUpdateOperationsInput | number
    translationsUsed?: IntFieldUpdateOperationsInput | number
    languagesDetected?: IntFieldUpdateOperationsInput | number
    autoTranslateTimeMinutes?: IntFieldUpdateOperationsInput | number
    totalOnlineTimeMinutes?: IntFieldUpdateOperationsInput | number
    sessionCount?: IntFieldUpdateOperationsInput | number
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceCreateInput = {
    id?: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPreferencesInput
  }

  export type UserPreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type UserPreferenceUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceCreateManyInput = {
    id?: string
    userId: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationPreferenceCreateInput = {
    id?: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConversationPreferencesInput
    conversation: ConversationCreateNestedOneWithoutPreferencesInput
  }

  export type ConversationPreferenceUncheckedCreateInput = {
    id?: string
    conversationId: string
    userId: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationPreferenceUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConversationPreferencesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type ConversationPreferenceUncheckedUpdateInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationPreferenceCreateManyInput = {
    id?: string
    conversationId: string
    userId: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationPreferenceUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationPreferenceUncheckedUpdateManyInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityAdminCreateInput = {
    id?: string
    assignedAt?: Date | string
    user: UserCreateNestedOneWithoutCommunityAdminsInput
    community: CommunityCreateNestedOneWithoutAdminsInput
  }

  export type CommunityAdminUncheckedCreateInput = {
    id?: string
    communityId: string
    userId: string
    assignedAt?: Date | string
  }

  export type CommunityAdminUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommunityAdminsNestedInput
    community?: CommunityUpdateOneRequiredWithoutAdminsNestedInput
  }

  export type CommunityAdminUncheckedUpdateInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityAdminCreateManyInput = {
    id?: string
    communityId: string
    userId: string
    assignedAt?: Date | string
  }

  export type CommunityAdminUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityAdminUncheckedUpdateManyInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityModeratorCreateInput = {
    id?: string
    assignedAt?: Date | string
    user: UserCreateNestedOneWithoutCommunityModeratorsInput
    community: CommunityCreateNestedOneWithoutModeratorsInput
  }

  export type CommunityModeratorUncheckedCreateInput = {
    id?: string
    communityId: string
    userId: string
    assignedAt?: Date | string
  }

  export type CommunityModeratorUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommunityModeratorsNestedInput
    community?: CommunityUpdateOneRequiredWithoutModeratorsNestedInput
  }

  export type CommunityModeratorUncheckedUpdateInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityModeratorCreateManyInput = {
    id?: string
    communityId: string
    userId: string
    assignedAt?: Date | string
  }

  export type CommunityModeratorUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityModeratorUncheckedUpdateManyInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type CommunityListRelationFilter = {
    every?: CommunityWhereInput
    some?: CommunityWhereInput
    none?: CommunityWhereInput
  }

  export type CommunityMemberListRelationFilter = {
    every?: CommunityMemberWhereInput
    some?: CommunityMemberWhereInput
    none?: CommunityMemberWhereInput
  }

  export type ConversationMemberListRelationFilter = {
    every?: ConversationMemberWhereInput
    some?: ConversationMemberWhereInput
    none?: ConversationMemberWhereInput
  }

  export type ConversationPreferenceListRelationFilter = {
    every?: ConversationPreferenceWhereInput
    some?: ConversationPreferenceWhereInput
    none?: ConversationPreferenceWhereInput
  }

  export type ConversationShareLinkListRelationFilter = {
    every?: ConversationShareLinkWhereInput
    some?: ConversationShareLinkWhereInput
    none?: ConversationShareLinkWhereInput
  }

  export type FriendRequestListRelationFilter = {
    every?: FriendRequestWhereInput
    some?: FriendRequestWhereInput
    none?: FriendRequestWhereInput
  }

  export type MessageReadStatusListRelationFilter = {
    every?: MessageReadStatusWhereInput
    some?: MessageReadStatusWhereInput
    none?: MessageReadStatusWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type TypingIndicatorListRelationFilter = {
    every?: TypingIndicatorWhereInput
    some?: TypingIndicatorWhereInput
    none?: TypingIndicatorWhereInput
  }

  export type UserPreferenceListRelationFilter = {
    every?: UserPreferenceWhereInput
    some?: UserPreferenceWhereInput
    none?: UserPreferenceWhereInput
  }

  export type UserStatsNullableRelationFilter = {
    is?: UserStatsWhereInput | null
    isNot?: UserStatsWhereInput | null
  }

  export type CommunityAdminListRelationFilter = {
    every?: CommunityAdminWhereInput
    some?: CommunityAdminWhereInput
    none?: CommunityAdminWhereInput
  }

  export type CommunityModeratorListRelationFilter = {
    every?: CommunityModeratorWhereInput
    some?: CommunityModeratorWhereInput
    none?: CommunityModeratorWhereInput
  }

  export type CommunityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommunityMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationPreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationShareLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageReadStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TypingIndicatorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommunityAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommunityModeratorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatar?: SortOrder
    isOnline?: SortOrder
    lastSeen?: SortOrder
    lastActiveAt?: SortOrder
    systemLanguage?: SortOrder
    regionalLanguage?: SortOrder
    customDestinationLanguage?: SortOrder
    autoTranslateEnabled?: SortOrder
    translateToSystemLanguage?: SortOrder
    translateToRegionalLanguage?: SortOrder
    useCustomDestination?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    deactivatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatar?: SortOrder
    isOnline?: SortOrder
    lastSeen?: SortOrder
    lastActiveAt?: SortOrder
    systemLanguage?: SortOrder
    regionalLanguage?: SortOrder
    customDestinationLanguage?: SortOrder
    autoTranslateEnabled?: SortOrder
    translateToSystemLanguage?: SortOrder
    translateToRegionalLanguage?: SortOrder
    useCustomDestination?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    deactivatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatar?: SortOrder
    isOnline?: SortOrder
    lastSeen?: SortOrder
    lastActiveAt?: SortOrder
    systemLanguage?: SortOrder
    regionalLanguage?: SortOrder
    customDestinationLanguage?: SortOrder
    autoTranslateEnabled?: SortOrder
    translateToSystemLanguage?: SortOrder
    translateToRegionalLanguage?: SortOrder
    useCustomDestination?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    deactivatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type AnonymousParticipantListRelationFilter = {
    every?: AnonymousParticipantWhereInput
    some?: AnonymousParticipantWhereInput
    none?: AnonymousParticipantWhereInput
  }

  export type CommunityNullableRelationFilter = {
    is?: CommunityWhereInput | null
    isNot?: CommunityWhereInput | null
  }

  export type AnonymousParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    avatar?: SortOrder
    communityId?: SortOrder
    isActive?: SortOrder
    isArchived?: SortOrder
    lastMessageAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    avatar?: SortOrder
    communityId?: SortOrder
    isActive?: SortOrder
    isArchived?: SortOrder
    lastMessageAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    avatar?: SortOrder
    communityId?: SortOrder
    isActive?: SortOrder
    isArchived?: SortOrder
    lastMessageAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ConversationRelationFilter = {
    is?: ConversationWhereInput
    isNot?: ConversationWhereInput
  }

  export type ConversationMemberCountOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    canSendMessage?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    canSendVideos?: SortOrder
    canSendAudios?: SortOrder
    canSendLocations?: SortOrder
    canSendLinks?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrder
    isActive?: SortOrder
  }

  export type ConversationMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    canSendMessage?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    canSendVideos?: SortOrder
    canSendAudios?: SortOrder
    canSendLocations?: SortOrder
    canSendLinks?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrder
    isActive?: SortOrder
  }

  export type ConversationMemberMinOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    canSendMessage?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    canSendVideos?: SortOrder
    canSendAudios?: SortOrder
    canSendLocations?: SortOrder
    canSendLinks?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrder
    isActive?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ConversationShareLinkCountOrderByAggregateInput = {
    id?: SortOrder
    linkId?: SortOrder
    identifier?: SortOrder
    conversationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    currentUses?: SortOrder
    maxConcurrentUsers?: SortOrder
    currentConcurrentUsers?: SortOrder
    maxUniqueSessions?: SortOrder
    currentUniqueSessions?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    allowAnonymousMessages?: SortOrder
    allowAnonymousFiles?: SortOrder
    allowAnonymousImages?: SortOrder
    allowViewHistory?: SortOrder
    requireNickname?: SortOrder
    requireEmail?: SortOrder
    allowedCountries?: SortOrder
    allowedLanguages?: SortOrder
    allowedIpRanges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationShareLinkAvgOrderByAggregateInput = {
    maxUses?: SortOrder
    currentUses?: SortOrder
    maxConcurrentUsers?: SortOrder
    currentConcurrentUsers?: SortOrder
    maxUniqueSessions?: SortOrder
    currentUniqueSessions?: SortOrder
  }

  export type ConversationShareLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    linkId?: SortOrder
    identifier?: SortOrder
    conversationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    currentUses?: SortOrder
    maxConcurrentUsers?: SortOrder
    currentConcurrentUsers?: SortOrder
    maxUniqueSessions?: SortOrder
    currentUniqueSessions?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    allowAnonymousMessages?: SortOrder
    allowAnonymousFiles?: SortOrder
    allowAnonymousImages?: SortOrder
    allowViewHistory?: SortOrder
    requireNickname?: SortOrder
    requireEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationShareLinkMinOrderByAggregateInput = {
    id?: SortOrder
    linkId?: SortOrder
    identifier?: SortOrder
    conversationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    currentUses?: SortOrder
    maxConcurrentUsers?: SortOrder
    currentConcurrentUsers?: SortOrder
    maxUniqueSessions?: SortOrder
    currentUniqueSessions?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    allowAnonymousMessages?: SortOrder
    allowAnonymousFiles?: SortOrder
    allowAnonymousImages?: SortOrder
    allowViewHistory?: SortOrder
    requireNickname?: SortOrder
    requireEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationShareLinkSumOrderByAggregateInput = {
    maxUses?: SortOrder
    currentUses?: SortOrder
    maxConcurrentUsers?: SortOrder
    currentConcurrentUsers?: SortOrder
    maxUniqueSessions?: SortOrder
    currentUniqueSessions?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ConversationShareLinkRelationFilter = {
    is?: ConversationShareLinkWhereInput
    isNot?: ConversationShareLinkWhereInput
  }

  export type AnonymousParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    shareLinkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrder
    country?: SortOrder
    language?: SortOrder
    deviceFingerprint?: SortOrder
    isActive?: SortOrder
    isOnline?: SortOrder
    lastActiveAt?: SortOrder
    canSendMessages?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    leftAt?: SortOrder
  }

  export type AnonymousParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    shareLinkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrder
    country?: SortOrder
    language?: SortOrder
    deviceFingerprint?: SortOrder
    isActive?: SortOrder
    isOnline?: SortOrder
    lastActiveAt?: SortOrder
    canSendMessages?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    leftAt?: SortOrder
  }

  export type AnonymousParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    shareLinkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrder
    country?: SortOrder
    language?: SortOrder
    deviceFingerprint?: SortOrder
    isActive?: SortOrder
    isOnline?: SortOrder
    lastActiveAt?: SortOrder
    canSendMessages?: SortOrder
    canSendFiles?: SortOrder
    canSendImages?: SortOrder
    joinedAt?: SortOrder
    lastSeenAt?: SortOrder
    leftAt?: SortOrder
  }

  export type MessageTranslationListRelationFilter = {
    every?: MessageTranslationWhereInput
    some?: MessageTranslationWhereInput
    none?: MessageTranslationWhereInput
  }

  export type MessageNullableRelationFilter = {
    is?: MessageWhereInput | null
    isNot?: MessageWhereInput | null
  }

  export type AnonymousParticipantNullableRelationFilter = {
    is?: AnonymousParticipantWhereInput | null
    isNot?: AnonymousParticipantWhereInput | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type MessageTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    anonymousSenderId?: SortOrder
    content?: SortOrder
    originalLanguage?: SortOrder
    messageType?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    replyToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    anonymousSenderId?: SortOrder
    content?: SortOrder
    originalLanguage?: SortOrder
    messageType?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    replyToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    anonymousSenderId?: SortOrder
    content?: SortOrder
    originalLanguage?: SortOrder
    messageType?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
    replyToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type MessageRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type MessageTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    sourceLanguage?: SortOrder
    targetLanguage?: SortOrder
    translatedContent?: SortOrder
    translationModel?: SortOrder
    cacheKey?: SortOrder
    confidenceScore?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageTranslationAvgOrderByAggregateInput = {
    confidenceScore?: SortOrder
  }

  export type MessageTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    sourceLanguage?: SortOrder
    targetLanguage?: SortOrder
    translatedContent?: SortOrder
    translationModel?: SortOrder
    cacheKey?: SortOrder
    confidenceScore?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    sourceLanguage?: SortOrder
    targetLanguage?: SortOrder
    translatedContent?: SortOrder
    translationModel?: SortOrder
    cacheKey?: SortOrder
    confidenceScore?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageTranslationSumOrderByAggregateInput = {
    confidenceScore?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type MessageReadStatusCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type MessageReadStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type MessageReadStatusMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type FriendRequestCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendRequestMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TypingIndicatorCountOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    isTyping?: SortOrder
    startedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TypingIndicatorMaxOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    isTyping?: SortOrder
    startedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TypingIndicatorMinOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    isTyping?: SortOrder
    startedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    emailSent?: SortOrder
    pushSent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    emailSent?: SortOrder
    pushSent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    emailSent?: SortOrder
    pushSent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ConversationListRelationFilter = {
    every?: ConversationWhereInput
    some?: ConversationWhereInput
    none?: ConversationWhereInput
  }

  export type ConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommunityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    avatar?: SortOrder
    isPrivate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommunityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    avatar?: SortOrder
    isPrivate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommunityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    avatar?: SortOrder
    isPrivate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommunityRelationFilter = {
    is?: CommunityWhereInput
    isNot?: CommunityWhereInput
  }

  export type CommunityMemberCountOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
  }

  export type CommunityMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
  }

  export type CommunityMemberMinOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserStatsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    charactersTyped?: SortOrder
    imageMessagesSent?: SortOrder
    filesShared?: SortOrder
    conversationsJoined?: SortOrder
    communitiesCreated?: SortOrder
    friendsAdded?: SortOrder
    friendRequestsSent?: SortOrder
    translationsUsed?: SortOrder
    languagesDetected?: SortOrder
    autoTranslateTimeMinutes?: SortOrder
    totalOnlineTimeMinutes?: SortOrder
    sessionCount?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStatsAvgOrderByAggregateInput = {
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    charactersTyped?: SortOrder
    imageMessagesSent?: SortOrder
    filesShared?: SortOrder
    conversationsJoined?: SortOrder
    communitiesCreated?: SortOrder
    friendsAdded?: SortOrder
    friendRequestsSent?: SortOrder
    translationsUsed?: SortOrder
    languagesDetected?: SortOrder
    autoTranslateTimeMinutes?: SortOrder
    totalOnlineTimeMinutes?: SortOrder
    sessionCount?: SortOrder
  }

  export type UserStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    charactersTyped?: SortOrder
    imageMessagesSent?: SortOrder
    filesShared?: SortOrder
    conversationsJoined?: SortOrder
    communitiesCreated?: SortOrder
    friendsAdded?: SortOrder
    friendRequestsSent?: SortOrder
    translationsUsed?: SortOrder
    languagesDetected?: SortOrder
    autoTranslateTimeMinutes?: SortOrder
    totalOnlineTimeMinutes?: SortOrder
    sessionCount?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStatsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    charactersTyped?: SortOrder
    imageMessagesSent?: SortOrder
    filesShared?: SortOrder
    conversationsJoined?: SortOrder
    communitiesCreated?: SortOrder
    friendsAdded?: SortOrder
    friendRequestsSent?: SortOrder
    translationsUsed?: SortOrder
    languagesDetected?: SortOrder
    autoTranslateTimeMinutes?: SortOrder
    totalOnlineTimeMinutes?: SortOrder
    sessionCount?: SortOrder
    lastActiveAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStatsSumOrderByAggregateInput = {
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    charactersTyped?: SortOrder
    imageMessagesSent?: SortOrder
    filesShared?: SortOrder
    conversationsJoined?: SortOrder
    communitiesCreated?: SortOrder
    friendsAdded?: SortOrder
    friendRequestsSent?: SortOrder
    translationsUsed?: SortOrder
    languagesDetected?: SortOrder
    autoTranslateTimeMinutes?: SortOrder
    totalOnlineTimeMinutes?: SortOrder
    sessionCount?: SortOrder
  }

  export type UserPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    valueType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommunityAdminCountOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type CommunityAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type CommunityAdminMinOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type CommunityModeratorCountOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type CommunityModeratorMaxOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type CommunityModeratorMinOrderByAggregateInput = {
    id?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type CommunityCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CommunityCreateWithoutCreatorInput, CommunityUncheckedCreateWithoutCreatorInput> | CommunityCreateWithoutCreatorInput[] | CommunityUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CommunityCreateOrConnectWithoutCreatorInput | CommunityCreateOrConnectWithoutCreatorInput[]
    createMany?: CommunityCreateManyCreatorInputEnvelope
    connect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
  }

  export type CommunityMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<CommunityMemberCreateWithoutUserInput, CommunityMemberUncheckedCreateWithoutUserInput> | CommunityMemberCreateWithoutUserInput[] | CommunityMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityMemberCreateOrConnectWithoutUserInput | CommunityMemberCreateOrConnectWithoutUserInput[]
    createMany?: CommunityMemberCreateManyUserInputEnvelope
    connect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
  }

  export type ConversationMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<ConversationMemberCreateWithoutUserInput, ConversationMemberUncheckedCreateWithoutUserInput> | ConversationMemberCreateWithoutUserInput[] | ConversationMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationMemberCreateOrConnectWithoutUserInput | ConversationMemberCreateOrConnectWithoutUserInput[]
    createMany?: ConversationMemberCreateManyUserInputEnvelope
    connect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
  }

  export type ConversationPreferenceCreateNestedManyWithoutUserInput = {
    create?: XOR<ConversationPreferenceCreateWithoutUserInput, ConversationPreferenceUncheckedCreateWithoutUserInput> | ConversationPreferenceCreateWithoutUserInput[] | ConversationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationPreferenceCreateOrConnectWithoutUserInput | ConversationPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: ConversationPreferenceCreateManyUserInputEnvelope
    connect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
  }

  export type ConversationShareLinkCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ConversationShareLinkCreateWithoutCreatorInput, ConversationShareLinkUncheckedCreateWithoutCreatorInput> | ConversationShareLinkCreateWithoutCreatorInput[] | ConversationShareLinkUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutCreatorInput | ConversationShareLinkCreateOrConnectWithoutCreatorInput[]
    createMany?: ConversationShareLinkCreateManyCreatorInputEnvelope
    connect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
  }

  export type FriendRequestCreateNestedManyWithoutReceiverInput = {
    create?: XOR<FriendRequestCreateWithoutReceiverInput, FriendRequestUncheckedCreateWithoutReceiverInput> | FriendRequestCreateWithoutReceiverInput[] | FriendRequestUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendRequestCreateOrConnectWithoutReceiverInput | FriendRequestCreateOrConnectWithoutReceiverInput[]
    createMany?: FriendRequestCreateManyReceiverInputEnvelope
    connect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
  }

  export type FriendRequestCreateNestedManyWithoutSenderInput = {
    create?: XOR<FriendRequestCreateWithoutSenderInput, FriendRequestUncheckedCreateWithoutSenderInput> | FriendRequestCreateWithoutSenderInput[] | FriendRequestUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: FriendRequestCreateOrConnectWithoutSenderInput | FriendRequestCreateOrConnectWithoutSenderInput[]
    createMany?: FriendRequestCreateManySenderInputEnvelope
    connect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
  }

  export type MessageReadStatusCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageReadStatusCreateWithoutUserInput, MessageReadStatusUncheckedCreateWithoutUserInput> | MessageReadStatusCreateWithoutUserInput[] | MessageReadStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageReadStatusCreateOrConnectWithoutUserInput | MessageReadStatusCreateOrConnectWithoutUserInput[]
    createMany?: MessageReadStatusCreateManyUserInputEnvelope
    connect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TypingIndicatorCreateNestedManyWithoutUserInput = {
    create?: XOR<TypingIndicatorCreateWithoutUserInput, TypingIndicatorUncheckedCreateWithoutUserInput> | TypingIndicatorCreateWithoutUserInput[] | TypingIndicatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TypingIndicatorCreateOrConnectWithoutUserInput | TypingIndicatorCreateOrConnectWithoutUserInput[]
    createMany?: TypingIndicatorCreateManyUserInputEnvelope
    connect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
  }

  export type UserPreferenceCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput> | UserPreferenceCreateWithoutUserInput[] | UserPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput | UserPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: UserPreferenceCreateManyUserInputEnvelope
    connect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
  }

  export type UserStatsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserStatsCreateOrConnectWithoutUserInput
    connect?: UserStatsWhereUniqueInput
  }

  export type CommunityAdminCreateNestedManyWithoutUserInput = {
    create?: XOR<CommunityAdminCreateWithoutUserInput, CommunityAdminUncheckedCreateWithoutUserInput> | CommunityAdminCreateWithoutUserInput[] | CommunityAdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityAdminCreateOrConnectWithoutUserInput | CommunityAdminCreateOrConnectWithoutUserInput[]
    createMany?: CommunityAdminCreateManyUserInputEnvelope
    connect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
  }

  export type CommunityModeratorCreateNestedManyWithoutUserInput = {
    create?: XOR<CommunityModeratorCreateWithoutUserInput, CommunityModeratorUncheckedCreateWithoutUserInput> | CommunityModeratorCreateWithoutUserInput[] | CommunityModeratorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityModeratorCreateOrConnectWithoutUserInput | CommunityModeratorCreateOrConnectWithoutUserInput[]
    createMany?: CommunityModeratorCreateManyUserInputEnvelope
    connect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
  }

  export type CommunityUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CommunityCreateWithoutCreatorInput, CommunityUncheckedCreateWithoutCreatorInput> | CommunityCreateWithoutCreatorInput[] | CommunityUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CommunityCreateOrConnectWithoutCreatorInput | CommunityCreateOrConnectWithoutCreatorInput[]
    createMany?: CommunityCreateManyCreatorInputEnvelope
    connect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
  }

  export type CommunityMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommunityMemberCreateWithoutUserInput, CommunityMemberUncheckedCreateWithoutUserInput> | CommunityMemberCreateWithoutUserInput[] | CommunityMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityMemberCreateOrConnectWithoutUserInput | CommunityMemberCreateOrConnectWithoutUserInput[]
    createMany?: CommunityMemberCreateManyUserInputEnvelope
    connect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
  }

  export type ConversationMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConversationMemberCreateWithoutUserInput, ConversationMemberUncheckedCreateWithoutUserInput> | ConversationMemberCreateWithoutUserInput[] | ConversationMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationMemberCreateOrConnectWithoutUserInput | ConversationMemberCreateOrConnectWithoutUserInput[]
    createMany?: ConversationMemberCreateManyUserInputEnvelope
    connect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
  }

  export type ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConversationPreferenceCreateWithoutUserInput, ConversationPreferenceUncheckedCreateWithoutUserInput> | ConversationPreferenceCreateWithoutUserInput[] | ConversationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationPreferenceCreateOrConnectWithoutUserInput | ConversationPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: ConversationPreferenceCreateManyUserInputEnvelope
    connect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
  }

  export type ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ConversationShareLinkCreateWithoutCreatorInput, ConversationShareLinkUncheckedCreateWithoutCreatorInput> | ConversationShareLinkCreateWithoutCreatorInput[] | ConversationShareLinkUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutCreatorInput | ConversationShareLinkCreateOrConnectWithoutCreatorInput[]
    createMany?: ConversationShareLinkCreateManyCreatorInputEnvelope
    connect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
  }

  export type FriendRequestUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<FriendRequestCreateWithoutReceiverInput, FriendRequestUncheckedCreateWithoutReceiverInput> | FriendRequestCreateWithoutReceiverInput[] | FriendRequestUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendRequestCreateOrConnectWithoutReceiverInput | FriendRequestCreateOrConnectWithoutReceiverInput[]
    createMany?: FriendRequestCreateManyReceiverInputEnvelope
    connect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
  }

  export type FriendRequestUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<FriendRequestCreateWithoutSenderInput, FriendRequestUncheckedCreateWithoutSenderInput> | FriendRequestCreateWithoutSenderInput[] | FriendRequestUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: FriendRequestCreateOrConnectWithoutSenderInput | FriendRequestCreateOrConnectWithoutSenderInput[]
    createMany?: FriendRequestCreateManySenderInputEnvelope
    connect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
  }

  export type MessageReadStatusUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageReadStatusCreateWithoutUserInput, MessageReadStatusUncheckedCreateWithoutUserInput> | MessageReadStatusCreateWithoutUserInput[] | MessageReadStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageReadStatusCreateOrConnectWithoutUserInput | MessageReadStatusCreateOrConnectWithoutUserInput[]
    createMany?: MessageReadStatusCreateManyUserInputEnvelope
    connect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TypingIndicatorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TypingIndicatorCreateWithoutUserInput, TypingIndicatorUncheckedCreateWithoutUserInput> | TypingIndicatorCreateWithoutUserInput[] | TypingIndicatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TypingIndicatorCreateOrConnectWithoutUserInput | TypingIndicatorCreateOrConnectWithoutUserInput[]
    createMany?: TypingIndicatorCreateManyUserInputEnvelope
    connect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
  }

  export type UserPreferenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput> | UserPreferenceCreateWithoutUserInput[] | UserPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput | UserPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: UserPreferenceCreateManyUserInputEnvelope
    connect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
  }

  export type UserStatsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserStatsCreateOrConnectWithoutUserInput
    connect?: UserStatsWhereUniqueInput
  }

  export type CommunityAdminUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommunityAdminCreateWithoutUserInput, CommunityAdminUncheckedCreateWithoutUserInput> | CommunityAdminCreateWithoutUserInput[] | CommunityAdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityAdminCreateOrConnectWithoutUserInput | CommunityAdminCreateOrConnectWithoutUserInput[]
    createMany?: CommunityAdminCreateManyUserInputEnvelope
    connect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
  }

  export type CommunityModeratorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommunityModeratorCreateWithoutUserInput, CommunityModeratorUncheckedCreateWithoutUserInput> | CommunityModeratorCreateWithoutUserInput[] | CommunityModeratorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityModeratorCreateOrConnectWithoutUserInput | CommunityModeratorCreateOrConnectWithoutUserInput[]
    createMany?: CommunityModeratorCreateManyUserInputEnvelope
    connect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type CommunityUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CommunityCreateWithoutCreatorInput, CommunityUncheckedCreateWithoutCreatorInput> | CommunityCreateWithoutCreatorInput[] | CommunityUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CommunityCreateOrConnectWithoutCreatorInput | CommunityCreateOrConnectWithoutCreatorInput[]
    upsert?: CommunityUpsertWithWhereUniqueWithoutCreatorInput | CommunityUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CommunityCreateManyCreatorInputEnvelope
    set?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    disconnect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    delete?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    connect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    update?: CommunityUpdateWithWhereUniqueWithoutCreatorInput | CommunityUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CommunityUpdateManyWithWhereWithoutCreatorInput | CommunityUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CommunityScalarWhereInput | CommunityScalarWhereInput[]
  }

  export type CommunityMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommunityMemberCreateWithoutUserInput, CommunityMemberUncheckedCreateWithoutUserInput> | CommunityMemberCreateWithoutUserInput[] | CommunityMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityMemberCreateOrConnectWithoutUserInput | CommunityMemberCreateOrConnectWithoutUserInput[]
    upsert?: CommunityMemberUpsertWithWhereUniqueWithoutUserInput | CommunityMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommunityMemberCreateManyUserInputEnvelope
    set?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    disconnect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    delete?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    connect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    update?: CommunityMemberUpdateWithWhereUniqueWithoutUserInput | CommunityMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommunityMemberUpdateManyWithWhereWithoutUserInput | CommunityMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommunityMemberScalarWhereInput | CommunityMemberScalarWhereInput[]
  }

  export type ConversationMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConversationMemberCreateWithoutUserInput, ConversationMemberUncheckedCreateWithoutUserInput> | ConversationMemberCreateWithoutUserInput[] | ConversationMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationMemberCreateOrConnectWithoutUserInput | ConversationMemberCreateOrConnectWithoutUserInput[]
    upsert?: ConversationMemberUpsertWithWhereUniqueWithoutUserInput | ConversationMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConversationMemberCreateManyUserInputEnvelope
    set?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    disconnect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    delete?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    connect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    update?: ConversationMemberUpdateWithWhereUniqueWithoutUserInput | ConversationMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConversationMemberUpdateManyWithWhereWithoutUserInput | ConversationMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConversationMemberScalarWhereInput | ConversationMemberScalarWhereInput[]
  }

  export type ConversationPreferenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConversationPreferenceCreateWithoutUserInput, ConversationPreferenceUncheckedCreateWithoutUserInput> | ConversationPreferenceCreateWithoutUserInput[] | ConversationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationPreferenceCreateOrConnectWithoutUserInput | ConversationPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: ConversationPreferenceUpsertWithWhereUniqueWithoutUserInput | ConversationPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConversationPreferenceCreateManyUserInputEnvelope
    set?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    disconnect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    delete?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    connect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    update?: ConversationPreferenceUpdateWithWhereUniqueWithoutUserInput | ConversationPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConversationPreferenceUpdateManyWithWhereWithoutUserInput | ConversationPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConversationPreferenceScalarWhereInput | ConversationPreferenceScalarWhereInput[]
  }

  export type ConversationShareLinkUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ConversationShareLinkCreateWithoutCreatorInput, ConversationShareLinkUncheckedCreateWithoutCreatorInput> | ConversationShareLinkCreateWithoutCreatorInput[] | ConversationShareLinkUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutCreatorInput | ConversationShareLinkCreateOrConnectWithoutCreatorInput[]
    upsert?: ConversationShareLinkUpsertWithWhereUniqueWithoutCreatorInput | ConversationShareLinkUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ConversationShareLinkCreateManyCreatorInputEnvelope
    set?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    disconnect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    delete?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    connect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    update?: ConversationShareLinkUpdateWithWhereUniqueWithoutCreatorInput | ConversationShareLinkUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ConversationShareLinkUpdateManyWithWhereWithoutCreatorInput | ConversationShareLinkUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ConversationShareLinkScalarWhereInput | ConversationShareLinkScalarWhereInput[]
  }

  export type FriendRequestUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<FriendRequestCreateWithoutReceiverInput, FriendRequestUncheckedCreateWithoutReceiverInput> | FriendRequestCreateWithoutReceiverInput[] | FriendRequestUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendRequestCreateOrConnectWithoutReceiverInput | FriendRequestCreateOrConnectWithoutReceiverInput[]
    upsert?: FriendRequestUpsertWithWhereUniqueWithoutReceiverInput | FriendRequestUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: FriendRequestCreateManyReceiverInputEnvelope
    set?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    disconnect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    delete?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    connect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    update?: FriendRequestUpdateWithWhereUniqueWithoutReceiverInput | FriendRequestUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: FriendRequestUpdateManyWithWhereWithoutReceiverInput | FriendRequestUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: FriendRequestScalarWhereInput | FriendRequestScalarWhereInput[]
  }

  export type FriendRequestUpdateManyWithoutSenderNestedInput = {
    create?: XOR<FriendRequestCreateWithoutSenderInput, FriendRequestUncheckedCreateWithoutSenderInput> | FriendRequestCreateWithoutSenderInput[] | FriendRequestUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: FriendRequestCreateOrConnectWithoutSenderInput | FriendRequestCreateOrConnectWithoutSenderInput[]
    upsert?: FriendRequestUpsertWithWhereUniqueWithoutSenderInput | FriendRequestUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: FriendRequestCreateManySenderInputEnvelope
    set?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    disconnect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    delete?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    connect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    update?: FriendRequestUpdateWithWhereUniqueWithoutSenderInput | FriendRequestUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: FriendRequestUpdateManyWithWhereWithoutSenderInput | FriendRequestUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: FriendRequestScalarWhereInput | FriendRequestScalarWhereInput[]
  }

  export type MessageReadStatusUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageReadStatusCreateWithoutUserInput, MessageReadStatusUncheckedCreateWithoutUserInput> | MessageReadStatusCreateWithoutUserInput[] | MessageReadStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageReadStatusCreateOrConnectWithoutUserInput | MessageReadStatusCreateOrConnectWithoutUserInput[]
    upsert?: MessageReadStatusUpsertWithWhereUniqueWithoutUserInput | MessageReadStatusUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageReadStatusCreateManyUserInputEnvelope
    set?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    disconnect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    delete?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    connect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    update?: MessageReadStatusUpdateWithWhereUniqueWithoutUserInput | MessageReadStatusUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageReadStatusUpdateManyWithWhereWithoutUserInput | MessageReadStatusUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageReadStatusScalarWhereInput | MessageReadStatusScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type TypingIndicatorUpdateManyWithoutUserNestedInput = {
    create?: XOR<TypingIndicatorCreateWithoutUserInput, TypingIndicatorUncheckedCreateWithoutUserInput> | TypingIndicatorCreateWithoutUserInput[] | TypingIndicatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TypingIndicatorCreateOrConnectWithoutUserInput | TypingIndicatorCreateOrConnectWithoutUserInput[]
    upsert?: TypingIndicatorUpsertWithWhereUniqueWithoutUserInput | TypingIndicatorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TypingIndicatorCreateManyUserInputEnvelope
    set?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    disconnect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    delete?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    connect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    update?: TypingIndicatorUpdateWithWhereUniqueWithoutUserInput | TypingIndicatorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TypingIndicatorUpdateManyWithWhereWithoutUserInput | TypingIndicatorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TypingIndicatorScalarWhereInput | TypingIndicatorScalarWhereInput[]
  }

  export type UserPreferenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput> | UserPreferenceCreateWithoutUserInput[] | UserPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput | UserPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: UserPreferenceUpsertWithWhereUniqueWithoutUserInput | UserPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPreferenceCreateManyUserInputEnvelope
    set?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    disconnect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    delete?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    connect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    update?: UserPreferenceUpdateWithWhereUniqueWithoutUserInput | UserPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPreferenceUpdateManyWithWhereWithoutUserInput | UserPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPreferenceScalarWhereInput | UserPreferenceScalarWhereInput[]
  }

  export type UserStatsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserStatsCreateOrConnectWithoutUserInput
    upsert?: UserStatsUpsertWithoutUserInput
    disconnect?: UserStatsWhereInput | boolean
    delete?: UserStatsWhereInput | boolean
    connect?: UserStatsWhereUniqueInput
    update?: XOR<XOR<UserStatsUpdateToOneWithWhereWithoutUserInput, UserStatsUpdateWithoutUserInput>, UserStatsUncheckedUpdateWithoutUserInput>
  }

  export type CommunityAdminUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommunityAdminCreateWithoutUserInput, CommunityAdminUncheckedCreateWithoutUserInput> | CommunityAdminCreateWithoutUserInput[] | CommunityAdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityAdminCreateOrConnectWithoutUserInput | CommunityAdminCreateOrConnectWithoutUserInput[]
    upsert?: CommunityAdminUpsertWithWhereUniqueWithoutUserInput | CommunityAdminUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommunityAdminCreateManyUserInputEnvelope
    set?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    disconnect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    delete?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    connect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    update?: CommunityAdminUpdateWithWhereUniqueWithoutUserInput | CommunityAdminUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommunityAdminUpdateManyWithWhereWithoutUserInput | CommunityAdminUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommunityAdminScalarWhereInput | CommunityAdminScalarWhereInput[]
  }

  export type CommunityModeratorUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommunityModeratorCreateWithoutUserInput, CommunityModeratorUncheckedCreateWithoutUserInput> | CommunityModeratorCreateWithoutUserInput[] | CommunityModeratorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityModeratorCreateOrConnectWithoutUserInput | CommunityModeratorCreateOrConnectWithoutUserInput[]
    upsert?: CommunityModeratorUpsertWithWhereUniqueWithoutUserInput | CommunityModeratorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommunityModeratorCreateManyUserInputEnvelope
    set?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    disconnect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    delete?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    connect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    update?: CommunityModeratorUpdateWithWhereUniqueWithoutUserInput | CommunityModeratorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommunityModeratorUpdateManyWithWhereWithoutUserInput | CommunityModeratorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommunityModeratorScalarWhereInput | CommunityModeratorScalarWhereInput[]
  }

  export type CommunityUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CommunityCreateWithoutCreatorInput, CommunityUncheckedCreateWithoutCreatorInput> | CommunityCreateWithoutCreatorInput[] | CommunityUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CommunityCreateOrConnectWithoutCreatorInput | CommunityCreateOrConnectWithoutCreatorInput[]
    upsert?: CommunityUpsertWithWhereUniqueWithoutCreatorInput | CommunityUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CommunityCreateManyCreatorInputEnvelope
    set?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    disconnect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    delete?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    connect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    update?: CommunityUpdateWithWhereUniqueWithoutCreatorInput | CommunityUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CommunityUpdateManyWithWhereWithoutCreatorInput | CommunityUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CommunityScalarWhereInput | CommunityScalarWhereInput[]
  }

  export type CommunityMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommunityMemberCreateWithoutUserInput, CommunityMemberUncheckedCreateWithoutUserInput> | CommunityMemberCreateWithoutUserInput[] | CommunityMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityMemberCreateOrConnectWithoutUserInput | CommunityMemberCreateOrConnectWithoutUserInput[]
    upsert?: CommunityMemberUpsertWithWhereUniqueWithoutUserInput | CommunityMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommunityMemberCreateManyUserInputEnvelope
    set?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    disconnect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    delete?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    connect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    update?: CommunityMemberUpdateWithWhereUniqueWithoutUserInput | CommunityMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommunityMemberUpdateManyWithWhereWithoutUserInput | CommunityMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommunityMemberScalarWhereInput | CommunityMemberScalarWhereInput[]
  }

  export type ConversationMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConversationMemberCreateWithoutUserInput, ConversationMemberUncheckedCreateWithoutUserInput> | ConversationMemberCreateWithoutUserInput[] | ConversationMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationMemberCreateOrConnectWithoutUserInput | ConversationMemberCreateOrConnectWithoutUserInput[]
    upsert?: ConversationMemberUpsertWithWhereUniqueWithoutUserInput | ConversationMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConversationMemberCreateManyUserInputEnvelope
    set?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    disconnect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    delete?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    connect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    update?: ConversationMemberUpdateWithWhereUniqueWithoutUserInput | ConversationMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConversationMemberUpdateManyWithWhereWithoutUserInput | ConversationMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConversationMemberScalarWhereInput | ConversationMemberScalarWhereInput[]
  }

  export type ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConversationPreferenceCreateWithoutUserInput, ConversationPreferenceUncheckedCreateWithoutUserInput> | ConversationPreferenceCreateWithoutUserInput[] | ConversationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConversationPreferenceCreateOrConnectWithoutUserInput | ConversationPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: ConversationPreferenceUpsertWithWhereUniqueWithoutUserInput | ConversationPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConversationPreferenceCreateManyUserInputEnvelope
    set?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    disconnect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    delete?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    connect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    update?: ConversationPreferenceUpdateWithWhereUniqueWithoutUserInput | ConversationPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConversationPreferenceUpdateManyWithWhereWithoutUserInput | ConversationPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConversationPreferenceScalarWhereInput | ConversationPreferenceScalarWhereInput[]
  }

  export type ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ConversationShareLinkCreateWithoutCreatorInput, ConversationShareLinkUncheckedCreateWithoutCreatorInput> | ConversationShareLinkCreateWithoutCreatorInput[] | ConversationShareLinkUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutCreatorInput | ConversationShareLinkCreateOrConnectWithoutCreatorInput[]
    upsert?: ConversationShareLinkUpsertWithWhereUniqueWithoutCreatorInput | ConversationShareLinkUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ConversationShareLinkCreateManyCreatorInputEnvelope
    set?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    disconnect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    delete?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    connect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    update?: ConversationShareLinkUpdateWithWhereUniqueWithoutCreatorInput | ConversationShareLinkUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ConversationShareLinkUpdateManyWithWhereWithoutCreatorInput | ConversationShareLinkUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ConversationShareLinkScalarWhereInput | ConversationShareLinkScalarWhereInput[]
  }

  export type FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<FriendRequestCreateWithoutReceiverInput, FriendRequestUncheckedCreateWithoutReceiverInput> | FriendRequestCreateWithoutReceiverInput[] | FriendRequestUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendRequestCreateOrConnectWithoutReceiverInput | FriendRequestCreateOrConnectWithoutReceiverInput[]
    upsert?: FriendRequestUpsertWithWhereUniqueWithoutReceiverInput | FriendRequestUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: FriendRequestCreateManyReceiverInputEnvelope
    set?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    disconnect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    delete?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    connect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    update?: FriendRequestUpdateWithWhereUniqueWithoutReceiverInput | FriendRequestUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: FriendRequestUpdateManyWithWhereWithoutReceiverInput | FriendRequestUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: FriendRequestScalarWhereInput | FriendRequestScalarWhereInput[]
  }

  export type FriendRequestUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<FriendRequestCreateWithoutSenderInput, FriendRequestUncheckedCreateWithoutSenderInput> | FriendRequestCreateWithoutSenderInput[] | FriendRequestUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: FriendRequestCreateOrConnectWithoutSenderInput | FriendRequestCreateOrConnectWithoutSenderInput[]
    upsert?: FriendRequestUpsertWithWhereUniqueWithoutSenderInput | FriendRequestUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: FriendRequestCreateManySenderInputEnvelope
    set?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    disconnect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    delete?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    connect?: FriendRequestWhereUniqueInput | FriendRequestWhereUniqueInput[]
    update?: FriendRequestUpdateWithWhereUniqueWithoutSenderInput | FriendRequestUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: FriendRequestUpdateManyWithWhereWithoutSenderInput | FriendRequestUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: FriendRequestScalarWhereInput | FriendRequestScalarWhereInput[]
  }

  export type MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageReadStatusCreateWithoutUserInput, MessageReadStatusUncheckedCreateWithoutUserInput> | MessageReadStatusCreateWithoutUserInput[] | MessageReadStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageReadStatusCreateOrConnectWithoutUserInput | MessageReadStatusCreateOrConnectWithoutUserInput[]
    upsert?: MessageReadStatusUpsertWithWhereUniqueWithoutUserInput | MessageReadStatusUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageReadStatusCreateManyUserInputEnvelope
    set?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    disconnect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    delete?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    connect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    update?: MessageReadStatusUpdateWithWhereUniqueWithoutUserInput | MessageReadStatusUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageReadStatusUpdateManyWithWhereWithoutUserInput | MessageReadStatusUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageReadStatusScalarWhereInput | MessageReadStatusScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TypingIndicatorCreateWithoutUserInput, TypingIndicatorUncheckedCreateWithoutUserInput> | TypingIndicatorCreateWithoutUserInput[] | TypingIndicatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TypingIndicatorCreateOrConnectWithoutUserInput | TypingIndicatorCreateOrConnectWithoutUserInput[]
    upsert?: TypingIndicatorUpsertWithWhereUniqueWithoutUserInput | TypingIndicatorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TypingIndicatorCreateManyUserInputEnvelope
    set?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    disconnect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    delete?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    connect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    update?: TypingIndicatorUpdateWithWhereUniqueWithoutUserInput | TypingIndicatorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TypingIndicatorUpdateManyWithWhereWithoutUserInput | TypingIndicatorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TypingIndicatorScalarWhereInput | TypingIndicatorScalarWhereInput[]
  }

  export type UserPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput> | UserPreferenceCreateWithoutUserInput[] | UserPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput | UserPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: UserPreferenceUpsertWithWhereUniqueWithoutUserInput | UserPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPreferenceCreateManyUserInputEnvelope
    set?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    disconnect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    delete?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    connect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    update?: UserPreferenceUpdateWithWhereUniqueWithoutUserInput | UserPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPreferenceUpdateManyWithWhereWithoutUserInput | UserPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPreferenceScalarWhereInput | UserPreferenceScalarWhereInput[]
  }

  export type UserStatsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserStatsCreateOrConnectWithoutUserInput
    upsert?: UserStatsUpsertWithoutUserInput
    disconnect?: UserStatsWhereInput | boolean
    delete?: UserStatsWhereInput | boolean
    connect?: UserStatsWhereUniqueInput
    update?: XOR<XOR<UserStatsUpdateToOneWithWhereWithoutUserInput, UserStatsUpdateWithoutUserInput>, UserStatsUncheckedUpdateWithoutUserInput>
  }

  export type CommunityAdminUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommunityAdminCreateWithoutUserInput, CommunityAdminUncheckedCreateWithoutUserInput> | CommunityAdminCreateWithoutUserInput[] | CommunityAdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityAdminCreateOrConnectWithoutUserInput | CommunityAdminCreateOrConnectWithoutUserInput[]
    upsert?: CommunityAdminUpsertWithWhereUniqueWithoutUserInput | CommunityAdminUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommunityAdminCreateManyUserInputEnvelope
    set?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    disconnect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    delete?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    connect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    update?: CommunityAdminUpdateWithWhereUniqueWithoutUserInput | CommunityAdminUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommunityAdminUpdateManyWithWhereWithoutUserInput | CommunityAdminUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommunityAdminScalarWhereInput | CommunityAdminScalarWhereInput[]
  }

  export type CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommunityModeratorCreateWithoutUserInput, CommunityModeratorUncheckedCreateWithoutUserInput> | CommunityModeratorCreateWithoutUserInput[] | CommunityModeratorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommunityModeratorCreateOrConnectWithoutUserInput | CommunityModeratorCreateOrConnectWithoutUserInput[]
    upsert?: CommunityModeratorUpsertWithWhereUniqueWithoutUserInput | CommunityModeratorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommunityModeratorCreateManyUserInputEnvelope
    set?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    disconnect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    delete?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    connect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    update?: CommunityModeratorUpdateWithWhereUniqueWithoutUserInput | CommunityModeratorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommunityModeratorUpdateManyWithWhereWithoutUserInput | CommunityModeratorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommunityModeratorScalarWhereInput | CommunityModeratorScalarWhereInput[]
  }

  export type AnonymousParticipantCreateNestedManyWithoutConversationInput = {
    create?: XOR<AnonymousParticipantCreateWithoutConversationInput, AnonymousParticipantUncheckedCreateWithoutConversationInput> | AnonymousParticipantCreateWithoutConversationInput[] | AnonymousParticipantUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutConversationInput | AnonymousParticipantCreateOrConnectWithoutConversationInput[]
    createMany?: AnonymousParticipantCreateManyConversationInputEnvelope
    connect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
  }

  export type ConversationMemberCreateNestedManyWithoutConversationInput = {
    create?: XOR<ConversationMemberCreateWithoutConversationInput, ConversationMemberUncheckedCreateWithoutConversationInput> | ConversationMemberCreateWithoutConversationInput[] | ConversationMemberUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationMemberCreateOrConnectWithoutConversationInput | ConversationMemberCreateOrConnectWithoutConversationInput[]
    createMany?: ConversationMemberCreateManyConversationInputEnvelope
    connect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
  }

  export type ConversationPreferenceCreateNestedManyWithoutConversationInput = {
    create?: XOR<ConversationPreferenceCreateWithoutConversationInput, ConversationPreferenceUncheckedCreateWithoutConversationInput> | ConversationPreferenceCreateWithoutConversationInput[] | ConversationPreferenceUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationPreferenceCreateOrConnectWithoutConversationInput | ConversationPreferenceCreateOrConnectWithoutConversationInput[]
    createMany?: ConversationPreferenceCreateManyConversationInputEnvelope
    connect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
  }

  export type ConversationShareLinkCreateNestedManyWithoutConversationInput = {
    create?: XOR<ConversationShareLinkCreateWithoutConversationInput, ConversationShareLinkUncheckedCreateWithoutConversationInput> | ConversationShareLinkCreateWithoutConversationInput[] | ConversationShareLinkUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutConversationInput | ConversationShareLinkCreateOrConnectWithoutConversationInput[]
    createMany?: ConversationShareLinkCreateManyConversationInputEnvelope
    connect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
  }

  export type CommunityCreateNestedOneWithoutConversationInput = {
    create?: XOR<CommunityCreateWithoutConversationInput, CommunityUncheckedCreateWithoutConversationInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutConversationInput
    connect?: CommunityWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type TypingIndicatorCreateNestedManyWithoutConversationInput = {
    create?: XOR<TypingIndicatorCreateWithoutConversationInput, TypingIndicatorUncheckedCreateWithoutConversationInput> | TypingIndicatorCreateWithoutConversationInput[] | TypingIndicatorUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: TypingIndicatorCreateOrConnectWithoutConversationInput | TypingIndicatorCreateOrConnectWithoutConversationInput[]
    createMany?: TypingIndicatorCreateManyConversationInputEnvelope
    connect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
  }

  export type AnonymousParticipantUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<AnonymousParticipantCreateWithoutConversationInput, AnonymousParticipantUncheckedCreateWithoutConversationInput> | AnonymousParticipantCreateWithoutConversationInput[] | AnonymousParticipantUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutConversationInput | AnonymousParticipantCreateOrConnectWithoutConversationInput[]
    createMany?: AnonymousParticipantCreateManyConversationInputEnvelope
    connect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
  }

  export type ConversationMemberUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<ConversationMemberCreateWithoutConversationInput, ConversationMemberUncheckedCreateWithoutConversationInput> | ConversationMemberCreateWithoutConversationInput[] | ConversationMemberUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationMemberCreateOrConnectWithoutConversationInput | ConversationMemberCreateOrConnectWithoutConversationInput[]
    createMany?: ConversationMemberCreateManyConversationInputEnvelope
    connect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
  }

  export type ConversationPreferenceUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<ConversationPreferenceCreateWithoutConversationInput, ConversationPreferenceUncheckedCreateWithoutConversationInput> | ConversationPreferenceCreateWithoutConversationInput[] | ConversationPreferenceUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationPreferenceCreateOrConnectWithoutConversationInput | ConversationPreferenceCreateOrConnectWithoutConversationInput[]
    createMany?: ConversationPreferenceCreateManyConversationInputEnvelope
    connect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
  }

  export type ConversationShareLinkUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<ConversationShareLinkCreateWithoutConversationInput, ConversationShareLinkUncheckedCreateWithoutConversationInput> | ConversationShareLinkCreateWithoutConversationInput[] | ConversationShareLinkUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutConversationInput | ConversationShareLinkCreateOrConnectWithoutConversationInput[]
    createMany?: ConversationShareLinkCreateManyConversationInputEnvelope
    connect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type TypingIndicatorUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<TypingIndicatorCreateWithoutConversationInput, TypingIndicatorUncheckedCreateWithoutConversationInput> | TypingIndicatorCreateWithoutConversationInput[] | TypingIndicatorUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: TypingIndicatorCreateOrConnectWithoutConversationInput | TypingIndicatorCreateOrConnectWithoutConversationInput[]
    createMany?: TypingIndicatorCreateManyConversationInputEnvelope
    connect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
  }

  export type AnonymousParticipantUpdateManyWithoutConversationNestedInput = {
    create?: XOR<AnonymousParticipantCreateWithoutConversationInput, AnonymousParticipantUncheckedCreateWithoutConversationInput> | AnonymousParticipantCreateWithoutConversationInput[] | AnonymousParticipantUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutConversationInput | AnonymousParticipantCreateOrConnectWithoutConversationInput[]
    upsert?: AnonymousParticipantUpsertWithWhereUniqueWithoutConversationInput | AnonymousParticipantUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: AnonymousParticipantCreateManyConversationInputEnvelope
    set?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    disconnect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    delete?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    connect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    update?: AnonymousParticipantUpdateWithWhereUniqueWithoutConversationInput | AnonymousParticipantUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: AnonymousParticipantUpdateManyWithWhereWithoutConversationInput | AnonymousParticipantUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: AnonymousParticipantScalarWhereInput | AnonymousParticipantScalarWhereInput[]
  }

  export type ConversationMemberUpdateManyWithoutConversationNestedInput = {
    create?: XOR<ConversationMemberCreateWithoutConversationInput, ConversationMemberUncheckedCreateWithoutConversationInput> | ConversationMemberCreateWithoutConversationInput[] | ConversationMemberUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationMemberCreateOrConnectWithoutConversationInput | ConversationMemberCreateOrConnectWithoutConversationInput[]
    upsert?: ConversationMemberUpsertWithWhereUniqueWithoutConversationInput | ConversationMemberUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: ConversationMemberCreateManyConversationInputEnvelope
    set?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    disconnect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    delete?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    connect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    update?: ConversationMemberUpdateWithWhereUniqueWithoutConversationInput | ConversationMemberUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: ConversationMemberUpdateManyWithWhereWithoutConversationInput | ConversationMemberUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: ConversationMemberScalarWhereInput | ConversationMemberScalarWhereInput[]
  }

  export type ConversationPreferenceUpdateManyWithoutConversationNestedInput = {
    create?: XOR<ConversationPreferenceCreateWithoutConversationInput, ConversationPreferenceUncheckedCreateWithoutConversationInput> | ConversationPreferenceCreateWithoutConversationInput[] | ConversationPreferenceUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationPreferenceCreateOrConnectWithoutConversationInput | ConversationPreferenceCreateOrConnectWithoutConversationInput[]
    upsert?: ConversationPreferenceUpsertWithWhereUniqueWithoutConversationInput | ConversationPreferenceUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: ConversationPreferenceCreateManyConversationInputEnvelope
    set?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    disconnect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    delete?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    connect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    update?: ConversationPreferenceUpdateWithWhereUniqueWithoutConversationInput | ConversationPreferenceUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: ConversationPreferenceUpdateManyWithWhereWithoutConversationInput | ConversationPreferenceUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: ConversationPreferenceScalarWhereInput | ConversationPreferenceScalarWhereInput[]
  }

  export type ConversationShareLinkUpdateManyWithoutConversationNestedInput = {
    create?: XOR<ConversationShareLinkCreateWithoutConversationInput, ConversationShareLinkUncheckedCreateWithoutConversationInput> | ConversationShareLinkCreateWithoutConversationInput[] | ConversationShareLinkUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutConversationInput | ConversationShareLinkCreateOrConnectWithoutConversationInput[]
    upsert?: ConversationShareLinkUpsertWithWhereUniqueWithoutConversationInput | ConversationShareLinkUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: ConversationShareLinkCreateManyConversationInputEnvelope
    set?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    disconnect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    delete?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    connect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    update?: ConversationShareLinkUpdateWithWhereUniqueWithoutConversationInput | ConversationShareLinkUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: ConversationShareLinkUpdateManyWithWhereWithoutConversationInput | ConversationShareLinkUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: ConversationShareLinkScalarWhereInput | ConversationShareLinkScalarWhereInput[]
  }

  export type CommunityUpdateOneWithoutConversationNestedInput = {
    create?: XOR<CommunityCreateWithoutConversationInput, CommunityUncheckedCreateWithoutConversationInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutConversationInput
    upsert?: CommunityUpsertWithoutConversationInput
    disconnect?: boolean
    delete?: CommunityWhereInput | boolean
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutConversationInput, CommunityUpdateWithoutConversationInput>, CommunityUncheckedUpdateWithoutConversationInput>
  }

  export type MessageUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type TypingIndicatorUpdateManyWithoutConversationNestedInput = {
    create?: XOR<TypingIndicatorCreateWithoutConversationInput, TypingIndicatorUncheckedCreateWithoutConversationInput> | TypingIndicatorCreateWithoutConversationInput[] | TypingIndicatorUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: TypingIndicatorCreateOrConnectWithoutConversationInput | TypingIndicatorCreateOrConnectWithoutConversationInput[]
    upsert?: TypingIndicatorUpsertWithWhereUniqueWithoutConversationInput | TypingIndicatorUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: TypingIndicatorCreateManyConversationInputEnvelope
    set?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    disconnect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    delete?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    connect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    update?: TypingIndicatorUpdateWithWhereUniqueWithoutConversationInput | TypingIndicatorUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: TypingIndicatorUpdateManyWithWhereWithoutConversationInput | TypingIndicatorUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: TypingIndicatorScalarWhereInput | TypingIndicatorScalarWhereInput[]
  }

  export type AnonymousParticipantUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<AnonymousParticipantCreateWithoutConversationInput, AnonymousParticipantUncheckedCreateWithoutConversationInput> | AnonymousParticipantCreateWithoutConversationInput[] | AnonymousParticipantUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutConversationInput | AnonymousParticipantCreateOrConnectWithoutConversationInput[]
    upsert?: AnonymousParticipantUpsertWithWhereUniqueWithoutConversationInput | AnonymousParticipantUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: AnonymousParticipantCreateManyConversationInputEnvelope
    set?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    disconnect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    delete?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    connect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    update?: AnonymousParticipantUpdateWithWhereUniqueWithoutConversationInput | AnonymousParticipantUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: AnonymousParticipantUpdateManyWithWhereWithoutConversationInput | AnonymousParticipantUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: AnonymousParticipantScalarWhereInput | AnonymousParticipantScalarWhereInput[]
  }

  export type ConversationMemberUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<ConversationMemberCreateWithoutConversationInput, ConversationMemberUncheckedCreateWithoutConversationInput> | ConversationMemberCreateWithoutConversationInput[] | ConversationMemberUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationMemberCreateOrConnectWithoutConversationInput | ConversationMemberCreateOrConnectWithoutConversationInput[]
    upsert?: ConversationMemberUpsertWithWhereUniqueWithoutConversationInput | ConversationMemberUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: ConversationMemberCreateManyConversationInputEnvelope
    set?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    disconnect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    delete?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    connect?: ConversationMemberWhereUniqueInput | ConversationMemberWhereUniqueInput[]
    update?: ConversationMemberUpdateWithWhereUniqueWithoutConversationInput | ConversationMemberUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: ConversationMemberUpdateManyWithWhereWithoutConversationInput | ConversationMemberUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: ConversationMemberScalarWhereInput | ConversationMemberScalarWhereInput[]
  }

  export type ConversationPreferenceUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<ConversationPreferenceCreateWithoutConversationInput, ConversationPreferenceUncheckedCreateWithoutConversationInput> | ConversationPreferenceCreateWithoutConversationInput[] | ConversationPreferenceUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationPreferenceCreateOrConnectWithoutConversationInput | ConversationPreferenceCreateOrConnectWithoutConversationInput[]
    upsert?: ConversationPreferenceUpsertWithWhereUniqueWithoutConversationInput | ConversationPreferenceUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: ConversationPreferenceCreateManyConversationInputEnvelope
    set?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    disconnect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    delete?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    connect?: ConversationPreferenceWhereUniqueInput | ConversationPreferenceWhereUniqueInput[]
    update?: ConversationPreferenceUpdateWithWhereUniqueWithoutConversationInput | ConversationPreferenceUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: ConversationPreferenceUpdateManyWithWhereWithoutConversationInput | ConversationPreferenceUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: ConversationPreferenceScalarWhereInput | ConversationPreferenceScalarWhereInput[]
  }

  export type ConversationShareLinkUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<ConversationShareLinkCreateWithoutConversationInput, ConversationShareLinkUncheckedCreateWithoutConversationInput> | ConversationShareLinkCreateWithoutConversationInput[] | ConversationShareLinkUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutConversationInput | ConversationShareLinkCreateOrConnectWithoutConversationInput[]
    upsert?: ConversationShareLinkUpsertWithWhereUniqueWithoutConversationInput | ConversationShareLinkUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: ConversationShareLinkCreateManyConversationInputEnvelope
    set?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    disconnect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    delete?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    connect?: ConversationShareLinkWhereUniqueInput | ConversationShareLinkWhereUniqueInput[]
    update?: ConversationShareLinkUpdateWithWhereUniqueWithoutConversationInput | ConversationShareLinkUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: ConversationShareLinkUpdateManyWithWhereWithoutConversationInput | ConversationShareLinkUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: ConversationShareLinkScalarWhereInput | ConversationShareLinkScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type TypingIndicatorUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<TypingIndicatorCreateWithoutConversationInput, TypingIndicatorUncheckedCreateWithoutConversationInput> | TypingIndicatorCreateWithoutConversationInput[] | TypingIndicatorUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: TypingIndicatorCreateOrConnectWithoutConversationInput | TypingIndicatorCreateOrConnectWithoutConversationInput[]
    upsert?: TypingIndicatorUpsertWithWhereUniqueWithoutConversationInput | TypingIndicatorUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: TypingIndicatorCreateManyConversationInputEnvelope
    set?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    disconnect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    delete?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    connect?: TypingIndicatorWhereUniqueInput | TypingIndicatorWhereUniqueInput[]
    update?: TypingIndicatorUpdateWithWhereUniqueWithoutConversationInput | TypingIndicatorUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: TypingIndicatorUpdateManyWithWhereWithoutConversationInput | TypingIndicatorUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: TypingIndicatorScalarWhereInput | TypingIndicatorScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutConversationsInput = {
    create?: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutMembersInput = {
    create?: XOR<ConversationCreateWithoutMembersInput, ConversationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMembersInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutConversationsNestedInput = {
    create?: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsInput
    upsert?: UserUpsertWithoutConversationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConversationsInput, UserUpdateWithoutConversationsInput>, UserUncheckedUpdateWithoutConversationsInput>
  }

  export type ConversationUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<ConversationCreateWithoutMembersInput, ConversationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMembersInput
    upsert?: ConversationUpsertWithoutMembersInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutMembersInput, ConversationUpdateWithoutMembersInput>, ConversationUncheckedUpdateWithoutMembersInput>
  }

  export type ConversationShareLinkCreateallowedCountriesInput = {
    set: string[]
  }

  export type ConversationShareLinkCreateallowedLanguagesInput = {
    set: string[]
  }

  export type ConversationShareLinkCreateallowedIpRangesInput = {
    set: string[]
  }

  export type AnonymousParticipantCreateNestedManyWithoutShareLinkInput = {
    create?: XOR<AnonymousParticipantCreateWithoutShareLinkInput, AnonymousParticipantUncheckedCreateWithoutShareLinkInput> | AnonymousParticipantCreateWithoutShareLinkInput[] | AnonymousParticipantUncheckedCreateWithoutShareLinkInput[]
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutShareLinkInput | AnonymousParticipantCreateOrConnectWithoutShareLinkInput[]
    createMany?: AnonymousParticipantCreateManyShareLinkInputEnvelope
    connect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedShareLinksInput = {
    create?: XOR<UserCreateWithoutCreatedShareLinksInput, UserUncheckedCreateWithoutCreatedShareLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedShareLinksInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutShareLinksInput = {
    create?: XOR<ConversationCreateWithoutShareLinksInput, ConversationUncheckedCreateWithoutShareLinksInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutShareLinksInput
    connect?: ConversationWhereUniqueInput
  }

  export type AnonymousParticipantUncheckedCreateNestedManyWithoutShareLinkInput = {
    create?: XOR<AnonymousParticipantCreateWithoutShareLinkInput, AnonymousParticipantUncheckedCreateWithoutShareLinkInput> | AnonymousParticipantCreateWithoutShareLinkInput[] | AnonymousParticipantUncheckedCreateWithoutShareLinkInput[]
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutShareLinkInput | AnonymousParticipantCreateOrConnectWithoutShareLinkInput[]
    createMany?: AnonymousParticipantCreateManyShareLinkInputEnvelope
    connect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConversationShareLinkUpdateallowedCountriesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ConversationShareLinkUpdateallowedLanguagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ConversationShareLinkUpdateallowedIpRangesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AnonymousParticipantUpdateManyWithoutShareLinkNestedInput = {
    create?: XOR<AnonymousParticipantCreateWithoutShareLinkInput, AnonymousParticipantUncheckedCreateWithoutShareLinkInput> | AnonymousParticipantCreateWithoutShareLinkInput[] | AnonymousParticipantUncheckedCreateWithoutShareLinkInput[]
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutShareLinkInput | AnonymousParticipantCreateOrConnectWithoutShareLinkInput[]
    upsert?: AnonymousParticipantUpsertWithWhereUniqueWithoutShareLinkInput | AnonymousParticipantUpsertWithWhereUniqueWithoutShareLinkInput[]
    createMany?: AnonymousParticipantCreateManyShareLinkInputEnvelope
    set?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    disconnect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    delete?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    connect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    update?: AnonymousParticipantUpdateWithWhereUniqueWithoutShareLinkInput | AnonymousParticipantUpdateWithWhereUniqueWithoutShareLinkInput[]
    updateMany?: AnonymousParticipantUpdateManyWithWhereWithoutShareLinkInput | AnonymousParticipantUpdateManyWithWhereWithoutShareLinkInput[]
    deleteMany?: AnonymousParticipantScalarWhereInput | AnonymousParticipantScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedShareLinksNestedInput = {
    create?: XOR<UserCreateWithoutCreatedShareLinksInput, UserUncheckedCreateWithoutCreatedShareLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedShareLinksInput
    upsert?: UserUpsertWithoutCreatedShareLinksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedShareLinksInput, UserUpdateWithoutCreatedShareLinksInput>, UserUncheckedUpdateWithoutCreatedShareLinksInput>
  }

  export type ConversationUpdateOneRequiredWithoutShareLinksNestedInput = {
    create?: XOR<ConversationCreateWithoutShareLinksInput, ConversationUncheckedCreateWithoutShareLinksInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutShareLinksInput
    upsert?: ConversationUpsertWithoutShareLinksInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutShareLinksInput, ConversationUpdateWithoutShareLinksInput>, ConversationUncheckedUpdateWithoutShareLinksInput>
  }

  export type AnonymousParticipantUncheckedUpdateManyWithoutShareLinkNestedInput = {
    create?: XOR<AnonymousParticipantCreateWithoutShareLinkInput, AnonymousParticipantUncheckedCreateWithoutShareLinkInput> | AnonymousParticipantCreateWithoutShareLinkInput[] | AnonymousParticipantUncheckedCreateWithoutShareLinkInput[]
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutShareLinkInput | AnonymousParticipantCreateOrConnectWithoutShareLinkInput[]
    upsert?: AnonymousParticipantUpsertWithWhereUniqueWithoutShareLinkInput | AnonymousParticipantUpsertWithWhereUniqueWithoutShareLinkInput[]
    createMany?: AnonymousParticipantCreateManyShareLinkInputEnvelope
    set?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    disconnect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    delete?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    connect?: AnonymousParticipantWhereUniqueInput | AnonymousParticipantWhereUniqueInput[]
    update?: AnonymousParticipantUpdateWithWhereUniqueWithoutShareLinkInput | AnonymousParticipantUpdateWithWhereUniqueWithoutShareLinkInput[]
    updateMany?: AnonymousParticipantUpdateManyWithWhereWithoutShareLinkInput | AnonymousParticipantUpdateManyWithWhereWithoutShareLinkInput[]
    deleteMany?: AnonymousParticipantScalarWhereInput | AnonymousParticipantScalarWhereInput[]
  }

  export type ConversationShareLinkCreateNestedOneWithoutAnonymousParticipantsInput = {
    create?: XOR<ConversationShareLinkCreateWithoutAnonymousParticipantsInput, ConversationShareLinkUncheckedCreateWithoutAnonymousParticipantsInput>
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutAnonymousParticipantsInput
    connect?: ConversationShareLinkWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutAnonymousParticipantsInput = {
    create?: XOR<ConversationCreateWithoutAnonymousParticipantsInput, ConversationUncheckedCreateWithoutAnonymousParticipantsInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutAnonymousParticipantsInput
    connect?: ConversationWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutAnonymousSenderInput = {
    create?: XOR<MessageCreateWithoutAnonymousSenderInput, MessageUncheckedCreateWithoutAnonymousSenderInput> | MessageCreateWithoutAnonymousSenderInput[] | MessageUncheckedCreateWithoutAnonymousSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAnonymousSenderInput | MessageCreateOrConnectWithoutAnonymousSenderInput[]
    createMany?: MessageCreateManyAnonymousSenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutAnonymousSenderInput = {
    create?: XOR<MessageCreateWithoutAnonymousSenderInput, MessageUncheckedCreateWithoutAnonymousSenderInput> | MessageCreateWithoutAnonymousSenderInput[] | MessageUncheckedCreateWithoutAnonymousSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAnonymousSenderInput | MessageCreateOrConnectWithoutAnonymousSenderInput[]
    createMany?: MessageCreateManyAnonymousSenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ConversationShareLinkUpdateOneRequiredWithoutAnonymousParticipantsNestedInput = {
    create?: XOR<ConversationShareLinkCreateWithoutAnonymousParticipantsInput, ConversationShareLinkUncheckedCreateWithoutAnonymousParticipantsInput>
    connectOrCreate?: ConversationShareLinkCreateOrConnectWithoutAnonymousParticipantsInput
    upsert?: ConversationShareLinkUpsertWithoutAnonymousParticipantsInput
    connect?: ConversationShareLinkWhereUniqueInput
    update?: XOR<XOR<ConversationShareLinkUpdateToOneWithWhereWithoutAnonymousParticipantsInput, ConversationShareLinkUpdateWithoutAnonymousParticipantsInput>, ConversationShareLinkUncheckedUpdateWithoutAnonymousParticipantsInput>
  }

  export type ConversationUpdateOneRequiredWithoutAnonymousParticipantsNestedInput = {
    create?: XOR<ConversationCreateWithoutAnonymousParticipantsInput, ConversationUncheckedCreateWithoutAnonymousParticipantsInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutAnonymousParticipantsInput
    upsert?: ConversationUpsertWithoutAnonymousParticipantsInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutAnonymousParticipantsInput, ConversationUpdateWithoutAnonymousParticipantsInput>, ConversationUncheckedUpdateWithoutAnonymousParticipantsInput>
  }

  export type MessageUpdateManyWithoutAnonymousSenderNestedInput = {
    create?: XOR<MessageCreateWithoutAnonymousSenderInput, MessageUncheckedCreateWithoutAnonymousSenderInput> | MessageCreateWithoutAnonymousSenderInput[] | MessageUncheckedCreateWithoutAnonymousSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAnonymousSenderInput | MessageCreateOrConnectWithoutAnonymousSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutAnonymousSenderInput | MessageUpsertWithWhereUniqueWithoutAnonymousSenderInput[]
    createMany?: MessageCreateManyAnonymousSenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutAnonymousSenderInput | MessageUpdateWithWhereUniqueWithoutAnonymousSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutAnonymousSenderInput | MessageUpdateManyWithWhereWithoutAnonymousSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutAnonymousSenderNestedInput = {
    create?: XOR<MessageCreateWithoutAnonymousSenderInput, MessageUncheckedCreateWithoutAnonymousSenderInput> | MessageCreateWithoutAnonymousSenderInput[] | MessageUncheckedCreateWithoutAnonymousSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAnonymousSenderInput | MessageCreateOrConnectWithoutAnonymousSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutAnonymousSenderInput | MessageUpsertWithWhereUniqueWithoutAnonymousSenderInput[]
    createMany?: MessageCreateManyAnonymousSenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutAnonymousSenderInput | MessageUpdateWithWhereUniqueWithoutAnonymousSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutAnonymousSenderInput | MessageUpdateManyWithWhereWithoutAnonymousSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageReadStatusCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageReadStatusCreateWithoutMessageInput, MessageReadStatusUncheckedCreateWithoutMessageInput> | MessageReadStatusCreateWithoutMessageInput[] | MessageReadStatusUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReadStatusCreateOrConnectWithoutMessageInput | MessageReadStatusCreateOrConnectWithoutMessageInput[]
    createMany?: MessageReadStatusCreateManyMessageInputEnvelope
    connect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
  }

  export type MessageTranslationCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageTranslationCreateWithoutMessageInput, MessageTranslationUncheckedCreateWithoutMessageInput> | MessageTranslationCreateWithoutMessageInput[] | MessageTranslationUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageTranslationCreateOrConnectWithoutMessageInput | MessageTranslationCreateOrConnectWithoutMessageInput[]
    createMany?: MessageTranslationCreateManyMessageInputEnvelope
    connect?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
  }

  export type MessageCreateNestedOneWithoutRepliesInput = {
    create?: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: MessageCreateOrConnectWithoutRepliesInput
    connect?: MessageWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutReplyToInput = {
    create?: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput> | MessageCreateWithoutReplyToInput[] | MessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyToInput | MessageCreateOrConnectWithoutReplyToInput[]
    createMany?: MessageCreateManyReplyToInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AnonymousParticipantCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<AnonymousParticipantCreateWithoutSentMessagesInput, AnonymousParticipantUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutSentMessagesInput
    connect?: AnonymousParticipantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
  }

  export type MessageReadStatusUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageReadStatusCreateWithoutMessageInput, MessageReadStatusUncheckedCreateWithoutMessageInput> | MessageReadStatusCreateWithoutMessageInput[] | MessageReadStatusUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReadStatusCreateOrConnectWithoutMessageInput | MessageReadStatusCreateOrConnectWithoutMessageInput[]
    createMany?: MessageReadStatusCreateManyMessageInputEnvelope
    connect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
  }

  export type MessageTranslationUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageTranslationCreateWithoutMessageInput, MessageTranslationUncheckedCreateWithoutMessageInput> | MessageTranslationCreateWithoutMessageInput[] | MessageTranslationUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageTranslationCreateOrConnectWithoutMessageInput | MessageTranslationCreateOrConnectWithoutMessageInput[]
    createMany?: MessageTranslationCreateManyMessageInputEnvelope
    connect?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReplyToInput = {
    create?: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput> | MessageCreateWithoutReplyToInput[] | MessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyToInput | MessageCreateOrConnectWithoutReplyToInput[]
    createMany?: MessageCreateManyReplyToInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageReadStatusUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageReadStatusCreateWithoutMessageInput, MessageReadStatusUncheckedCreateWithoutMessageInput> | MessageReadStatusCreateWithoutMessageInput[] | MessageReadStatusUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReadStatusCreateOrConnectWithoutMessageInput | MessageReadStatusCreateOrConnectWithoutMessageInput[]
    upsert?: MessageReadStatusUpsertWithWhereUniqueWithoutMessageInput | MessageReadStatusUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageReadStatusCreateManyMessageInputEnvelope
    set?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    disconnect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    delete?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    connect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    update?: MessageReadStatusUpdateWithWhereUniqueWithoutMessageInput | MessageReadStatusUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageReadStatusUpdateManyWithWhereWithoutMessageInput | MessageReadStatusUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageReadStatusScalarWhereInput | MessageReadStatusScalarWhereInput[]
  }

  export type MessageTranslationUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageTranslationCreateWithoutMessageInput, MessageTranslationUncheckedCreateWithoutMessageInput> | MessageTranslationCreateWithoutMessageInput[] | MessageTranslationUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageTranslationCreateOrConnectWithoutMessageInput | MessageTranslationCreateOrConnectWithoutMessageInput[]
    upsert?: MessageTranslationUpsertWithWhereUniqueWithoutMessageInput | MessageTranslationUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageTranslationCreateManyMessageInputEnvelope
    set?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
    disconnect?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
    delete?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
    connect?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
    update?: MessageTranslationUpdateWithWhereUniqueWithoutMessageInput | MessageTranslationUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageTranslationUpdateManyWithWhereWithoutMessageInput | MessageTranslationUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageTranslationScalarWhereInput | MessageTranslationScalarWhereInput[]
  }

  export type MessageUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: MessageCreateOrConnectWithoutRepliesInput
    upsert?: MessageUpsertWithoutRepliesInput
    disconnect?: boolean
    delete?: MessageWhereInput | boolean
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutRepliesInput, MessageUpdateWithoutRepliesInput>, MessageUncheckedUpdateWithoutRepliesInput>
  }

  export type MessageUpdateManyWithoutReplyToNestedInput = {
    create?: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput> | MessageCreateWithoutReplyToInput[] | MessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyToInput | MessageCreateOrConnectWithoutReplyToInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReplyToInput | MessageUpsertWithWhereUniqueWithoutReplyToInput[]
    createMany?: MessageCreateManyReplyToInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReplyToInput | MessageUpdateWithWhereUniqueWithoutReplyToInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReplyToInput | MessageUpdateManyWithWhereWithoutReplyToInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AnonymousParticipantUpdateOneWithoutSentMessagesNestedInput = {
    create?: XOR<AnonymousParticipantCreateWithoutSentMessagesInput, AnonymousParticipantUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: AnonymousParticipantCreateOrConnectWithoutSentMessagesInput
    upsert?: AnonymousParticipantUpsertWithoutSentMessagesInput
    disconnect?: boolean
    delete?: AnonymousParticipantWhereInput | boolean
    connect?: AnonymousParticipantWhereUniqueInput
    update?: XOR<XOR<AnonymousParticipantUpdateToOneWithWhereWithoutSentMessagesInput, AnonymousParticipantUpdateWithoutSentMessagesInput>, AnonymousParticipantUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateOneWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type ConversationUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    upsert?: ConversationUpsertWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutMessagesInput, ConversationUpdateWithoutMessagesInput>, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type MessageReadStatusUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageReadStatusCreateWithoutMessageInput, MessageReadStatusUncheckedCreateWithoutMessageInput> | MessageReadStatusCreateWithoutMessageInput[] | MessageReadStatusUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReadStatusCreateOrConnectWithoutMessageInput | MessageReadStatusCreateOrConnectWithoutMessageInput[]
    upsert?: MessageReadStatusUpsertWithWhereUniqueWithoutMessageInput | MessageReadStatusUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageReadStatusCreateManyMessageInputEnvelope
    set?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    disconnect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    delete?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    connect?: MessageReadStatusWhereUniqueInput | MessageReadStatusWhereUniqueInput[]
    update?: MessageReadStatusUpdateWithWhereUniqueWithoutMessageInput | MessageReadStatusUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageReadStatusUpdateManyWithWhereWithoutMessageInput | MessageReadStatusUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageReadStatusScalarWhereInput | MessageReadStatusScalarWhereInput[]
  }

  export type MessageTranslationUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageTranslationCreateWithoutMessageInput, MessageTranslationUncheckedCreateWithoutMessageInput> | MessageTranslationCreateWithoutMessageInput[] | MessageTranslationUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageTranslationCreateOrConnectWithoutMessageInput | MessageTranslationCreateOrConnectWithoutMessageInput[]
    upsert?: MessageTranslationUpsertWithWhereUniqueWithoutMessageInput | MessageTranslationUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageTranslationCreateManyMessageInputEnvelope
    set?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
    disconnect?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
    delete?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
    connect?: MessageTranslationWhereUniqueInput | MessageTranslationWhereUniqueInput[]
    update?: MessageTranslationUpdateWithWhereUniqueWithoutMessageInput | MessageTranslationUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageTranslationUpdateManyWithWhereWithoutMessageInput | MessageTranslationUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageTranslationScalarWhereInput | MessageTranslationScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReplyToNestedInput = {
    create?: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput> | MessageCreateWithoutReplyToInput[] | MessageUncheckedCreateWithoutReplyToInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyToInput | MessageCreateOrConnectWithoutReplyToInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReplyToInput | MessageUpsertWithWhereUniqueWithoutReplyToInput[]
    createMany?: MessageCreateManyReplyToInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReplyToInput | MessageUpdateWithWhereUniqueWithoutReplyToInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReplyToInput | MessageUpdateManyWithWhereWithoutReplyToInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<MessageCreateWithoutTranslationsInput, MessageUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutTranslationsInput
    connect?: MessageWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type MessageUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<MessageCreateWithoutTranslationsInput, MessageUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutTranslationsInput
    upsert?: MessageUpsertWithoutTranslationsInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutTranslationsInput, MessageUpdateWithoutTranslationsInput>, MessageUncheckedUpdateWithoutTranslationsInput>
  }

  export type UserCreateNestedOneWithoutMessageReadStatusInput = {
    create?: XOR<UserCreateWithoutMessageReadStatusInput, UserUncheckedCreateWithoutMessageReadStatusInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageReadStatusInput
    connect?: UserWhereUniqueInput
  }

  export type MessageCreateNestedOneWithoutReadStatusInput = {
    create?: XOR<MessageCreateWithoutReadStatusInput, MessageUncheckedCreateWithoutReadStatusInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReadStatusInput
    connect?: MessageWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessageReadStatusNestedInput = {
    create?: XOR<UserCreateWithoutMessageReadStatusInput, UserUncheckedCreateWithoutMessageReadStatusInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageReadStatusInput
    upsert?: UserUpsertWithoutMessageReadStatusInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessageReadStatusInput, UserUpdateWithoutMessageReadStatusInput>, UserUncheckedUpdateWithoutMessageReadStatusInput>
  }

  export type MessageUpdateOneRequiredWithoutReadStatusNestedInput = {
    create?: XOR<MessageCreateWithoutReadStatusInput, MessageUncheckedCreateWithoutReadStatusInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReadStatusInput
    upsert?: MessageUpsertWithoutReadStatusInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutReadStatusInput, MessageUpdateWithoutReadStatusInput>, MessageUncheckedUpdateWithoutReadStatusInput>
  }

  export type UserCreateNestedOneWithoutReceivedFriendRequestsInput = {
    create?: XOR<UserCreateWithoutReceivedFriendRequestsInput, UserUncheckedCreateWithoutReceivedFriendRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFriendRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentFriendRequestsInput = {
    create?: XOR<UserCreateWithoutSentFriendRequestsInput, UserUncheckedCreateWithoutSentFriendRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentFriendRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReceivedFriendRequestsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedFriendRequestsInput, UserUncheckedCreateWithoutReceivedFriendRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFriendRequestsInput
    upsert?: UserUpsertWithoutReceivedFriendRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedFriendRequestsInput, UserUpdateWithoutReceivedFriendRequestsInput>, UserUncheckedUpdateWithoutReceivedFriendRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutSentFriendRequestsNestedInput = {
    create?: XOR<UserCreateWithoutSentFriendRequestsInput, UserUncheckedCreateWithoutSentFriendRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentFriendRequestsInput
    upsert?: UserUpsertWithoutSentFriendRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentFriendRequestsInput, UserUpdateWithoutSentFriendRequestsInput>, UserUncheckedUpdateWithoutSentFriendRequestsInput>
  }

  export type UserCreateNestedOneWithoutTypingIndicatorsInput = {
    create?: XOR<UserCreateWithoutTypingIndicatorsInput, UserUncheckedCreateWithoutTypingIndicatorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTypingIndicatorsInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutTypingIndicatorsInput = {
    create?: XOR<ConversationCreateWithoutTypingIndicatorsInput, ConversationUncheckedCreateWithoutTypingIndicatorsInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutTypingIndicatorsInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTypingIndicatorsNestedInput = {
    create?: XOR<UserCreateWithoutTypingIndicatorsInput, UserUncheckedCreateWithoutTypingIndicatorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTypingIndicatorsInput
    upsert?: UserUpsertWithoutTypingIndicatorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTypingIndicatorsInput, UserUpdateWithoutTypingIndicatorsInput>, UserUncheckedUpdateWithoutTypingIndicatorsInput>
  }

  export type ConversationUpdateOneRequiredWithoutTypingIndicatorsNestedInput = {
    create?: XOR<ConversationCreateWithoutTypingIndicatorsInput, ConversationUncheckedCreateWithoutTypingIndicatorsInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutTypingIndicatorsInput
    upsert?: ConversationUpsertWithoutTypingIndicatorsInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutTypingIndicatorsInput, ConversationUpdateWithoutTypingIndicatorsInput>, ConversationUncheckedUpdateWithoutTypingIndicatorsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type CommunityMemberCreateNestedManyWithoutCommunityInput = {
    create?: XOR<CommunityMemberCreateWithoutCommunityInput, CommunityMemberUncheckedCreateWithoutCommunityInput> | CommunityMemberCreateWithoutCommunityInput[] | CommunityMemberUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityMemberCreateOrConnectWithoutCommunityInput | CommunityMemberCreateOrConnectWithoutCommunityInput[]
    createMany?: CommunityMemberCreateManyCommunityInputEnvelope
    connect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedCommunitiesInput = {
    create?: XOR<UserCreateWithoutCreatedCommunitiesInput, UserUncheckedCreateWithoutCreatedCommunitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCommunitiesInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityAdminCreateNestedManyWithoutCommunityInput = {
    create?: XOR<CommunityAdminCreateWithoutCommunityInput, CommunityAdminUncheckedCreateWithoutCommunityInput> | CommunityAdminCreateWithoutCommunityInput[] | CommunityAdminUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityAdminCreateOrConnectWithoutCommunityInput | CommunityAdminCreateOrConnectWithoutCommunityInput[]
    createMany?: CommunityAdminCreateManyCommunityInputEnvelope
    connect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
  }

  export type CommunityModeratorCreateNestedManyWithoutCommunityInput = {
    create?: XOR<CommunityModeratorCreateWithoutCommunityInput, CommunityModeratorUncheckedCreateWithoutCommunityInput> | CommunityModeratorCreateWithoutCommunityInput[] | CommunityModeratorUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityModeratorCreateOrConnectWithoutCommunityInput | CommunityModeratorCreateOrConnectWithoutCommunityInput[]
    createMany?: CommunityModeratorCreateManyCommunityInputEnvelope
    connect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutCommunityInput = {
    create?: XOR<ConversationCreateWithoutCommunityInput, ConversationUncheckedCreateWithoutCommunityInput> | ConversationCreateWithoutCommunityInput[] | ConversationUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutCommunityInput | ConversationCreateOrConnectWithoutCommunityInput[]
    createMany?: ConversationCreateManyCommunityInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type CommunityMemberUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<CommunityMemberCreateWithoutCommunityInput, CommunityMemberUncheckedCreateWithoutCommunityInput> | CommunityMemberCreateWithoutCommunityInput[] | CommunityMemberUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityMemberCreateOrConnectWithoutCommunityInput | CommunityMemberCreateOrConnectWithoutCommunityInput[]
    createMany?: CommunityMemberCreateManyCommunityInputEnvelope
    connect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
  }

  export type CommunityAdminUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<CommunityAdminCreateWithoutCommunityInput, CommunityAdminUncheckedCreateWithoutCommunityInput> | CommunityAdminCreateWithoutCommunityInput[] | CommunityAdminUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityAdminCreateOrConnectWithoutCommunityInput | CommunityAdminCreateOrConnectWithoutCommunityInput[]
    createMany?: CommunityAdminCreateManyCommunityInputEnvelope
    connect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
  }

  export type CommunityModeratorUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<CommunityModeratorCreateWithoutCommunityInput, CommunityModeratorUncheckedCreateWithoutCommunityInput> | CommunityModeratorCreateWithoutCommunityInput[] | CommunityModeratorUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityModeratorCreateOrConnectWithoutCommunityInput | CommunityModeratorCreateOrConnectWithoutCommunityInput[]
    createMany?: CommunityModeratorCreateManyCommunityInputEnvelope
    connect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<ConversationCreateWithoutCommunityInput, ConversationUncheckedCreateWithoutCommunityInput> | ConversationCreateWithoutCommunityInput[] | ConversationUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutCommunityInput | ConversationCreateOrConnectWithoutCommunityInput[]
    createMany?: ConversationCreateManyCommunityInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type CommunityMemberUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<CommunityMemberCreateWithoutCommunityInput, CommunityMemberUncheckedCreateWithoutCommunityInput> | CommunityMemberCreateWithoutCommunityInput[] | CommunityMemberUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityMemberCreateOrConnectWithoutCommunityInput | CommunityMemberCreateOrConnectWithoutCommunityInput[]
    upsert?: CommunityMemberUpsertWithWhereUniqueWithoutCommunityInput | CommunityMemberUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: CommunityMemberCreateManyCommunityInputEnvelope
    set?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    disconnect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    delete?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    connect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    update?: CommunityMemberUpdateWithWhereUniqueWithoutCommunityInput | CommunityMemberUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: CommunityMemberUpdateManyWithWhereWithoutCommunityInput | CommunityMemberUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: CommunityMemberScalarWhereInput | CommunityMemberScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedCommunitiesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCommunitiesInput, UserUncheckedCreateWithoutCreatedCommunitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCommunitiesInput
    upsert?: UserUpsertWithoutCreatedCommunitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCommunitiesInput, UserUpdateWithoutCreatedCommunitiesInput>, UserUncheckedUpdateWithoutCreatedCommunitiesInput>
  }

  export type CommunityAdminUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<CommunityAdminCreateWithoutCommunityInput, CommunityAdminUncheckedCreateWithoutCommunityInput> | CommunityAdminCreateWithoutCommunityInput[] | CommunityAdminUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityAdminCreateOrConnectWithoutCommunityInput | CommunityAdminCreateOrConnectWithoutCommunityInput[]
    upsert?: CommunityAdminUpsertWithWhereUniqueWithoutCommunityInput | CommunityAdminUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: CommunityAdminCreateManyCommunityInputEnvelope
    set?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    disconnect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    delete?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    connect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    update?: CommunityAdminUpdateWithWhereUniqueWithoutCommunityInput | CommunityAdminUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: CommunityAdminUpdateManyWithWhereWithoutCommunityInput | CommunityAdminUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: CommunityAdminScalarWhereInput | CommunityAdminScalarWhereInput[]
  }

  export type CommunityModeratorUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<CommunityModeratorCreateWithoutCommunityInput, CommunityModeratorUncheckedCreateWithoutCommunityInput> | CommunityModeratorCreateWithoutCommunityInput[] | CommunityModeratorUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityModeratorCreateOrConnectWithoutCommunityInput | CommunityModeratorCreateOrConnectWithoutCommunityInput[]
    upsert?: CommunityModeratorUpsertWithWhereUniqueWithoutCommunityInput | CommunityModeratorUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: CommunityModeratorCreateManyCommunityInputEnvelope
    set?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    disconnect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    delete?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    connect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    update?: CommunityModeratorUpdateWithWhereUniqueWithoutCommunityInput | CommunityModeratorUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: CommunityModeratorUpdateManyWithWhereWithoutCommunityInput | CommunityModeratorUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: CommunityModeratorScalarWhereInput | CommunityModeratorScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<ConversationCreateWithoutCommunityInput, ConversationUncheckedCreateWithoutCommunityInput> | ConversationCreateWithoutCommunityInput[] | ConversationUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutCommunityInput | ConversationCreateOrConnectWithoutCommunityInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutCommunityInput | ConversationUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: ConversationCreateManyCommunityInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutCommunityInput | ConversationUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutCommunityInput | ConversationUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type CommunityMemberUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<CommunityMemberCreateWithoutCommunityInput, CommunityMemberUncheckedCreateWithoutCommunityInput> | CommunityMemberCreateWithoutCommunityInput[] | CommunityMemberUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityMemberCreateOrConnectWithoutCommunityInput | CommunityMemberCreateOrConnectWithoutCommunityInput[]
    upsert?: CommunityMemberUpsertWithWhereUniqueWithoutCommunityInput | CommunityMemberUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: CommunityMemberCreateManyCommunityInputEnvelope
    set?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    disconnect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    delete?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    connect?: CommunityMemberWhereUniqueInput | CommunityMemberWhereUniqueInput[]
    update?: CommunityMemberUpdateWithWhereUniqueWithoutCommunityInput | CommunityMemberUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: CommunityMemberUpdateManyWithWhereWithoutCommunityInput | CommunityMemberUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: CommunityMemberScalarWhereInput | CommunityMemberScalarWhereInput[]
  }

  export type CommunityAdminUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<CommunityAdminCreateWithoutCommunityInput, CommunityAdminUncheckedCreateWithoutCommunityInput> | CommunityAdminCreateWithoutCommunityInput[] | CommunityAdminUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityAdminCreateOrConnectWithoutCommunityInput | CommunityAdminCreateOrConnectWithoutCommunityInput[]
    upsert?: CommunityAdminUpsertWithWhereUniqueWithoutCommunityInput | CommunityAdminUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: CommunityAdminCreateManyCommunityInputEnvelope
    set?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    disconnect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    delete?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    connect?: CommunityAdminWhereUniqueInput | CommunityAdminWhereUniqueInput[]
    update?: CommunityAdminUpdateWithWhereUniqueWithoutCommunityInput | CommunityAdminUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: CommunityAdminUpdateManyWithWhereWithoutCommunityInput | CommunityAdminUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: CommunityAdminScalarWhereInput | CommunityAdminScalarWhereInput[]
  }

  export type CommunityModeratorUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<CommunityModeratorCreateWithoutCommunityInput, CommunityModeratorUncheckedCreateWithoutCommunityInput> | CommunityModeratorCreateWithoutCommunityInput[] | CommunityModeratorUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: CommunityModeratorCreateOrConnectWithoutCommunityInput | CommunityModeratorCreateOrConnectWithoutCommunityInput[]
    upsert?: CommunityModeratorUpsertWithWhereUniqueWithoutCommunityInput | CommunityModeratorUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: CommunityModeratorCreateManyCommunityInputEnvelope
    set?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    disconnect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    delete?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    connect?: CommunityModeratorWhereUniqueInput | CommunityModeratorWhereUniqueInput[]
    update?: CommunityModeratorUpdateWithWhereUniqueWithoutCommunityInput | CommunityModeratorUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: CommunityModeratorUpdateManyWithWhereWithoutCommunityInput | CommunityModeratorUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: CommunityModeratorScalarWhereInput | CommunityModeratorScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<ConversationCreateWithoutCommunityInput, ConversationUncheckedCreateWithoutCommunityInput> | ConversationCreateWithoutCommunityInput[] | ConversationUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutCommunityInput | ConversationCreateOrConnectWithoutCommunityInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutCommunityInput | ConversationUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: ConversationCreateManyCommunityInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutCommunityInput | ConversationUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutCommunityInput | ConversationUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommunityMembershipsInput = {
    create?: XOR<UserCreateWithoutCommunityMembershipsInput, UserUncheckedCreateWithoutCommunityMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunityMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutMembersInput = {
    create?: XOR<CommunityCreateWithoutMembersInput, CommunityUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutMembersInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommunityMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutCommunityMembershipsInput, UserUncheckedCreateWithoutCommunityMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunityMembershipsInput
    upsert?: UserUpsertWithoutCommunityMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommunityMembershipsInput, UserUpdateWithoutCommunityMembershipsInput>, UserUncheckedUpdateWithoutCommunityMembershipsInput>
  }

  export type CommunityUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<CommunityCreateWithoutMembersInput, CommunityUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutMembersInput
    upsert?: CommunityUpsertWithoutMembersInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutMembersInput, CommunityUpdateWithoutMembersInput>, CommunityUncheckedUpdateWithoutMembersInput>
  }

  export type UserCreateNestedOneWithoutStatsInput = {
    create?: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatsInput
    upsert?: UserUpsertWithoutStatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatsInput, UserUpdateWithoutStatsInput>, UserUncheckedUpdateWithoutStatsInput>
  }

  export type UserCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    upsert?: UserUpsertWithoutPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPreferencesInput, UserUpdateWithoutPreferencesInput>, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserCreateNestedOneWithoutConversationPreferencesInput = {
    create?: XOR<UserCreateWithoutConversationPreferencesInput, UserUncheckedCreateWithoutConversationPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<ConversationCreateWithoutPreferencesInput, ConversationUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutPreferencesInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutConversationPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutConversationPreferencesInput, UserUncheckedCreateWithoutConversationPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationPreferencesInput
    upsert?: UserUpsertWithoutConversationPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConversationPreferencesInput, UserUpdateWithoutConversationPreferencesInput>, UserUncheckedUpdateWithoutConversationPreferencesInput>
  }

  export type ConversationUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<ConversationCreateWithoutPreferencesInput, ConversationUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutPreferencesInput
    upsert?: ConversationUpsertWithoutPreferencesInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutPreferencesInput, ConversationUpdateWithoutPreferencesInput>, ConversationUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserCreateNestedOneWithoutCommunityAdminsInput = {
    create?: XOR<UserCreateWithoutCommunityAdminsInput, UserUncheckedCreateWithoutCommunityAdminsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunityAdminsInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutAdminsInput = {
    create?: XOR<CommunityCreateWithoutAdminsInput, CommunityUncheckedCreateWithoutAdminsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutAdminsInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommunityAdminsNestedInput = {
    create?: XOR<UserCreateWithoutCommunityAdminsInput, UserUncheckedCreateWithoutCommunityAdminsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunityAdminsInput
    upsert?: UserUpsertWithoutCommunityAdminsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommunityAdminsInput, UserUpdateWithoutCommunityAdminsInput>, UserUncheckedUpdateWithoutCommunityAdminsInput>
  }

  export type CommunityUpdateOneRequiredWithoutAdminsNestedInput = {
    create?: XOR<CommunityCreateWithoutAdminsInput, CommunityUncheckedCreateWithoutAdminsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutAdminsInput
    upsert?: CommunityUpsertWithoutAdminsInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutAdminsInput, CommunityUpdateWithoutAdminsInput>, CommunityUncheckedUpdateWithoutAdminsInput>
  }

  export type UserCreateNestedOneWithoutCommunityModeratorsInput = {
    create?: XOR<UserCreateWithoutCommunityModeratorsInput, UserUncheckedCreateWithoutCommunityModeratorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunityModeratorsInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutModeratorsInput = {
    create?: XOR<CommunityCreateWithoutModeratorsInput, CommunityUncheckedCreateWithoutModeratorsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutModeratorsInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommunityModeratorsNestedInput = {
    create?: XOR<UserCreateWithoutCommunityModeratorsInput, UserUncheckedCreateWithoutCommunityModeratorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunityModeratorsInput
    upsert?: UserUpsertWithoutCommunityModeratorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommunityModeratorsInput, UserUpdateWithoutCommunityModeratorsInput>, UserUncheckedUpdateWithoutCommunityModeratorsInput>
  }

  export type CommunityUpdateOneRequiredWithoutModeratorsNestedInput = {
    create?: XOR<CommunityCreateWithoutModeratorsInput, CommunityUncheckedCreateWithoutModeratorsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutModeratorsInput
    upsert?: CommunityUpsertWithoutModeratorsInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutModeratorsInput, CommunityUpdateWithoutModeratorsInput>, CommunityUncheckedUpdateWithoutModeratorsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type CommunityCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberCreateNestedManyWithoutCommunityInput
    admins?: CommunityAdminCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberUncheckedCreateNestedManyWithoutCommunityInput
    admins?: CommunityAdminUncheckedCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorUncheckedCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutCreatorInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutCreatorInput, CommunityUncheckedCreateWithoutCreatorInput>
  }

  export type CommunityCreateManyCreatorInputEnvelope = {
    data: CommunityCreateManyCreatorInput | CommunityCreateManyCreatorInput[]
  }

  export type CommunityMemberCreateWithoutUserInput = {
    id?: string
    joinedAt?: Date | string
    community: CommunityCreateNestedOneWithoutMembersInput
  }

  export type CommunityMemberUncheckedCreateWithoutUserInput = {
    id?: string
    communityId: string
    joinedAt?: Date | string
  }

  export type CommunityMemberCreateOrConnectWithoutUserInput = {
    where: CommunityMemberWhereUniqueInput
    create: XOR<CommunityMemberCreateWithoutUserInput, CommunityMemberUncheckedCreateWithoutUserInput>
  }

  export type CommunityMemberCreateManyUserInputEnvelope = {
    data: CommunityMemberCreateManyUserInput | CommunityMemberCreateManyUserInput[]
  }

  export type ConversationMemberCreateWithoutUserInput = {
    id?: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    conversation: ConversationCreateNestedOneWithoutMembersInput
  }

  export type ConversationMemberUncheckedCreateWithoutUserInput = {
    id?: string
    conversationId: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
  }

  export type ConversationMemberCreateOrConnectWithoutUserInput = {
    where: ConversationMemberWhereUniqueInput
    create: XOR<ConversationMemberCreateWithoutUserInput, ConversationMemberUncheckedCreateWithoutUserInput>
  }

  export type ConversationMemberCreateManyUserInputEnvelope = {
    data: ConversationMemberCreateManyUserInput | ConversationMemberCreateManyUserInput[]
  }

  export type ConversationPreferenceCreateWithoutUserInput = {
    id?: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    conversation: ConversationCreateNestedOneWithoutPreferencesInput
  }

  export type ConversationPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    conversationId: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationPreferenceCreateOrConnectWithoutUserInput = {
    where: ConversationPreferenceWhereUniqueInput
    create: XOR<ConversationPreferenceCreateWithoutUserInput, ConversationPreferenceUncheckedCreateWithoutUserInput>
  }

  export type ConversationPreferenceCreateManyUserInputEnvelope = {
    data: ConversationPreferenceCreateManyUserInput | ConversationPreferenceCreateManyUserInput[]
  }

  export type ConversationShareLinkCreateWithoutCreatorInput = {
    id?: string
    linkId: string
    identifier?: string | null
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutShareLinkInput
    conversation: ConversationCreateNestedOneWithoutShareLinksInput
  }

  export type ConversationShareLinkUncheckedCreateWithoutCreatorInput = {
    id?: string
    linkId: string
    identifier?: string | null
    conversationId: string
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutShareLinkInput
  }

  export type ConversationShareLinkCreateOrConnectWithoutCreatorInput = {
    where: ConversationShareLinkWhereUniqueInput
    create: XOR<ConversationShareLinkCreateWithoutCreatorInput, ConversationShareLinkUncheckedCreateWithoutCreatorInput>
  }

  export type ConversationShareLinkCreateManyCreatorInputEnvelope = {
    data: ConversationShareLinkCreateManyCreatorInput | ConversationShareLinkCreateManyCreatorInput[]
  }

  export type FriendRequestCreateWithoutReceiverInput = {
    id?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sender: UserCreateNestedOneWithoutSentFriendRequestsInput
  }

  export type FriendRequestUncheckedCreateWithoutReceiverInput = {
    id?: string
    senderId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendRequestCreateOrConnectWithoutReceiverInput = {
    where: FriendRequestWhereUniqueInput
    create: XOR<FriendRequestCreateWithoutReceiverInput, FriendRequestUncheckedCreateWithoutReceiverInput>
  }

  export type FriendRequestCreateManyReceiverInputEnvelope = {
    data: FriendRequestCreateManyReceiverInput | FriendRequestCreateManyReceiverInput[]
  }

  export type FriendRequestCreateWithoutSenderInput = {
    id?: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receiver: UserCreateNestedOneWithoutReceivedFriendRequestsInput
  }

  export type FriendRequestUncheckedCreateWithoutSenderInput = {
    id?: string
    receiverId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendRequestCreateOrConnectWithoutSenderInput = {
    where: FriendRequestWhereUniqueInput
    create: XOR<FriendRequestCreateWithoutSenderInput, FriendRequestUncheckedCreateWithoutSenderInput>
  }

  export type FriendRequestCreateManySenderInputEnvelope = {
    data: FriendRequestCreateManySenderInput | FriendRequestCreateManySenderInput[]
  }

  export type MessageReadStatusCreateWithoutUserInput = {
    id?: string
    readAt?: Date | string
    message: MessageCreateNestedOneWithoutReadStatusInput
  }

  export type MessageReadStatusUncheckedCreateWithoutUserInput = {
    id?: string
    messageId: string
    readAt?: Date | string
  }

  export type MessageReadStatusCreateOrConnectWithoutUserInput = {
    where: MessageReadStatusWhereUniqueInput
    create: XOR<MessageReadStatusCreateWithoutUserInput, MessageReadStatusUncheckedCreateWithoutUserInput>
  }

  export type MessageReadStatusCreateManyUserInputEnvelope = {
    data: MessageReadStatusCreateManyUserInput | MessageReadStatusCreateManyUserInput[]
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationCreateNestedManyWithoutMessageInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    anonymousSender?: AnonymousParticipantCreateNestedOneWithoutSentMessagesInput
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    conversationId: string
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    content: string
    data?: string | null
    priority?: string
    isRead?: boolean
    emailSent?: boolean
    pushSent?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    content: string
    data?: string | null
    priority?: string
    isRead?: boolean
    emailSent?: boolean
    pushSent?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
  }

  export type TypingIndicatorCreateWithoutUserInput = {
    id?: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
    conversation: ConversationCreateNestedOneWithoutTypingIndicatorsInput
  }

  export type TypingIndicatorUncheckedCreateWithoutUserInput = {
    id?: string
    conversationId: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
  }

  export type TypingIndicatorCreateOrConnectWithoutUserInput = {
    where: TypingIndicatorWhereUniqueInput
    create: XOR<TypingIndicatorCreateWithoutUserInput, TypingIndicatorUncheckedCreateWithoutUserInput>
  }

  export type TypingIndicatorCreateManyUserInputEnvelope = {
    data: TypingIndicatorCreateManyUserInput | TypingIndicatorCreateManyUserInput[]
  }

  export type UserPreferenceCreateWithoutUserInput = {
    id?: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceCreateOrConnectWithoutUserInput = {
    where: UserPreferenceWhereUniqueInput
    create: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
  }

  export type UserPreferenceCreateManyUserInputEnvelope = {
    data: UserPreferenceCreateManyUserInput | UserPreferenceCreateManyUserInput[]
  }

  export type UserStatsCreateWithoutUserInput = {
    id?: string
    messagesSent?: number
    messagesReceived?: number
    charactersTyped?: number
    imageMessagesSent?: number
    filesShared?: number
    conversationsJoined?: number
    communitiesCreated?: number
    friendsAdded?: number
    friendRequestsSent?: number
    translationsUsed?: number
    languagesDetected?: number
    autoTranslateTimeMinutes?: number
    totalOnlineTimeMinutes?: number
    sessionCount?: number
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatsUncheckedCreateWithoutUserInput = {
    id?: string
    messagesSent?: number
    messagesReceived?: number
    charactersTyped?: number
    imageMessagesSent?: number
    filesShared?: number
    conversationsJoined?: number
    communitiesCreated?: number
    friendsAdded?: number
    friendRequestsSent?: number
    translationsUsed?: number
    languagesDetected?: number
    autoTranslateTimeMinutes?: number
    totalOnlineTimeMinutes?: number
    sessionCount?: number
    lastActiveAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatsCreateOrConnectWithoutUserInput = {
    where: UserStatsWhereUniqueInput
    create: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
  }

  export type CommunityAdminCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    community: CommunityCreateNestedOneWithoutAdminsInput
  }

  export type CommunityAdminUncheckedCreateWithoutUserInput = {
    id?: string
    communityId: string
    assignedAt?: Date | string
  }

  export type CommunityAdminCreateOrConnectWithoutUserInput = {
    where: CommunityAdminWhereUniqueInput
    create: XOR<CommunityAdminCreateWithoutUserInput, CommunityAdminUncheckedCreateWithoutUserInput>
  }

  export type CommunityAdminCreateManyUserInputEnvelope = {
    data: CommunityAdminCreateManyUserInput | CommunityAdminCreateManyUserInput[]
  }

  export type CommunityModeratorCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    community: CommunityCreateNestedOneWithoutModeratorsInput
  }

  export type CommunityModeratorUncheckedCreateWithoutUserInput = {
    id?: string
    communityId: string
    assignedAt?: Date | string
  }

  export type CommunityModeratorCreateOrConnectWithoutUserInput = {
    where: CommunityModeratorWhereUniqueInput
    create: XOR<CommunityModeratorCreateWithoutUserInput, CommunityModeratorUncheckedCreateWithoutUserInput>
  }

  export type CommunityModeratorCreateManyUserInputEnvelope = {
    data: CommunityModeratorCreateManyUserInput | CommunityModeratorCreateManyUserInput[]
  }

  export type CommunityUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CommunityWhereUniqueInput
    update: XOR<CommunityUpdateWithoutCreatorInput, CommunityUncheckedUpdateWithoutCreatorInput>
    create: XOR<CommunityCreateWithoutCreatorInput, CommunityUncheckedCreateWithoutCreatorInput>
  }

  export type CommunityUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CommunityWhereUniqueInput
    data: XOR<CommunityUpdateWithoutCreatorInput, CommunityUncheckedUpdateWithoutCreatorInput>
  }

  export type CommunityUpdateManyWithWhereWithoutCreatorInput = {
    where: CommunityScalarWhereInput
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyWithoutCreatorInput>
  }

  export type CommunityScalarWhereInput = {
    AND?: CommunityScalarWhereInput | CommunityScalarWhereInput[]
    OR?: CommunityScalarWhereInput[]
    NOT?: CommunityScalarWhereInput | CommunityScalarWhereInput[]
    id?: StringFilter<"Community"> | string
    name?: StringFilter<"Community"> | string
    description?: StringNullableFilter<"Community"> | string | null
    avatar?: StringNullableFilter<"Community"> | string | null
    isPrivate?: BoolFilter<"Community"> | boolean
    createdBy?: StringFilter<"Community"> | string
    createdAt?: DateTimeFilter<"Community"> | Date | string
    updatedAt?: DateTimeFilter<"Community"> | Date | string
  }

  export type CommunityMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: CommunityMemberWhereUniqueInput
    update: XOR<CommunityMemberUpdateWithoutUserInput, CommunityMemberUncheckedUpdateWithoutUserInput>
    create: XOR<CommunityMemberCreateWithoutUserInput, CommunityMemberUncheckedCreateWithoutUserInput>
  }

  export type CommunityMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: CommunityMemberWhereUniqueInput
    data: XOR<CommunityMemberUpdateWithoutUserInput, CommunityMemberUncheckedUpdateWithoutUserInput>
  }

  export type CommunityMemberUpdateManyWithWhereWithoutUserInput = {
    where: CommunityMemberScalarWhereInput
    data: XOR<CommunityMemberUpdateManyMutationInput, CommunityMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type CommunityMemberScalarWhereInput = {
    AND?: CommunityMemberScalarWhereInput | CommunityMemberScalarWhereInput[]
    OR?: CommunityMemberScalarWhereInput[]
    NOT?: CommunityMemberScalarWhereInput | CommunityMemberScalarWhereInput[]
    id?: StringFilter<"CommunityMember"> | string
    communityId?: StringFilter<"CommunityMember"> | string
    userId?: StringFilter<"CommunityMember"> | string
    joinedAt?: DateTimeFilter<"CommunityMember"> | Date | string
  }

  export type ConversationMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: ConversationMemberWhereUniqueInput
    update: XOR<ConversationMemberUpdateWithoutUserInput, ConversationMemberUncheckedUpdateWithoutUserInput>
    create: XOR<ConversationMemberCreateWithoutUserInput, ConversationMemberUncheckedCreateWithoutUserInput>
  }

  export type ConversationMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: ConversationMemberWhereUniqueInput
    data: XOR<ConversationMemberUpdateWithoutUserInput, ConversationMemberUncheckedUpdateWithoutUserInput>
  }

  export type ConversationMemberUpdateManyWithWhereWithoutUserInput = {
    where: ConversationMemberScalarWhereInput
    data: XOR<ConversationMemberUpdateManyMutationInput, ConversationMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type ConversationMemberScalarWhereInput = {
    AND?: ConversationMemberScalarWhereInput | ConversationMemberScalarWhereInput[]
    OR?: ConversationMemberScalarWhereInput[]
    NOT?: ConversationMemberScalarWhereInput | ConversationMemberScalarWhereInput[]
    id?: StringFilter<"ConversationMember"> | string
    conversationId?: StringFilter<"ConversationMember"> | string
    userId?: StringFilter<"ConversationMember"> | string
    role?: StringFilter<"ConversationMember"> | string
    canSendMessage?: BoolFilter<"ConversationMember"> | boolean
    canSendFiles?: BoolFilter<"ConversationMember"> | boolean
    canSendImages?: BoolFilter<"ConversationMember"> | boolean
    canSendVideos?: BoolFilter<"ConversationMember"> | boolean
    canSendAudios?: BoolFilter<"ConversationMember"> | boolean
    canSendLocations?: BoolFilter<"ConversationMember"> | boolean
    canSendLinks?: BoolFilter<"ConversationMember"> | boolean
    joinedAt?: DateTimeFilter<"ConversationMember"> | Date | string
    leftAt?: DateTimeNullableFilter<"ConversationMember"> | Date | string | null
    isActive?: BoolFilter<"ConversationMember"> | boolean
  }

  export type ConversationPreferenceUpsertWithWhereUniqueWithoutUserInput = {
    where: ConversationPreferenceWhereUniqueInput
    update: XOR<ConversationPreferenceUpdateWithoutUserInput, ConversationPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<ConversationPreferenceCreateWithoutUserInput, ConversationPreferenceUncheckedCreateWithoutUserInput>
  }

  export type ConversationPreferenceUpdateWithWhereUniqueWithoutUserInput = {
    where: ConversationPreferenceWhereUniqueInput
    data: XOR<ConversationPreferenceUpdateWithoutUserInput, ConversationPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type ConversationPreferenceUpdateManyWithWhereWithoutUserInput = {
    where: ConversationPreferenceScalarWhereInput
    data: XOR<ConversationPreferenceUpdateManyMutationInput, ConversationPreferenceUncheckedUpdateManyWithoutUserInput>
  }

  export type ConversationPreferenceScalarWhereInput = {
    AND?: ConversationPreferenceScalarWhereInput | ConversationPreferenceScalarWhereInput[]
    OR?: ConversationPreferenceScalarWhereInput[]
    NOT?: ConversationPreferenceScalarWhereInput | ConversationPreferenceScalarWhereInput[]
    id?: StringFilter<"ConversationPreference"> | string
    conversationId?: StringFilter<"ConversationPreference"> | string
    userId?: StringFilter<"ConversationPreference"> | string
    key?: StringFilter<"ConversationPreference"> | string
    value?: StringFilter<"ConversationPreference"> | string
    valueType?: StringFilter<"ConversationPreference"> | string
    description?: StringNullableFilter<"ConversationPreference"> | string | null
    createdAt?: DateTimeFilter<"ConversationPreference"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationPreference"> | Date | string
  }

  export type ConversationShareLinkUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ConversationShareLinkWhereUniqueInput
    update: XOR<ConversationShareLinkUpdateWithoutCreatorInput, ConversationShareLinkUncheckedUpdateWithoutCreatorInput>
    create: XOR<ConversationShareLinkCreateWithoutCreatorInput, ConversationShareLinkUncheckedCreateWithoutCreatorInput>
  }

  export type ConversationShareLinkUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ConversationShareLinkWhereUniqueInput
    data: XOR<ConversationShareLinkUpdateWithoutCreatorInput, ConversationShareLinkUncheckedUpdateWithoutCreatorInput>
  }

  export type ConversationShareLinkUpdateManyWithWhereWithoutCreatorInput = {
    where: ConversationShareLinkScalarWhereInput
    data: XOR<ConversationShareLinkUpdateManyMutationInput, ConversationShareLinkUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ConversationShareLinkScalarWhereInput = {
    AND?: ConversationShareLinkScalarWhereInput | ConversationShareLinkScalarWhereInput[]
    OR?: ConversationShareLinkScalarWhereInput[]
    NOT?: ConversationShareLinkScalarWhereInput | ConversationShareLinkScalarWhereInput[]
    id?: StringFilter<"ConversationShareLink"> | string
    linkId?: StringFilter<"ConversationShareLink"> | string
    identifier?: StringNullableFilter<"ConversationShareLink"> | string | null
    conversationId?: StringFilter<"ConversationShareLink"> | string
    createdBy?: StringFilter<"ConversationShareLink"> | string
    name?: StringNullableFilter<"ConversationShareLink"> | string | null
    description?: StringNullableFilter<"ConversationShareLink"> | string | null
    maxUses?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentUses?: IntFilter<"ConversationShareLink"> | number
    maxConcurrentUsers?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentConcurrentUsers?: IntFilter<"ConversationShareLink"> | number
    maxUniqueSessions?: IntNullableFilter<"ConversationShareLink"> | number | null
    currentUniqueSessions?: IntFilter<"ConversationShareLink"> | number
    expiresAt?: DateTimeNullableFilter<"ConversationShareLink"> | Date | string | null
    isActive?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousMessages?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousFiles?: BoolFilter<"ConversationShareLink"> | boolean
    allowAnonymousImages?: BoolFilter<"ConversationShareLink"> | boolean
    allowViewHistory?: BoolFilter<"ConversationShareLink"> | boolean
    requireNickname?: BoolFilter<"ConversationShareLink"> | boolean
    requireEmail?: BoolFilter<"ConversationShareLink"> | boolean
    allowedCountries?: StringNullableListFilter<"ConversationShareLink">
    allowedLanguages?: StringNullableListFilter<"ConversationShareLink">
    allowedIpRanges?: StringNullableListFilter<"ConversationShareLink">
    createdAt?: DateTimeFilter<"ConversationShareLink"> | Date | string
    updatedAt?: DateTimeFilter<"ConversationShareLink"> | Date | string
  }

  export type FriendRequestUpsertWithWhereUniqueWithoutReceiverInput = {
    where: FriendRequestWhereUniqueInput
    update: XOR<FriendRequestUpdateWithoutReceiverInput, FriendRequestUncheckedUpdateWithoutReceiverInput>
    create: XOR<FriendRequestCreateWithoutReceiverInput, FriendRequestUncheckedCreateWithoutReceiverInput>
  }

  export type FriendRequestUpdateWithWhereUniqueWithoutReceiverInput = {
    where: FriendRequestWhereUniqueInput
    data: XOR<FriendRequestUpdateWithoutReceiverInput, FriendRequestUncheckedUpdateWithoutReceiverInput>
  }

  export type FriendRequestUpdateManyWithWhereWithoutReceiverInput = {
    where: FriendRequestScalarWhereInput
    data: XOR<FriendRequestUpdateManyMutationInput, FriendRequestUncheckedUpdateManyWithoutReceiverInput>
  }

  export type FriendRequestScalarWhereInput = {
    AND?: FriendRequestScalarWhereInput | FriendRequestScalarWhereInput[]
    OR?: FriendRequestScalarWhereInput[]
    NOT?: FriendRequestScalarWhereInput | FriendRequestScalarWhereInput[]
    id?: StringFilter<"FriendRequest"> | string
    senderId?: StringFilter<"FriendRequest"> | string
    receiverId?: StringFilter<"FriendRequest"> | string
    status?: StringFilter<"FriendRequest"> | string
    createdAt?: DateTimeFilter<"FriendRequest"> | Date | string
    updatedAt?: DateTimeFilter<"FriendRequest"> | Date | string
  }

  export type FriendRequestUpsertWithWhereUniqueWithoutSenderInput = {
    where: FriendRequestWhereUniqueInput
    update: XOR<FriendRequestUpdateWithoutSenderInput, FriendRequestUncheckedUpdateWithoutSenderInput>
    create: XOR<FriendRequestCreateWithoutSenderInput, FriendRequestUncheckedCreateWithoutSenderInput>
  }

  export type FriendRequestUpdateWithWhereUniqueWithoutSenderInput = {
    where: FriendRequestWhereUniqueInput
    data: XOR<FriendRequestUpdateWithoutSenderInput, FriendRequestUncheckedUpdateWithoutSenderInput>
  }

  export type FriendRequestUpdateManyWithWhereWithoutSenderInput = {
    where: FriendRequestScalarWhereInput
    data: XOR<FriendRequestUpdateManyMutationInput, FriendRequestUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageReadStatusUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageReadStatusWhereUniqueInput
    update: XOR<MessageReadStatusUpdateWithoutUserInput, MessageReadStatusUncheckedUpdateWithoutUserInput>
    create: XOR<MessageReadStatusCreateWithoutUserInput, MessageReadStatusUncheckedCreateWithoutUserInput>
  }

  export type MessageReadStatusUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageReadStatusWhereUniqueInput
    data: XOR<MessageReadStatusUpdateWithoutUserInput, MessageReadStatusUncheckedUpdateWithoutUserInput>
  }

  export type MessageReadStatusUpdateManyWithWhereWithoutUserInput = {
    where: MessageReadStatusScalarWhereInput
    data: XOR<MessageReadStatusUpdateManyMutationInput, MessageReadStatusUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageReadStatusScalarWhereInput = {
    AND?: MessageReadStatusScalarWhereInput | MessageReadStatusScalarWhereInput[]
    OR?: MessageReadStatusScalarWhereInput[]
    NOT?: MessageReadStatusScalarWhereInput | MessageReadStatusScalarWhereInput[]
    id?: StringFilter<"MessageReadStatus"> | string
    messageId?: StringFilter<"MessageReadStatus"> | string
    userId?: StringFilter<"MessageReadStatus"> | string
    readAt?: DateTimeFilter<"MessageReadStatus"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringNullableFilter<"Message"> | string | null
    anonymousSenderId?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    originalLanguage?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    isEdited?: BoolFilter<"Message"> | boolean
    editedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    isDeleted?: BoolFilter<"Message"> | boolean
    deletedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    replyToId?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    data?: StringNullableFilter<"Notification"> | string | null
    priority?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    emailSent?: BoolFilter<"Notification"> | boolean
    pushSent?: BoolFilter<"Notification"> | boolean
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type TypingIndicatorUpsertWithWhereUniqueWithoutUserInput = {
    where: TypingIndicatorWhereUniqueInput
    update: XOR<TypingIndicatorUpdateWithoutUserInput, TypingIndicatorUncheckedUpdateWithoutUserInput>
    create: XOR<TypingIndicatorCreateWithoutUserInput, TypingIndicatorUncheckedCreateWithoutUserInput>
  }

  export type TypingIndicatorUpdateWithWhereUniqueWithoutUserInput = {
    where: TypingIndicatorWhereUniqueInput
    data: XOR<TypingIndicatorUpdateWithoutUserInput, TypingIndicatorUncheckedUpdateWithoutUserInput>
  }

  export type TypingIndicatorUpdateManyWithWhereWithoutUserInput = {
    where: TypingIndicatorScalarWhereInput
    data: XOR<TypingIndicatorUpdateManyMutationInput, TypingIndicatorUncheckedUpdateManyWithoutUserInput>
  }

  export type TypingIndicatorScalarWhereInput = {
    AND?: TypingIndicatorScalarWhereInput | TypingIndicatorScalarWhereInput[]
    OR?: TypingIndicatorScalarWhereInput[]
    NOT?: TypingIndicatorScalarWhereInput | TypingIndicatorScalarWhereInput[]
    id?: StringFilter<"TypingIndicator"> | string
    conversationId?: StringFilter<"TypingIndicator"> | string
    userId?: StringFilter<"TypingIndicator"> | string
    isTyping?: BoolFilter<"TypingIndicator"> | boolean
    startedAt?: DateTimeFilter<"TypingIndicator"> | Date | string
    updatedAt?: DateTimeFilter<"TypingIndicator"> | Date | string
  }

  export type UserPreferenceUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPreferenceWhereUniqueInput
    update: XOR<UserPreferenceUpdateWithoutUserInput, UserPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
  }

  export type UserPreferenceUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPreferenceWhereUniqueInput
    data: XOR<UserPreferenceUpdateWithoutUserInput, UserPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferenceUpdateManyWithWhereWithoutUserInput = {
    where: UserPreferenceScalarWhereInput
    data: XOR<UserPreferenceUpdateManyMutationInput, UserPreferenceUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPreferenceScalarWhereInput = {
    AND?: UserPreferenceScalarWhereInput | UserPreferenceScalarWhereInput[]
    OR?: UserPreferenceScalarWhereInput[]
    NOT?: UserPreferenceScalarWhereInput | UserPreferenceScalarWhereInput[]
    id?: StringFilter<"UserPreference"> | string
    userId?: StringFilter<"UserPreference"> | string
    key?: StringFilter<"UserPreference"> | string
    value?: StringFilter<"UserPreference"> | string
    valueType?: StringFilter<"UserPreference"> | string
    description?: StringNullableFilter<"UserPreference"> | string | null
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
  }

  export type UserStatsUpsertWithoutUserInput = {
    update: XOR<UserStatsUpdateWithoutUserInput, UserStatsUncheckedUpdateWithoutUserInput>
    create: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    where?: UserStatsWhereInput
  }

  export type UserStatsUpdateToOneWithWhereWithoutUserInput = {
    where?: UserStatsWhereInput
    data: XOR<UserStatsUpdateWithoutUserInput, UserStatsUncheckedUpdateWithoutUserInput>
  }

  export type UserStatsUpdateWithoutUserInput = {
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    charactersTyped?: IntFieldUpdateOperationsInput | number
    imageMessagesSent?: IntFieldUpdateOperationsInput | number
    filesShared?: IntFieldUpdateOperationsInput | number
    conversationsJoined?: IntFieldUpdateOperationsInput | number
    communitiesCreated?: IntFieldUpdateOperationsInput | number
    friendsAdded?: IntFieldUpdateOperationsInput | number
    friendRequestsSent?: IntFieldUpdateOperationsInput | number
    translationsUsed?: IntFieldUpdateOperationsInput | number
    languagesDetected?: IntFieldUpdateOperationsInput | number
    autoTranslateTimeMinutes?: IntFieldUpdateOperationsInput | number
    totalOnlineTimeMinutes?: IntFieldUpdateOperationsInput | number
    sessionCount?: IntFieldUpdateOperationsInput | number
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatsUncheckedUpdateWithoutUserInput = {
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    charactersTyped?: IntFieldUpdateOperationsInput | number
    imageMessagesSent?: IntFieldUpdateOperationsInput | number
    filesShared?: IntFieldUpdateOperationsInput | number
    conversationsJoined?: IntFieldUpdateOperationsInput | number
    communitiesCreated?: IntFieldUpdateOperationsInput | number
    friendsAdded?: IntFieldUpdateOperationsInput | number
    friendRequestsSent?: IntFieldUpdateOperationsInput | number
    translationsUsed?: IntFieldUpdateOperationsInput | number
    languagesDetected?: IntFieldUpdateOperationsInput | number
    autoTranslateTimeMinutes?: IntFieldUpdateOperationsInput | number
    totalOnlineTimeMinutes?: IntFieldUpdateOperationsInput | number
    sessionCount?: IntFieldUpdateOperationsInput | number
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityAdminUpsertWithWhereUniqueWithoutUserInput = {
    where: CommunityAdminWhereUniqueInput
    update: XOR<CommunityAdminUpdateWithoutUserInput, CommunityAdminUncheckedUpdateWithoutUserInput>
    create: XOR<CommunityAdminCreateWithoutUserInput, CommunityAdminUncheckedCreateWithoutUserInput>
  }

  export type CommunityAdminUpdateWithWhereUniqueWithoutUserInput = {
    where: CommunityAdminWhereUniqueInput
    data: XOR<CommunityAdminUpdateWithoutUserInput, CommunityAdminUncheckedUpdateWithoutUserInput>
  }

  export type CommunityAdminUpdateManyWithWhereWithoutUserInput = {
    where: CommunityAdminScalarWhereInput
    data: XOR<CommunityAdminUpdateManyMutationInput, CommunityAdminUncheckedUpdateManyWithoutUserInput>
  }

  export type CommunityAdminScalarWhereInput = {
    AND?: CommunityAdminScalarWhereInput | CommunityAdminScalarWhereInput[]
    OR?: CommunityAdminScalarWhereInput[]
    NOT?: CommunityAdminScalarWhereInput | CommunityAdminScalarWhereInput[]
    id?: StringFilter<"CommunityAdmin"> | string
    communityId?: StringFilter<"CommunityAdmin"> | string
    userId?: StringFilter<"CommunityAdmin"> | string
    assignedAt?: DateTimeFilter<"CommunityAdmin"> | Date | string
  }

  export type CommunityModeratorUpsertWithWhereUniqueWithoutUserInput = {
    where: CommunityModeratorWhereUniqueInput
    update: XOR<CommunityModeratorUpdateWithoutUserInput, CommunityModeratorUncheckedUpdateWithoutUserInput>
    create: XOR<CommunityModeratorCreateWithoutUserInput, CommunityModeratorUncheckedCreateWithoutUserInput>
  }

  export type CommunityModeratorUpdateWithWhereUniqueWithoutUserInput = {
    where: CommunityModeratorWhereUniqueInput
    data: XOR<CommunityModeratorUpdateWithoutUserInput, CommunityModeratorUncheckedUpdateWithoutUserInput>
  }

  export type CommunityModeratorUpdateManyWithWhereWithoutUserInput = {
    where: CommunityModeratorScalarWhereInput
    data: XOR<CommunityModeratorUpdateManyMutationInput, CommunityModeratorUncheckedUpdateManyWithoutUserInput>
  }

  export type CommunityModeratorScalarWhereInput = {
    AND?: CommunityModeratorScalarWhereInput | CommunityModeratorScalarWhereInput[]
    OR?: CommunityModeratorScalarWhereInput[]
    NOT?: CommunityModeratorScalarWhereInput | CommunityModeratorScalarWhereInput[]
    id?: StringFilter<"CommunityModerator"> | string
    communityId?: StringFilter<"CommunityModerator"> | string
    userId?: StringFilter<"CommunityModerator"> | string
    assignedAt?: DateTimeFilter<"CommunityModerator"> | Date | string
  }

  export type AnonymousParticipantCreateWithoutConversationInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
    shareLink: ConversationShareLinkCreateNestedOneWithoutAnonymousParticipantsInput
    sentMessages?: MessageCreateNestedManyWithoutAnonymousSenderInput
  }

  export type AnonymousParticipantUncheckedCreateWithoutConversationInput = {
    id?: string
    shareLinkId: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutAnonymousSenderInput
  }

  export type AnonymousParticipantCreateOrConnectWithoutConversationInput = {
    where: AnonymousParticipantWhereUniqueInput
    create: XOR<AnonymousParticipantCreateWithoutConversationInput, AnonymousParticipantUncheckedCreateWithoutConversationInput>
  }

  export type AnonymousParticipantCreateManyConversationInputEnvelope = {
    data: AnonymousParticipantCreateManyConversationInput | AnonymousParticipantCreateManyConversationInput[]
  }

  export type ConversationMemberCreateWithoutConversationInput = {
    id?: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    user: UserCreateNestedOneWithoutConversationsInput
  }

  export type ConversationMemberUncheckedCreateWithoutConversationInput = {
    id?: string
    userId: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
  }

  export type ConversationMemberCreateOrConnectWithoutConversationInput = {
    where: ConversationMemberWhereUniqueInput
    create: XOR<ConversationMemberCreateWithoutConversationInput, ConversationMemberUncheckedCreateWithoutConversationInput>
  }

  export type ConversationMemberCreateManyConversationInputEnvelope = {
    data: ConversationMemberCreateManyConversationInput | ConversationMemberCreateManyConversationInput[]
  }

  export type ConversationPreferenceCreateWithoutConversationInput = {
    id?: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConversationPreferencesInput
  }

  export type ConversationPreferenceUncheckedCreateWithoutConversationInput = {
    id?: string
    userId: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationPreferenceCreateOrConnectWithoutConversationInput = {
    where: ConversationPreferenceWhereUniqueInput
    create: XOR<ConversationPreferenceCreateWithoutConversationInput, ConversationPreferenceUncheckedCreateWithoutConversationInput>
  }

  export type ConversationPreferenceCreateManyConversationInputEnvelope = {
    data: ConversationPreferenceCreateManyConversationInput | ConversationPreferenceCreateManyConversationInput[]
  }

  export type ConversationShareLinkCreateWithoutConversationInput = {
    id?: string
    linkId: string
    identifier?: string | null
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutShareLinkInput
    creator: UserCreateNestedOneWithoutCreatedShareLinksInput
  }

  export type ConversationShareLinkUncheckedCreateWithoutConversationInput = {
    id?: string
    linkId: string
    identifier?: string | null
    createdBy: string
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutShareLinkInput
  }

  export type ConversationShareLinkCreateOrConnectWithoutConversationInput = {
    where: ConversationShareLinkWhereUniqueInput
    create: XOR<ConversationShareLinkCreateWithoutConversationInput, ConversationShareLinkUncheckedCreateWithoutConversationInput>
  }

  export type ConversationShareLinkCreateManyConversationInputEnvelope = {
    data: ConversationShareLinkCreateManyConversationInput | ConversationShareLinkCreateManyConversationInput[]
  }

  export type CommunityCreateWithoutConversationInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberCreateNestedManyWithoutCommunityInput
    creator: UserCreateNestedOneWithoutCreatedCommunitiesInput
    admins?: CommunityAdminCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutConversationInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberUncheckedCreateNestedManyWithoutCommunityInput
    admins?: CommunityAdminUncheckedCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutConversationInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutConversationInput, CommunityUncheckedCreateWithoutConversationInput>
  }

  export type MessageCreateWithoutConversationInput = {
    id?: string
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationCreateNestedManyWithoutMessageInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    anonymousSender?: AnonymousParticipantCreateNestedOneWithoutSentMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateWithoutConversationInput = {
    id?: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type MessageCreateOrConnectWithoutConversationInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageCreateManyConversationInputEnvelope = {
    data: MessageCreateManyConversationInput | MessageCreateManyConversationInput[]
  }

  export type TypingIndicatorCreateWithoutConversationInput = {
    id?: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTypingIndicatorsInput
  }

  export type TypingIndicatorUncheckedCreateWithoutConversationInput = {
    id?: string
    userId: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
  }

  export type TypingIndicatorCreateOrConnectWithoutConversationInput = {
    where: TypingIndicatorWhereUniqueInput
    create: XOR<TypingIndicatorCreateWithoutConversationInput, TypingIndicatorUncheckedCreateWithoutConversationInput>
  }

  export type TypingIndicatorCreateManyConversationInputEnvelope = {
    data: TypingIndicatorCreateManyConversationInput | TypingIndicatorCreateManyConversationInput[]
  }

  export type AnonymousParticipantUpsertWithWhereUniqueWithoutConversationInput = {
    where: AnonymousParticipantWhereUniqueInput
    update: XOR<AnonymousParticipantUpdateWithoutConversationInput, AnonymousParticipantUncheckedUpdateWithoutConversationInput>
    create: XOR<AnonymousParticipantCreateWithoutConversationInput, AnonymousParticipantUncheckedCreateWithoutConversationInput>
  }

  export type AnonymousParticipantUpdateWithWhereUniqueWithoutConversationInput = {
    where: AnonymousParticipantWhereUniqueInput
    data: XOR<AnonymousParticipantUpdateWithoutConversationInput, AnonymousParticipantUncheckedUpdateWithoutConversationInput>
  }

  export type AnonymousParticipantUpdateManyWithWhereWithoutConversationInput = {
    where: AnonymousParticipantScalarWhereInput
    data: XOR<AnonymousParticipantUpdateManyMutationInput, AnonymousParticipantUncheckedUpdateManyWithoutConversationInput>
  }

  export type AnonymousParticipantScalarWhereInput = {
    AND?: AnonymousParticipantScalarWhereInput | AnonymousParticipantScalarWhereInput[]
    OR?: AnonymousParticipantScalarWhereInput[]
    NOT?: AnonymousParticipantScalarWhereInput | AnonymousParticipantScalarWhereInput[]
    id?: StringFilter<"AnonymousParticipant"> | string
    conversationId?: StringFilter<"AnonymousParticipant"> | string
    shareLinkId?: StringFilter<"AnonymousParticipant"> | string
    firstName?: StringFilter<"AnonymousParticipant"> | string
    lastName?: StringFilter<"AnonymousParticipant"> | string
    username?: StringFilter<"AnonymousParticipant"> | string
    email?: StringNullableFilter<"AnonymousParticipant"> | string | null
    sessionToken?: StringFilter<"AnonymousParticipant"> | string
    ipAddress?: StringNullableFilter<"AnonymousParticipant"> | string | null
    country?: StringNullableFilter<"AnonymousParticipant"> | string | null
    language?: StringFilter<"AnonymousParticipant"> | string
    deviceFingerprint?: StringNullableFilter<"AnonymousParticipant"> | string | null
    isActive?: BoolFilter<"AnonymousParticipant"> | boolean
    isOnline?: BoolFilter<"AnonymousParticipant"> | boolean
    lastActiveAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    canSendMessages?: BoolFilter<"AnonymousParticipant"> | boolean
    canSendFiles?: BoolFilter<"AnonymousParticipant"> | boolean
    canSendImages?: BoolFilter<"AnonymousParticipant"> | boolean
    joinedAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    lastSeenAt?: DateTimeFilter<"AnonymousParticipant"> | Date | string
    leftAt?: DateTimeNullableFilter<"AnonymousParticipant"> | Date | string | null
  }

  export type ConversationMemberUpsertWithWhereUniqueWithoutConversationInput = {
    where: ConversationMemberWhereUniqueInput
    update: XOR<ConversationMemberUpdateWithoutConversationInput, ConversationMemberUncheckedUpdateWithoutConversationInput>
    create: XOR<ConversationMemberCreateWithoutConversationInput, ConversationMemberUncheckedCreateWithoutConversationInput>
  }

  export type ConversationMemberUpdateWithWhereUniqueWithoutConversationInput = {
    where: ConversationMemberWhereUniqueInput
    data: XOR<ConversationMemberUpdateWithoutConversationInput, ConversationMemberUncheckedUpdateWithoutConversationInput>
  }

  export type ConversationMemberUpdateManyWithWhereWithoutConversationInput = {
    where: ConversationMemberScalarWhereInput
    data: XOR<ConversationMemberUpdateManyMutationInput, ConversationMemberUncheckedUpdateManyWithoutConversationInput>
  }

  export type ConversationPreferenceUpsertWithWhereUniqueWithoutConversationInput = {
    where: ConversationPreferenceWhereUniqueInput
    update: XOR<ConversationPreferenceUpdateWithoutConversationInput, ConversationPreferenceUncheckedUpdateWithoutConversationInput>
    create: XOR<ConversationPreferenceCreateWithoutConversationInput, ConversationPreferenceUncheckedCreateWithoutConversationInput>
  }

  export type ConversationPreferenceUpdateWithWhereUniqueWithoutConversationInput = {
    where: ConversationPreferenceWhereUniqueInput
    data: XOR<ConversationPreferenceUpdateWithoutConversationInput, ConversationPreferenceUncheckedUpdateWithoutConversationInput>
  }

  export type ConversationPreferenceUpdateManyWithWhereWithoutConversationInput = {
    where: ConversationPreferenceScalarWhereInput
    data: XOR<ConversationPreferenceUpdateManyMutationInput, ConversationPreferenceUncheckedUpdateManyWithoutConversationInput>
  }

  export type ConversationShareLinkUpsertWithWhereUniqueWithoutConversationInput = {
    where: ConversationShareLinkWhereUniqueInput
    update: XOR<ConversationShareLinkUpdateWithoutConversationInput, ConversationShareLinkUncheckedUpdateWithoutConversationInput>
    create: XOR<ConversationShareLinkCreateWithoutConversationInput, ConversationShareLinkUncheckedCreateWithoutConversationInput>
  }

  export type ConversationShareLinkUpdateWithWhereUniqueWithoutConversationInput = {
    where: ConversationShareLinkWhereUniqueInput
    data: XOR<ConversationShareLinkUpdateWithoutConversationInput, ConversationShareLinkUncheckedUpdateWithoutConversationInput>
  }

  export type ConversationShareLinkUpdateManyWithWhereWithoutConversationInput = {
    where: ConversationShareLinkScalarWhereInput
    data: XOR<ConversationShareLinkUpdateManyMutationInput, ConversationShareLinkUncheckedUpdateManyWithoutConversationInput>
  }

  export type CommunityUpsertWithoutConversationInput = {
    update: XOR<CommunityUpdateWithoutConversationInput, CommunityUncheckedUpdateWithoutConversationInput>
    create: XOR<CommunityCreateWithoutConversationInput, CommunityUncheckedCreateWithoutConversationInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutConversationInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutConversationInput, CommunityUncheckedUpdateWithoutConversationInput>
  }

  export type CommunityUpdateWithoutConversationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUpdateManyWithoutCommunityNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedCommunitiesNestedInput
    admins?: CommunityAdminUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutConversationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUncheckedUpdateManyWithoutCommunityNestedInput
    admins?: CommunityAdminUncheckedUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
  }

  export type MessageUpdateManyWithWhereWithoutConversationInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutConversationInput>
  }

  export type TypingIndicatorUpsertWithWhereUniqueWithoutConversationInput = {
    where: TypingIndicatorWhereUniqueInput
    update: XOR<TypingIndicatorUpdateWithoutConversationInput, TypingIndicatorUncheckedUpdateWithoutConversationInput>
    create: XOR<TypingIndicatorCreateWithoutConversationInput, TypingIndicatorUncheckedCreateWithoutConversationInput>
  }

  export type TypingIndicatorUpdateWithWhereUniqueWithoutConversationInput = {
    where: TypingIndicatorWhereUniqueInput
    data: XOR<TypingIndicatorUpdateWithoutConversationInput, TypingIndicatorUncheckedUpdateWithoutConversationInput>
  }

  export type TypingIndicatorUpdateManyWithWhereWithoutConversationInput = {
    where: TypingIndicatorScalarWhereInput
    data: XOR<TypingIndicatorUpdateManyMutationInput, TypingIndicatorUncheckedUpdateManyWithoutConversationInput>
  }

  export type UserCreateWithoutConversationsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConversationsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConversationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
  }

  export type ConversationCreateWithoutMembersInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkCreateNestedManyWithoutConversationInput
    community?: CommunityCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutMembersInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    communityId?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutMembersInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMembersInput, ConversationUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutConversationsInput = {
    update: XOR<UserUpdateWithoutConversationsInput, UserUncheckedUpdateWithoutConversationsInput>
    create: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConversationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConversationsInput, UserUncheckedUpdateWithoutConversationsInput>
  }

  export type UserUpdateWithoutConversationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConversationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConversationUpsertWithoutMembersInput = {
    update: XOR<ConversationUpdateWithoutMembersInput, ConversationUncheckedUpdateWithoutMembersInput>
    create: XOR<ConversationCreateWithoutMembersInput, ConversationUncheckedCreateWithoutMembersInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutMembersInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutMembersInput, ConversationUncheckedUpdateWithoutMembersInput>
  }

  export type ConversationUpdateWithoutMembersInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUpdateManyWithoutConversationNestedInput
    community?: CommunityUpdateOneWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutMembersInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUncheckedUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutConversationNestedInput
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type AnonymousParticipantCreateWithoutShareLinkInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
    conversation: ConversationCreateNestedOneWithoutAnonymousParticipantsInput
    sentMessages?: MessageCreateNestedManyWithoutAnonymousSenderInput
  }

  export type AnonymousParticipantUncheckedCreateWithoutShareLinkInput = {
    id?: string
    conversationId: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
    sentMessages?: MessageUncheckedCreateNestedManyWithoutAnonymousSenderInput
  }

  export type AnonymousParticipantCreateOrConnectWithoutShareLinkInput = {
    where: AnonymousParticipantWhereUniqueInput
    create: XOR<AnonymousParticipantCreateWithoutShareLinkInput, AnonymousParticipantUncheckedCreateWithoutShareLinkInput>
  }

  export type AnonymousParticipantCreateManyShareLinkInputEnvelope = {
    data: AnonymousParticipantCreateManyShareLinkInput | AnonymousParticipantCreateManyShareLinkInput[]
  }

  export type UserCreateWithoutCreatedShareLinksInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedShareLinksInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedShareLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedShareLinksInput, UserUncheckedCreateWithoutCreatedShareLinksInput>
  }

  export type ConversationCreateWithoutShareLinksInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutConversationInput
    members?: ConversationMemberCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceCreateNestedManyWithoutConversationInput
    community?: CommunityCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutShareLinksInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    communityId?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutConversationInput
    members?: ConversationMemberUncheckedCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutShareLinksInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutShareLinksInput, ConversationUncheckedCreateWithoutShareLinksInput>
  }

  export type AnonymousParticipantUpsertWithWhereUniqueWithoutShareLinkInput = {
    where: AnonymousParticipantWhereUniqueInput
    update: XOR<AnonymousParticipantUpdateWithoutShareLinkInput, AnonymousParticipantUncheckedUpdateWithoutShareLinkInput>
    create: XOR<AnonymousParticipantCreateWithoutShareLinkInput, AnonymousParticipantUncheckedCreateWithoutShareLinkInput>
  }

  export type AnonymousParticipantUpdateWithWhereUniqueWithoutShareLinkInput = {
    where: AnonymousParticipantWhereUniqueInput
    data: XOR<AnonymousParticipantUpdateWithoutShareLinkInput, AnonymousParticipantUncheckedUpdateWithoutShareLinkInput>
  }

  export type AnonymousParticipantUpdateManyWithWhereWithoutShareLinkInput = {
    where: AnonymousParticipantScalarWhereInput
    data: XOR<AnonymousParticipantUpdateManyMutationInput, AnonymousParticipantUncheckedUpdateManyWithoutShareLinkInput>
  }

  export type UserUpsertWithoutCreatedShareLinksInput = {
    update: XOR<UserUpdateWithoutCreatedShareLinksInput, UserUncheckedUpdateWithoutCreatedShareLinksInput>
    create: XOR<UserCreateWithoutCreatedShareLinksInput, UserUncheckedCreateWithoutCreatedShareLinksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedShareLinksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedShareLinksInput, UserUncheckedUpdateWithoutCreatedShareLinksInput>
  }

  export type UserUpdateWithoutCreatedShareLinksInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedShareLinksInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConversationUpsertWithoutShareLinksInput = {
    update: XOR<ConversationUpdateWithoutShareLinksInput, ConversationUncheckedUpdateWithoutShareLinksInput>
    create: XOR<ConversationCreateWithoutShareLinksInput, ConversationUncheckedCreateWithoutShareLinksInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutShareLinksInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutShareLinksInput, ConversationUncheckedUpdateWithoutShareLinksInput>
  }

  export type ConversationUpdateWithoutShareLinksInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUpdateManyWithoutConversationNestedInput
    community?: CommunityUpdateOneWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutShareLinksInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUncheckedUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUncheckedUpdateManyWithoutConversationNestedInput
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationShareLinkCreateWithoutAnonymousParticipantsInput = {
    id?: string
    linkId: string
    identifier?: string | null
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedShareLinksInput
    conversation: ConversationCreateNestedOneWithoutShareLinksInput
  }

  export type ConversationShareLinkUncheckedCreateWithoutAnonymousParticipantsInput = {
    id?: string
    linkId: string
    identifier?: string | null
    conversationId: string
    createdBy: string
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationShareLinkCreateOrConnectWithoutAnonymousParticipantsInput = {
    where: ConversationShareLinkWhereUniqueInput
    create: XOR<ConversationShareLinkCreateWithoutAnonymousParticipantsInput, ConversationShareLinkUncheckedCreateWithoutAnonymousParticipantsInput>
  }

  export type ConversationCreateWithoutAnonymousParticipantsInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ConversationMemberCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkCreateNestedManyWithoutConversationInput
    community?: CommunityCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutAnonymousParticipantsInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    communityId?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ConversationMemberUncheckedCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutAnonymousParticipantsInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutAnonymousParticipantsInput, ConversationUncheckedCreateWithoutAnonymousParticipantsInput>
  }

  export type MessageCreateWithoutAnonymousSenderInput = {
    id?: string
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationCreateNestedManyWithoutMessageInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutAnonymousSenderInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type MessageCreateOrConnectWithoutAnonymousSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutAnonymousSenderInput, MessageUncheckedCreateWithoutAnonymousSenderInput>
  }

  export type MessageCreateManyAnonymousSenderInputEnvelope = {
    data: MessageCreateManyAnonymousSenderInput | MessageCreateManyAnonymousSenderInput[]
  }

  export type ConversationShareLinkUpsertWithoutAnonymousParticipantsInput = {
    update: XOR<ConversationShareLinkUpdateWithoutAnonymousParticipantsInput, ConversationShareLinkUncheckedUpdateWithoutAnonymousParticipantsInput>
    create: XOR<ConversationShareLinkCreateWithoutAnonymousParticipantsInput, ConversationShareLinkUncheckedCreateWithoutAnonymousParticipantsInput>
    where?: ConversationShareLinkWhereInput
  }

  export type ConversationShareLinkUpdateToOneWithWhereWithoutAnonymousParticipantsInput = {
    where?: ConversationShareLinkWhereInput
    data: XOR<ConversationShareLinkUpdateWithoutAnonymousParticipantsInput, ConversationShareLinkUncheckedUpdateWithoutAnonymousParticipantsInput>
  }

  export type ConversationShareLinkUpdateWithoutAnonymousParticipantsInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedShareLinksNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutShareLinksNestedInput
  }

  export type ConversationShareLinkUncheckedUpdateWithoutAnonymousParticipantsInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    conversationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUpsertWithoutAnonymousParticipantsInput = {
    update: XOR<ConversationUpdateWithoutAnonymousParticipantsInput, ConversationUncheckedUpdateWithoutAnonymousParticipantsInput>
    create: XOR<ConversationCreateWithoutAnonymousParticipantsInput, ConversationUncheckedCreateWithoutAnonymousParticipantsInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutAnonymousParticipantsInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutAnonymousParticipantsInput, ConversationUncheckedUpdateWithoutAnonymousParticipantsInput>
  }

  export type ConversationUpdateWithoutAnonymousParticipantsInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ConversationMemberUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUpdateManyWithoutConversationNestedInput
    community?: CommunityUpdateOneWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutAnonymousParticipantsInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ConversationMemberUncheckedUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUncheckedUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutConversationNestedInput
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutAnonymousSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutAnonymousSenderInput, MessageUncheckedUpdateWithoutAnonymousSenderInput>
    create: XOR<MessageCreateWithoutAnonymousSenderInput, MessageUncheckedCreateWithoutAnonymousSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutAnonymousSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutAnonymousSenderInput, MessageUncheckedUpdateWithoutAnonymousSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutAnonymousSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutAnonymousSenderInput>
  }

  export type MessageReadStatusCreateWithoutMessageInput = {
    id?: string
    readAt?: Date | string
    user: UserCreateNestedOneWithoutMessageReadStatusInput
  }

  export type MessageReadStatusUncheckedCreateWithoutMessageInput = {
    id?: string
    userId: string
    readAt?: Date | string
  }

  export type MessageReadStatusCreateOrConnectWithoutMessageInput = {
    where: MessageReadStatusWhereUniqueInput
    create: XOR<MessageReadStatusCreateWithoutMessageInput, MessageReadStatusUncheckedCreateWithoutMessageInput>
  }

  export type MessageReadStatusCreateManyMessageInputEnvelope = {
    data: MessageReadStatusCreateManyMessageInput | MessageReadStatusCreateManyMessageInput[]
  }

  export type MessageTranslationCreateWithoutMessageInput = {
    id?: string
    sourceLanguage: string
    targetLanguage: string
    translatedContent: string
    translationModel: string
    cacheKey: string
    confidenceScore?: number | null
    createdAt?: Date | string
  }

  export type MessageTranslationUncheckedCreateWithoutMessageInput = {
    id?: string
    sourceLanguage: string
    targetLanguage: string
    translatedContent: string
    translationModel: string
    cacheKey: string
    confidenceScore?: number | null
    createdAt?: Date | string
  }

  export type MessageTranslationCreateOrConnectWithoutMessageInput = {
    where: MessageTranslationWhereUniqueInput
    create: XOR<MessageTranslationCreateWithoutMessageInput, MessageTranslationUncheckedCreateWithoutMessageInput>
  }

  export type MessageTranslationCreateManyMessageInputEnvelope = {
    data: MessageTranslationCreateManyMessageInput | MessageTranslationCreateManyMessageInput[]
  }

  export type MessageCreateWithoutRepliesInput = {
    id?: string
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationCreateNestedManyWithoutMessageInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    anonymousSender?: AnonymousParticipantCreateNestedOneWithoutSentMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutRepliesInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutRepliesInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
  }

  export type MessageCreateWithoutReplyToInput = {
    id?: string
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationCreateNestedManyWithoutMessageInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    anonymousSender?: AnonymousParticipantCreateNestedOneWithoutSentMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutReplyToInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutMessageInput
    translations?: MessageTranslationUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type MessageCreateOrConnectWithoutReplyToInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput>
  }

  export type MessageCreateManyReplyToInputEnvelope = {
    data: MessageCreateManyReplyToInput | MessageCreateManyReplyToInput[]
  }

  export type AnonymousParticipantCreateWithoutSentMessagesInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
    shareLink: ConversationShareLinkCreateNestedOneWithoutAnonymousParticipantsInput
    conversation: ConversationCreateNestedOneWithoutAnonymousParticipantsInput
  }

  export type AnonymousParticipantUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    conversationId: string
    shareLinkId: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
  }

  export type AnonymousParticipantCreateOrConnectWithoutSentMessagesInput = {
    where: AnonymousParticipantWhereUniqueInput
    create: XOR<AnonymousParticipantCreateWithoutSentMessagesInput, AnonymousParticipantUncheckedCreateWithoutSentMessagesInput>
  }

  export type UserCreateWithoutSentMessagesInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type ConversationCreateWithoutMessagesInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutConversationInput
    members?: ConversationMemberCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkCreateNestedManyWithoutConversationInput
    community?: CommunityCreateNestedOneWithoutConversationInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutMessagesInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    communityId?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutConversationInput
    members?: ConversationMemberUncheckedCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutMessagesInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
  }

  export type MessageReadStatusUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageReadStatusWhereUniqueInput
    update: XOR<MessageReadStatusUpdateWithoutMessageInput, MessageReadStatusUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageReadStatusCreateWithoutMessageInput, MessageReadStatusUncheckedCreateWithoutMessageInput>
  }

  export type MessageReadStatusUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageReadStatusWhereUniqueInput
    data: XOR<MessageReadStatusUpdateWithoutMessageInput, MessageReadStatusUncheckedUpdateWithoutMessageInput>
  }

  export type MessageReadStatusUpdateManyWithWhereWithoutMessageInput = {
    where: MessageReadStatusScalarWhereInput
    data: XOR<MessageReadStatusUpdateManyMutationInput, MessageReadStatusUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageTranslationUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageTranslationWhereUniqueInput
    update: XOR<MessageTranslationUpdateWithoutMessageInput, MessageTranslationUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageTranslationCreateWithoutMessageInput, MessageTranslationUncheckedCreateWithoutMessageInput>
  }

  export type MessageTranslationUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageTranslationWhereUniqueInput
    data: XOR<MessageTranslationUpdateWithoutMessageInput, MessageTranslationUncheckedUpdateWithoutMessageInput>
  }

  export type MessageTranslationUpdateManyWithWhereWithoutMessageInput = {
    where: MessageTranslationScalarWhereInput
    data: XOR<MessageTranslationUpdateManyMutationInput, MessageTranslationUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageTranslationScalarWhereInput = {
    AND?: MessageTranslationScalarWhereInput | MessageTranslationScalarWhereInput[]
    OR?: MessageTranslationScalarWhereInput[]
    NOT?: MessageTranslationScalarWhereInput | MessageTranslationScalarWhereInput[]
    id?: StringFilter<"MessageTranslation"> | string
    messageId?: StringFilter<"MessageTranslation"> | string
    sourceLanguage?: StringFilter<"MessageTranslation"> | string
    targetLanguage?: StringFilter<"MessageTranslation"> | string
    translatedContent?: StringFilter<"MessageTranslation"> | string
    translationModel?: StringFilter<"MessageTranslation"> | string
    cacheKey?: StringFilter<"MessageTranslation"> | string
    confidenceScore?: FloatNullableFilter<"MessageTranslation"> | number | null
    createdAt?: DateTimeFilter<"MessageTranslation"> | Date | string
  }

  export type MessageUpsertWithoutRepliesInput = {
    update: XOR<MessageUpdateWithoutRepliesInput, MessageUncheckedUpdateWithoutRepliesInput>
    create: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutRepliesInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutRepliesInput, MessageUncheckedUpdateWithoutRepliesInput>
  }

  export type MessageUpdateWithoutRepliesInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUpdateManyWithoutMessageNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    anonymousSender?: AnonymousParticipantUpdateOneWithoutSentMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutRepliesInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUncheckedUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutReplyToInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReplyToInput, MessageUncheckedUpdateWithoutReplyToInput>
    create: XOR<MessageCreateWithoutReplyToInput, MessageUncheckedCreateWithoutReplyToInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReplyToInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReplyToInput, MessageUncheckedUpdateWithoutReplyToInput>
  }

  export type MessageUpdateManyWithWhereWithoutReplyToInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReplyToInput>
  }

  export type AnonymousParticipantUpsertWithoutSentMessagesInput = {
    update: XOR<AnonymousParticipantUpdateWithoutSentMessagesInput, AnonymousParticipantUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<AnonymousParticipantCreateWithoutSentMessagesInput, AnonymousParticipantUncheckedCreateWithoutSentMessagesInput>
    where?: AnonymousParticipantWhereInput
  }

  export type AnonymousParticipantUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: AnonymousParticipantWhereInput
    data: XOR<AnonymousParticipantUpdateWithoutSentMessagesInput, AnonymousParticipantUncheckedUpdateWithoutSentMessagesInput>
  }

  export type AnonymousParticipantUpdateWithoutSentMessagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shareLink?: ConversationShareLinkUpdateOneRequiredWithoutAnonymousParticipantsNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutAnonymousParticipantsNestedInput
  }

  export type AnonymousParticipantUncheckedUpdateWithoutSentMessagesInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    shareLinkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConversationUpsertWithoutMessagesInput = {
    update: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type ConversationUpdateWithoutMessagesInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUpdateManyWithoutConversationNestedInput
    community?: CommunityUpdateOneWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutMessagesInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUncheckedUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUncheckedUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type MessageCreateWithoutTranslationsInput = {
    id?: string
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusCreateNestedManyWithoutMessageInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    anonymousSender?: AnonymousParticipantCreateNestedOneWithoutSentMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutTranslationsInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    readStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type MessageCreateOrConnectWithoutTranslationsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutTranslationsInput, MessageUncheckedCreateWithoutTranslationsInput>
  }

  export type MessageUpsertWithoutTranslationsInput = {
    update: XOR<MessageUpdateWithoutTranslationsInput, MessageUncheckedUpdateWithoutTranslationsInput>
    create: XOR<MessageCreateWithoutTranslationsInput, MessageUncheckedCreateWithoutTranslationsInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutTranslationsInput, MessageUncheckedUpdateWithoutTranslationsInput>
  }

  export type MessageUpdateWithoutTranslationsInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUpdateManyWithoutMessageNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    anonymousSender?: AnonymousParticipantUpdateOneWithoutSentMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutTranslationsInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type UserCreateWithoutMessageReadStatusInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessageReadStatusInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessageReadStatusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessageReadStatusInput, UserUncheckedCreateWithoutMessageReadStatusInput>
  }

  export type MessageCreateWithoutReadStatusInput = {
    id?: string
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    translations?: MessageTranslationCreateNestedManyWithoutMessageInput
    replyTo?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyToInput
    anonymousSender?: AnonymousParticipantCreateNestedOneWithoutSentMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutReadStatusInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    translations?: MessageTranslationUncheckedCreateNestedManyWithoutMessageInput
    replies?: MessageUncheckedCreateNestedManyWithoutReplyToInput
  }

  export type MessageCreateOrConnectWithoutReadStatusInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReadStatusInput, MessageUncheckedCreateWithoutReadStatusInput>
  }

  export type UserUpsertWithoutMessageReadStatusInput = {
    update: XOR<UserUpdateWithoutMessageReadStatusInput, UserUncheckedUpdateWithoutMessageReadStatusInput>
    create: XOR<UserCreateWithoutMessageReadStatusInput, UserUncheckedCreateWithoutMessageReadStatusInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessageReadStatusInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessageReadStatusInput, UserUncheckedUpdateWithoutMessageReadStatusInput>
  }

  export type UserUpdateWithoutMessageReadStatusInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessageReadStatusInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MessageUpsertWithoutReadStatusInput = {
    update: XOR<MessageUpdateWithoutReadStatusInput, MessageUncheckedUpdateWithoutReadStatusInput>
    create: XOR<MessageCreateWithoutReadStatusInput, MessageUncheckedCreateWithoutReadStatusInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutReadStatusInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutReadStatusInput, MessageUncheckedUpdateWithoutReadStatusInput>
  }

  export type MessageUpdateWithoutReadStatusInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    translations?: MessageTranslationUpdateManyWithoutMessageNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    anonymousSender?: AnonymousParticipantUpdateOneWithoutSentMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutReadStatusInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    translations?: MessageTranslationUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type UserCreateWithoutReceivedFriendRequestsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedFriendRequestsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedFriendRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedFriendRequestsInput, UserUncheckedCreateWithoutReceivedFriendRequestsInput>
  }

  export type UserCreateWithoutSentFriendRequestsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentFriendRequestsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentFriendRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentFriendRequestsInput, UserUncheckedCreateWithoutSentFriendRequestsInput>
  }

  export type UserUpsertWithoutReceivedFriendRequestsInput = {
    update: XOR<UserUpdateWithoutReceivedFriendRequestsInput, UserUncheckedUpdateWithoutReceivedFriendRequestsInput>
    create: XOR<UserCreateWithoutReceivedFriendRequestsInput, UserUncheckedCreateWithoutReceivedFriendRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedFriendRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedFriendRequestsInput, UserUncheckedUpdateWithoutReceivedFriendRequestsInput>
  }

  export type UserUpdateWithoutReceivedFriendRequestsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedFriendRequestsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSentFriendRequestsInput = {
    update: XOR<UserUpdateWithoutSentFriendRequestsInput, UserUncheckedUpdateWithoutSentFriendRequestsInput>
    create: XOR<UserCreateWithoutSentFriendRequestsInput, UserUncheckedCreateWithoutSentFriendRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentFriendRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentFriendRequestsInput, UserUncheckedUpdateWithoutSentFriendRequestsInput>
  }

  export type UserUpdateWithoutSentFriendRequestsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentFriendRequestsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTypingIndicatorsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTypingIndicatorsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTypingIndicatorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTypingIndicatorsInput, UserUncheckedCreateWithoutTypingIndicatorsInput>
  }

  export type ConversationCreateWithoutTypingIndicatorsInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutConversationInput
    members?: ConversationMemberCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkCreateNestedManyWithoutConversationInput
    community?: CommunityCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutTypingIndicatorsInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    communityId?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutConversationInput
    members?: ConversationMemberUncheckedCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutTypingIndicatorsInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutTypingIndicatorsInput, ConversationUncheckedCreateWithoutTypingIndicatorsInput>
  }

  export type UserUpsertWithoutTypingIndicatorsInput = {
    update: XOR<UserUpdateWithoutTypingIndicatorsInput, UserUncheckedUpdateWithoutTypingIndicatorsInput>
    create: XOR<UserCreateWithoutTypingIndicatorsInput, UserUncheckedCreateWithoutTypingIndicatorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTypingIndicatorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTypingIndicatorsInput, UserUncheckedUpdateWithoutTypingIndicatorsInput>
  }

  export type UserUpdateWithoutTypingIndicatorsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTypingIndicatorsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConversationUpsertWithoutTypingIndicatorsInput = {
    update: XOR<ConversationUpdateWithoutTypingIndicatorsInput, ConversationUncheckedUpdateWithoutTypingIndicatorsInput>
    create: XOR<ConversationCreateWithoutTypingIndicatorsInput, ConversationUncheckedCreateWithoutTypingIndicatorsInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutTypingIndicatorsInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutTypingIndicatorsInput, ConversationUncheckedUpdateWithoutTypingIndicatorsInput>
  }

  export type ConversationUpdateWithoutTypingIndicatorsInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUpdateManyWithoutConversationNestedInput
    community?: CommunityUpdateOneWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutTypingIndicatorsInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUncheckedUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUncheckedUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutConversationNestedInput
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommunityMemberCreateWithoutCommunityInput = {
    id?: string
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutCommunityMembershipsInput
  }

  export type CommunityMemberUncheckedCreateWithoutCommunityInput = {
    id?: string
    userId: string
    joinedAt?: Date | string
  }

  export type CommunityMemberCreateOrConnectWithoutCommunityInput = {
    where: CommunityMemberWhereUniqueInput
    create: XOR<CommunityMemberCreateWithoutCommunityInput, CommunityMemberUncheckedCreateWithoutCommunityInput>
  }

  export type CommunityMemberCreateManyCommunityInputEnvelope = {
    data: CommunityMemberCreateManyCommunityInput | CommunityMemberCreateManyCommunityInput[]
  }

  export type UserCreateWithoutCreatedCommunitiesInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedCommunitiesInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedCommunitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCommunitiesInput, UserUncheckedCreateWithoutCreatedCommunitiesInput>
  }

  export type CommunityAdminCreateWithoutCommunityInput = {
    id?: string
    assignedAt?: Date | string
    user: UserCreateNestedOneWithoutCommunityAdminsInput
  }

  export type CommunityAdminUncheckedCreateWithoutCommunityInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
  }

  export type CommunityAdminCreateOrConnectWithoutCommunityInput = {
    where: CommunityAdminWhereUniqueInput
    create: XOR<CommunityAdminCreateWithoutCommunityInput, CommunityAdminUncheckedCreateWithoutCommunityInput>
  }

  export type CommunityAdminCreateManyCommunityInputEnvelope = {
    data: CommunityAdminCreateManyCommunityInput | CommunityAdminCreateManyCommunityInput[]
  }

  export type CommunityModeratorCreateWithoutCommunityInput = {
    id?: string
    assignedAt?: Date | string
    user: UserCreateNestedOneWithoutCommunityModeratorsInput
  }

  export type CommunityModeratorUncheckedCreateWithoutCommunityInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
  }

  export type CommunityModeratorCreateOrConnectWithoutCommunityInput = {
    where: CommunityModeratorWhereUniqueInput
    create: XOR<CommunityModeratorCreateWithoutCommunityInput, CommunityModeratorUncheckedCreateWithoutCommunityInput>
  }

  export type CommunityModeratorCreateManyCommunityInputEnvelope = {
    data: CommunityModeratorCreateManyCommunityInput | CommunityModeratorCreateManyCommunityInput[]
  }

  export type ConversationCreateWithoutCommunityInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutConversationInput
    members?: ConversationMemberCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkCreateNestedManyWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutCommunityInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutConversationInput
    members?: ConversationMemberUncheckedCreateNestedManyWithoutConversationInput
    preferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutCommunityInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutCommunityInput, ConversationUncheckedCreateWithoutCommunityInput>
  }

  export type ConversationCreateManyCommunityInputEnvelope = {
    data: ConversationCreateManyCommunityInput | ConversationCreateManyCommunityInput[]
  }

  export type CommunityMemberUpsertWithWhereUniqueWithoutCommunityInput = {
    where: CommunityMemberWhereUniqueInput
    update: XOR<CommunityMemberUpdateWithoutCommunityInput, CommunityMemberUncheckedUpdateWithoutCommunityInput>
    create: XOR<CommunityMemberCreateWithoutCommunityInput, CommunityMemberUncheckedCreateWithoutCommunityInput>
  }

  export type CommunityMemberUpdateWithWhereUniqueWithoutCommunityInput = {
    where: CommunityMemberWhereUniqueInput
    data: XOR<CommunityMemberUpdateWithoutCommunityInput, CommunityMemberUncheckedUpdateWithoutCommunityInput>
  }

  export type CommunityMemberUpdateManyWithWhereWithoutCommunityInput = {
    where: CommunityMemberScalarWhereInput
    data: XOR<CommunityMemberUpdateManyMutationInput, CommunityMemberUncheckedUpdateManyWithoutCommunityInput>
  }

  export type UserUpsertWithoutCreatedCommunitiesInput = {
    update: XOR<UserUpdateWithoutCreatedCommunitiesInput, UserUncheckedUpdateWithoutCreatedCommunitiesInput>
    create: XOR<UserCreateWithoutCreatedCommunitiesInput, UserUncheckedCreateWithoutCreatedCommunitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCommunitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCommunitiesInput, UserUncheckedUpdateWithoutCreatedCommunitiesInput>
  }

  export type UserUpdateWithoutCreatedCommunitiesInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCommunitiesInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommunityAdminUpsertWithWhereUniqueWithoutCommunityInput = {
    where: CommunityAdminWhereUniqueInput
    update: XOR<CommunityAdminUpdateWithoutCommunityInput, CommunityAdminUncheckedUpdateWithoutCommunityInput>
    create: XOR<CommunityAdminCreateWithoutCommunityInput, CommunityAdminUncheckedCreateWithoutCommunityInput>
  }

  export type CommunityAdminUpdateWithWhereUniqueWithoutCommunityInput = {
    where: CommunityAdminWhereUniqueInput
    data: XOR<CommunityAdminUpdateWithoutCommunityInput, CommunityAdminUncheckedUpdateWithoutCommunityInput>
  }

  export type CommunityAdminUpdateManyWithWhereWithoutCommunityInput = {
    where: CommunityAdminScalarWhereInput
    data: XOR<CommunityAdminUpdateManyMutationInput, CommunityAdminUncheckedUpdateManyWithoutCommunityInput>
  }

  export type CommunityModeratorUpsertWithWhereUniqueWithoutCommunityInput = {
    where: CommunityModeratorWhereUniqueInput
    update: XOR<CommunityModeratorUpdateWithoutCommunityInput, CommunityModeratorUncheckedUpdateWithoutCommunityInput>
    create: XOR<CommunityModeratorCreateWithoutCommunityInput, CommunityModeratorUncheckedCreateWithoutCommunityInput>
  }

  export type CommunityModeratorUpdateWithWhereUniqueWithoutCommunityInput = {
    where: CommunityModeratorWhereUniqueInput
    data: XOR<CommunityModeratorUpdateWithoutCommunityInput, CommunityModeratorUncheckedUpdateWithoutCommunityInput>
  }

  export type CommunityModeratorUpdateManyWithWhereWithoutCommunityInput = {
    where: CommunityModeratorScalarWhereInput
    data: XOR<CommunityModeratorUpdateManyMutationInput, CommunityModeratorUncheckedUpdateManyWithoutCommunityInput>
  }

  export type ConversationUpsertWithWhereUniqueWithoutCommunityInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutCommunityInput, ConversationUncheckedUpdateWithoutCommunityInput>
    create: XOR<ConversationCreateWithoutCommunityInput, ConversationUncheckedCreateWithoutCommunityInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutCommunityInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutCommunityInput, ConversationUncheckedUpdateWithoutCommunityInput>
  }

  export type ConversationUpdateManyWithWhereWithoutCommunityInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutCommunityInput>
  }

  export type ConversationScalarWhereInput = {
    AND?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    OR?: ConversationScalarWhereInput[]
    NOT?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    id?: StringFilter<"Conversation"> | string
    identifier?: StringNullableFilter<"Conversation"> | string | null
    type?: StringFilter<"Conversation"> | string
    title?: StringNullableFilter<"Conversation"> | string | null
    description?: StringNullableFilter<"Conversation"> | string | null
    image?: StringNullableFilter<"Conversation"> | string | null
    avatar?: StringNullableFilter<"Conversation"> | string | null
    communityId?: StringNullableFilter<"Conversation"> | string | null
    isActive?: BoolFilter<"Conversation"> | boolean
    isArchived?: BoolFilter<"Conversation"> | boolean
    lastMessageAt?: DateTimeFilter<"Conversation"> | Date | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
  }

  export type UserCreateWithoutCommunityMembershipsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommunityMembershipsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommunityMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommunityMembershipsInput, UserUncheckedCreateWithoutCommunityMembershipsInput>
  }

  export type CommunityCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedCommunitiesInput
    admins?: CommunityAdminCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    admins?: CommunityAdminUncheckedCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorUncheckedCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutMembersInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutMembersInput, CommunityUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutCommunityMembershipsInput = {
    update: XOR<UserUpdateWithoutCommunityMembershipsInput, UserUncheckedUpdateWithoutCommunityMembershipsInput>
    create: XOR<UserCreateWithoutCommunityMembershipsInput, UserUncheckedCreateWithoutCommunityMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommunityMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommunityMembershipsInput, UserUncheckedUpdateWithoutCommunityMembershipsInput>
  }

  export type UserUpdateWithoutCommunityMembershipsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommunityMembershipsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommunityUpsertWithoutMembersInput = {
    update: XOR<CommunityUpdateWithoutMembersInput, CommunityUncheckedUpdateWithoutMembersInput>
    create: XOR<CommunityCreateWithoutMembersInput, CommunityUncheckedCreateWithoutMembersInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutMembersInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutMembersInput, CommunityUncheckedUpdateWithoutMembersInput>
  }

  export type CommunityUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedCommunitiesNestedInput
    admins?: CommunityAdminUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: CommunityAdminUncheckedUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUncheckedUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type UserCreateWithoutStatsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStatsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
  }

  export type UserUpsertWithoutStatsInput = {
    update: XOR<UserUpdateWithoutStatsInput, UserUncheckedUpdateWithoutStatsInput>
    create: XOR<UserCreateWithoutStatsInput, UserUncheckedCreateWithoutStatsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatsInput, UserUncheckedUpdateWithoutStatsInput>
  }

  export type UserUpdateWithoutStatsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPreferencesInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreferencesInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpsertWithoutPreferencesInput = {
    update: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserUpdateWithoutPreferencesInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferencesInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutConversationPreferencesInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConversationPreferencesInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConversationPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConversationPreferencesInput, UserUncheckedCreateWithoutConversationPreferencesInput>
  }

  export type ConversationCreateWithoutPreferencesInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantCreateNestedManyWithoutConversationInput
    members?: ConversationMemberCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkCreateNestedManyWithoutConversationInput
    community?: CommunityCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutPreferencesInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    communityId?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedCreateNestedManyWithoutConversationInput
    members?: ConversationMemberUncheckedCreateNestedManyWithoutConversationInput
    shareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutPreferencesInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutPreferencesInput, ConversationUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpsertWithoutConversationPreferencesInput = {
    update: XOR<UserUpdateWithoutConversationPreferencesInput, UserUncheckedUpdateWithoutConversationPreferencesInput>
    create: XOR<UserCreateWithoutConversationPreferencesInput, UserUncheckedCreateWithoutConversationPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConversationPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConversationPreferencesInput, UserUncheckedUpdateWithoutConversationPreferencesInput>
  }

  export type UserUpdateWithoutConversationPreferencesInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConversationPreferencesInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConversationUpsertWithoutPreferencesInput = {
    update: XOR<ConversationUpdateWithoutPreferencesInput, ConversationUncheckedUpdateWithoutPreferencesInput>
    create: XOR<ConversationCreateWithoutPreferencesInput, ConversationUncheckedCreateWithoutPreferencesInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutPreferencesInput, ConversationUncheckedUpdateWithoutPreferencesInput>
  }

  export type ConversationUpdateWithoutPreferencesInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUpdateManyWithoutConversationNestedInput
    community?: CommunityUpdateOneWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutPreferencesInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUncheckedUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutConversationNestedInput
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type UserCreateWithoutCommunityAdminsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityModerators?: CommunityModeratorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommunityAdminsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityModerators?: CommunityModeratorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommunityAdminsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommunityAdminsInput, UserUncheckedCreateWithoutCommunityAdminsInput>
  }

  export type CommunityCreateWithoutAdminsInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberCreateNestedManyWithoutCommunityInput
    creator: UserCreateNestedOneWithoutCreatedCommunitiesInput
    moderators?: CommunityModeratorCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutAdminsInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberUncheckedCreateNestedManyWithoutCommunityInput
    moderators?: CommunityModeratorUncheckedCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutAdminsInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutAdminsInput, CommunityUncheckedCreateWithoutAdminsInput>
  }

  export type UserUpsertWithoutCommunityAdminsInput = {
    update: XOR<UserUpdateWithoutCommunityAdminsInput, UserUncheckedUpdateWithoutCommunityAdminsInput>
    create: XOR<UserCreateWithoutCommunityAdminsInput, UserUncheckedCreateWithoutCommunityAdminsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommunityAdminsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommunityAdminsInput, UserUncheckedUpdateWithoutCommunityAdminsInput>
  }

  export type UserUpdateWithoutCommunityAdminsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityModerators?: CommunityModeratorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommunityAdminsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityModerators?: CommunityModeratorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommunityUpsertWithoutAdminsInput = {
    update: XOR<CommunityUpdateWithoutAdminsInput, CommunityUncheckedUpdateWithoutAdminsInput>
    create: XOR<CommunityCreateWithoutAdminsInput, CommunityUncheckedCreateWithoutAdminsInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutAdminsInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutAdminsInput, CommunityUncheckedUpdateWithoutAdminsInput>
  }

  export type CommunityUpdateWithoutAdminsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUpdateManyWithoutCommunityNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedCommunitiesNestedInput
    moderators?: CommunityModeratorUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutAdminsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUncheckedUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUncheckedUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type UserCreateWithoutCommunityModeratorsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    stats?: UserStatsCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommunityModeratorsInput = {
    id?: string
    username: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    password: string
    displayName?: string | null
    avatar?: string | null
    isOnline?: boolean
    lastSeen?: Date | string
    lastActiveAt?: Date | string
    systemLanguage?: string
    regionalLanguage?: string
    customDestinationLanguage?: string | null
    autoTranslateEnabled?: boolean
    translateToSystemLanguage?: boolean
    translateToRegionalLanguage?: boolean
    useCustomDestination?: boolean
    role?: string
    isActive?: boolean
    deactivatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCommunities?: CommunityUncheckedCreateNestedManyWithoutCreatorInput
    communityMemberships?: CommunityMemberUncheckedCreateNestedManyWithoutUserInput
    conversations?: ConversationMemberUncheckedCreateNestedManyWithoutUserInput
    conversationPreferences?: ConversationPreferenceUncheckedCreateNestedManyWithoutUserInput
    createdShareLinks?: ConversationShareLinkUncheckedCreateNestedManyWithoutCreatorInput
    receivedFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutReceiverInput
    sentFriendRequests?: FriendRequestUncheckedCreateNestedManyWithoutSenderInput
    messageReadStatus?: MessageReadStatusUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    typingIndicators?: TypingIndicatorUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    stats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
    communityAdmins?: CommunityAdminUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommunityModeratorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommunityModeratorsInput, UserUncheckedCreateWithoutCommunityModeratorsInput>
  }

  export type CommunityCreateWithoutModeratorsInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberCreateNestedManyWithoutCommunityInput
    creator: UserCreateNestedOneWithoutCreatedCommunitiesInput
    admins?: CommunityAdminCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutModeratorsInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CommunityMemberUncheckedCreateNestedManyWithoutCommunityInput
    admins?: CommunityAdminUncheckedCreateNestedManyWithoutCommunityInput
    Conversation?: ConversationUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutModeratorsInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutModeratorsInput, CommunityUncheckedCreateWithoutModeratorsInput>
  }

  export type UserUpsertWithoutCommunityModeratorsInput = {
    update: XOR<UserUpdateWithoutCommunityModeratorsInput, UserUncheckedUpdateWithoutCommunityModeratorsInput>
    create: XOR<UserCreateWithoutCommunityModeratorsInput, UserUncheckedCreateWithoutCommunityModeratorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommunityModeratorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommunityModeratorsInput, UserUncheckedUpdateWithoutCommunityModeratorsInput>
  }

  export type UserUpdateWithoutCommunityModeratorsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    stats?: UserStatsUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommunityModeratorsInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    systemLanguage?: StringFieldUpdateOperationsInput | string
    regionalLanguage?: StringFieldUpdateOperationsInput | string
    customDestinationLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    autoTranslateEnabled?: BoolFieldUpdateOperationsInput | boolean
    translateToSystemLanguage?: BoolFieldUpdateOperationsInput | boolean
    translateToRegionalLanguage?: BoolFieldUpdateOperationsInput | boolean
    useCustomDestination?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCommunities?: CommunityUncheckedUpdateManyWithoutCreatorNestedInput
    communityMemberships?: CommunityMemberUncheckedUpdateManyWithoutUserNestedInput
    conversations?: ConversationMemberUncheckedUpdateManyWithoutUserNestedInput
    conversationPreferences?: ConversationPreferenceUncheckedUpdateManyWithoutUserNestedInput
    createdShareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutCreatorNestedInput
    receivedFriendRequests?: FriendRequestUncheckedUpdateManyWithoutReceiverNestedInput
    sentFriendRequests?: FriendRequestUncheckedUpdateManyWithoutSenderNestedInput
    messageReadStatus?: MessageReadStatusUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    stats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
    communityAdmins?: CommunityAdminUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommunityUpsertWithoutModeratorsInput = {
    update: XOR<CommunityUpdateWithoutModeratorsInput, CommunityUncheckedUpdateWithoutModeratorsInput>
    create: XOR<CommunityCreateWithoutModeratorsInput, CommunityUncheckedCreateWithoutModeratorsInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutModeratorsInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutModeratorsInput, CommunityUncheckedUpdateWithoutModeratorsInput>
  }

  export type CommunityUpdateWithoutModeratorsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUpdateManyWithoutCommunityNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedCommunitiesNestedInput
    admins?: CommunityAdminUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutModeratorsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUncheckedUpdateManyWithoutCommunityNestedInput
    admins?: CommunityAdminUncheckedUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityCreateManyCreatorInput = {
    id?: string
    name: string
    description?: string | null
    avatar?: string | null
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommunityMemberCreateManyUserInput = {
    id?: string
    communityId: string
    joinedAt?: Date | string
  }

  export type ConversationMemberCreateManyUserInput = {
    id?: string
    conversationId: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
  }

  export type ConversationPreferenceCreateManyUserInput = {
    id?: string
    conversationId: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationShareLinkCreateManyCreatorInput = {
    id?: string
    linkId: string
    identifier?: string | null
    conversationId: string
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendRequestCreateManyReceiverInput = {
    id?: string
    senderId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendRequestCreateManySenderInput = {
    id?: string
    receiverId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageReadStatusCreateManyUserInput = {
    id?: string
    messageId: string
    readAt?: Date | string
  }

  export type MessageCreateManySenderInput = {
    id?: string
    conversationId: string
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: string
    title: string
    content: string
    data?: string | null
    priority?: string
    isRead?: boolean
    emailSent?: boolean
    pushSent?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type TypingIndicatorCreateManyUserInput = {
    id?: string
    conversationId: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceCreateManyUserInput = {
    id?: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommunityAdminCreateManyUserInput = {
    id?: string
    communityId: string
    assignedAt?: Date | string
  }

  export type CommunityModeratorCreateManyUserInput = {
    id?: string
    communityId: string
    assignedAt?: Date | string
  }

  export type CommunityUpdateWithoutCreatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUpdateManyWithoutCommunityNestedInput
    admins?: CommunityAdminUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutCreatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CommunityMemberUncheckedUpdateManyWithoutCommunityNestedInput
    admins?: CommunityAdminUncheckedUpdateManyWithoutCommunityNestedInput
    moderators?: CommunityModeratorUncheckedUpdateManyWithoutCommunityNestedInput
    Conversation?: ConversationUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateManyWithoutCreatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityMemberUpdateWithoutUserInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutMembersNestedInput
  }

  export type CommunityMemberUncheckedUpdateWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityMemberUncheckedUpdateManyWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationMemberUpdateWithoutUserInput = {
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    conversation?: ConversationUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ConversationMemberUncheckedUpdateWithoutUserInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationMemberUncheckedUpdateManyWithoutUserInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationPreferenceUpdateWithoutUserInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversation?: ConversationUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type ConversationPreferenceUncheckedUpdateWithoutUserInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationPreferenceUncheckedUpdateManyWithoutUserInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationShareLinkUpdateWithoutCreatorInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutShareLinkNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutShareLinksNestedInput
  }

  export type ConversationShareLinkUncheckedUpdateWithoutCreatorInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    conversationId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutShareLinkNestedInput
  }

  export type ConversationShareLinkUncheckedUpdateManyWithoutCreatorInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    conversationId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendRequestUpdateWithoutReceiverInput = {
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentFriendRequestsNestedInput
  }

  export type FriendRequestUncheckedUpdateWithoutReceiverInput = {
    senderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendRequestUncheckedUpdateManyWithoutReceiverInput = {
    senderId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendRequestUpdateWithoutSenderInput = {
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutReceivedFriendRequestsNestedInput
  }

  export type FriendRequestUncheckedUpdateWithoutSenderInput = {
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendRequestUncheckedUpdateManyWithoutSenderInput = {
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadStatusUpdateWithoutUserInput = {
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: MessageUpdateOneRequiredWithoutReadStatusNestedInput
  }

  export type MessageReadStatusUncheckedUpdateWithoutUserInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadStatusUncheckedUpdateManyWithoutUserInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutSenderInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUpdateManyWithoutMessageNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    anonymousSender?: AnonymousParticipantUpdateOneWithoutSentMessagesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUncheckedUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    pushSent?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    pushSent?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    pushSent?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypingIndicatorUpdateWithoutUserInput = {
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversation?: ConversationUpdateOneRequiredWithoutTypingIndicatorsNestedInput
  }

  export type TypingIndicatorUncheckedUpdateWithoutUserInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypingIndicatorUncheckedUpdateManyWithoutUserInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUpdateWithoutUserInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateWithoutUserInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateManyWithoutUserInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityAdminUpdateWithoutUserInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutAdminsNestedInput
  }

  export type CommunityAdminUncheckedUpdateWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityAdminUncheckedUpdateManyWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityModeratorUpdateWithoutUserInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutModeratorsNestedInput
  }

  export type CommunityModeratorUncheckedUpdateWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityModeratorUncheckedUpdateManyWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnonymousParticipantCreateManyConversationInput = {
    id?: string
    shareLinkId: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
  }

  export type ConversationMemberCreateManyConversationInput = {
    id?: string
    userId: string
    role?: string
    canSendMessage?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    canSendVideos?: boolean
    canSendAudios?: boolean
    canSendLocations?: boolean
    canSendLinks?: boolean
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
  }

  export type ConversationPreferenceCreateManyConversationInput = {
    id?: string
    userId: string
    key: string
    value: string
    valueType?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationShareLinkCreateManyConversationInput = {
    id?: string
    linkId: string
    identifier?: string | null
    createdBy: string
    name?: string | null
    description?: string | null
    maxUses?: number | null
    currentUses?: number
    maxConcurrentUsers?: number | null
    currentConcurrentUsers?: number
    maxUniqueSessions?: number | null
    currentUniqueSessions?: number
    expiresAt?: Date | string | null
    isActive?: boolean
    allowAnonymousMessages?: boolean
    allowAnonymousFiles?: boolean
    allowAnonymousImages?: boolean
    allowViewHistory?: boolean
    requireNickname?: boolean
    requireEmail?: boolean
    allowedCountries?: ConversationShareLinkCreateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkCreateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkCreateallowedIpRangesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateManyConversationInput = {
    id?: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TypingIndicatorCreateManyConversationInput = {
    id?: string
    userId: string
    isTyping?: boolean
    startedAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnonymousParticipantUpdateWithoutConversationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shareLink?: ConversationShareLinkUpdateOneRequiredWithoutAnonymousParticipantsNestedInput
    sentMessages?: MessageUpdateManyWithoutAnonymousSenderNestedInput
  }

  export type AnonymousParticipantUncheckedUpdateWithoutConversationInput = {
    shareLinkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutAnonymousSenderNestedInput
  }

  export type AnonymousParticipantUncheckedUpdateManyWithoutConversationInput = {
    shareLinkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConversationMemberUpdateWithoutConversationInput = {
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutConversationsNestedInput
  }

  export type ConversationMemberUncheckedUpdateWithoutConversationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationMemberUncheckedUpdateManyWithoutConversationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    canSendMessage?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    canSendVideos?: BoolFieldUpdateOperationsInput | boolean
    canSendAudios?: BoolFieldUpdateOperationsInput | boolean
    canSendLocations?: BoolFieldUpdateOperationsInput | boolean
    canSendLinks?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationPreferenceUpdateWithoutConversationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConversationPreferencesNestedInput
  }

  export type ConversationPreferenceUncheckedUpdateWithoutConversationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationPreferenceUncheckedUpdateManyWithoutConversationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    valueType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationShareLinkUpdateWithoutConversationInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutShareLinkNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedShareLinksNestedInput
  }

  export type ConversationShareLinkUncheckedUpdateWithoutConversationInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutShareLinkNestedInput
  }

  export type ConversationShareLinkUncheckedUpdateManyWithoutConversationInput = {
    linkId?: StringFieldUpdateOperationsInput | string
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxUses?: NullableIntFieldUpdateOperationsInput | number | null
    currentUses?: IntFieldUpdateOperationsInput | number
    maxConcurrentUsers?: NullableIntFieldUpdateOperationsInput | number | null
    currentConcurrentUsers?: IntFieldUpdateOperationsInput | number
    maxUniqueSessions?: NullableIntFieldUpdateOperationsInput | number | null
    currentUniqueSessions?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousMessages?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousFiles?: BoolFieldUpdateOperationsInput | boolean
    allowAnonymousImages?: BoolFieldUpdateOperationsInput | boolean
    allowViewHistory?: BoolFieldUpdateOperationsInput | boolean
    requireNickname?: BoolFieldUpdateOperationsInput | boolean
    requireEmail?: BoolFieldUpdateOperationsInput | boolean
    allowedCountries?: ConversationShareLinkUpdateallowedCountriesInput | string[]
    allowedLanguages?: ConversationShareLinkUpdateallowedLanguagesInput | string[]
    allowedIpRanges?: ConversationShareLinkUpdateallowedIpRangesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutConversationInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUpdateManyWithoutMessageNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    anonymousSender?: AnonymousParticipantUpdateOneWithoutSentMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutConversationInput = {
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUncheckedUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutConversationInput = {
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypingIndicatorUpdateWithoutConversationInput = {
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTypingIndicatorsNestedInput
  }

  export type TypingIndicatorUncheckedUpdateWithoutConversationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypingIndicatorUncheckedUpdateManyWithoutConversationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    isTyping?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnonymousParticipantCreateManyShareLinkInput = {
    id?: string
    conversationId: string
    firstName: string
    lastName: string
    username: string
    email?: string | null
    sessionToken: string
    ipAddress?: string | null
    country?: string | null
    language?: string
    deviceFingerprint?: string | null
    isActive?: boolean
    isOnline?: boolean
    lastActiveAt?: Date | string
    canSendMessages?: boolean
    canSendFiles?: boolean
    canSendImages?: boolean
    joinedAt?: Date | string
    lastSeenAt?: Date | string
    leftAt?: Date | string | null
  }

  export type AnonymousParticipantUpdateWithoutShareLinkInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    conversation?: ConversationUpdateOneRequiredWithoutAnonymousParticipantsNestedInput
    sentMessages?: MessageUpdateManyWithoutAnonymousSenderNestedInput
  }

  export type AnonymousParticipantUncheckedUpdateWithoutShareLinkInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentMessages?: MessageUncheckedUpdateManyWithoutAnonymousSenderNestedInput
  }

  export type AnonymousParticipantUncheckedUpdateManyWithoutShareLinkInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    language?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    canSendMessages?: BoolFieldUpdateOperationsInput | boolean
    canSendFiles?: BoolFieldUpdateOperationsInput | boolean
    canSendImages?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageCreateManyAnonymousSenderInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    replyToId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateWithoutAnonymousSenderInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUpdateManyWithoutMessageNestedInput
    replyTo?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutAnonymousSenderInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUncheckedUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutAnonymousSenderInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replyToId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadStatusCreateManyMessageInput = {
    id?: string
    userId: string
    readAt?: Date | string
  }

  export type MessageTranslationCreateManyMessageInput = {
    id?: string
    sourceLanguage: string
    targetLanguage: string
    translatedContent: string
    translationModel: string
    cacheKey: string
    confidenceScore?: number | null
    createdAt?: Date | string
  }

  export type MessageCreateManyReplyToInput = {
    id?: string
    conversationId: string
    senderId?: string | null
    anonymousSenderId?: string | null
    content: string
    originalLanguage?: string
    messageType?: string
    isEdited?: boolean
    editedAt?: Date | string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageReadStatusUpdateWithoutMessageInput = {
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessageReadStatusNestedInput
  }

  export type MessageReadStatusUncheckedUpdateWithoutMessageInput = {
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReadStatusUncheckedUpdateManyWithoutMessageInput = {
    userId?: StringFieldUpdateOperationsInput | string
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTranslationUpdateWithoutMessageInput = {
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    targetLanguage?: StringFieldUpdateOperationsInput | string
    translatedContent?: StringFieldUpdateOperationsInput | string
    translationModel?: StringFieldUpdateOperationsInput | string
    cacheKey?: StringFieldUpdateOperationsInput | string
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTranslationUncheckedUpdateWithoutMessageInput = {
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    targetLanguage?: StringFieldUpdateOperationsInput | string
    translatedContent?: StringFieldUpdateOperationsInput | string
    translationModel?: StringFieldUpdateOperationsInput | string
    cacheKey?: StringFieldUpdateOperationsInput | string
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTranslationUncheckedUpdateManyWithoutMessageInput = {
    sourceLanguage?: StringFieldUpdateOperationsInput | string
    targetLanguage?: StringFieldUpdateOperationsInput | string
    translatedContent?: StringFieldUpdateOperationsInput | string
    translationModel?: StringFieldUpdateOperationsInput | string
    cacheKey?: StringFieldUpdateOperationsInput | string
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutReplyToInput = {
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUpdateManyWithoutMessageNestedInput
    replies?: MessageUpdateManyWithoutReplyToNestedInput
    anonymousSender?: AnonymousParticipantUpdateOneWithoutSentMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutReplyToInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readStatus?: MessageReadStatusUncheckedUpdateManyWithoutMessageNestedInput
    translations?: MessageTranslationUncheckedUpdateManyWithoutMessageNestedInput
    replies?: MessageUncheckedUpdateManyWithoutReplyToNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutReplyToInput = {
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousSenderId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    originalLanguage?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityMemberCreateManyCommunityInput = {
    id?: string
    userId: string
    joinedAt?: Date | string
  }

  export type CommunityAdminCreateManyCommunityInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
  }

  export type CommunityModeratorCreateManyCommunityInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
  }

  export type ConversationCreateManyCommunityInput = {
    id?: string
    identifier?: string | null
    type: string
    title?: string | null
    description?: string | null
    image?: string | null
    avatar?: string | null
    isActive?: boolean
    isArchived?: boolean
    lastMessageAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommunityMemberUpdateWithoutCommunityInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommunityMembershipsNestedInput
  }

  export type CommunityMemberUncheckedUpdateWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityMemberUncheckedUpdateManyWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityAdminUpdateWithoutCommunityInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommunityAdminsNestedInput
  }

  export type CommunityAdminUncheckedUpdateWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityAdminUncheckedUpdateManyWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityModeratorUpdateWithoutCommunityInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommunityModeratorsNestedInput
  }

  export type CommunityModeratorUncheckedUpdateWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommunityModeratorUncheckedUpdateManyWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUpdateWithoutCommunityInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUpdateManyWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutCommunityInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anonymousParticipants?: AnonymousParticipantUncheckedUpdateManyWithoutConversationNestedInput
    members?: ConversationMemberUncheckedUpdateManyWithoutConversationNestedInput
    preferences?: ConversationPreferenceUncheckedUpdateManyWithoutConversationNestedInput
    shareLinks?: ConversationShareLinkUncheckedUpdateManyWithoutConversationNestedInput
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
    typingIndicators?: TypingIndicatorUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutCommunityInput = {
    identifier?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationCountOutputTypeDefaultArgs instead
     */
    export type ConversationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationShareLinkCountOutputTypeDefaultArgs instead
     */
    export type ConversationShareLinkCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationShareLinkCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnonymousParticipantCountOutputTypeDefaultArgs instead
     */
    export type AnonymousParticipantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnonymousParticipantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageCountOutputTypeDefaultArgs instead
     */
    export type MessageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityCountOutputTypeDefaultArgs instead
     */
    export type CommunityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationDefaultArgs instead
     */
    export type ConversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationMemberDefaultArgs instead
     */
    export type ConversationMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationShareLinkDefaultArgs instead
     */
    export type ConversationShareLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationShareLinkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnonymousParticipantDefaultArgs instead
     */
    export type AnonymousParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnonymousParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageTranslationDefaultArgs instead
     */
    export type MessageTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageTranslationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageReadStatusDefaultArgs instead
     */
    export type MessageReadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageReadStatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FriendRequestDefaultArgs instead
     */
    export type FriendRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FriendRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypingIndicatorDefaultArgs instead
     */
    export type TypingIndicatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypingIndicatorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityDefaultArgs instead
     */
    export type CommunityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityMemberDefaultArgs instead
     */
    export type CommunityMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserStatsDefaultArgs instead
     */
    export type UserStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserStatsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPreferenceDefaultArgs instead
     */
    export type UserPreferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPreferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationPreferenceDefaultArgs instead
     */
    export type ConversationPreferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationPreferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityAdminDefaultArgs instead
     */
    export type CommunityAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityAdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityModeratorDefaultArgs instead
     */
    export type CommunityModeratorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityModeratorDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}