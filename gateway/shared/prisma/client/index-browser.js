
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  bio: 'bio',
  email: 'email',
  phoneNumber: 'phoneNumber',
  password: 'password',
  displayName: 'displayName',
  avatar: 'avatar',
  isOnline: 'isOnline',
  lastSeen: 'lastSeen',
  lastActiveAt: 'lastActiveAt',
  systemLanguage: 'systemLanguage',
  regionalLanguage: 'regionalLanguage',
  customDestinationLanguage: 'customDestinationLanguage',
  autoTranslateEnabled: 'autoTranslateEnabled',
  translateToSystemLanguage: 'translateToSystemLanguage',
  translateToRegionalLanguage: 'translateToRegionalLanguage',
  useCustomDestination: 'useCustomDestination',
  role: 'role',
  isActive: 'isActive',
  deactivatedAt: 'deactivatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  type: 'type',
  title: 'title',
  description: 'description',
  image: 'image',
  avatar: 'avatar',
  communityId: 'communityId',
  isActive: 'isActive',
  isArchived: 'isArchived',
  lastMessageAt: 'lastMessageAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationMemberScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  role: 'role',
  canSendMessage: 'canSendMessage',
  canSendFiles: 'canSendFiles',
  canSendImages: 'canSendImages',
  canSendVideos: 'canSendVideos',
  canSendAudios: 'canSendAudios',
  canSendLocations: 'canSendLocations',
  canSendLinks: 'canSendLinks',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive'
};

exports.Prisma.ConversationShareLinkScalarFieldEnum = {
  id: 'id',
  linkId: 'linkId',
  identifier: 'identifier',
  conversationId: 'conversationId',
  createdBy: 'createdBy',
  name: 'name',
  description: 'description',
  maxUses: 'maxUses',
  currentUses: 'currentUses',
  maxConcurrentUsers: 'maxConcurrentUsers',
  currentConcurrentUsers: 'currentConcurrentUsers',
  maxUniqueSessions: 'maxUniqueSessions',
  currentUniqueSessions: 'currentUniqueSessions',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  allowAnonymousMessages: 'allowAnonymousMessages',
  allowAnonymousFiles: 'allowAnonymousFiles',
  allowAnonymousImages: 'allowAnonymousImages',
  allowViewHistory: 'allowViewHistory',
  requireNickname: 'requireNickname',
  requireEmail: 'requireEmail',
  allowedCountries: 'allowedCountries',
  allowedLanguages: 'allowedLanguages',
  allowedIpRanges: 'allowedIpRanges',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnonymousParticipantScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  shareLinkId: 'shareLinkId',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  email: 'email',
  sessionToken: 'sessionToken',
  ipAddress: 'ipAddress',
  country: 'country',
  language: 'language',
  deviceFingerprint: 'deviceFingerprint',
  isActive: 'isActive',
  isOnline: 'isOnline',
  lastActiveAt: 'lastActiveAt',
  canSendMessages: 'canSendMessages',
  canSendFiles: 'canSendFiles',
  canSendImages: 'canSendImages',
  joinedAt: 'joinedAt',
  lastSeenAt: 'lastSeenAt',
  leftAt: 'leftAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  anonymousSenderId: 'anonymousSenderId',
  content: 'content',
  originalLanguage: 'originalLanguage',
  messageType: 'messageType',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  replyToId: 'replyToId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageTranslationScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  sourceLanguage: 'sourceLanguage',
  targetLanguage: 'targetLanguage',
  translatedContent: 'translatedContent',
  translationModel: 'translationModel',
  cacheKey: 'cacheKey',
  confidenceScore: 'confidenceScore',
  createdAt: 'createdAt'
};

exports.Prisma.MessageStatusScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  receivedAt: 'receivedAt',
  readAt: 'readAt',
  answer: 'answer'
};

exports.Prisma.FriendRequestScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TypingIndicatorScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  isTyping: 'isTyping',
  startedAt: 'startedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  content: 'content',
  data: 'data',
  priority: 'priority',
  isRead: 'isRead',
  emailSent: 'emailSent',
  pushSent: 'pushSent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.CommunityScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  name: 'name',
  description: 'description',
  avatar: 'avatar',
  isPrivate: 'isPrivate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunityMemberScalarFieldEnum = {
  id: 'id',
  communityId: 'communityId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  role: 'role'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  messagesSent: 'messagesSent',
  messagesReceived: 'messagesReceived',
  charactersTyped: 'charactersTyped',
  imageMessagesSent: 'imageMessagesSent',
  filesShared: 'filesShared',
  conversationsJoined: 'conversationsJoined',
  communitiesCreated: 'communitiesCreated',
  friendsAdded: 'friendsAdded',
  friendRequestsSent: 'friendRequestsSent',
  translationsUsed: 'translationsUsed',
  languagesDetected: 'languagesDetected',
  autoTranslateTimeMinutes: 'autoTranslateTimeMinutes',
  totalOnlineTimeMinutes: 'totalOnlineTimeMinutes',
  sessionCount: 'sessionCount',
  lastActiveAt: 'lastActiveAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  key: 'key',
  value: 'value',
  valueType: 'valueType',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationPreferenceScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  key: 'key',
  value: 'value',
  valueType: 'valueType',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AffiliateTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  name: 'name',
  createdBy: 'createdBy',
  maxUses: 'maxUses',
  currentUses: 'currentUses',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AffiliateRelationScalarFieldEnum = {
  id: 'id',
  affiliateTokenId: 'affiliateTokenId',
  affiliateUserId: 'affiliateUserId',
  referredUserId: 'referredUserId',
  status: 'status',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.TrackingLinkScalarFieldEnum = {
  id: 'id',
  token: 'token',
  originalUrl: 'originalUrl',
  shortUrl: 'shortUrl',
  createdBy: 'createdBy',
  conversationId: 'conversationId',
  messageId: 'messageId',
  totalClicks: 'totalClicks',
  uniqueClicks: 'uniqueClicks',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastClickedAt: 'lastClickedAt'
};

exports.Prisma.TrackingLinkClickScalarFieldEnum = {
  id: 'id',
  trackingLinkId: 'trackingLinkId',
  userId: 'userId',
  anonymousId: 'anonymousId',
  ipAddress: 'ipAddress',
  country: 'country',
  city: 'city',
  region: 'region',
  userAgent: 'userAgent',
  browser: 'browser',
  os: 'os',
  device: 'device',
  language: 'language',
  referrer: 'referrer',
  deviceFingerprint: 'deviceFingerprint',
  clickedAt: 'clickedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  User: 'User',
  Conversation: 'Conversation',
  ConversationMember: 'ConversationMember',
  ConversationShareLink: 'ConversationShareLink',
  AnonymousParticipant: 'AnonymousParticipant',
  Message: 'Message',
  MessageTranslation: 'MessageTranslation',
  MessageStatus: 'MessageStatus',
  FriendRequest: 'FriendRequest',
  TypingIndicator: 'TypingIndicator',
  Notification: 'Notification',
  Community: 'Community',
  CommunityMember: 'CommunityMember',
  UserStats: 'UserStats',
  UserPreference: 'UserPreference',
  ConversationPreference: 'ConversationPreference',
  AffiliateToken: 'AffiliateToken',
  AffiliateRelation: 'AffiliateRelation',
  TrackingLink: 'TrackingLink',
  TrackingLinkClick: 'TrackingLinkClick'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
