// Script pour fixer les doublons IMM√âDIATEMENT
const { PrismaClient } = require('./shared/prisma/client');
const { MongoClient } = require('mongodb');

const prisma = new PrismaClient();

async function fixDuplicatesNow() {
  let mongoClient;
  
  try {
    console.log('üöÄ CORRECTION DES DOUBLONS EN COURS...\n');
    
    // √âtape 1: Se connecter directement √† MongoDB
    console.log('1Ô∏è‚É£  Connexion √† MongoDB...');
    
    // Lire l'URL depuis .env
    require('dotenv').config({ path: '.env' });
    const dbUrl = process.env.DATABASE_URL;
    
    if (!dbUrl) {
      throw new Error('DATABASE_URL non trouv√©e dans .env');
    }
    
    console.log(`   URL: ${dbUrl.replace(/:[^:@]+@/, ':***@')}`);
    
    mongoClient = new MongoClient(dbUrl);
    await mongoClient.connect();
    const db = mongoClient.db('meeshy');
    console.log('‚úÖ Connect√©\n');
    
    // √âtape 2: V√©rifier les index existants
    console.log('2Ô∏è‚É£  V√©rification des index...');
    const indexes = await db.collection('MessageTranslation').indexes();
    const hasUniqueIndex = indexes.some(idx => idx.name === 'message_target_language_unique');
    
    if (hasUniqueIndex) {
      console.log('‚úÖ L\'index unique existe d√©j√†');
    } else {
      console.log('‚ùå L\'index unique N\'EXISTE PAS');
    }
    console.log('');
    
    // √âtape 3: Trouver les doublons
    console.log('3Ô∏è‚É£  Recherche des doublons...');
    const duplicates = await db.collection('MessageTranslation').aggregate([
      {
        $group: {
          _id: { messageId: '$messageId', targetLanguage: '$targetLanguage' },
          count: { $sum: 1 },
          docs: { $push: { id: '$_id', createdAt: '$createdAt' } }
        }
      },
      { $match: { count: { $gt: 1 } } }
    ]).toArray();
    
    console.log(`üìä Groupes de doublons trouv√©s: ${duplicates.length}\n`);
    
    if (duplicates.length > 0) {
      // √âtape 4: Supprimer les doublons (garder le plus r√©cent)
      console.log('4Ô∏è‚É£  Suppression des doublons...');
      let deletedCount = 0;
      
      for (const dup of duplicates) {
        // Trier par date (le plus r√©cent en premier)
        dup.docs.sort((a, b) => b.createdAt - a.createdAt);
        
        // Garder le premier, supprimer les autres
        const toDelete = dup.docs.slice(1).map(d => d.id);
        
        if (toDelete.length > 0) {
          const result = await db.collection('MessageTranslation').deleteMany({
            _id: { $in: toDelete }
          });
          deletedCount += result.deletedCount;
        }
      }
      
      console.log(`‚úÖ ${deletedCount} doublons supprim√©s\n`);
    } else {
      console.log('‚úÖ Aucun doublon √† supprimer\n');
    }
    
    // √âtape 5: Cr√©er l'index unique
    console.log('5Ô∏è‚É£  Cr√©ation de l\'index unique...');
    
    if (hasUniqueIndex) {
      console.log('‚ö†Ô∏è  Suppression de l\'ancien index...');
      await db.collection('MessageTranslation').dropIndex('message_target_language_unique');
    }
    
    try {
      await db.collection('MessageTranslation').createIndex(
        { messageId: 1, targetLanguage: 1 },
        { unique: true, name: 'message_target_language_unique' }
      );
      console.log('‚úÖ Index unique cr√©√© avec succ√®s!\n');
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation index:', error.message);
      console.log('‚ö†Ô∏è  Il reste peut-√™tre des doublons. Relancez le script.\n');
    }
    
    // √âtape 6: V√©rification finale
    console.log('6Ô∏è‚É£  V√©rification finale...');
    const remainingDuplicates = await db.collection('MessageTranslation').aggregate([
      {
        $group: {
          _id: { messageId: '$messageId', targetLanguage: '$targetLanguage' },
          count: { $sum: 1 }
        }
      },
      { $match: { count: { $gt: 1 } } }
    ]).toArray();
    
    if (remainingDuplicates.length === 0) {
      console.log('‚úÖ Aucun doublon restant!\n');
    } else {
      console.log(`‚ùå ${remainingDuplicates.length} doublons restants. Relancez le script.\n`);
    }
    
    // √âtape 7: Compter les traductions
    const totalCount = await db.collection('MessageTranslation').countDocuments();
    console.log(`üìä Total de traductions: ${totalCount}\n`);
    
    console.log('='.repeat(60));
    console.log('‚úÖ CORRECTION TERMIN√âE!');
    console.log('='.repeat(60));
    console.log('');
    console.log('Prochaines √©tapes:');
    console.log('1. Red√©marrer le gateway: docker-compose restart gateway');
    console.log('2. Tester l\'application');
    console.log('3. Les nouveaux doublons seront automatiquement emp√™ch√©s\n');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  } finally {
    if (mongoClient) {
      await mongoClient.close();
    }
    await prisma.$disconnect();
  }
}

fixDuplicatesNow();

