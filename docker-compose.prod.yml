services:
  # Database Service (MongoDB or PostgreSQL)
  database:
    image: ${DATABASE_IMAGE:-mongo:8.0}
    container_name: meeshy-database
    restart: unless-stopped
    environment:
      # MongoDB Environment Variables
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-meeshy}
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-meeshy}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-MeeshyPassword123}
      # PostgreSQL Environment Variables
      POSTGRES_DB: ${POSTGRESQL_DATABASE:-meeshy}
      POSTGRES_USER: ${POSTGRESQL_USER:-meeshy}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD:-MeeshyPassword123}
    volumes:
      - database_data:/data/db
      - database_config:/data/configdb
      - ./shared/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh:ro
      - ./shared/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./shared/init-postgresql.sql:/docker-entrypoint-initdb.d/init-postgresql.sql:ro
    ports:
      - "27017:27017"  # MongoDB
      - "5432:5432"    # PostgreSQL
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD-SHELL", "echo 'Database health check' && exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:8-alpine
    container_name: meeshy-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Translator Service (Production)
  translator:
    image: ${TRANSLATOR_IMAGE:-isopen/meeshy-translator:local}
    container_name: meeshy-translator
    restart: unless-stopped
    environment:
      - DATABASE_TYPE=${DATABASE_TYPE:-MONGODB}
      - DATABASE_URL=${DATABASE_URL}
      - PRISMA_SCHEMA_PATH=${PRISMA_SCHEMA_PATH}
      - PYTHONPATH=/workspace:/workspace/generated
      - PYTHONUNBUFFERED=1
      - NODE_ENV=production
    ports:
      - "8000:8000"      # HTTP API
      - "50051:50051"    # gRPC
      - "5555:5555"      # ZMQ PUSH
      - "5558:5558"      # ZMQ SUB
    volumes:
      - ./shared:/workspace/shared:ro
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Gateway Service (Production)
  gateway:
    image: ${GATEWAY_IMAGE:-isopen/meeshy-gateway:1.0.36-alpha}
    container_name: meeshy-gateway
    restart: unless-stopped
    environment:
      - DATABASE_TYPE=${DATABASE_TYPE:-MONGODB}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - TRANSLATOR_URL=http://translator:8000
      - ZMQ_PUSH_URL=tcp://translator:5555
      - ZMQ_SUB_URL=tcp://translator:5558
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      translator:
        condition: service_healthy
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Service (Production)
  frontend:
    image: ${FRONTEND_IMAGE:-isopen/meeshy-frontend:1.0.36-alpha}
    container_name: meeshy-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:3000}
      - NEXT_PUBLIC_TRANSLATION_URL=${NEXT_PUBLIC_TRANSLATION_URL:-http://localhost:8000}
      - NODE_ENV=production
    ports:
      - "3100:3100"
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:1.26-alpine
    container_name: meeshy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs:/etc/nginx/ssl
      - certbot_www:/var/www/certbot
    depends_on:
      - frontend
      - gateway
    networks:
      - meeshy-network

  # Certbot for Let's Encrypt (Production)
  certbot:
    image: certbot/certbot:latest
    container_name: meeshy-certbot
    restart: unless-stopped
    volumes:
      - ssl_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL:-admin@meeshy.me} --agree-tos --no-eff-email -d ${DOMAIN:-meeshy.me}
    depends_on:
      - nginx
    networks:
      - meeshy-network

volumes:
  database_data:
  database_config:
  redis_data:
  ssl_certs:
  certbot_www:

networks:
  meeshy-network:
    driver: bridge
