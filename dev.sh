#!/bin/bash

# Script de d√©veloppement pour Meeshy
# Utilisation: ./dev.sh [command]

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'aide
show_help() {
    echo -e "${BLUE}üåç Meeshy - Script de D√©veloppement${NC}"
    echo ""
    echo "Usage: ./dev.sh [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  setup       - Installation compl√®te du projet"
    echo "  dev         - D√©marrer les serveurs de d√©veloppement"
    echo "  frontend    - D√©marrer uniquement le frontend"
    echo "  backend     - D√©marrer uniquement le backend"
    echo "  build       - Build de production"
    echo "  test        - Lancer les tests"
    echo "  lint        - V√©rification du code"
    echo "  clean       - Nettoyer les caches et d√©pendances"
    echo "  models      - T√©l√©charger les mod√®les de traduction"
    echo "  check       - V√©rifier l'√©tat du projet"
    echo "  help        - Afficher cette aide"
    echo ""
}

# Fonction de v√©rification des pr√©requis
check_requirements() {
    echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js n'est pas install√©${NC}"
        exit 1
    fi
    
    NODE_VERSION=$(node -v | cut -d 'v' -f 2 | cut -d '.' -f 1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        echo -e "${RED}‚ùå Node.js version 18+ requise (actuelle: $(node -v))${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Node.js $(node -v)${NC}"
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå npm n'est pas install√©${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ npm $(npm -v)${NC}"
    echo ""
}

# Installation compl√®te
setup() {
    echo -e "${BLUE}üöÄ Installation de Meeshy...${NC}"
    
    check_requirements
    
    # Installation frontend
    echo -e "${YELLOW}üì¶ Installation des d√©pendances frontend...${NC}"
    npm install
    
    # Installation backend
    echo -e "${YELLOW}üì¶ Installation des d√©pendances backend...${NC}"
    cd backend
    npm install
    cd ..
    
    # Cr√©ation des dossiers n√©cessaires
    echo -e "${YELLOW}üìÅ Cr√©ation des dossiers...${NC}"
    mkdir -p public/models
    mkdir -p .vscode
    
    echo -e "${GREEN}‚úÖ Installation termin√©e !${NC}"
    echo ""
    echo -e "${BLUE}üéØ Prochaines √©tapes :${NC}"
    echo "  1. ./dev.sh models  - T√©l√©charger les mod√®les (optionnel)"
    echo "  2. ./dev.sh dev     - D√©marrer le d√©veloppement"
    echo ""
}

# D√©marrage des serveurs de d√©veloppement
dev() {
    echo -e "${BLUE}üöÄ D√©marrage des serveurs de d√©veloppement...${NC}"
    
    # V√©rifier si les d√©pendances sont install√©es
    if [ ! -d "node_modules" ] || [ ! -d "backend/node_modules" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  D√©pendances manquantes, installation...${NC}"
        setup
    fi
    
    # D√©marrer les deux serveurs en parall√®le
    echo -e "${YELLOW}üîÑ D√©marrage du backend (port 3002)...${NC}"
    cd backend && npm run start:dev &
    BACKEND_PID=$!
    cd ..
    
    sleep 3
    
    echo -e "${YELLOW}üîÑ D√©marrage du frontend (port 3000)...${NC}"
    npm run dev &
    FRONTEND_PID=$!
    
    # Fonction de nettoyage
    cleanup() {
        echo -e "\n${YELLOW}üõë Arr√™t des serveurs...${NC}"
        kill $BACKEND_PID $FRONTEND_PID 2>/dev/null
        exit
    }
    
    # Capturer Ctrl+C
    trap cleanup INT
    
    echo -e "${GREEN}‚úÖ Serveurs d√©marr√©s !${NC}"
    echo -e "${BLUE}üì± Frontend: http://localhost:3000${NC}"
    echo -e "${BLUE}üîå Backend:  http://localhost:3002${NC}"
    echo ""
    echo -e "${YELLOW}Appuyez sur Ctrl+C pour arr√™ter${NC}"
    
    # Attendre les processus
    wait
}

# D√©marrage frontend uniquement
frontend() {
    echo -e "${BLUE}üé® D√©marrage du frontend...${NC}"
    npm run dev
}

# D√©marrage backend uniquement
backend() {
    echo -e "${BLUE}üîå D√©marrage du backend...${NC}"
    cd backend && npm run start:dev
}

# Build de production
build() {
    echo -e "${BLUE}üèóÔ∏è  Build de production...${NC}"
    
    echo -e "${YELLOW}üì¶ Build frontend...${NC}"
    npm run build
    
    echo -e "${YELLOW}üì¶ Build backend...${NC}"
    cd backend
    npm run build
    cd ..
    
    echo -e "${GREEN}‚úÖ Build termin√© !${NC}"
}

# Tests
test() {
    echo -e "${BLUE}üß™ Lancement des tests...${NC}"
    
    # Tests frontend
    if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
        echo -e "${YELLOW}üî¨ Tests frontend...${NC}"
        npm test
    fi
    
    # Tests backend
    if [ -f "backend/package.json" ] && grep -q "\"test\"" backend/package.json; then
        echo -e "${YELLOW}üî¨ Tests backend...${NC}"
        cd backend
        npm test
        cd ..
    fi
    
    echo -e "${GREEN}‚úÖ Tests termin√©s !${NC}"
}

# Linting
lint() {
    echo -e "${BLUE}üîç V√©rification du code...${NC}"
    
    # Lint frontend
    echo -e "${YELLOW}üìù Lint frontend...${NC}"
    npm run lint || true
    
    # Lint backend
    echo -e "${YELLOW}üìù Lint backend...${NC}"
    cd backend
    npm run lint || true
    cd ..
    
    echo -e "${GREEN}‚úÖ V√©rification termin√©e !${NC}"
}

# Nettoyage
clean() {
    echo -e "${BLUE}üßπ Nettoyage...${NC}"
    
    echo -e "${YELLOW}üóëÔ∏è  Suppression des caches...${NC}"
    rm -rf .next
    rm -rf backend/dist
    rm -rf node_modules/.cache
    rm -rf backend/node_modules/.cache
    
    echo -e "${YELLOW}üóëÔ∏è  Suppression des d√©pendances...${NC}"
    rm -rf node_modules
    rm -rf backend/node_modules
    
    echo -e "${GREEN}‚úÖ Nettoyage termin√© !${NC}"
}

# T√©l√©chargement des mod√®les
models() {
    echo -e "${BLUE}ü§ñ T√©l√©chargement des mod√®les de traduction...${NC}"
    
    if [ -f "scripts/download-models.sh" ]; then
        chmod +x scripts/download-models.sh
        ./scripts/download-models.sh
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Script de t√©l√©chargement non trouv√©${NC}"
        echo "Cr√©ation du dossier models..."
        mkdir -p public/models
        echo -e "${BLUE}‚ÑπÔ∏è  Les mod√®les seront t√©l√©charg√©s automatiquement lors de la premi√®re utilisation${NC}"
    fi
}

# V√©rification de l'√©tat
check() {
    echo -e "${BLUE}üîç V√©rification de l'√©tat du projet...${NC}"
    echo ""
    
    # V√©rifier les d√©pendances
    echo -e "${YELLOW}üì¶ D√©pendances :${NC}"
    if [ -d "node_modules" ]; then
        echo -e "  ‚úÖ Frontend install√©"
    else
        echo -e "  ‚ùå Frontend non install√©"
    fi
    
    if [ -d "backend/node_modules" ]; then
        echo -e "  ‚úÖ Backend install√©"
    else
        echo -e "  ‚ùå Backend non install√©"
    fi
    
    # V√©rifier les ports
    echo -e "\n${YELLOW}üîå Ports :${NC}"
    if lsof -i :3000 &> /dev/null; then
        echo -e "  üü° Port 3000 occup√©"
    else
        echo -e "  ‚úÖ Port 3000 libre"
    fi
    
    if lsof -i :3002 &> /dev/null; then
        echo -e "  üü° Port 3002 occup√©"
    else
        echo -e "  ‚úÖ Port 3002 libre"
    fi
    
    # V√©rifier les mod√®les
    echo -e "\n${YELLOW}ü§ñ Mod√®les :${NC}"
    if [ -d "public/models" ] && [ "$(ls -A public/models)" ]; then
        echo -e "  ‚úÖ Dossier models non vide"
    else
        echo -e "  ‚ö†Ô∏è  Dossier models vide (normal en d√©veloppement)"
    fi
    
    echo ""
}

# Main
case "${1:-help}" in
    setup)
        setup
        ;;
    dev)
        dev
        ;;
    frontend)
        frontend
        ;;
    backend)
        backend
        ;;
    build)
        build
        ;;
    test)
        test
        ;;
    lint)
        lint
        ;;
    clean)
        clean
        ;;
    models)
        models
        ;;
    check)
        check
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Commande inconnue: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
