# Meeshy Unified Container - Optimisé pour la vitesse de build
# Tous les services dans un seul container avec cache optimal

# ===== STAGE 1: BASE IMAGE OPTIMISÉE =====
FROM python:3.12-slim AS base

# Arguments de build
ARG NODE_VERSION=22
ARG DEBIAN_FRONTEND=noninteractive
ARG PNPM_VERSION=latest

# Installation système en couches séparées pour meilleur cache
RUN apt-get update && apt-get install -y --no-install-recommends \
        curl \
        gnupg \
        ca-certificates \
    && curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - \
    && apt-get update && apt-get install -y --no-install-recommends \
        nodejs \
        build-essential \
        git \
        postgresql-client \
        postgresql \
        redis-server \
        supervisor \
        nginx \
        tini \
        postgresql-contrib \
    && npm install -g pnpm@${PNPM_VERSION} prisma tsx tsconfig-paths \
    && apt-get clean && rm -rf /var/lib/apt/lists/* \
    && npm cache clean --force

# Configuration PostgreSQL - préparer les répertoires
RUN mkdir -p /var/lib/postgresql/data && \
    chown postgres:postgres /var/lib/postgresql/data

# Créer l'utilisateur meeshy (séparé pour cache)
RUN groupadd -g 1001 meeshy && \
    useradd -u 1001 -g meeshy -m -s /bin/bash meeshy

# ===== STAGE 2: SHARED DEPENDENCIES OPTIMISÉ =====
FROM base AS shared-builder
WORKDIR /app/shared

# Copier SEULEMENT les fichiers de dépendances d'abord
COPY shared/package*.json shared/pnpm-lock.yaml ./

# Installation avec cache mount
RUN --mount=type=cache,target=/root/.pnpm \
    pnpm install --frozen-lockfile

# Copier le schema APRÈS l'installation
COPY shared/schema.prisma ./
COPY shared/proto ./
COPY shared/types ./

# Génération Prisma (cache séparé)
ENV PRISMA_CLIENT_OUTPUT_DIRECTORY=/app/shared/node_modules/.prisma/client
RUN --mount=type=cache,target=/tmp/prisma-cache \
    pnpm run generate

# ===== STAGE 3: TRANSLATOR OPTIMISÉ =====
FROM base AS translator-builder
WORKDIR /app/translator

# Variables d'environnement pour PyTorch et ML
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    CACHE_DIR=/app/cache \
    LOG_DIR=/app/logs \
    MODELS_PATH=/app/models \
    MODEL_DIR=/app/models \
    MODEL_CACHE_DIR=/app/models \
    TORCH_HOME=/app/models \
    HF_HOME=/app/models

# Installation Python avec cache mount et compilation parallèle
COPY translator/requirements.txt ./
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip --prefer-binary && \
    pip install --default-timeout=600 --prefer-binary -r requirements.txt

# Copier le code source après les dépendances
COPY translator/ ./
#COPY --from=shared-builder /app/shared ./shared

# Générer le client Prisma Python si nécessaire
RUN if [ -f shared/prisma/schema.prisma ]; then \
        prisma generate --schema=shared/prisma/schema.prisma; \
    elif [ -f shared/schema.prisma ]; then \
        prisma generate --schema=shared/schema.prisma; \
    fi

# ===== STAGE 4: GATEWAY OPTIMISÉ =====
FROM base AS gateway-builder
WORKDIR /app/gateway

# Copier les fichiers de dépendances uniquement
COPY gateway/package*.json gateway/pnpm-lock.yaml ./
COPY gateway/tsconfig.json ./

# Installation avec cache mount
RUN --mount=type=cache,target=/root/.pnpm \
    pnpm install --frozen-lockfile

# Copier le code source après les dépendances
COPY gateway/ ./
COPY --from=shared-builder /app/shared ./shared

# Générer le client Prisma
ENV PRISMA_CLIENT_OUTPUT_DIRECTORY=/app/shared/node_modules/.prisma/client
RUN npx prisma generate --schema=./shared/schema.prisma

# Installation production et nettoyage
RUN --mount=type=cache,target=/root/.pnpm \
    pnpm install --prod --ignore-scripts && \
    pnpm store prune

# ===== STAGE 5: FRONTEND OPTIMISÉ =====
FROM base AS frontend-builder
WORKDIR /app/frontend

# Copier les fichiers de configuration et dépendances d'abord
COPY frontend/package*.json frontend/pnpm-lock.yaml ./
COPY frontend/next.config.ts frontend/tailwind.config.ts frontend/tsconfig.json ./

# Installation avec cache mount
RUN --mount=type=cache,target=/root/.pnpm \
    pnpm install --frozen-lockfile

# Copier le code source après les dépendances
COPY frontend/ ./
COPY --from=shared-builder /app/shared ./shared

# Build avec cache Next.js
RUN --mount=type=cache,target=/app/frontend/.next/cache \
    pnpm run build

# ===== STAGE 6: FINAL IMAGE OPTIMISÉE =====
FROM python:3.12-slim AS final
WORKDIR /app

# Installation minimale des outils système
RUN apt-get update && apt-get install -y --no-install-recommends \
        supervisor \
        nginx \
        tini \
        curl \
        gnupg \
        ca-certificates \
        postgresql-client \
        redis-tools \
    && curl -fsSL https://deb.nodesource.com/setup_22.x | bash - \
    && apt-get update && apt-get install -y --no-install-recommends nodejs \
    && npm install -g pnpm tsx tsconfig-paths \
    && apt-get clean && rm -rf /var/lib/apt/lists/* \
    && npm cache clean --force

# Créer utilisateur et structure des répertoires
RUN groupadd -g 1001 meeshy && \
    useradd -u 1001 -g meeshy -m -s /bin/bash meeshy && \
    mkdir -p /app/translator && \
    mkdir -p /app/gateway && \
    mkdir -p /app/frontend && \
    mkdir -p /app/shared && \
    mkdir -p /app/scripts && \
    mkdir -p /app/logs && \
    mkdir -p /app/data && \
    mkdir -p /var/log/supervisor && \
    mkdir -p /etc/supervisor/conf.d && \
    chown -R meeshy:meeshy /app

# Copier les artefacts des builds optimisés
# Translator - code + dépendances Python
COPY --from=translator-builder --chown=meeshy:meeshy /app/translator /app/translator
COPY --from=translator-builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages

# Gateway - code + node_modules
COPY --from=gateway-builder --chown=meeshy:meeshy /app/gateway/node_modules /app/gateway/node_modules
COPY --from=gateway-builder --chown=meeshy:meeshy /app/gateway/src /app/gateway/src
COPY --from=gateway-builder --chown=meeshy:meeshy /app/gateway/*.js /app/gateway/
COPY --from=gateway-builder --chown=meeshy:meeshy /app/gateway/*.ts /app/gateway/
COPY --from=gateway-builder --chown=meeshy:meeshy /app/gateway/*.json /app/gateway/
COPY --from=gateway-builder --chown=meeshy:meeshy /app/gateway/shared /app/gateway/shared

# Frontend - build + node_modules nécessaires
COPY --from=frontend-builder --chown=meeshy:meeshy /app/frontend/.next /app/frontend/.next
COPY --from=frontend-builder --chown=meeshy:meeshy /app/frontend/node_modules /app/frontend/node_modules
COPY --from=frontend-builder --chown=meeshy:meeshy /app/frontend/public /app/frontend/public
COPY --from=frontend-builder --chown=meeshy:meeshy /app/frontend/*.json /app/frontend/
COPY --from=frontend-builder --chown=meeshy:meeshy /app/frontend/*.ts /app/frontend/
COPY --from=frontend-builder --chown=meeshy:meeshy /app/frontend/shared /app/frontend/shared

# Shared - artefacts générés
COPY --from=shared-builder --chown=meeshy:meeshy /app/shared /app/shared

# Copier les configurations statiques d'abord (cache optimisé)
COPY docker/supervisor/ /etc/supervisor/conf.d/
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf
COPY scripts/ /app/scripts/

# Rendre les scripts statiques exécutables
RUN chmod +x /app/scripts/*.sh

# Copier le script de démarrage en dernier (change souvent)
COPY docker-start-unified.sh /app/docker-start-unified.sh

# Rendre le script de démarrage exécutable
RUN chmod +x /app/docker-start-unified.sh

# Nettoyage final optimisé
RUN find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /app -name "*.pyc" -delete 2>/dev/null || true && \
    find /app -name "*.pyo" -delete 2>/dev/null || true && \
    find /app -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /app -name ".cache" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /app -name "*.log" -delete 2>/dev/null || true && \
    find /app -name "*.tmp" -delete 2>/dev/null || true && \
    find /app -name ".DS_Store" -delete 2>/dev/null || true

# Variables d'environnement par défaut
ENV NODE_ENV=production \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=3100 \
    GATEWAY_PORT=3000 \
    TRANSLATOR_PORT=8000 \
    POSTGRES_PORT=5432 \
    REDIS_PORT=6379 \
    DATABASE_URL=postgresql://meeshy:MeeshyP@ssword@localhost:5432/meeshy \
    REDIS_URL=redis://localhost:6379 \
    USE_EXTERNAL_DB=false \
    USE_EXTERNAL_REDIS=false

# Exposer les ports
EXPOSE 80 3000 8000 5432 6379

# Point d'entrée avec Tini
ENTRYPOINT ["/usr/bin/tini", "--"]

# Commande de démarrage
CMD ["/app/docker-start-unified.sh"]