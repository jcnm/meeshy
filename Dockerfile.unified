# Meeshy Unified Container - Build optimisé en une seule layer
# Tous les services dans un seul container avec build unifié

# ===== STAGE 1: BASE IMAGE =====
FROM python:3.12-slim AS base

# === MAINTAINER INFORMATION ===
LABEL maintainer="Meeshy Development Team <dev@meeshy.com>" \
      description="Meeshy Unified Container - All Services in One" \
      version="1.0.0" \
      org.opencontainers.image.source="https://github.com/jcnm/meeshy" \
      org.opencontainers.image.documentation="https://docs.meeshy.com" \
      org.opencontainers.image.vendor="Meeshy" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.title="Meeshy Unified" \
      org.opencontainers.image.description="Unified container with Frontend, Gateway, and Translator services"

# Arguments de build
ARG NODE_VERSION=22
ARG DEBIAN_FRONTEND=noninteractive
ARG PNPM_VERSION=latest

# Variables d'environnement pour l'application
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    CACHE_DIR=/app/cache \
    LOG_DIR=/app/logs \
    MODELS_PATH=/app/models \
    MODEL_DIR=/app/models \
    MODEL_CACHE_DIR=/app/models \
    TORCH_HOME=/app/models \
    HF_HOME=/app/models \
    # OPTIMISATION ML: Variables d'environnement pour PyTorch
    PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128 \
    OMP_NUM_THREADS=4 \
    MKL_NUM_THREADS=4 \
    NUMEXPR_NUM_THREADS=4 \
    TOKENIZERS_PARALLELISM=false

# Variables d'environnement configurables via build args (Translator)
ARG GRPC_HOST=0.0.0.0
ARG GRPC_PORT=50051
ARG HTTP_PORT=8000
ARG FASTAPI_PORT=8000
ARG ZMQ_PUSH_PORT=5555
ARG ZMQ_SUB_PORT=5558
ARG LOG_LEVEL=info
ARG DEBUG=false
ARG SUPPORTED_LANGUAGES="fr,en,es,de,pt,zh,ja,ar"
ARG DEFAULT_LANGUAGE=fr
ARG MAX_TEXT_LENGTH=5000
ARG BASIC_MODEL=google/t5-small
ARG MEDIUM_MODEL=facebook/nllb-200-distilled-600M
ARG PREMIUM_MODEL=facebook/nllb-200-distilled-1.3B
ARG DEVICE=cpu
ARG ML_BATCH_SIZE=4
ARG GPU_MEMORY_FRACTION=0.8
ARG TRANSLATION_TIMEOUT=60
ARG CONCURRENT_TRANSLATIONS=5
ARG WORKERS=2
ARG TRANSLATION_WORKERS=4
ARG PRISMA_POOL_SIZE=15
ARG CACHE_MAX_ENTRIES=10000
ARG AUTO_DETECT_LANGUAGE=true
ARG AUTO_CLEANUP_CORRUPTED_MODELS=true
ARG FORCE_MODEL_REDOWNLOAD=false
ARG TRANSLATION_CACHE_TTL=3600
ARG NORMAL_POOL_SIZE=10000
ARG ANY_POOL_SIZE=10000
ARG NORMAL_WORKERS=2
ARG ANY_WORKERS=1

# Variables d'environnement configurables via build args (Gateway)
ARG DATABASE_URL
ARG REDIS_URL
ARG JWT_SECRET
ARG JWT_EXPIRES_IN=24h
ARG FASTIFY_PORT=3000
ARG FASTIFY_HOST=0.0.0.0
ARG GATEWAY_PORT=3000
ARG WS_MAX_CONNECTIONS=100000
ARG WS_PING_INTERVAL=30000
ARG RATE_LIMIT_MAX=1000
ARG RATE_LIMIT_WINDOW=60000
ARG CORS_ORIGINS
ARG ALLOWED_ORIGINS
ARG FRONTEND_URL=http://localhost:3100
ARG BCRYPT_ROUNDS=12
ARG GRPC_TRANSLATION_HOST
ARG GRPC_TRANSLATION_PORT=50051
ARG TRANSLATOR_GRPC_URL
ARG ZMQ_TRANSLATOR_HOST
ARG ZMQ_TRANSLATOR_PUSH_PORT=5555
ARG ZMQ_TRANSLATOR_SUB_PORT=5558
ARG ZMQ_TRANSLATOR_PORT=5555
ARG ZMQ_TIMEOUT=30000

# Variables d'environnement configurables via build args (Frontend)
ARG NODE_ENV=production
ARG PORT=80
ARG NEXT_TELEMETRY_DISABLED=1
ARG NEXT_PUBLIC_API_URL=http://localhost:3000
ARG NEXT_PUBLIC_WS_URL=ws://localhost:3000
ARG NEXT_PUBLIC_BACKEND_URL=http://localhost:3000
ARG NEXT_PUBLIC_DISABLE_CLIENT_TRANSLATION=false
ARG NEXT_PUBLIC_USE_API_TRANSLATION_ONLY=true

# Configuration des variables d'environnement depuis les args
ENV GRPC_HOST=${GRPC_HOST} \
    GRPC_PORT=${GRPC_PORT} \
    HTTP_PORT=${HTTP_PORT} \
    FASTAPI_PORT=${FASTAPI_PORT} \
    ZMQ_PUSH_PORT=${ZMQ_PUSH_PORT} \
    ZMQ_SUB_PORT=${ZMQ_SUB_PORT} \
    LOG_LEVEL=${LOG_LEVEL} \
    DEBUG=${DEBUG} \
    SUPPORTED_LANGUAGES=${SUPPORTED_LANGUAGES} \
    DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE} \
    MAX_TEXT_LENGTH=${MAX_TEXT_LENGTH} \
    BASIC_MODEL=${BASIC_MODEL} \
    MEDIUM_MODEL=${MEDIUM_MODEL} \
    PREMIUM_MODEL=${PREMIUM_MODEL} \
    DEVICE=${DEVICE} \
    ML_BATCH_SIZE=${ML_BATCH_SIZE} \
    GPU_MEMORY_FRACTION=${GPU_MEMORY_FRACTION} \
    TRANSLATION_TIMEOUT=${TRANSLATION_TIMEOUT} \
    CONCURRENT_TRANSLATIONS=${CONCURRENT_TRANSLATIONS} \
    WORKERS=${WORKERS} \
    TRANSLATION_WORKERS=${TRANSLATION_WORKERS} \
    PRISMA_POOL_SIZE=${PRISMA_POOL_SIZE} \
    CACHE_MAX_ENTRIES=${CACHE_MAX_ENTRIES} \
    AUTO_DETECT_LANGUAGE=${AUTO_DETECT_LANGUAGE} \
    AUTO_CLEANUP_CORRUPTED_MODELS=${AUTO_CLEANUP_CORRUPTED_MODELS} \
    FORCE_MODEL_REDOWNLOAD=${FORCE_MODEL_REDOWNLOAD} \
    TRANSLATION_CACHE_TTL=${TRANSLATION_CACHE_TTL} \
    NORMAL_POOL_SIZE=${NORMAL_POOL_SIZE} \
    ANY_POOL_SIZE=${ANY_POOL_SIZE} \
    NORMAL_WORKERS=${NORMAL_WORKERS} \
    ANY_WORKERS=${ANY_WORKERS} \
    DATABASE_URL=${DATABASE_URL} \
    REDIS_URL=${REDIS_URL} \
    JWT_SECRET=${JWT_SECRET} \
    JWT_EXPIRES_IN=${JWT_EXPIRES_IN} \
    FASTIFY_PORT=${FASTIFY_PORT} \
    FASTIFY_HOST=${FASTIFY_HOST} \
    GATEWAY_PORT=${GATEWAY_PORT} \
    WS_MAX_CONNECTIONS=${WS_MAX_CONNECTIONS} \
    WS_PING_INTERVAL=${WS_PING_INTERVAL} \
    RATE_LIMIT_MAX=${RATE_LIMIT_MAX} \
    RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW} \
    CORS_ORIGINS=${CORS_ORIGINS} \
    ALLOWED_ORIGINS=${ALLOWED_ORIGINS} \
    FRONTEND_URL=${FRONTEND_URL} \
    BCRYPT_ROUNDS=${BCRYPT_ROUNDS} \
    GRPC_TRANSLATION_HOST=${GRPC_TRANSLATION_HOST} \
    GRPC_TRANSLATION_PORT=${GRPC_TRANSLATION_PORT} \
    TRANSLATOR_GRPC_URL=${TRANSLATOR_GRPC_URL} \
    ZMQ_TRANSLATOR_HOST=${ZMQ_TRANSLATOR_HOST} \
    ZMQ_TRANSLATOR_PUSH_PORT=${ZMQ_TRANSLATOR_PUSH_PORT} \
    ZMQ_TRANSLATOR_SUB_PORT=${ZMQ_TRANSLATOR_SUB_PORT} \
    ZMQ_TRANSLATOR_PORT=${ZMQ_TRANSLATOR_PORT} \
    ZMQ_TIMEOUT=${ZMQ_TIMEOUT} \
    PORT=${FASTIFY_PORT} \
    NODE_ENV=${NODE_ENV} \
    NEXT_TELEMETRY_DISABLED=${NEXT_TELEMETRY_DISABLED} \
    NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} \
    NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL} \
    NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL} \
    NEXT_PUBLIC_DISABLE_CLIENT_TRANSLATION=${NEXT_PUBLIC_DISABLE_CLIENT_TRANSLATION} \
    NEXT_PUBLIC_USE_API_TRANSLATION_ONLY=${NEXT_PUBLIC_USE_API_TRANSLATION_ONLY}

# OPTIMISATION: Installation en une seule layer avec cleanup et optimisations ML
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        wget \
        unzip \
        gnupg \
        tini \
        curl \
        git \
        # OPTIMISATION ML: Dépendances système pour PyTorch (sans libatlas-base-dev obsolète)
        libopenblas-dev \
        liblapack-dev \
        gfortran \
        pkg-config \
        # OPTIMISATION: Services de base de données complets (MongoDB)
        mongodb \
        mongodb-tools \
        mongodb-clients \
        redis-server \
        # OPTIMISATION: Outils système
        supervisor \
        nginx \
        procps \
        htop \
        vim \
        nano \
        sudo \
        # OPTIMISATION: Outils de base
        curl \
        wget \
        git \
        unzip \
        zip \
        redis-tools \
        supervisor \
        nginx \
        nodejs \
        npm \
    && curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - \
    && apt-get install -y --no-install-recommends nodejs \
    && npm install -g pnpm@${PNPM_VERSION} prisma@latest tsx tsconfig-paths \
    && groupadd -g 1001 meeshy \
    && useradd -u 1001 -g meeshy -m -s /bin/bash meeshy \
    && mkdir -p /app/{logs,cache,models,shared,generated,translator,gateway,frontend,scripts,data} \
    && mkdir -p /var/log/supervisor \
    && mkdir -p /etc/supervisor/conf.d \
    && chown -R meeshy:meeshy /app \
    # OPTIMISATION: Nettoyage pour réduire la taille de l'image
    && apt-get purge -y --auto-remove build-essential wget unzip gnupg curl git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && npm cache clean --force

# ===== STAGE 2: BUILD UNIFIÉ =====
FROM base AS builder
WORKDIR /app

# Variables d'environnement pour le build
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1

    # Copier tous les fichiers de dépendances d'abord
    COPY shared/package*.json ./shared/
    COPY gateway/package*.json ./gateway/
    COPY frontend/package*.json ./frontend/
COPY translator/requirements.txt ./translator/

# OPTIMISATION: Installation des dépendances Python avec optimisations ML
RUN pip install --upgrade pip --no-cache-dir \
    && pip install --no-cache-dir prisma python-dotenv \
    && pip install --no-cache-dir fastapi uvicorn pydantic-settings \
    && pip install --no-cache-dir grpcio grpcio-tools grpcio-reflection protobuf pyzmq \
    && pip install --no-cache-dir redis asyncpg aiosqlite \
    && pip install --no-cache-dir langdetect nltk textstat \
    && pip install --no-cache-dir psutil numpy pandas aiohttp python-multipart aiofiles \
    && pip install --no-cache-dir loguru prometheus-client \
    && pip install --no-cache-dir torch --index-url https://download.pytorch.org/whl/cpu \
    && pip install --no-cache-dir transformers tokenizers accelerate datasets sentencepiece \
    && pip install --no-cache-dir pytest pytest-asyncio pytest-cov httpx \
    && rm -rf ~/.cache/pip

# Installation des dépendances Node.js (Shared, Gateway, Frontend)
RUN cd shared && pnpm install && \
    cd ../gateway && pnpm install && \
    cd ../frontend && pnpm install && \
    echo "✅ Tous les packages de développement installés"

# Copier tout le code source
COPY shared/ ./shared/
COPY gateway/ ./gateway/
COPY frontend/ ./frontend/
COPY translator/ ./translator/

# Génération Prisma et distribution aux autres services 
RUN cd shared \
    PRISMA_CLIENT_OUTPUT_DIRECTORY=./prisma prisma generate --schema=./schema.prisma && \
    echo "✅ Client Prisma généré avec succès"

# Build Gateway (préserver les packages de développement)
RUN cd gateway && \
    pnpm install && \
    PRISMA_CLIENT_OUTPUT_DIRECTORY=./shared/prisma prisma generate --schema=./shared/schema.prisma && \
    echo "✅ Build Gateway terminé avec packages de développement préservés"

# Build Frontend (préserver les packages de développement)
RUN cd frontend && \
    # Définir les variables d'environnement Next.js
    export NEXT_PUBLIC_API_URL=http://localhost/api && \
    export NEXT_PUBLIC_WS_URL=ws://localhost/ws && \
    export NEXT_PUBLIC_BACKEND_URL=http://localhost/api && \
    export NEXT_PUBLIC_USE_CLIENT_TRANSLATION=false && \
    export NEXT_PUBLIC_USE_API_TRANSLATION_ONLY=true && \
    export NEXT_TELEMETRY_DISABLED=1 && \
    export HOSTNAME=0.0.0.0 && \
    # Installer et construire (préserver tous les packages)
    pnpm install && \
    pnpm run build && \
    ls -la .next/ && ls -la .next/static/ && echo "✅ Static files verified" && \
    ls -la public/ && echo "✅ Public assets préservés" && \
    ls -la node_modules/ && echo "✅ Packages de développement préservés" && \
    echo "✅ Build Frontend terminé avec packages de développement"

# OPTIMISATION: Génération du client Prisma pendant le build (après installation des dépendances)
RUN echo "🔧 Génération du client Prisma..." \
    && mkdir -p /app/generated \
    && cd /app/generated \
    && PRISMA_CLIENT_OUTPUT_DIRECTORY=./prisma prisma generate --schema=/app/shared/schema.prisma \
    && chown -R meeshy:meeshy /app/generated \
    && echo "✅ Client Prisma généré avec succès"

# OPTIMISATION: Configuration des permissions et optimisation finale
RUN chown -R meeshy:meeshy /app \
    && python3 -m compileall /app/translator/src \
    && find /app -name '*.pyc' -delete

# ===== STAGE 3: IMAGE FINALE =====
FROM python:3.12-slim AS final
WORKDIR /app

# Installation minimale des outils système
RUN apt-get update && apt-get install -y --no-install-recommends \
        supervisor \
        nginx \
        tini \
        curl \
        gnupg \
        ca-certificates \
        mongodb \
        mongodb-tools \
        mongodb-clients \
        redis-server \
        redis-tools \
        nodejs \
        npm \
        sudo \
    && npm install -g pnpm tsx \
    && apt-get clean && rm -rf /var/lib/apt/lists/* \
    && npm cache clean --force

# Créer utilisateur et structure des répertoires
RUN groupadd -g 1001 meeshy && \
    useradd -u 1001 -g meeshy -m -s /bin/bash meeshy && \
    mkdir -p /app/{translator,gateway,frontend,scripts,logs,data,models,shared,generated,cache} && \
    mkdir -p /var/log/supervisor && \
    mkdir -p /etc/supervisor/conf.d && \
    chown -R meeshy:meeshy /app

# Copier les artefacts du build unifié (shared déjà inclus dans chaque service)
COPY --from=builder --chown=meeshy:meeshy /app/translator /app/translator
COPY --from=builder --chown=meeshy:meeshy /app/gateway /app/gateway
COPY --from=builder --chown=meeshy:meeshy /app/frontend /app/frontend
COPY --from=builder --chown=meeshy:meeshy /app/shared /app/shared
COPY --from=builder --chown=meeshy:meeshy /app/generated /app/generated
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages

# Vérifier que les répertoires frontend sont préservés
RUN ls -la /app/frontend/.next/ && ls -la /app/frontend/.next/static/ && echo "✅ Répertoire .next préservé avec succès" && \
    ls -la /app/frontend/public/ && echo "✅ Répertoire public préservé avec succès"

# Copier les configurations
COPY docker/supervisor/ /etc/supervisor/conf.d/
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf
COPY scripts/ /app/scripts/
COPY docker/scripts/docker-start-unified.sh /app/docker-start-unified.sh

# Rendre les scripts exécutables
RUN chmod +x /app/scripts/*.sh && \
    chmod +x /app/docker-start-unified.sh

# Nettoyage final minimal
RUN find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /app -name "*.pyc" -delete 2>/dev/null || true && \
    find /app -name "*.pyo" -delete 2>/dev/null || true && \
    find /app -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /app -name "*.log" -delete 2>/dev/null || true && \
    find /app -name "*.tmp" -delete 2>/dev/null || true && \
    find /app -name ".DS_Store" -delete 2>/dev/null || true

# Variables d'environnement par défaut
ENV NODE_ENV=production \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    PORT=3100 \
    GATEWAY_PORT=3000 \
    TRANSLATOR_PORT=8000 \
    MONGODB_PORT=27017 \
    REDIS_PORT=6379 \
    DATABASE_URL=mongodb://meeshy:MeeshyP@ssword@localhost:27017/meeshy \
    REDIS_URL=redis://localhost:6379 \
    USE_EXTERNAL_DB=false \
    USE_EXTERNAL_REDIS=false \
    NEXT_TELEMETRY_DISABLED=1 \
    HOSTNAME=0.0.0.0

# OPTIMISATION: Utilisateur non-root pour la sécurité
USER meeshy

# Exposer les ports
EXPOSE 80 3000 8000 27017 6379

# === HEALTH CHECK ===
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/api/health || curl -f http://localhost/health || exit 1

# OPTIMISATION: Point d'entrée avec gestion d'erreurs
ENTRYPOINT ["/usr/bin/tini", "--"]

# Commande de démarrage
CMD ["/app/docker-start-unified.sh"]