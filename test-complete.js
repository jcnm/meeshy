#!/usr/bin/env node

/**
 * Script de test complet pour Meeshy
 * Ex√©cute tous les tests de communication ZMQ
 */

const { testTranslationAPI, testInfoEndpoint, testHealthEndpoint } = require('./test-api-rest');
const { testWebSocketCommunication } = require('./test-websocket');
const config = require('./test-config');

async function runCompleteTests() {
    console.log('üöÄ Tests Complets Meeshy - Communication ZMQ');
    console.log('=============================================\n');

    const results = {
        info: false,
        health: false,
        api: false,
        websocket: false
    };

    try {
        // Test 1: Endpoint d'information
        console.log('üìä Test 1/4: Endpoint d\'information');
        console.log('-----------------------------------');
        await testInfoEndpoint();
        results.info = true;
        console.log('‚úÖ Test d\'information: R√âUSSI\n');

        // Test 2: Endpoint de sant√©
        console.log('üè• Test 2/4: Endpoint de sant√©');
        console.log('-----------------------------');
        await testHealthEndpoint();
        results.health = true;
        console.log('‚úÖ Test de sant√©: R√âUSSI\n');

        // Test 3: API REST de traduction
        console.log('üß™ Test 3/4: API REST de traduction');
        console.log('-----------------------------------');
        await testTranslationAPI();
        results.api = true;
        console.log('‚úÖ Test API REST: R√âUSSI\n');

        // Test 4: Communication WebSocket
        console.log('üîå Test 4/4: Communication WebSocket');
        console.log('------------------------------------');
        await testWebSocketCommunication();
        results.websocket = true;
        console.log('‚úÖ Test WebSocket: R√âUSSI\n');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error.message);
    }

    // R√©sum√© des r√©sultats
    console.log('üìã R√©sum√© des Tests');
    console.log('===================');
    console.log(`üìä Endpoint d'information: ${results.info ? '‚úÖ R√âUSSI' : '‚ùå √âCHEC'}`);
    console.log(`üè• Endpoint de sant√©: ${results.health ? '‚úÖ R√âUSSI' : '‚ùå √âCHEC'}`);
    console.log(`üß™ API REST de traduction: ${results.api ? '‚úÖ R√âUSSI' : '‚ùå √âCHEC'}`);
    console.log(`üîå Communication WebSocket: ${results.websocket ? '‚úÖ R√âUSSI' : '‚ùå √âCHEC'}`);

    const successCount = Object.values(results).filter(Boolean).length;
    const totalTests = Object.keys(results).length;

    console.log(`\nüìà R√©sultat Global: ${successCount}/${totalTests} tests r√©ussis`);

    if (successCount === totalTests) {
        console.log('üéâ Tous les tests sont pass√©s ! La communication ZMQ fonctionne parfaitement.');
        console.log('\n‚úÖ Fonctionnalit√©s valid√©es:');
        console.log('   - Communication ZMQ Gateway ‚Üî Translator');
        console.log('   - Traduction ML en temps r√©el');
        console.log('   - API REST fonctionnelle');
        console.log('   - WebSocket avec traduction automatique');
        console.log('   - Confiance √©lev√©e (>0.9)');
        console.log('   - Mod√®le ML (pas de fallback)');
    } else {
        console.log('‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.');
        process.exit(1);
    }
}

// Fonction pour tester la connectivit√© r√©seau
async function testNetworkConnectivity() {
    console.log('üåê Test de connectivit√© r√©seau...\n');
    
    const https = require('https');
    
    try {
        const response = await new Promise((resolve, reject) => {
            const req = https.request(`${config.gateway.url}/health`, {
                method: 'GET',
                rejectUnauthorized: config.https.rejectUnauthorized,
                timeout: 5000
            }, (res) => {
                resolve(res.statusCode);
            });
            
            req.on('error', reject);
            req.on('timeout', () => reject(new Error('Timeout')));
            req.end();
        });

        if (response === 200) {
            console.log('‚úÖ Connectivit√© r√©seau: OK');
            return true;
        } else {
            console.log(`‚ùå Connectivit√© r√©seau: Erreur HTTP ${response}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Connectivit√© r√©seau: ${error.message}`);
        return false;
    }
}

// Fonction principale
async function main() {
    console.log('üîç V√©rification pr√©liminaire...\n');
    
    const networkOk = await testNetworkConnectivity();
    if (!networkOk) {
        console.log('‚ùå Impossible de se connecter au serveur. V√©rifiez:');
        console.log('   - La connectivit√© r√©seau');
        console.log('   - L\'√©tat des services Docker');
        console.log('   - La configuration des domaines');
        process.exit(1);
    }

    console.log('\nüöÄ Lancement des tests complets...\n');
    await runCompleteTests();
}

// Ex√©cution
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { runCompleteTests, testNetworkConnectivity };
