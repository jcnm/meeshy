name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.12'
  DOCKER_BUILDKIT: 1

jobs:
  # ===== CODE QUALITY =====
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Check TypeScript types
        run: npm run type-check

  # ===== UNIT TESTS =====
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, gateway]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.service }} unit tests
        run: npm run test:${{ matrix.service }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # ===== PYTHON TESTS =====
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          cd translator
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Python tests
        run: |
          cd translator
          pytest --cov=src --cov-report=xml --cov-report=html

      - name: Upload Python coverage
        uses: codecov/codecov-action@v3
        with:
          file: translator/coverage.xml
          flags: translator
          name: translator-coverage

  # ===== INTEGRATION TESTS =====
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: meeshy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd translator && pip install -r requirements.txt

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/meeshy_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  # ===== DOCKER BUILD =====
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, python-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            isopen/meeshy-frontend:latest
            isopen/meeshy-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./gateway
          push: true
          tags: |
            isopen/meeshy-gateway:latest
            isopen/meeshy-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Translator
        uses: docker/build-push-action@v5
        with:
          context: ./translator
          push: true
          tags: |
            isopen/meeshy-translator:latest
            isopen/meeshy-translator:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Unified
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.unified
          push: true
          tags: |
            isopen/meeshy:latest
            isopen/meeshy:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== SECURITY SCAN =====
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Python security check
        run: |
          cd translator
          pip install safety
          safety check

  # ===== PERFORMANCE TESTS =====
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Run performance tests
        run: |
          npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # ===== E2E TESTS =====
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Run E2E tests
        run: |
          npm run test:e2e

      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: e2e-results.json

  # ===== DEPLOYMENT =====
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, performance-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add deployment steps here

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from CI/CD pipeline
            
            Changes:
            - ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # ===== NOTIFICATIONS =====
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ CI/CD pipeline completed successfully!"
          # Add notification logic here

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD pipeline failed!"
          # Add notification logic here
