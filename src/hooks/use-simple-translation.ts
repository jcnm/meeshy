'use client';

import { useState, useCallback, useEffect } from 'react';
import { getCachedTranslation, setCachedTranslation } from '@/utils/translation';
import { translationModels, MODELS_CONFIG } from '@/lib/translation-models';

interface UseSimpleTranslationReturn {
  translate: (text: string, sourceLang: string, targetLang: string) => Promise<string>;
  translateWithModel: (text: string, sourceLang: string, targetLang: string, model: string) => Promise<string>;
  isTranslating: boolean;
  error: string | null;
  modelsStatus: Record<string, { loaded: boolean; loading: boolean }>;
  preloadModels: () => Promise<void>;
}

export const useSimpleTranslation = (): UseSimpleTranslationReturn => {
  const [isTranslating, setIsTranslating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [modelsStatus, setModelsStatus] = useState<Record<string, { loaded: boolean; loading: boolean }>>({});

  // Mettre √† jour le statut des mod√®les
  const updateModelsStatus = useCallback(() => {
    setModelsStatus(translationModels.getModelsStatus());
  }, []);

  useEffect(() => {
    updateModelsStatus();
    // Mettre √† jour le statut p√©riodiquement
    const interval = setInterval(updateModelsStatus, 2000);
    return () => clearInterval(interval);
  }, [updateModelsStatus]);

  const preloadModels = useCallback(async () => {
    try {
      setError(null);
      console.log('üöÄ Pr√©chargement des mod√®les de traduction...');
      
      // Charger les mod√®les en parall√®le
      const loadPromises = Object.keys(MODELS_CONFIG).map(async (modelName) => {
        try {
          await translationModels.loadModel(modelName);
          console.log(`‚úÖ Mod√®le ${modelName} pr√©charg√©`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è √âchec du pr√©chargement du mod√®le ${modelName}:`, error);
        }
      });

      await Promise.allSettled(loadPromises);
      updateModelsStatus();
      console.log('üéâ Pr√©chargement des mod√®les termin√©');
    } catch (error) {
      console.error('‚ùå Erreur lors du pr√©chargement des mod√®les:', error);
      setError('Erreur lors du pr√©chargement des mod√®les');
    }
  }, [updateModelsStatus]);

  const translateWithModel = useCallback(async (
    text: string,
    sourceLang: string,
    targetLang: string,
    model: string
  ): Promise<string> => {
    // V√©rifier si m√™me langue
    if (sourceLang === targetLang) {
      return text;
    }

    setIsTranslating(true);
    setError(null);

    try {
      // V√©rifier le cache d'abord avec une cl√© incluant le mod√®le
      const cacheKey = `${text}-${sourceLang}-${targetLang}-${model}`;
      const cached = getCachedTranslation(cacheKey, sourceLang, targetLang);
      if (cached) {
        console.log(`üì¶ Traduction trouv√©e en cache pour le mod√®le ${model}`);
        return cached;
      }

      console.log(`üîÑ Traduction en cours avec ${model}: "${text}" (${sourceLang} ‚Üí ${targetLang})`);
      
      // Utiliser le service de traduction avec un mod√®le sp√©cifique
      const translated = await translationModels.translateWithModel(text, sourceLang, targetLang, model);
      
      // Sauvegarder en cache avec la cl√© sp√©cifique au mod√®le
      setCachedTranslation(cacheKey, sourceLang, targetLang, translated);
      
      console.log(`‚úÖ Traduction termin√©e avec ${model}: "${translated}"`);
      return translated;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erreur de traduction inconnue';
      console.error(`‚ùå Erreur de traduction avec ${model}:`, errorMessage);
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsTranslating(false);
      updateModelsStatus();
    }
  }, [updateModelsStatus]);

  const translate = useCallback(async (
    text: string,
    sourceLang: string,
    targetLang: string
  ): Promise<string> => {
    // V√©rifier si m√™me langue
    if (sourceLang === targetLang) {
      return text;
    }

    setIsTranslating(true);
    setError(null);

    try {
      // V√©rifier le cache d'abord
      const cached = getCachedTranslation(text, sourceLang, targetLang);
      if (cached) {
        console.log('üì¶ Traduction trouv√©e en cache');
        return cached;
      }

      console.log(`üîÑ Traduction en cours: "${text}" (${sourceLang} ‚Üí ${targetLang})`);
      
      // Utiliser le service de traduction avec TensorFlow.js
      const translated = await translationModels.translate(text, sourceLang, targetLang);
      
      // Sauvegarder en cache
      setCachedTranslation(text, sourceLang, targetLang, translated);
      
      console.log(`‚úÖ Traduction termin√©e: "${translated}"`);
      return translated;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erreur de traduction inconnue';
      console.error('‚ùå Erreur de traduction:', errorMessage);
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsTranslating(false);
      updateModelsStatus();
    }
  }, [updateModelsStatus]);

  return {
    translate,
    translateWithModel,
    isTranslating,
    error,
    modelsStatus,
    preloadModels
  };
};
