/**
 * Test de simulation rapide du syst√®me de traduction
 */

import { testModelService } from '@/lib/test-model-service';
import { translateMessage } from '@/utils/translation';

// Test automatique du syst√®me
async function runQuickTest() {
  console.log('üöÄ D√©but du test automatique');

  try {
    // Test 1: V√©rifier qu'aucun mod√®le n'est t√©l√©charg√© au d√©but
    console.log('\nüìã Test 1: √âtat initial du cache');
    const initialMt5 = await testModelService.isModelCached('mt5', 'small');
    const initialNllb = await testModelService.isModelCached('nllb', 'small');
    console.log(`MT5-small en cache: ${initialMt5 ? '‚úÖ' : '‚ùå'}`);
    console.log(`NLLB-small en cache: ${initialNllb ? '‚úÖ' : '‚ùå'}`);

    // Test 2: Simuler le t√©l√©chargement d'un mod√®le
    console.log('\nüìã Test 2: T√©l√©chargement simul√©');
    console.log('üîÑ T√©l√©chargement MT5-small...');
    
    const downloadResult = await testModelService.downloadAndCacheModel(
      'mt5',
      'small',
      'https://fake-url.com/model',
      'https://fake-url.com/tokenizer',
      (progress) => {
        if (progress % 25 === 0) {
          console.log(`  Progression: ${progress}%`);
        }
      }
    );
    
    console.log(`T√©l√©chargement MT5-small: ${downloadResult ? '‚úÖ' : '‚ùå'}`);

    // Test 3: V√©rifier que le mod√®le est maintenant en cache
    console.log('\nüìã Test 3: V√©rification du cache post-t√©l√©chargement');
    const postDownloadMt5 = await testModelService.isModelCached('mt5', 'small');
    console.log(`MT5-small en cache apr√®s t√©l√©chargement: ${postDownloadMt5 ? '‚úÖ' : '‚ùå'}`);

    // Test 4: Test de traduction
    console.log('\nüìã Test 4: Test de traduction');
    console.log('üîÑ Traduction: "Hello" (en) ‚Üí fran√ßais...');
    
    const translationResult = await translateMessage('Hello', 'en', 'fr');
    console.log(`R√©sultat: "${translationResult}"`);
    
    if (translationResult && translationResult !== 'Hello') {
      console.log('‚úÖ Traduction r√©ussie');
    } else {
      console.log('‚ùå Traduction √©chou√©e');
    }

    // Test 5: Statistiques
    console.log('\nüìã Test 5: Statistiques du cache');
    const stats = await testModelService.getStats();
    console.log(`Mod√®les en cache: ${stats.totalModels}`);
    console.log(`Taille totale: ${(stats.totalSize / 1024 / 1024).toFixed(1)} MB`);

    console.log('\nüéâ Test automatique termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur durant le test:', error);
  }
}

// Test de d√©tection de langue
function testLanguageDetection() {
  console.log('\nüìã Test de d√©tection de langue');
  
  // Cette fonction n√©cessite d'√™tre import√©e depuis le module de traduction
  // Pour l'instant, on simule
  const testCases = [
    { text: 'Hello how are you?', expected: 'en' },
    { text: 'Bonjour comment allez-vous?', expected: 'fr' },
    { text: 'Hola ¬øc√≥mo est√°s?', expected: 'es' },
  ];

  testCases.forEach(({ text, expected }) => {
    // Simulation de d√©tection simple
    const detected = text.includes('Hello') ? 'en' : 
                    text.includes('Bonjour') ? 'fr' : 
                    text.includes('Hola') ? 'es' : 'unknown';
    
    const status = detected === expected ? '‚úÖ' : '‚ùå';
    console.log(`${status} "${text}" ‚Üí ${detected} (attendu: ${expected})`);
  });
}

// Export pour utilisation
export { runQuickTest, testLanguageDetection };
