#!/bin/bash

# Meeshy - Script de d√©ploiement Docker
# Ex√©cute tous les services via Docker Compose

set -e

echo "üê≥ D√©marrage de Meeshy avec Docker..."

# V√©rification des pr√©requis Docker
check_docker() {
    echo "üîç V√©rification de Docker..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©. Veuillez installer Docker depuis docker.com"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas install√©. Veuillez installer Docker Compose"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        echo "‚ùå Docker n'est pas d√©marr√©. Veuillez d√©marrer Docker Desktop"
        exit 1
    fi
    
    echo "‚úÖ Docker est pr√™t"
}

# Configuration des variables d'environnement
setup_env() {
    echo "‚öôÔ∏è  Configuration des variables d'environnement..."
    
    # Cr√©er le fichier .env s'il n'existe pas
    if [ ! -f .env ]; then
        echo "üìù Cr√©ation du fichier .env..."
        cat > .env << EOF
# Base de donn√©es PostgreSQL
POSTGRES_DB=meeshy
POSTGRES_USER=meeshy
POSTGRES_PASSWORD=MeeshyP@ssword
POSTGRES_PORT=5432

# Redis Cache
REDIS_PORT=6379

# Services
TRANSLATOR_HTTP_PORT=8000
TRANSLATOR_GRPC_PORT=50051
GATEWAY_PORT=3000
FRONTEND_PORT=3100

# Nginx
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443

# S√©curit√©
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# Langues support√©es
SUPPORTED_LANGUAGES=fr,en,es,de,pt,zh,ja,ar
DEFAULT_LANGUAGE=fr
EOF
        echo "‚úÖ Fichier .env cr√©√©"
    else
        echo "‚úÖ Fichier .env existe d√©j√†"
    fi
}

# Construction des images Docker
build_images() {
    echo "üî® Construction des images Docker..."
    
    # Nettoyage des images existantes (optionnel)
    if [ "$1" = "--clean" ]; then
        echo "üßπ Nettoyage des images existantes..."
        docker-compose down -v --remove-orphans
        docker system prune -f
    fi
    
    # Construction des images
    echo "   üì¶ Construction des images (cela peut prendre plusieurs minutes)..."
    docker-compose build --no-cache --parallel
    
    echo "‚úÖ Images construites avec succ√®s"
}

# D√©marrage des services
start_services() {
    echo "üöÄ D√©marrage des services Docker..."
    
    # D√©marrage en arri√®re-plan
    docker-compose up -d
    
    echo "‚úÖ Services d√©marr√©s!"
    echo ""
    echo "üîç V√©rification de l'√©tat des services..."
    docker-compose ps
    echo ""
    echo "üåê Acc√®s aux services:"
    echo "   ‚Ä¢ Application compl√®te: http://localhost (via Nginx)"
    echo "   ‚Ä¢ Frontend direct: http://localhost:3100"
    echo "   ‚Ä¢ API Gateway: http://localhost:3000"
    echo "   ‚Ä¢ Translator API: http://localhost:8000"
    echo "   ‚Ä¢ Translator gRPC: localhost:50051"
    echo "   ‚Ä¢ Base de donn√©es: localhost:5432"
    echo "   ‚Ä¢ Redis: localhost:6379"
    echo ""
    echo "üìã Commandes utiles:"
    echo "   ‚Ä¢ Voir les logs: docker-compose logs -f"
    echo "   ‚Ä¢ Arr√™ter: docker-compose down"
    echo "   ‚Ä¢ Red√©marrer un service: docker-compose restart <service>"
}

# V√©rification de la sant√© des services
health_check() {
    echo "üè• V√©rification de la sant√© des services..."
    
    max_attempts=30
    attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        attempt=$((attempt + 1))
        echo "   Tentative $attempt/$max_attempts..."
        
        # V√©rifier chaque service
        services_healthy=true
        
        # PostgreSQL
        if ! docker-compose exec -T postgres pg_isready -U meeshy -d meeshy &>/dev/null; then
            services_healthy=false
        fi
        
        # Redis
        if ! docker-compose exec -T redis redis-cli ping &>/dev/null; then
            services_healthy=false
        fi
        
        # Translator
        if ! curl -s http://localhost:8000/health &>/dev/null; then
            services_healthy=false
        fi
        
        # Gateway (si disponible)
        if ! curl -s http://localhost:3000/health &>/dev/null; then
            services_healthy=false
        fi
        
        # Frontend
        if ! curl -s http://localhost:3100 &>/dev/null; then
            services_healthy=false
        fi
        
        if [ "$services_healthy" = true ]; then
            echo "‚úÖ Tous les services sont op√©rationnels!"
            return 0
        fi
        
        sleep 5
    done
    
    echo "‚ö†Ô∏è  Certains services ne r√©pondent pas encore. V√©rifiez les logs:"
    echo "   docker-compose logs"
}

# Affichage des logs en temps r√©el
show_logs() {
    echo "üìù Affichage des logs en temps r√©el (Ctrl+C pour arr√™ter)..."
    docker-compose logs -f
}

# Arr√™t propre des services
stop_services() {
    echo "üõë Arr√™t des services Docker..."
    docker-compose down
    echo "‚úÖ Services arr√™t√©s"
}

# Menu d'aide
show_help() {
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Options:"
    echo "  start          D√©marrer tous les services (d√©faut)"
    echo "  start --clean  D√©marrer avec reconstruction compl√®te des images"
    echo "  stop           Arr√™ter tous les services"
    echo "  restart        Red√©marrer tous les services"
    echo "  logs           Afficher les logs en temps r√©el"
    echo "  status         Afficher l'√©tat des services"
    echo "  health         V√©rifier la sant√© des services"
    echo "  help           Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 start           # D√©marrage normal"
    echo "  $0 start --clean   # D√©marrage avec reconstruction"
    echo "  $0 logs            # Voir les logs"
}

# Fonction principale
main() {
    case "${1:-start}" in
        "start")
            check_docker
            setup_env
            build_images "$2"
            start_services
            health_check
            echo ""
            echo "üéâ Meeshy est pr√™t! Utilisez '$0 logs' pour voir les logs en temps r√©el."
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            stop_services
            main start
            ;;
        "logs")
            show_logs
            ;;
        "status")
            docker-compose ps
            ;;
        "health")
            health_check
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            echo "‚ùå Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
}

# Point d'entr√©e
main "$@"
