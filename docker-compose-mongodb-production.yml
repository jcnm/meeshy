# Meeshy - Production Docker Compose with MongoDB for DigitalOcean
# Uses pre-built Docker images for faster deployment

version: '3.8'

services:
  # ===== MONGODB DATABASE =====
  mongodb:
    image: mongo:8.0
    container_name: meeshy-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-meeshy}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-MeeshyPassword123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-meeshy}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./shared/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "${MONGO_PORT:-27017}:27017"
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - meeshy-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: meeshy-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-MeeshyRedis123}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-MeeshyRedis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meeshy-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ===== TRANSLATOR SERVICE (Pre-built image) =====
  translator:
    image: ${TRANSLATOR_IMAGE:-isopen/meeshy-translator:mongodb}
    container_name: meeshy-translator
    restart: unless-stopped
    environment:
      # Database connection
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-MeeshyRedis123}@redis:6379
      
      # Service configuration
      TRANSLATOR_GRPC_PORT: 50051
      TRANSLATOR_HTTP_PORT: 8000
      TRANSLATOR_ZMQ_PULL_PORT: 5555
      TRANSLATOR_ZMQ_PUB_PORT: 5558
      
      # ML Models configuration
      BASIC_MODEL: ${BASIC_MODEL:-Helsinki-NLP/opus-mt-en-fr}
      MEDIUM_MODEL: ${MEDIUM_MODEL:-Helsinki-NLP/opus-mt-mul-en}
      PREMIUM_MODEL: ${PREMIUM_MODEL:-facebook/nllb-200-distilled-600M}
      
      # Performance optimization
      ML_BATCH_SIZE: ${ML_BATCH_SIZE:-4}
      SUPPORTED_LANGUAGES: ${SUPPORTED_LANGUAGES:-"fr,en,es,de,pt,zh,ja,ar"}
      DEFAULT_LANGUAGE: ${DEFAULT_LANGUAGE:-fr}
      DEVICE: ${DEVICE:-cpu}
      MODEL_TYPE: ${MODEL_TYPE:-all}
      PYTHONUNBUFFERED: 1
      
      # Paths configuration
      MODELS_PATH: /workspace/models
      TORCH_HOME: /workspace/models
      HF_HOME: /workspace/models
      MODEL_CACHE_DIR: /workspace/models
      
      # Performance tuning
      GPU_MEMORY_FRACTION: ${GPU_MEMORY_FRACTION:-0.7}
      TRANSLATION_TIMEOUT: ${TRANSLATION_TIMEOUT:-60}
      MAX_TEXT_LENGTH: ${MAX_TEXT_LENGTH:-1000}
      CONCURRENT_TRANSLATIONS: ${CONCURRENT_TRANSLATIONS:-5}
      TRANSLATION_WORKERS: ${TRANSLATION_WORKERS:-8}
      
      # Worker configuration with dynamic scaling
      NORMAL_WORKERS_DEFAULT: ${NORMAL_WORKERS_DEFAULT:-10}
      ANY_WORKERS_DEFAULT: ${ANY_WORKERS_DEFAULT:-4}
      NORMAL_WORKERS_MIN: ${NORMAL_WORKERS_MIN:-2}
      ANY_WORKERS_MIN: ${ANY_WORKERS_MIN:-2}
      NORMAL_WORKERS_MAX: ${NORMAL_WORKERS_MAX:-40}
      ANY_WORKERS_MAX: ${ANY_WORKERS_MAX:-20}
      NORMAL_WORKERS_SCALING_MAX: ${NORMAL_WORKERS_SCALING_MAX:-40}
      ANY_WORKERS_SCALING_MAX: ${ANY_WORKERS_SCALING_MAX:-20}
      
      # Memory optimization
      PYTORCH_CUDA_ALLOC_CONF: "max_split_size_mb:128"
      OMP_NUM_THREADS: 4
      MKL_NUM_THREADS: 4
      NUMEXPR_NUM_THREADS: 4
      
      # Model download configuration
      MODEL_DOWNLOAD_MAX_RETRIES: ${MODEL_DOWNLOAD_MAX_RETRIES:-5}
      MODEL_DOWNLOAD_TIMEOUT: ${MODEL_DOWNLOAD_TIMEOUT:-600}
      MODEL_DOWNLOAD_CONSECUTIVE_TIMEOUTS: ${MODEL_DOWNLOAD_CONSECUTIVE_TIMEOUTS:-5}
      
      # Network optimization for Docker
      HF_HUB_ENABLE_HF_TRANSFER: 1
      HF_HUB_DOWNLOAD_TIMEOUT: 600
      HF_HUB_DOWNLOAD_RETRY_DELAY: 5
      HF_HUB_DOWNLOAD_MAX_RETRIES: 5
      REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt
      CURL_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt
      SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
      SSL_CERT_DIR: /etc/ssl/certs
      
      # Prisma cache configuration
      PRISMA_CACHE_DIR: /workspace/generated/.cache
    
    ports:
      - "${TRANSLATOR_HTTP_PORT:-8000}:8000"
      - "${TRANSLATOR_GRPC_PORT:-50051}:50051"
      - "${TRANSLATOR_ZMQ_PULL_PORT:-5555}:5555"
      - "${TRANSLATOR_ZMQ_PUB_PORT:-5558}:5558"
    
    volumes:
      - translator_cache:/workspace/cache
      - translator_models:/workspace/models
      - translator_generated:/workspace/generated
    
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10)"]
      interval: 60s
      timeout: 50s
      retries: 5
      start_period: 180s
    
    networks:
      - meeshy-network
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.8'
        reservations:
          memory: 2G
          cpus: '1.0'

  # ===== GATEWAY SERVICE (Pre-built image) =====
  gateway:
    image: ${GATEWAY_IMAGE:-isopen/meeshy-gateway:mongodb}
    container_name: meeshy-gateway
    restart: unless-stopped
    
    environment:
      # Database connection
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-MeeshyRedis123}@redis:6379
      
      # Translation service connection
      TRANSLATOR_GRPC_URL: translator:50051
      
      # ZMQ Configuration
      ZMQ_TRANSLATOR_HOST: translator
      ZMQ_TRANSLATOR_SUB_PORT: ${ZMQ_TRANSLATOR_SUB_PORT:-5558}
      ZMQ_TRANSLATOR_PUSH_PORT: ${ZMQ_TRANSLATOR_PUSH_PORT:-5555}
      ZMQ_TIMEOUT: ${ZMQ_TIMEOUT:-3000}
      
      # Service configuration
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      
      # CORS configuration
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:3100}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3100}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3100}
      
      # WebSocket configuration
      WS_MAX_CONNECTIONS: ${WS_MAX_CONNECTIONS:-100000}
      
      # Environment
      NODE_ENV: production
      
      # Default user passwords
      MEESHY_BIGBOSS_PASSWORD: ${MEESHY_BIGBOSS_PASSWORD:-bigboss123}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
    
    ports:
      - "${GATEWAY_PORT:-3000}:3000"
    
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      translator:
        condition: service_started
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    networks:
      - meeshy-network
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ===== FRONTEND SERVICE (Pre-built image) =====
  frontend:
    image: ${FRONTEND_IMAGE:-isopen/meeshy-frontend:latest}
    container_name: meeshy-frontend
    restart: unless-stopped
    
    environment:
      # Public URLs (accessible from browser)
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      NEXT_PUBLIC_TRANSLATION_URL: ${NEXT_PUBLIC_TRANSLATION_URL}
      
      # Internal URLs for SSR (container-to-container communication)
      INTERNAL_BACKEND_URL: http://gateway:3000
      INTERNAL_WS_URL: ws://gateway:3000
      
      # Service configuration
      PORT: 3100
      HOSTNAME: 0.0.0.0
      NODE_ENV: production
    
    ports:
      - "${FRONTEND_PORT:-3100}:3100"
    
    depends_on:
      gateway:
        condition: service_started
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://0.0.0.0:3100', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    
    networks:
      - meeshy-network
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # ===== CERTBOT FOR LET'S ENCRYPT =====
  certbot:
    image: certbot/certbot:latest
    container_name: meeshy-certbot
    restart: unless-stopped
    volumes:
      - ssl_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL:-admin@meeshy.com} --agree-tos --no-eff-email --staging
    depends_on:
      - nginx
    networks:
      - meeshy-network
    profiles:
      - ssl

  # ===== NGINX REVERSE PROXY =====
  nginx:
    image: nginx:alpine
    container_name: meeshy-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/active.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/nginx/ssl:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      - frontend
      - gateway
    networks:
      - meeshy-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

# ===== VOLUMES =====
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  translator_cache:
    driver: local
  translator_models:
    driver: local
  translator_generated:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
  certbot_www:
    driver: local

# ===== NETWORKS =====
networks:
  meeshy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
