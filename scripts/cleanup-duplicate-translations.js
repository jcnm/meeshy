#!/usr/bin/env node

/**
 * Script de nettoyage des traductions en doublon
 * 
 * Ce script identifie et supprime les traductions en doublon dans la base de donn√©es.
 * Un doublon est d√©fini comme deux traductions ou plus avec le m√™me messageId et targetLanguage.
 * 
 * Pour chaque groupe de doublons, seule la traduction la plus r√©cente est conserv√©e.
 * 
 * Usage: node scripts/cleanup-duplicate-translations.js [--dry-run]
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Mode dry-run (simulation sans suppression)
const isDryRun = process.argv.includes('--dry-run');

async function findDuplicateTranslations() {
  console.log('üîç Recherche des traductions en doublon...\n');

  // R√©cup√©rer toutes les traductions
  const allTranslations = await prisma.messageTranslation.findMany({
    orderBy: [
      { messageId: 'asc' },
      { targetLanguage: 'asc' },
      { createdAt: 'desc' }
    ]
  });

  console.log(`üìä Total de traductions dans la base: ${allTranslations.length}\n`);

  // Grouper les traductions par messageId + targetLanguage
  const groups = new Map();
  
  for (const translation of allTranslations) {
    const key = `${translation.messageId}_${translation.targetLanguage}`;
    
    if (!groups.has(key)) {
      groups.set(key, []);
    }
    
    groups.get(key).push(translation);
  }

  // Identifier les groupes avec des doublons
  const duplicateGroups = Array.from(groups.entries())
    .filter(([key, translations]) => translations.length > 1);

  console.log(`üîç Groupes avec doublons: ${duplicateGroups.length}\n`);

  let totalDuplicates = 0;
  const translationsToDelete = [];

  for (const [key, translations] of duplicateGroups) {
    const [messageId, targetLanguage] = key.split('_');
    const duplicateCount = translations.length - 1;
    totalDuplicates += duplicateCount;

    console.log(`üìù Message: ${messageId}`);
    console.log(`   üåê Langue cible: ${targetLanguage}`);
    console.log(`   üî¢ Nombre de traductions: ${translations.length}`);
    console.log(`   üìÖ Dates de cr√©ation:`);
    
    translations.forEach((t, index) => {
      console.log(`      ${index === 0 ? '‚úÖ GARDER' : '‚ùå SUPPRIMER'}: ${t.createdAt.toISOString()} (ID: ${t.id})`);
      if (index > 0) {
        translationsToDelete.push(t.id);
      }
    });
    
    console.log('');
  }

  return {
    totalTranslations: allTranslations.length,
    duplicateGroups: duplicateGroups.length,
    totalDuplicates,
    translationsToDelete
  };
}

async function cleanupDuplicates(translationsToDelete) {
  if (translationsToDelete.length === 0) {
    console.log('‚úÖ Aucune traduction en doublon √† supprimer.\n');
    return 0;
  }

  if (isDryRun) {
    console.log(`\nüîç MODE DRY-RUN: ${translationsToDelete.length} traductions SERAIENT supprim√©es.\n`);
    return 0;
  }

  console.log(`\nüßπ Suppression de ${translationsToDelete.length} traductions en doublon...\n`);

  try {
    const result = await prisma.messageTranslation.deleteMany({
      where: {
        id: {
          in: translationsToDelete
        }
      }
    });

    console.log(`‚úÖ ${result.count} traductions supprim√©es avec succ√®s.\n`);
    return result.count;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la suppression:`, error);
    throw error;
  }
}

async function verifyCleanup() {
  console.log('üîç V√©rification apr√®s nettoyage...\n');

  const allTranslations = await prisma.messageTranslation.findMany({
    orderBy: [
      { messageId: 'asc' },
      { targetLanguage: 'asc' }
    ]
  });

  // Grouper et v√©rifier qu'il n'y a plus de doublons
  const groups = new Map();
  
  for (const translation of allTranslations) {
    const key = `${translation.messageId}_${translation.targetLanguage}`;
    
    if (!groups.has(key)) {
      groups.set(key, 0);
    }
    
    groups.set(key, groups.get(key) + 1);
  }

  const remainingDuplicates = Array.from(groups.values())
    .filter(count => count > 1).length;

  if (remainingDuplicates === 0) {
    console.log('‚úÖ Aucun doublon restant d√©tect√©.\n');
  } else {
    console.log(`‚ö†Ô∏è  ${remainingDuplicates} groupes de doublons restants d√©tect√©s.\n`);
  }

  console.log(`üìä Total de traductions apr√®s nettoyage: ${allTranslations.length}\n`);
  
  return remainingDuplicates;
}

async function main() {
  try {
    console.log('üöÄ D√©marrage du script de nettoyage des traductions en doublon\n');
    console.log('=' .repeat(70));
    console.log('');

    if (isDryRun) {
      console.log('‚ö†Ô∏è  MODE DRY-RUN ACTIV√â - Aucune suppression ne sera effectu√©e\n');
    }

    // √âtape 1: Identifier les doublons
    const stats = await findDuplicateTranslations();

    console.log('=' .repeat(70));
    console.log('üìä R√âSUM√â\n');
    console.log(`   Total de traductions: ${stats.totalTranslations}`);
    console.log(`   Groupes avec doublons: ${stats.duplicateGroups}`);
    console.log(`   Traductions en doublon: ${stats.totalDuplicates}`);
    console.log('=' .repeat(70));
    console.log('');

    // √âtape 2: Nettoyer les doublons
    const deletedCount = await cleanupDuplicates(stats.translationsToDelete);

    if (!isDryRun && deletedCount > 0) {
      // √âtape 3: V√©rifier le nettoyage
      await verifyCleanup();
    }

    console.log('=' .repeat(70));
    console.log('‚úÖ Script termin√© avec succ√®s\n');

    if (isDryRun) {
      console.log('üí° Pour effectuer r√©ellement le nettoyage, lancez le script sans --dry-run\n');
    }

  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
main();

