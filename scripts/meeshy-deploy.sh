#!/bin/bash

# üöÄ MEESHY - SCRIPT UNIFI√â DE D√âPLOIEMENT OPTIMIS√â
# Usage: ./scripts/meeshy-deploy.sh [COMMAND] [DROPLET_IP]
# Commands: deploy, test, verify, status, logs, restart, stop, recreate
# 
# OPTIMISATION: Ne transmet que les fichiers essentiels pour l'infrastructure
# et la configuration, pas les sources qui sont d√©j√† build√©es dans les images

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales
COMMAND=""
DROPLET_IP=""
FORCE_REFRESH=false
REGENERATE_SECRETS=false

# Fonctions utilitaires
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Fonction d'aide
show_help() {
    echo "üöÄ MEESHY - Script de d√©ploiement unifi√©"
    echo ""
    echo "Usage: $0 [COMMAND] [DROPLET_IP] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  deploy     D√©ployer l'application compl√®te"
    echo "  test       Tester la connexion au serveur"
    echo "  verify     V√©rifier le statut des services"
    echo "  status     Afficher le statut des conteneurs"
    echo "  logs       Afficher les logs des services"
    echo "  restart    Red√©marrer les services"
    echo "  stop       Arr√™ter les services"
    echo "  recreate   Recr√©er les conteneurs"
    echo ""
    echo "Options:"
    echo "  --regenerate-secrets    Forcer la r√©g√©n√©ration des secrets de production (√©crase les secrets existants)"
    echo "  --force-refresh         Forcer le rafra√Æchissement des images"
    echo "  --help, -h              Afficher cette aide"
    echo ""
    echo "Gestion des secrets:"
    echo "  Par d√©faut, si des secrets existent d√©j√†, ils seront r√©utilis√©s."
    echo "  Utilisez --regenerate-secrets pour forcer la cr√©ation de nouveaux secrets."
    echo ""
    echo "Exemples:"
    echo "  $0 deploy 192.168.1.100                    # Utilise les secrets existants"
    echo "  $0 deploy 192.168.1.100 --regenerate-secrets  # G√©n√®re de nouveaux secrets"
    echo "  $0 status 192.168.1.100"
    echo ""
}

# Fonction pour parser les arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --regenerate-secrets)
                REGENERATE_SECRETS=true
                shift
                ;;
            --force-refresh)
                FORCE_REFRESH=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                # Si ce n'est pas une option, c'est probablement la commande ou l'IP
                if [ -z "$COMMAND" ]; then
                    COMMAND="$1"
                elif [ -z "$DROPLET_IP" ]; then
                    DROPLET_IP="$1"
                fi
                shift
                ;;
        esac
    done
}

# Parser les arguments
parse_arguments "$@"

# Variables apr√®s parsing
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DOCKER_COMPOSE_FILE="docker-compose.traefik.yml"

# Test de connexion SSH
test_ssh_connection() {
    local ip="$1"
    log_info "Test de connexion SSH..."
    if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$ip "echo 'Connexion SSH r√©ussie'" >/dev/null 2>&1; then
        log_success "Connexion SSH r√©ussie"
        return 0
    else
        log_error "Impossible de se connecter au serveur"
        return 1
    fi
}

# D√©ploiement optimis√© (infrastructure et configuration uniquement)
deploy_complete() {
    local ip="$1"
    local domain="${2:-localhost}"
    log_info "üöÄ D√©ploiement optimis√© sur $ip (domaine: $domain) - infrastructure et configuration uniquement"

    # Cr√©er r√©pertoire temporaire pour les fichiers essentiels uniquement
    local deploy_dir="/tmp/meeshy-deploy-optimized-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$deploy_dir"

    # Pr√©parer fichiers essentiels uniquement
    log_info "üìÅ Pr√©paration des fichiers essentiels (infrastructure et configuration)..."
    cp "$PROJECT_ROOT/$DOCKER_COMPOSE_FILE" "$deploy_dir/docker-compose.yml"
    cp "$PROJECT_ROOT/env.digitalocean" "$deploy_dir/.env"
    
    # Configuration Docker essentielle uniquement
    mkdir -p "$deploy_dir/docker"
    cp -r "$PROJECT_ROOT/docker/nginx" "$deploy_dir/docker/"
    cp -r "$PROJECT_ROOT/docker/supervisor" "$deploy_dir/docker/"
    
    # Fichiers shared essentiels pour la configuration (pas les sources)
    mkdir -p "$deploy_dir/shared"
    
    # Sch√©mas de base de donn√©es
    cp "$PROJECT_ROOT/shared/schema.prisma" "$deploy_dir/shared/"
    cp "$PROJECT_ROOT/shared/schema.postgresql.prisma" "$deploy_dir/shared/"
    
    # Scripts d'initialisation de base de donn√©es
    cp "$PROJECT_ROOT/shared/init-postgresql.sql" "$deploy_dir/shared/"
    cp "$PROJECT_ROOT/shared/init-database.sh" "$deploy_dir/shared/"
    cp "$PROJECT_ROOT/shared/init-mongodb-replica.sh" "$deploy_dir/shared/"
    cp "$PROJECT_ROOT/shared/mongodb-keyfile" "$deploy_dir/shared/"
    
    # Fichiers Proto pour la communication inter-services
    mkdir -p "$deploy_dir/shared/proto"
    cp "$PROJECT_ROOT/shared/proto/messaging.proto" "$deploy_dir/shared/proto/"
    
    # Version pour le suivi
    cp "$PROJECT_ROOT/shared/version.txt" "$deploy_dir/shared/" 2>/dev/null || echo "1.0.0" > "$deploy_dir/shared/version.txt"
    
    # G√©n√©ration des configurations de production s√©curis√©es
    log_info "üîê Gestion des configurations de production s√©curis√©es..."
    if [ -f "$PROJECT_ROOT/scripts/production/meeshy-generate-production-variables.sh" ]; then
        # V√©rifier si les secrets existent d√©j√†
        if [ -f "$PROJECT_ROOT/secrets/production-secrets.env" ] && [ "$REGENERATE_SECRETS" = false ]; then
            log_info "üìã Fichier de secrets existant d√©tect√©: $PROJECT_ROOT/secrets/production-secrets.env"
            log_info "üí° Utilisation des secrets existants (utilisez --regenerate-secrets pour forcer la r√©g√©n√©ration)"
        else
            if [ "$REGENERATE_SECRETS" = true ]; then
                log_warning "‚ö†Ô∏è  R√©g√©n√©ration forc√©e des secrets de production..."
            else
                log_info "üìã G√©n√©ration des nouvelles configurations de production..."
            fi
            bash "$PROJECT_ROOT/scripts/production/meeshy-generate-production-variables.sh" --force
            log_success "‚úÖ Configurations de production g√©n√©r√©es"
        fi
        
        # V√©rifier que le fichier clear.txt a √©t√© cr√©√© par meeshy-generate-production-variables.sh
        if [ -f "$PROJECT_ROOT/secrets/clear.txt" ]; then
            log_success "‚úÖ Fichier des mots de passe en clair trouv√©: secrets/clear.txt"
        else
            log_warning "‚ö†Ô∏è  Fichier des mots de passe en clair non trouv√©: secrets/clear.txt"
        fi
    else
        log_warning "‚ö†Ô∏è  Script de g√©n√©ration de configuration non trouv√©"
    fi

    # Gestion des secrets de production
    log_info "üîê Gestion des secrets de production..."
    if [ -f "$PROJECT_ROOT/secrets/production-secrets.env" ]; then
        log_info "üìã Fichier de secrets de production trouv√©"
        # Cr√©er le r√©pertoire secrets sur le serveur
        ssh -o StrictHostKeyChecking=no root@$ip "mkdir -p /opt/meeshy/secrets"
        # Transf√©rer le fichier de secrets
        scp -o StrictHostKeyChecking=no "$PROJECT_ROOT/secrets/production-secrets.env" root@$ip:/opt/meeshy/secrets/
        # S√©curiser le fichier sur le serveur
        ssh -o StrictHostKeyChecking=no root@$ip "chmod 600 /opt/meeshy/secrets/production-secrets.env"
        log_success "‚úÖ Fichier de secrets transf√©r√© et s√©curis√©"
        
        # ‚ö†Ô∏è  S√âCURIT√â: Ne JAMAIS transf√©rer les mots de passe en clair sur le serveur
        log_info "üîí Fichier des mots de passe en clair conserv√© en local uniquement (s√©curit√©)"
    else
        log_warning "‚ö†Ô∏è  Fichier de secrets de production non trouv√©: $PROJECT_ROOT/secrets/production-secrets.env"
        log_info "üí° Cr√©ez le fichier avec: ./scripts/production/meeshy-generate-production-variables.sh"
    fi

# Envoyer sur serveur
    log_info "üì§ Envoi des fichiers optimis√©s..."
    ssh -o StrictHostKeyChecking=no root@$ip "mkdir -p /opt/meeshy"
    scp -o StrictHostKeyChecking=no "$deploy_dir/docker-compose.yml" root@$ip:/opt/meeshy/
    scp -o StrictHostKeyChecking=no "$deploy_dir/.env" root@$ip:/opt/meeshy/
    scp -r -o StrictHostKeyChecking=no "$deploy_dir/docker" root@$ip:/opt/meeshy/
    scp -r -o StrictHostKeyChecking=no "$deploy_dir/shared" root@$ip:/opt/meeshy/

    # Script de d√©ploiement am√©lior√© avec gestion SSL intelligente
    cat << 'EOF' > /tmp/deploy-services.sh
#!/bin/bash
set -e
cd /opt/meeshy

# Installer Docker si pas pr√©sent
if ! command -v docker &> /dev/null; then
    echo "üê≥ Installation de Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    usermod -aG docker $USER
    systemctl enable docker
    systemctl start docker
    rm get-docker.sh
fi

# Installer Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "üì¶ Installation de Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
fi

# Installer OpenSSL et dig si pas pr√©sents
if ! command -v openssl &> /dev/null; then
    echo "üîê Installation d'OpenSSL..."
    if command -v apt-get &> /dev/null; then
        apt-get update && apt-get install -y openssl dnsutils
    elif command -v yum &> /dev/null; then
        yum install -y openssl bind-utils
    elif command -v apk &> /dev/null; then
        apk add --no-cache openssl bind-tools
    fi
fi

# Charger les secrets de production si disponibles
if [ -f "/opt/meeshy/secrets/production-secrets.env" ]; then
    echo "üîê Chargement des secrets de production..."
    set -a
    source /opt/meeshy/secrets/production-secrets.env
    set +a
    echo "‚úÖ Secrets de production charg√©s"
    
    # Ajouter les secrets au fichier .env pour docker-compose
    echo "" >> .env
    echo "# ===== SECRETS DE PRODUCTION ======" >> .env
    echo "# G√©n√©r√©s automatiquement le $(date)" >> .env
    cat /opt/meeshy/secrets/production-secrets.env >> .env
    echo "‚úÖ Secrets ajout√©s au fichier .env"
else
    echo "‚ö†Ô∏è  Fichier de secrets de production non trouv√©, utilisation de la configuration par d√©faut"
fi

echo "üßπ Nettoyage..."
docker-compose down --remove-orphans || true
docker system prune -f || true
docker image prune -f || true

# Gestion SSL intelligente
echo "üîê Configuration SSL..."
if [ -n "$DOMAIN" ] && [ "$DOMAIN" != "localhost" ]; then
    echo "üåê Mode production d√©tect√© pour $DOMAIN"
    # Utiliser la configuration Let's Encrypt
    cp docker/nginx/letsencrypt.conf docker/nginx/active.conf 2>/dev/null || {
        echo "‚ö†Ô∏è  Configuration Let's Encrypt non trouv√©e, utilisation du mode d√©veloppement"
        cp docker/nginx/digitalocean.conf docker/nginx/active.conf
    }
else
    echo "üîß Mode d√©veloppement d√©tect√©"
    # G√©n√©rer des certificats auto-sign√©s
    if [ ! -f "ssl/cert.pem" ] || [ ! -f "ssl/key.pem" ]; then
        mkdir -p ssl
        cd ssl
        
        openssl genrsa -out key.pem 2048
        cat > openssl.conf << 'SSL_EOF'
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = FR
ST = IDF
L = Paris
O = Meeshy
CN = localhost

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = 127.0.0.1
IP.1 = 127.0.0.1
IP.2 = 0.0.0.0
SSL_EOF

        openssl req -new -x509 -key key.pem -out cert.pem -days 365 -config openssl.conf
        chmod 600 key.pem
        chmod 644 cert.pem
        rm openssl.conf
        
        echo "‚úÖ Certificats auto-sign√©s g√©n√©r√©s"
        cd ..
    fi
    
    # Utiliser la configuration de d√©veloppement
    cp docker/nginx/digitalocean.conf docker/nginx/active.conf
fi

if [ "$FORCE_REFRESH" = "true" ]; then
    echo "üì¶ T√©l√©chargement forc√© des images..."
    docker-compose pull --no-cache
else
    echo "üì¶ T√©l√©chargement des images..."
    docker-compose pull
fi

echo "üöÄ D√©marrage s√©quentiel..."

# Traefik (doit √™tre d√©marr√© en premier)
echo "üåê D√©marrage Traefik..."
docker-compose up -d traefik
sleep 5

# V√©rifier Traefik
# Attendre que Traefik soit pr√™t (optimis√©)
echo "‚è≥ Attente de Traefik..."
sleep 5
if curl -f -s http://localhost:80 >/dev/null 2>&1; then
    echo "‚úÖ Traefik pr√™t"
else
    echo "‚ö†Ô∏è  Traefik en cours de d√©marrage..."
fi

# MongoDB
echo "üìä D√©marrage MongoDB..."
docker-compose up -d database
sleep 5

# V√©rifier MongoDB avec authentification correcte
# Attendre que MongoDB soit pr√™t (optimis√©)
echo "‚è≥ Attente de MongoDB..."
sleep 3
if docker-compose exec -T database mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ MongoDB pr√™t"
else
    echo "‚ö†Ô∏è  MongoDB en cours de d√©marrage..."
fi

# V√©rifier que la base meeshy est accessible (optimis√©)
echo "‚è≥ V√©rification de la base meeshy..."
sleep 5
if docker-compose exec -T database mongosh --eval "use meeshy; db.runCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ Base de donn√©es 'meeshy' accessible"
else
    echo "‚ö†Ô∏è  Base de donn√©es 'meeshy' en cours d'initialisation..."
fi

# Configuration et v√©rification du replica set MongoDB
echo "üîß CONFIGURATION DU REPLICA SET MONGODB..."
echo "=========================================="

# Attendre que MongoDB soit compl√®tement pr√™t
echo "‚è≥ Attente que MongoDB soit pr√™t pour la configuration du replica set..."
sleep 3

# V√©rifier si le replica set est d√©j√† initialis√©
if docker-compose exec -T database mongosh --eval "rs.status()" >/dev/null 2>&1; then
    echo "‚úÖ Replica set MongoDB d√©tect√©"
    
    # V√©rifier le nom d'h√¥te du replica set
    echo "üîç V√©rification de la configuration du replica set..."
    current_host=$(docker-compose exec -T database mongosh --eval "rs.status().members[0].name" --quiet 2>/dev/null | tr -d '\r\n')
    
    if [ "$current_host" = "meeshy-database:27017" ]; then
        echo "‚úÖ Replica set correctement configur√© avec meeshy-database:27017"
        echo "üìä Statut du replica set:"
        docker-compose exec -T database mongosh --eval "rs.status()" --quiet
    else
        echo "‚ö†Ô∏è  Replica set configur√© avec le mauvais nom d'h√¥te: $current_host"
        echo "üîß Reconfiguration du replica set avec le bon nom d'h√¥te..."
        
        # Reconfigurer le replica set avec le bon nom d'h√¥te
        docker-compose exec -T database mongosh --eval "
            try {
                var config = rs.conf();
                config.members[0].host = 'meeshy-database:27017';
                rs.reconfig(config, {force: true});
                print('‚úÖ Replica set reconfigur√© avec meeshy-database:27017');
            } catch (e) {
                print('‚ùå Erreur lors de la reconfiguration: ' + e.message);
                throw e;
            }
        "
        
        # Attendre que la reconfiguration soit effective
        echo "‚è≥ Attente de la reconfiguration du replica set..."
        sleep 5
        
        # V√©rifier la nouvelle configuration
        new_host=$(docker-compose exec -T database mongosh --eval "rs.status().members[0].name" --quiet 2>/dev/null | tr -d '\r\n')
        if [ "$new_host" = "meeshy-database:27017" ]; then
            echo "‚úÖ Replica set reconfigur√© avec succ√®s"
        else
            echo "‚ùå √âchec de la reconfiguration du replica set"
            exit 1
        fi
    fi
else
    echo "üìã Initialisation du replica set rs0..."
    
    # Initialiser le replica set avec le bon nom d'h√¥te
    docker-compose exec -T database mongosh --eval "
        try {
            rs.initiate({
                _id: 'rs0',
                members: [
                    { _id: 0, host: 'meeshy-database:27017' }
                ]
            });
            print('‚úÖ Replica set rs0 initialis√© avec succ√®s');
        } catch (e) {
            if (e.message.includes('already initialized')) {
                print('‚ö†Ô∏è  Replica set d√©j√† initialis√©');
            } else {
                print('‚ùå Erreur initialisation replica set: ' + e.message);
                throw e;
            }
        }
    "
    
    # Attendre que le replica set soit pr√™t
    echo "‚è≥ Attente que le replica set soit pr√™t..."
    for i in {1..15}; do
        if docker-compose exec -T database mongosh --eval "rs.status().ok" 2>/dev/null | grep -q "1"; then
            echo "‚úÖ Replica set rs0 pr√™t"
            break
        fi
        echo "‚è≥ Tentative $i/15 pour le replica set..."
        sleep 3
    done
fi

# V√©rification finale de la configuration
echo "üîç V√âRIFICATION FINALE DE LA CONFIGURATION MONGODB..."
echo "===================================================="
final_host=$(docker-compose exec -T database mongosh --eval "rs.status().members[0].name" --quiet 2>/dev/null | tr -d '\r\n')
echo "üìä Nom d'h√¥te du replica set: $final_host"

if [ "$final_host" = "meeshy-database:27017" ]; then
    echo "‚úÖ Configuration MongoDB valid√©e - Pr√™t pour les connexions des services"
    echo "üìä Statut final du replica set:"
    docker-compose exec -T database mongosh --eval "rs.status()" --quiet
else
    echo "‚ùå Configuration MongoDB invalide - Arr√™t du d√©ploiement"
    exit 1
fi

# V√©rifier que la base de donn√©es meeshy est accessible avec le replica set
echo "üîç V√©rification de l'acc√®s √† la base de donn√©es avec replica set..."
for i in {1..10}; do
    if docker-compose exec -T database mongosh --eval "use meeshy; db.runCommand('ping')" >/dev/null 2>&1; then
        echo "‚úÖ Base de donn√©es 'meeshy' accessible avec replica set"
        break
    fi
    echo "‚è≥ Tentative $i/10 pour la base meeshy avec replica set..."
    sleep 2
done

# Test de connexion depuis l'ext√©rieur pour valider la configuration
echo "üß™ Test de connexion MongoDB depuis l'ext√©rieur du conteneur..."
if docker-compose exec -T database mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ MongoDB accessible et op√©rationnel"
    
    # Configuration MongoDB s√©curis√©e avec authentification
    echo ""
    echo "üîí CONFIGURATION MONGODB S√âCURIS√âE..."
    echo "===================================="
    
    # V√©rifier si les secrets de production existent
    if [ -f "/opt/meeshy/secrets/production-secrets.env" ]; then
        echo "üìã Chargement des secrets de production..."
        source /opt/meeshy/secrets/production-secrets.env
        
        # Cr√©er l'utilisateur MongoDB avec le mot de passe s√©curis√©
        echo "üë§ Cr√©ation de l'utilisateur MongoDB s√©curis√©..."
        docker-compose exec -T database mongosh --eval "
use admin;
try {
    db.createUser({
        user: \"meeshy\",
        pwd: \"$MONGODB_PASSWORD\",
        roles: [
            { role: \"readWrite\", db: \"meeshy\" },
            { role: \"dbAdmin\", db: \"meeshy\" },
            { role: \"clusterAdmin\", db: \"admin\" },
            { role: \"readWriteAnyDatabase\", db: \"admin\" }
        ]
    });
    print(\"‚úÖ Utilisateur meeshy cr√©√© avec succ√®s\");
} catch (e) {
    if (e.code === 51003) {
        print(\"‚ÑπÔ∏è  Utilisateur meeshy existe d√©j√†\");
    } else {
        print(\"‚ùå Erreur lors de la cr√©ation de l'\''utilisateur: \" + e.message);
    }
}
"
        
        # Tester la connexion avec authentification
        echo "üß™ Test de connexion avec authentification..."
        if docker-compose exec -T database mongosh -u meeshy -p "$MONGODB_PASSWORD" --authenticationDatabase admin --eval "db.runCommand({connectionStatus: 1})" >/dev/null 2>&1; then
            echo "‚úÖ Authentification MongoDB configur√©e avec succ√®s"
            
            # Activer l'authentification MongoDB
            echo "üîê Activation de l'authentification MongoDB..."
            docker-compose stop database
            sleep 5
            
            # Modifier la configuration pour activer l'authentification
            sed -i 's/--noauth/--auth/' docker-compose.yml
            
            # Red√©marrer MongoDB avec authentification
            docker-compose up -d database
            sleep 3
            
            # V√©rifier que MongoDB fonctionne avec authentification
            if docker-compose exec -T database mongosh -u meeshy -p "$MONGODB_PASSWORD" --authenticationDatabase admin --eval "db.runCommand({connectionStatus: 1})" >/dev/null 2>&1; then
                echo "‚úÖ MongoDB s√©curis√© avec authentification activ√©e"
            else
                echo "‚ùå Probl√®me avec l'authentification MongoDB"
                # D√©sactiver l'authentification en cas de probl√®me
                sed -i 's/--auth/--noauth/' docker-compose.yml
                docker-compose restart database
                sleep 5
            fi
        else
            echo "‚ùå √âchec de la configuration de l'authentification MongoDB"
        fi
    else
        echo "‚ö†Ô∏è  Fichier de secrets de production non trouv√©, MongoDB restera sans authentification"
        echo "üí° Pour s√©curiser MongoDB, ex√©cutez: ./scripts/production/meeshy-generate-production-variables.sh"
    fi
else
    echo "‚ùå MongoDB non accessible - Arr√™t du d√©ploiement"
    exit 1
fi

echo "üéâ CONFIGURATION MONGODB TERMIN√âE AVEC SUCC√àS !"
echo "=============================================="
echo "‚úÖ Replica set configur√© avec meeshy-database:27017"
echo "‚úÖ Base de donn√©es 'meeshy' accessible"
echo "‚úÖ Pr√™t pour les connexions des services Gateway et Translator"
echo ""

# Redis
echo "üî¥ D√©marrage Redis..."
docker-compose up -d redis
sleep 2

# V√©rifier Redis
for i in {1..3}; do
    if docker-compose exec -T redis redis-cli --no-auth-warning -a MeeshyRedis123 ping >/dev/null 2>&1; then
        echo "‚úÖ Redis pr√™t"
        break
    fi
    echo "‚è≥ Tentative $i/10 pour Redis..."
    sleep 2
done

# Services d'administration (MongoDB UI, Redis UI)
echo "üõ†Ô∏è  D√©marrage des services d'administration..."
docker-compose up -d nosqlclient p3x-redis-ui
sleep 3

# V√©rifier les services d'administration
echo "üîç V√©rification des services d'administration..."
if docker-compose ps nosqlclient | grep -q "Up"; then
    echo "‚úÖ MongoDB UI (NoSQLClient) pr√™t"
else
    echo "‚ö†Ô∏è  MongoDB UI non disponible"
fi

if docker-compose ps p3x-redis-ui | grep -q "Up"; then
    echo "‚úÖ Redis UI (P3X Redis) pr√™t"
else
    echo "‚ö†Ô∏è  Redis UI non disponible"
fi

# Gestion avanc√©e des volumes et permissions
echo "üîß Configuration avanc√©e des volumes et permissions..."

# Fonction pour corriger les permissions d'un volume
fix_volume_permissions() {
    local volume_name="$1"
    local mount_path="$2"
    local user_id="${3:-1000}"
    local group_id="${4:-1000}"
    
    if docker volume ls | grep -q "$volume_name"; then
        echo "üìÅ Volume $volume_name existant d√©tect√©"
        # Corriger les permissions
        docker run --rm -v "$volume_name:$mount_path" alpine:latest sh -c "
            echo 'üîß Correction des permissions du volume $volume_name...'
            chown -R $user_id:$group_id $mount_path 2>/dev/null || true
            chmod -R 755 $mount_path 2>/dev/null || true
            echo '‚úÖ Permissions corrig√©es pour le volume $volume_name'
        "
    else
        echo "üìÅ Cr√©ation du volume $volume_name avec permissions correctes..."
        docker volume create "$volume_name"
        # Initialiser les permissions
        docker run --rm -v "$volume_name:$mount_path" alpine:latest sh -c "
            echo 'üîß Initialisation des permissions du volume $volume_name...'
            mkdir -p $mount_path
            chown -R $user_id:$group_id $mount_path
            chmod -R 755 $mount_path
            echo '‚úÖ Volume $volume_name initialis√© avec permissions correctes'
        "
    fi
}

# Corriger les permissions de tous les volumes translator
fix_volume_permissions "meeshy_models_data" "/workspace/models" "1000" "1000"
fix_volume_permissions "meeshy_translator_cache" "/workspace/cache" "1000" "1000"
fix_volume_permissions "meeshy_translator_generated" "/workspace/generated" "1000" "1000"

# Nettoyage avanc√© des fichiers de verrouillage
echo "üßπ Nettoyage avanc√© des fichiers de verrouillage..."
for volume in "meeshy_models_data" "meeshy_translator_cache" "meeshy_translator_generated"; do
    if docker volume ls | grep -q "$volume"; then
        echo "üßπ Nettoyage du volume $volume..."
        case $volume in
            *models*)
                mount_path="/workspace/models"
                ;;
            *cache*)
                mount_path="/workspace/cache"
                ;;
            *generated*)
                mount_path="/workspace/generated"
                ;;
            *)
                mount_path="/workspace"
                ;;
        esac
        
        docker run --rm -v "$volume:$mount_path" alpine:latest sh -c "
            echo 'üßπ Recherche et suppression des fichiers de verrouillage dans $volume...'
            find $mount_path -name '*.lock' -type f -delete 2>/dev/null || true
            find $mount_path -name '*.tmp' -type f -delete 2>/dev/null || true
            find $mount_path -name '.incomplete' -type d -exec rm -rf {} + 2>/dev/null || true
            find $mount_path -name '*.pid' -type f -delete 2>/dev/null || true
            find $mount_path -name '.DS_Store' -type f -delete 2>/dev/null || true
            echo '‚úÖ Fichiers de verrouillage nettoy√©s dans $volume'
        "
    fi
done

# Translator
echo "üåê D√âMARRAGE TRANSLATOR..."
echo "=========================="
echo "üìã Connexion √† MongoDB: mongodb://meeshy:${MONGODB_PASSWORD}@meeshy-database:27017/meeshy?authSource=admin&replicaSet=rs0"
docker-compose up -d translator
sleep 5

# V√©rifier Translator
echo "‚è≥ Attente de Translator..."
sleep 3
if curl -f -s http://localhost:8000/health >/dev/null 2>&1; then
    echo "‚úÖ Translator pr√™t et connect√© √† MongoDB"
else
    echo "‚ö†Ô∏è  Translator en cours de d√©marrage..."
    echo "üîç V√©rification des logs Translator pour diagnostic..."
    docker-compose logs --tail 10 translator | grep -E "(error|Error|ERROR|MongoDB|database)" || echo "Aucune erreur critique d√©tect√©e"
fi

# Gateway
echo "üö™ D√âMARRAGE GATEWAY..."
echo "======================"
echo "üìã Connexion √† MongoDB: mongodb://meeshy:${MONGODB_PASSWORD}@meeshy-database:27017/meeshy?authSource=admin&replicaSet=rs0"
docker-compose up -d gateway
sleep 5

# V√©rifier Gateway
echo "‚è≥ Attente de Gateway..."
sleep 3
if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
    echo "‚úÖ Gateway pr√™t et connect√© √† MongoDB"
else
    echo "‚ö†Ô∏è  Gateway en cours de d√©marrage..."
    echo "üîç V√©rification des logs Gateway pour diagnostic..."
    docker-compose logs --tail 10 gateway | grep -E "(error|Error|ERROR|MongoDB|Prisma)" || echo "Aucune erreur critique d√©tect√©e"
fi

# Frontend
echo "üé® D√©marrage Frontend..."
docker-compose up -d frontend
sleep 2

# V√©rifier Frontend
# Attendre que Frontend soit pr√™t (optimis√©)
echo "‚è≥ Attente de Frontend..."
sleep 2
if docker-compose exec -T frontend curl -f -s http://localhost:3100 >/dev/null 2>&1; then
    echo "‚úÖ Frontend pr√™t"
else
    echo "‚ö†Ô∏è  Frontend en cours de d√©marrage..."
fi

echo "üìä √âtat final des services:"
docker-compose ps

echo ""
echo "üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !"
echo "===================================="
echo "‚úÖ MongoDB: Replica set configur√© avec meeshy-database:27017"
echo "‚úÖ MongoDB: Authentification s√©curis√©e activ√©e"
echo "‚úÖ Gateway: Connect√© √† MongoDB via Prisma avec authentification"
echo "‚úÖ Translator: Connect√© √† MongoDB via PyMongo avec authentification"
echo "‚úÖ Frontend: Interface utilisateur op√©rationnelle"
echo "‚úÖ Traefik: Reverse proxy et SSL configur√©s"
echo "‚úÖ Redis: Cache et sessions op√©rationnels"
echo ""
echo "üîó Connexions MongoDB s√©curis√©es valid√©es:"
echo "   ‚Ä¢ Gateway: mongodb://meeshy:***@meeshy-database:27017/meeshy?authSource=admin&replicaSet=rs0"
echo "   ‚Ä¢ Translator: mongodb://meeshy:***@meeshy-database:27017/meeshy?authSource=admin&replicaSet=rs0"
echo "   ‚Ä¢ Interface Admin: mongodb://meeshy:***@meeshy-database:27017/meeshy?authSource=admin&replicaSet=rs0"
echo ""
echo "üîê S√©curit√© MongoDB:"
echo "   ‚Ä¢ Authentification: Activ√©e"
echo "   ‚Ä¢ Utilisateur: meeshy"
echo "   ‚Ä¢ Permissions: readWrite, dbAdmin, clusterAdmin"
echo "   ‚Ä¢ AuthSource: admin"
echo ""
echo "‚úÖ Tous les services d√©ploy√©s et v√©rifi√©s avec s√©curit√© renforc√©e"
EOF

    # Ex√©cuter avec le domaine
    scp -o StrictHostKeyChecking=no /tmp/deploy-services.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/deploy-services.sh && FORCE_REFRESH=$FORCE_REFRESH DOMAIN=$domain /tmp/deploy-services.sh"
    rm -f /tmp/deploy-services.sh

    # V√©rification automatique
    log_info "üîç V√©rification post-d√©ploiement..."
    sleep 5
    health_check "$ip"
    rm -rf "$deploy_dir"
}

# Correction rapide
deploy_fix() {
    local ip="$1"
    log_info "üîß Correction rapide sur $ip"

    # Cr√©er r√©pertoire temporaire
    local deploy_dir="/tmp/meeshy-fix-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$deploy_dir"

    # Pr√©parer fichiers
    log_info "üìÅ Pr√©paration des fichiers corrig√©s..."
    cp "$PROJECT_ROOT/$DOCKER_COMPOSE_FILE" "$deploy_dir/docker-compose.yml"
    cp "$PROJECT_ROOT/env.digitalocean" "$deploy_dir/.env"

    # Envoyer sur serveur
    log_info "üì§ Envoi des fichiers corrig√©s..."
    scp -o StrictHostKeyChecking=no "$deploy_dir/docker-compose.yml" root@$ip:/opt/meeshy/
    scp -o StrictHostKeyChecking=no "$deploy_dir/.env" root@$ip:/opt/meeshy/

    # Red√©marrer services
    restart_services "$ip"

    # V√©rifier la sant√© des services
    log_info "üîç V√©rification post-correction..."
    sleep 3
    health_check "$ip"

    # Nettoyer
    rm -rf "$deploy_dir"
}

# V√©rification de la sant√©
health_check() {
    local ip="$1"
    log_info "üè• V√©rification compl√®te de la sant√© des services..."
    
    # V√©rification pr√©liminaire des services Docker
    log_info "üîç V√©rification pr√©liminaire des conteneurs..."
    ssh -o StrictHostKeyChecking=no root@$ip "cd /opt/meeshy && docker-compose ps --format 'table {{.Name}}\t{{.Status}}\t{{.Ports}}'"

    # Script de v√©rification d√©taill√©e
    cat << 'EOF' > /tmp/health-check.sh
#!/bin/bash
cd /opt/meeshy

echo "üè• V√âRIFICATION COMPL√àTE DE SANT√â DES SERVICES"
echo "============================================="

# V√©rifier que tous les services sont en cours d'ex√©cution
echo ""
echo "üìä √âTAT DES SERVICES DOCKER:"
docker-compose ps

# 1. V√©rifier MongoDB
echo ""
echo "üìä TEST MONGODB:"
if docker-compose exec -T database mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ MongoDB: Service accessible"

    # V√©rifier la base de donn√©es meeshy
    if docker-compose exec -T database mongosh --eval "use meeshy; db.runCommand('ping')" >/dev/null 2>&1; then
        echo "‚úÖ Base de donn√©es 'meeshy': Accessible"

        # V√©rifier les collections
        collections=$(docker-compose exec -T database mongosh --eval "use meeshy; db.getCollectionNames()" --quiet 2>/dev/null | grep -v "MongoDB\|connecting\|switched" | head -5)
        if [ -n "$collections" ]; then
            echo "‚úÖ Collections d√©tect√©es: $collections"
        else
            echo "‚ö†Ô∏è  Aucune collection d√©tect√©e (base vide)"
        fi
    else
        echo "‚ùå Base de donn√©es 'meeshy': Non accessible"
        exit 1
    fi
else
    echo "‚ùå MongoDB: Service inaccessible"
    exit 1
fi

# 2. V√©rifier Redis
echo ""
echo "üî¥ TEST REDIS:"
if docker-compose exec -T redis redis-cli --no-auth-warning -a MeeshyRedis123 ping >/dev/null 2>&1; then
    echo "‚úÖ Redis: Connect√© et op√©rationnel"

    # Test de cache
    if docker-compose exec -T redis redis-cli --no-auth-warning -a MeeshyRedis123 set test_key "test_value" >/dev/null 2>&1; then
        if docker-compose exec -T redis redis-cli --no-auth-warning -a MeeshyRedis123 get test_key | grep -q "test_value"; then
            echo "‚úÖ Cache Redis fonctionnel"
        else
            echo "‚ö†Ô∏è  Cache Redis: probl√®me de lecture"
        fi
        # Nettoyer
        docker-compose exec -T redis redis-cli --no-auth-warning -a MeeshyRedis123 del test_key >/dev/null 2>&1
    else
        echo "‚ö†Ô∏è  Cache Redis: probl√®me d'√©criture"
    fi
else
    echo "‚ùå Redis: Probl√®me de connexion"
    exit 1
fi

# 3. V√©rifier Translator
echo ""
echo "üåê TEST TRANSLATOR:"
# Test via Traefik (architecture reverse proxy)
for i in {1..4}; do
    if curl -f -s -H "Host: ml.meeshy.me" http://localhost/health >/dev/null 2>&1; then
        echo "‚úÖ Translator: Endpoint /health accessible via Traefik"

        # Test de r√©ponse de sant√© (suivre les redirections HTTPS)
        health_response=$(curl -s -L -H "Host: ml.meeshy.me" http://localhost/health 2>/dev/null)
        if echo "$health_response" | grep -q "status\|ok\|healthy\|database"; then
            echo "‚úÖ Translator: R√©ponse de sant√© valide"
        else
            echo "‚ö†Ô∏è  Translator: R√©ponse de sant√© suspecte: $health_response"
        fi
        break
    fi
    echo "‚è≥ Tentative $i/5 pour Translator via Traefik..."
    sleep 3
done

if [ $i -eq 4 ]; then
    echo "‚ùå Translator: Endpoint /health inaccessible via Traefik apr√®s 5 tentatives"
    # Essayer de v√©rifier via les logs Docker
    echo "üìã V√©rification des logs Translator:"
    docker-compose logs --tail 20 translator | grep -i "error\|failed\|exception" || echo "Aucune erreur critique d√©tect√©e"
    exit 1
fi

# Test des mod√®les ML via Traefik
if curl -f -s -H "Host: ml.meeshy.me" http://localhost/models >/dev/null 2>&1; then
    echo "‚úÖ Translator: Endpoint /models accessible via Traefik"
else
    echo "‚ö†Ô∏è  Translator: Endpoint /models inaccessible via Traefik"
fi

# 4. V√©rifier Gateway
echo ""
echo "üö™ TEST GATEWAY:"
# Test via Traefik (architecture reverse proxy)
for i in {1..4}; do
    if curl -f -s -H "Host: gate.meeshy.me" http://localhost/health >/dev/null 2>&1; then
        echo "‚úÖ Gateway: Endpoint /health accessible via Traefik"

        # Test de r√©ponse de sant√© (suivre les redirections HTTPS)
        health_response=$(curl -s -L -H "Host: gate.meeshy.me" http://localhost/health 2>/dev/null)
        if echo "$health_response" | grep -q "status\|ok\|healthy\|database"; then
            echo "‚úÖ Gateway: R√©ponse de sant√© valide"
        else
            echo "‚ö†Ô∏è  Gateway: R√©ponse de sant√© suspecte: $health_response"
        fi
        break
    fi
    echo "‚è≥ Tentative $i/5 pour Gateway via Traefik..."
    sleep 3
done

if [ $i -eq 5 ]; then
    echo "‚ùå Gateway: Endpoint /health inaccessible via Traefik apr√®s 5 tentatives"
    # Essayer de v√©rifier via les logs Docker
    echo "üìã V√©rification des logs Gateway:"
    docker-compose logs --tail 20 gateway | grep -i "error\|failed\|exception" || echo "Aucune erreur critique d√©tect√©e"
    exit 1
fi

# Test des endpoints API (corriger l'endpoint)
if docker-compose exec -T gateway curl -f -s http://localhost:3000/info >/dev/null 2>&1; then
    echo "‚úÖ Gateway: Endpoint /info accessible"
else
    echo "‚ö†Ô∏è  Gateway: Endpoint /info inaccessible"
fi

# 5. V√©rifier Frontend
echo ""
echo "üé® TEST FRONTEND:"
# Test via Traefik (architecture reverse proxy)
for i in {1..5}; do
    if curl -f -s -H "Host: meeshy.me" http://localhost >/dev/null 2>&1; then
        echo "‚úÖ Frontend: Accessible via Traefik"

        # V√©rifier que c'est bien Next.js (suivre les redirections HTTPS)
        response=$(curl -s -L -H "Host: meeshy.me" http://localhost 2>/dev/null | head -c 200)
        if echo "$response" | grep -q "Next\|React\|meeshy\|Meeshy"; then
            echo "‚úÖ Frontend: R√©ponse Next.js d√©tect√©e"
        else
            echo "‚ö†Ô∏è  Frontend: R√©ponse non-Next.js d√©tect√©e"
        fi
        break
    fi
    echo "‚è≥ Tentative $i/5 pour Frontend via Traefik..."
    sleep 3
done

if [ $i -eq 5 ]; then
    echo "‚ùå Frontend: Inaccessible via Traefik apr√®s 5 tentatives"
    # Essayer de v√©rifier via les logs Docker
    echo "üìã V√©rification des logs Frontend:"
    docker-compose logs --tail 20 frontend | grep -i "error\|failed\|exception" || echo "Aucune erreur critique d√©tect√©e"
    exit 1
fi

# 6. V√©rifier Traefik (reverse proxy)
echo ""
echo "üåê TEST TRAEFIK:"
# Test de l'endpoint /ping de Traefik (m√©thode recommand√©e)
if curl -f -s http://localhost:8080/ping >/dev/null 2>&1; then
    echo "‚úÖ Traefik: Endpoint /ping accessible (sant√© OK)"
elif curl -f -s http://localhost:80 >/dev/null 2>&1; then
    echo "‚úÖ Traefik: Port 80 accessible (endpoint /ping non configur√©)"
else
    echo "‚ùå Traefik: Port 80 inaccessible"
    # Essayer de v√©rifier via les logs Docker
    echo "üìã V√©rification des logs Traefik:"
    docker-compose logs --tail 20 traefik | grep -i "error\|failed\|exception" || echo "Aucune erreur critique d√©tect√©e"
    exit 1
fi

if curl -f -s http://localhost:80 >/dev/null 2>&1; then
    
    # Test de l'API Traefik (accessible via traefik.meeshy.me avec auth)
    if curl -f -s -k -H "Host: traefik.meeshy.me" http://localhost/api/rawdata >/dev/null 2>&1; then
        echo "‚úÖ Traefik: API dashboard accessible"
    else
        echo "‚ÑπÔ∏è  Traefik: API dashboard prot√©g√©e par authentification (normal en production)"
    fi
    
    # Test de redirection HTTPS (Traefik utilise 308 pour permanent redirect)
    redirect_code=$(curl -s -I -H "Host: meeshy.me" http://localhost:80 | head -1 | grep -o "[0-9][0-9][0-9]")
    if [ "$redirect_code" = "308" ]; then
        echo "‚úÖ Traefik: Redirection HTTPS configur√©e (308 Permanent Redirect)"
    elif [ "$redirect_code" = "301" ] || [ "$redirect_code" = "302" ]; then
        echo "‚úÖ Traefik: Redirection HTTPS configur√©e ($redirect_code)"
    else
        echo "‚ö†Ô∏è  Traefik: Redirection HTTPS non d√©tect√©e (code: $redirect_code)"
    fi
fi

# 7. V√©rifier les connexions ZMQ
echo ""
echo "üîå TEST ZMQ:"
# V√©rifier les ports ZMQ
if netstat -tuln 2>/dev/null | grep -q ":5555\|:5558"; then
    echo "‚úÖ ZMQ: Ports d√©tect√©s (5555, 5558)"
else
    echo "‚ö†Ô∏è  ZMQ: Ports non d√©tect√©s (peut √™tre normal dans Docker)"
fi

# 8. V√©rifier les connexions Prisma
echo ""
echo "üóÑÔ∏è  TEST PRISMA:"
# V√©rifier l'initialisation des clients Prisma
if docker-compose logs gateway 2>/dev/null | grep -i "prisma" >/dev/null 2>&1; then
    echo "‚úÖ Gateway: Logs Prisma d√©tect√©s"
else
    echo "‚ö†Ô∏è  Gateway: Aucun log Prisma trouv√©"
fi

if docker-compose logs translator 2>/dev/null | grep -i "prisma" >/dev/null 2>&1; then
    echo "‚úÖ Translator: Logs Prisma d√©tect√©s"
else
    echo "‚ö†Ô∏è  Translator: Aucun log Prisma trouv√©"
fi

# 9. Test de communication inter-services
echo ""
echo "üîó TEST COMMUNICATION INTER-SERVICES:"
# Test de communication Gateway -> Translator via gRPC
if docker-compose logs gateway 2>/dev/null | grep -i "translator\|gRPC\|50051" >/dev/null 2>&1; then
    echo "‚úÖ Gateway: Communication avec Translator d√©tect√©e"
else
    echo "‚ö†Ô∏è  Gateway: Communication avec Translator non d√©tect√©e"
fi

# Test de communication via ZMQ
if docker-compose logs translator 2>/dev/null | grep -i "ZMQ\|5555\|5558" >/dev/null 2>&1; then
    echo "‚úÖ Translator: Communication ZMQ d√©tect√©e"
else
    echo "‚ö†Ô∏è  Translator: Communication ZMQ non d√©tect√©e"
fi

# 10. Test d'acc√®s externe via Traefik (si domaine configur√©)
echo ""
echo "üåç TEST ACC√àS EXTERNE VIA TRAEFIK:"
if [ -n "$DOMAIN" ] && [ "$DOMAIN" != "localhost" ]; then
    echo "Test d'acc√®s via le domaine: $DOMAIN"
    
    # Test du frontend principal
    if curl -f -s -H "Host: $DOMAIN" http://localhost >/dev/null 2>&1; then
        echo "‚úÖ Frontend: Accessible via $DOMAIN"
    else
        echo "‚ö†Ô∏è  Frontend: Non accessible via $DOMAIN"
    fi
    
    # Test du sous-domaine www
    if curl -f -s -H "Host: www.$DOMAIN" http://localhost >/dev/null 2>&1; then
        echo "‚úÖ Frontend: Accessible via www.$DOMAIN"
    else
        echo "‚ö†Ô∏è  Frontend: Non accessible via www.$DOMAIN"
    fi
    
    # Test de l'API Gateway
    if curl -f -s -H "Host: gate.$DOMAIN" http://localhost/health >/dev/null 2>&1; then
        echo "‚úÖ Gateway: Accessible via gate.$DOMAIN"
    else
        echo "‚ö†Ô∏è  Gateway: Non accessible via gate.$DOMAIN"
    fi
    
    # Test du service ML
    if curl -f -s -H "Host: ml.$DOMAIN" http://localhost/health >/dev/null 2>&1; then
        echo "‚úÖ Translator: Accessible via ml.$DOMAIN"
    else
        echo "‚ö†Ô∏è  Translator: Non accessible via ml.$DOMAIN"
    fi
    
    # Test du dashboard Traefik
    if curl -f -s -H "Host: traefik.$DOMAIN" http://localhost >/dev/null 2>&1; then
        echo "‚úÖ Traefik Dashboard: Accessible via traefik.$DOMAIN"
    else
        echo "‚ö†Ô∏è  Traefik Dashboard: Non accessible via traefik.$DOMAIN"
    fi
    
    # Test des interfaces d'administration
    if curl -f -s -H "Host: mongo.$DOMAIN" http://localhost >/dev/null 2>&1; then
        echo "‚úÖ MongoDB UI: Accessible via mongo.$DOMAIN"
    else
        echo "‚ö†Ô∏è  MongoDB UI: Non accessible via mongo.$DOMAIN"
    fi
    
    if curl -f -s -H "Host: redis.$DOMAIN" http://localhost >/dev/null 2>&1; then
        echo "‚úÖ Redis UI: Accessible via redis.$DOMAIN"
    else
        echo "‚ö†Ô∏è  Redis UI: Non accessible via redis.$DOMAIN"
    fi
else
    echo "‚ÑπÔ∏è  Domaine non configur√©, test d'acc√®s externe ignor√©"
fi

echo ""
echo "üéâ V√âRIFICATION COMPL√àTE TERMIN√âE !"
echo "===================================="
echo "‚úÖ Traefik: Op√©rationnel (Reverse Proxy + SSL)"
echo "‚úÖ MongoDB: Op√©rationnel (Replica Set)"
echo "‚úÖ Redis: Op√©rationnel"
echo "‚úÖ Gateway: Op√©rationnel (gate.$DOMAIN)"
echo "‚úÖ Translator: Op√©rationnel (ml.$DOMAIN)"
echo "‚úÖ Frontend: Op√©rationnel ($DOMAIN)"
echo "‚úÖ MongoDB UI: Op√©rationnel (mongo.$DOMAIN)"
echo "‚úÖ Redis UI: Op√©rationnel (redis.$DOMAIN)"
echo "‚úÖ ZMQ: Configur√©"
echo "‚úÖ Prisma: Initialis√©"
echo ""
echo "üöÄ TOUS LES SERVICES SONT OP√âRATIONNELS !"
echo "üåê Architecture Traefik avec sous-domaines configur√©e"
EOF

    scp -o StrictHostKeyChecking=no /tmp/health-check.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/health-check.sh && /tmp/health-check.sh"
    rm -f /tmp/health-check.sh
}

# V√©rification simple et robuste
simple_health_check() {
    local ip="$1"
    log_info "üîç V√©rification simple des services..."
    
    # Script de v√©rification simplifi√©e
    cat << 'EOF' > /tmp/simple-health-check.sh
#!/bin/bash
cd /opt/meeshy

echo "üîç V√âRIFICATION SIMPLE DES SERVICES"
echo "==================================="

# 1. V√©rifier l'√©tat des conteneurs
echo ""
echo "üìä √âTAT DES CONTENEURS:"
docker-compose ps

# 2. V√©rifier les health checks Docker
echo ""
echo "üè• HEALTH CHECKS DOCKER:"
for service in traefik database redis nosqlclient p3x-redis translator gateway frontend; do
    if docker-compose ps --format "{{.Name}} {{.Status}}" | grep -q "$service.*healthy\|$service.*Up"; then
        echo "‚úÖ $service: Op√©rationnel"
    else
        echo "‚ùå $service: Probl√®me d√©tect√©"
        # Afficher les logs r√©cents en cas de probl√®me
        echo "üìã Logs r√©cents pour $service:"
        docker-compose logs --tail 5 $service 2>/dev/null | grep -E "(error|Error|ERROR|failed|Failed|FAILED)" || echo "Aucune erreur r√©cente"
    fi
done

# 3. Test de connectivit√© r√©seau interne
echo ""
echo "üîå TEST CONNECTIVIT√â R√âSEAU:"
# Test MongoDB
if docker-compose exec -T database mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ MongoDB: Connect√©"
else
    echo "‚ùå MongoDB: Non connect√©"
fi

# Test Redis
if docker-compose exec -T redis redis-cli --no-auth-warning -a MeeshyRedis123 ping >/dev/null 2>&1; then
    echo "‚úÖ Redis: Connect√©"
else
    echo "‚ùå Redis: Non connect√©"
fi

# Test des services via Traefik (architecture reverse proxy)
echo ""
echo "üåê TEST SERVICES VIA TRAEFIK:"
# Test Gateway via Traefik
if curl -f -s -H "Host: gate.meeshy.me" http://localhost/health >/dev/null 2>&1; then
    echo "‚úÖ Gateway: Accessible via Traefik (gate.meeshy.me)"
else
    echo "‚ùå Gateway: Non accessible via Traefik"
fi

# Test Translator via Traefik
if curl -f -s -H "Host: ml.meeshy.me" http://localhost/health >/dev/null 2>&1; then
    echo "‚úÖ Translator: Accessible via Traefik (ml.meeshy.me)"
else
    echo "‚ùå Translator: Non accessible via Traefik"
fi

# Test Frontend via Traefik
if curl -f -s -H "Host: meeshy.me" http://localhost >/dev/null 2>&1; then
    echo "‚úÖ Frontend: Accessible via Traefik (meeshy.me)"
else
    echo "‚ùå Frontend: Non accessible via Traefik"
fi

# 4. Test d'acc√®s externe (Traefik)
echo ""
echo "üåê TEST ACC√àS EXTERNE:"
if curl -f -s http://localhost:80 >/dev/null 2>&1; then
    echo "‚úÖ Traefik: Port 80 accessible"
else
    echo "‚ùå Traefik: Port 80 non accessible"
fi

echo ""
echo "üéØ R√âSUM√â:"
echo "=========="
healthy_services=$(docker-compose ps --format "{{.Name}} {{.Status}}" | grep -c "healthy\|Up")
total_services=$(docker-compose ps --format "{{.Name}}" | wc -l)
echo "Services op√©rationnels: $healthy_services/$total_services"

if [ $healthy_services -eq $total_services ]; then
    echo "üéâ TOUS LES SERVICES SONT OP√âRATIONNELS !"
    exit 0
else
    echo "‚ö†Ô∏è  CERTAINS SERVICES ONT DES PROBL√àMES"
    exit 1
fi
EOF

    scp -o StrictHostKeyChecking=no /tmp/simple-health-check.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/simple-health-check.sh && /tmp/simple-health-check.sh"
    rm -f /tmp/simple-health-check.sh
}

# Configuration du replica set MongoDB
configure_mongodb_replica() {
    local ip="$1"
    log_info "üîß Configuration du replica set MongoDB..."
    
    # Script de configuration du replica set
    cat << 'EOF' > /tmp/configure-replica.sh
#!/bin/bash
cd /opt/meeshy

echo "üîß CONFIGURATION DU REPLICA SET MONGODB"
echo "======================================="

# V√©rifier que MongoDB est en cours d'ex√©cution
echo "üìä V√©rification de l'√©tat de MongoDB..."
docker-compose ps database

# Attendre que MongoDB soit pr√™t
echo "‚è≥ Attente que MongoDB soit pr√™t..."
# Attendre que MongoDB soit pr√™t (optimis√©)
echo "‚è≥ Attente de MongoDB..."
sleep 3
if docker-compose exec -T database mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ MongoDB pr√™t"
else
    echo "‚ö†Ô∏è  MongoDB en cours de d√©marrage..."
fi

# V√©rifier si le replica set est d√©j√† configur√©
echo "üîç V√©rification du statut du replica set..."
if docker-compose exec -T database mongosh --eval "rs.status()" >/dev/null 2>&1; then
    echo "‚úÖ Replica set d√©j√† configur√©"
    echo "üìä Statut actuel:"
    docker-compose exec -T database mongosh --eval "rs.status()" --quiet
else
    echo "üìã Initialisation du replica set rs0..."
    
    # Initialiser le replica set
    docker-compose exec -T database mongosh --eval "
        try {
            rs.initiate({
                _id: 'rs0',
                members: [
                    { _id: 0, host: 'meeshy-database:27017', priority: 1 }
                ]
            });
            print('‚úÖ Replica set rs0 initialis√© avec succ√®s');
        } catch (e) {
            if (e.message.includes('already initialized')) {
                print('‚ö†Ô∏è  Replica set d√©j√† initialis√©');
            } else {
                print('‚ùå Erreur initialisation replica set: ' + e.message);
                throw e;
            }
        }
    "
    
    # Attendre que le replica set soit pr√™t
    echo "‚è≥ Attente que le replica set soit pr√™t..."
    # Attendre que le replica set soit pr√™t (optimis√©)
    echo "‚è≥ Attente du replica set..."
    sleep 15
    if docker-compose exec -T database mongosh --eval "rs.status().ok" 2>/dev/null | grep -q "1"; then
        echo "‚úÖ Replica set rs0 pr√™t"
    else
        echo "‚ö†Ô∏è  Replica set en cours d'initialisation..."
    fi
fi

# V√©rifier le statut final
echo "üìä Statut final du replica set:"
docker-compose exec -T database mongosh --eval "rs.status()" --quiet

# Tester la connexion avec le replica set
echo "üîç Test de connexion avec le replica set..."
if docker-compose exec -T database mongosh --eval "use meeshy; db.runCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ Connexion √† la base de donn√©es avec replica set r√©ussie"
else
    echo "‚ùå Probl√®me de connexion √† la base de donn√©es"
    exit 1
fi

echo "üéâ Configuration du replica set MongoDB termin√©e avec succ√®s!"
echo "üîó String de connexion: mongodb://meeshy-database:27017/meeshy?replicaSet=rs0"
EOF

    scp -o StrictHostKeyChecking=no /tmp/configure-replica.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/configure-replica.sh && /tmp/configure-replica.sh"
    rm -f /tmp/configure-replica.sh
}

# Correction des permissions du translator
fix_translator_permissions() {
    local ip="$1"
    log_info "üîß Correction des permissions du container meeshy-translator..."
    
    # Script de correction des permissions
    cat << 'EOF' > /tmp/fix-translator-permissions.sh
#!/bin/bash
cd /opt/meeshy

echo "üîß CORRECTION DES PERMISSIONS DU CONTAINER MEESHY-TRANSLATOR"
echo "=========================================================="

# V√©rifier que les volumes existent
echo "üîç V√©rification des volumes translator..."
VOLUMES=$(docker volume ls | grep translator | awk '{print $2}')
if [ -z "$VOLUMES" ]; then
    echo "‚ùå Aucun volume translator trouv√©"
    exit 1
fi

echo "‚úÖ Volumes translator trouv√©s:"
echo "$VOLUMES" | while read volume; do
    echo "  ‚Ä¢ $volume"
done

echo ""
echo "üîß Correction des permissions des volumes..."

# Fonction pour corriger les permissions d'un volume
fix_volume_permissions() {
    local volume_name="$1"
    local mount_path="$2"
    local user_id="${3:-1000}"
    local group_id="${4:-1000}"
    
    echo "  ‚Ä¢ Correction des permissions du volume $volume_name..."
    
    # D√©terminer le chemin selon le type de volume
    case $volume_name in
        *models*)
            path="/workspace/models"
            ;;
        *cache*)
            path="/workspace/cache"
            ;;
        *generated*)
            path="/workspace/generated"
            ;;
        *)
            path="/workspace"
            ;;
    esac
    
    # Corriger les permissions
    docker run --rm -v "$volume_name:$path" alpine:latest sh -c "
        echo 'üîß Correction des permissions du volume $volume_name...'
        chown -R $user_id:$group_id $path 2>/dev/null || true
        chmod -R 755 $path 2>/dev/null || true
        echo '‚úÖ Permissions corrig√©es pour $volume_name'
    "
    
    echo "    ‚úÖ Permissions corrig√©es pour $volume_name"
}

# Corriger les permissions de chaque volume
for volume in $VOLUMES; do
    fix_volume_permissions "$volume" "/workspace" "1000" "1000"
done

echo ""
echo "üîÑ Red√©marrage du service translator..."

# Red√©marrer le translator
docker-compose restart translator

echo ""
echo "‚è≥ Attente du red√©marrage du translator..."
sleep 20

echo ""
echo "üîç V√©rification du statut du translator..."

# V√©rifier le statut
STATUS=$(docker-compose ps translator | grep translator)
echo "$STATUS"

# V√©rifier les logs r√©cents pour voir si les mod√®les se chargent
echo ""
echo "üìã V√©rification des logs r√©cents du translator..."
docker logs meeshy-translator --tail 20

echo ""
echo "üéâ Correction des permissions termin√©e !"
echo ""
echo "üí° Si le translator a encore des probl√®mes:"
echo "  ‚Ä¢ V√©rifiez les logs: docker logs meeshy-translator"
echo "  ‚Ä¢ Red√©marrez manuellement: docker-compose restart translator"
echo "  ‚Ä¢ V√©rifiez l'espace disque: df -h"
EOF

    scp -o StrictHostKeyChecking=no /tmp/fix-translator-permissions.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/fix-translator-permissions.sh && /tmp/fix-translator-permissions.sh"
    rm -f /tmp/fix-translator-permissions.sh
}

# Test des certificats SSL et configuration Traefik
test_ssl_certificates() {
    local ip="$1"
    log_info "üîí Test des certificats SSL et configuration Traefik..."
    
    # Script de test SSL
    cat << 'EOF' > /tmp/test-ssl.sh
#!/bin/bash
cd /opt/meeshy

echo "üîí TEST DES CERTIFICATS SSL ET CONFIGURATION TRAEFIK"
echo "=================================================="

# V√©rifier que Traefik est en cours d'ex√©cution
echo "üìä V√©rification de l'√©tat de Traefik..."
docker-compose ps traefik

# V√©rifier les volumes de certificats
echo "üìÅ V√©rification des volumes de certificats..."
if docker volume ls | grep -q "traefik_certs"; then
    echo "‚úÖ Volume traefik_certs trouv√©"
    
    # V√©rifier le contenu du volume
    echo "üìã Contenu du volume de certificats:"
    docker run --rm -v meeshy_traefik_certs:/data alpine ls -la /data/ 2>/dev/null || echo "Volume vide ou inaccessible"
else
    echo "‚ùå Volume traefik_certs non trouv√©"
fi

# Test de redirection HTTP vers HTTPS
echo "üîÑ Test de redirection HTTP vers HTTPS..."
if curl -f -s -I http://localhost:80 | grep -q "301\|302"; then
    echo "‚úÖ Redirection HTTP vers HTTPS configur√©e"
    echo "üìã D√©tails de la redirection:"
    curl -f -s -I http://localhost:80 | grep -i "location\|status"
else
    echo "‚ö†Ô∏è  Redirection HTTP vers HTTPS non d√©tect√©e"
fi

# Test des sous-domaines (si domaine configur√©)
if [ -n "$DOMAIN" ] && [ "$DOMAIN" != "localhost" ]; then
    echo "üåê Test des sous-domaines avec SSL..."
    
    # Test du frontend principal
    echo "üîç Test du frontend principal ($DOMAIN)..."
    if curl -f -s -H "Host: $DOMAIN" http://localhost >/dev/null 2>&1; then
        echo "‚úÖ Frontend accessible via $DOMAIN"
    else
        echo "‚ùå Frontend non accessible via $DOMAIN"
    fi
    
    # Test du dashboard Traefik
    echo "üîç Test du dashboard Traefik (traefik.$DOMAIN)..."
    if curl -f -s -H "Host: traefik.$DOMAIN" http://localhost >/dev/null 2>&1; then
        echo "‚úÖ Dashboard Traefik accessible via traefik.$DOMAIN"
    else
        echo "‚ùå Dashboard Traefik non accessible via traefik.$DOMAIN"
    fi
    
    # Test de l'API Gateway
    echo "üîç Test de l'API Gateway (gate.$DOMAIN)..."
    if curl -f -s -H "Host: gate.$DOMAIN" http://localhost/health >/dev/null 2>&1; then
        echo "‚úÖ API Gateway accessible via gate.$DOMAIN"
    else
        echo "‚ùå API Gateway non accessible via gate.$DOMAIN"
    fi
    
    # Test du service ML
    echo "üîç Test du service ML (ml.$DOMAIN)..."
    if curl -f -s -H "Host: ml.$DOMAIN" http://localhost/health >/dev/null 2>&1; then
        echo "‚úÖ Service ML accessible via ml.$DOMAIN"
    else
        echo "‚ùå Service ML non accessible via ml.$DOMAIN"
    fi
else
    echo "‚ÑπÔ∏è  Domaine non configur√©, tests SSL externes ignor√©s"
fi

# V√©rifier les logs Traefik pour les erreurs SSL
echo "üìã V√©rification des logs Traefik pour les erreurs SSL..."
docker-compose logs --tail 20 traefik | grep -i "ssl\|tls\|certificate\|acme" || echo "Aucun log SSL r√©cent"

echo "üéâ Test des certificats SSL termin√©!"
EOF

    scp -o StrictHostKeyChecking=no /tmp/test-ssl.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/test-ssl.sh && /tmp/test-ssl.sh"
    rm -f /tmp/test-ssl.sh
}

# D√©ploiement fiable des mots de passe Traefik
deploy_traefik_passwords() {
    local ip="$1"
    log_info "üîê D√©ploiement fiable des mots de passe Traefik..."
    
    # V√©rification du fichier clear.txt
    local clear_file="secrets/clear.txt"
    if [ ! -f "$clear_file" ]; then
        log_error "Fichier $clear_file non trouv√©"
        return 1
    fi
    
    # Extraction du mot de passe admin
    local admin_password=$(grep "ADMIN_PASSWORD_CLEAR=" "$clear_file" | cut -d'"' -f2)
    if [ -z "$admin_password" ]; then
        log_error "Mot de passe admin non trouv√© dans $clear_file"
        return 1
    fi
    
    log_info "Mot de passe admin extrait: ${admin_password:0:4}****"
    
    # G√©n√©ration du hash bcrypt
    log_info "G√©n√©ration du hash bcrypt..."
    local bcrypt_hash=$(htpasswd -nbB admin "$admin_password")
    if [ -z "$bcrypt_hash" ]; then
        log_error "√âchec de la g√©n√©ration du hash bcrypt"
        return 1
    fi
    
    log_success "Hash bcrypt g√©n√©r√©: ${bcrypt_hash:0:20}****"
    
    # Cr√©ation du script de d√©ploiement
    local temp_script="/tmp/deploy-traefik-passwords.sh"
    cat > "$temp_script" << EOF
#!/bin/bash
set -e

echo "üîê D√âPLOIEMENT DES MOTS DE PASSE TRAEFIK"
echo "========================================"

cd /opt/meeshy

# Sauvegarde du fichier .env
cp .env .env.backup.\$(date +%Y%m%d_%H%M%S)
echo "‚úÖ Sauvegarde du fichier .env cr√©√©e"

# Hash bcrypt √† utiliser
BCRYPT_HASH="$bcrypt_hash"

# Mise √† jour des variables Traefik
echo "üîß Mise √† jour des variables TRAEFIK_USERS et API_USERS..."

# Mettre √† jour TRAEFIK_USERS
if grep -q "TRAEFIK_USERS=" .env; then
    sed -i "s|TRAEFIK_USERS=.*|TRAEFIK_USERS=\"\$BCRYPT_HASH\"|" .env
else
    echo "TRAEFIK_USERS=\"\$BCRYPT_HASH\"" >> .env
fi

# Mettre √† jour API_USERS
if grep -q "API_USERS=" .env; then
    sed -i "s|API_USERS=.*|API_USERS=\"\$BCRYPT_HASH\"|" .env
else
    echo "API_USERS=\"\$BCRYPT_HASH\"" >> .env
fi

echo "‚úÖ Variables mises √† jour dans .env"

# √âchapper les $ pour Docker Compose (seulement pour les variables Traefik)
sed -i 's|_USERS="admin:\$2y\$05\$|_USERS="admin:\$\$2y\$\$05\$\$|g' .env

echo "‚úÖ Variables Traefik √©chapp√©es pour Docker Compose"

# Recr√©ation du conteneur Traefik
echo "üîÑ Recr√©ation du conteneur Traefik..."
docker-compose up -d traefik

# Attente du red√©marrage
echo "‚è≥ Attente du red√©marrage de Traefik..."
sleep 15

# V√©rification que Traefik est op√©rationnel
echo "üîç V√©rification du statut de Traefik..."
if docker ps | grep -q "meeshy-traefik.*Up"; then
    echo "‚úÖ Traefik red√©marr√© avec succ√®s"
else
    echo "‚ùå Probl√®me avec le red√©marrage de Traefik"
    exit 1
fi

echo "üéâ D√©ploiement des mots de passe Traefik termin√© !"
echo ""
echo "üîê INFORMATIONS DE CONNEXION:"
echo "   URL: https://traefik.meeshy.me"
echo "   Utilisateur: admin"
echo "   Mot de passe: $admin_password"
echo ""
EOF

    # Transfert et ex√©cution du script
    log_info "Transfert du script de d√©ploiement vers le serveur..."
    scp -o StrictHostKeyChecking=no "$temp_script" root@$ip:/tmp/
    
    log_info "Ex√©cution du script de d√©ploiement..."
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/deploy-traefik-passwords.sh && /tmp/deploy-traefik-passwords.sh"
    
    # Nettoyage
    rm -f "$temp_script"
    ssh -o StrictHostKeyChecking=no root@$ip "rm -f /tmp/deploy-traefik-passwords.sh"
    
    log_success "D√©ploiement des mots de passe Traefik termin√© !"
    echo ""
    echo "üîê ACC√àS TRAEFIK:"
    echo "   URL: https://traefik.meeshy.me"
    echo "   Utilisateur: admin"
    echo "   Mot de passe: $admin_password"
    echo ""
    echo "üß™ Test de connexion:"
    echo "   curl -u admin:$admin_password https://traefik.meeshy.me"
}

# Tests complets
run_tests() {
    local ip="$1"
    log_info "üß™ Tests complets des services..."

    # Script de tests
    cat << 'EOF' > /tmp/run-tests.sh
#!/bin/bash
cd /opt/meeshy

echo "üß™ TESTS COMPLETS POST-D√âPLOIEMENT"
echo "=================================="

# √âtat Docker
echo "üê≥ Services Docker:"
docker-compose ps

# Tests de performance
echo ""
echo "‚è±Ô∏è  TESTS DE PERFORMANCE:"

# MongoDB
start_time=$(date +%s%N)
docker-compose exec -T mongodb mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1
end_time=$(date +%s%N)
mongo_latency=$(( (end_time - start_time) / 1000000 ))
echo "üìä MongoDB: ${mongo_latency}ms"

# Gateway
start_time=$(date +%s%N)
curl -f -s http://localhost:3000/health >/dev/null 2>&1
end_time=$(date +%s%N)
gateway_latency=$(( (end_time - start_time) / 1000000 ))
echo "üö™ Gateway: ${gateway_latency}ms"

# Translator
start_time=$(date +%s%N)
curl -f -s http://localhost:8000/health >/dev/null 2>&1
end_time=$(date +%s%N)
translator_latency=$(( (end_time - start_time) / 1000000 ))
echo "üåê Translator: ${translator_latency}ms"

echo "‚úÖ Tests termin√©s"
EOF

    scp -o StrictHostKeyChecking=no /tmp/run-tests.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/run-tests.sh && /tmp/run-tests.sh"
    rm -f /tmp/run-tests.sh
}

# V√©rification des connexions
verify_connections() {
    local ip="$1"
    log_info "üîå V√©rification des connexions..."

    # Script de v√©rification
    cat << 'EOF' > /tmp/verify-conn.sh
#!/bin/bash
cd /opt/meeshy

echo "üîå V√âRIFICATION DES CONNEXIONS"
echo "=============================="

# MongoDB + Prisma
echo "üóÑÔ∏è  MongoDB + Prisma:"
if docker-compose logs gateway | grep -i "prisma" >/dev/null 2>&1; then
    echo "  ‚úÖ Gateway: Prisma initialis√©"
else
    echo "  ‚ö†Ô∏è  Gateway: Prisma non d√©tect√©"
fi

if docker-compose logs translator | grep -i "prisma" >/dev/null 2>&1; then
    echo "  ‚úÖ Translator: Prisma initialis√©"
else
    echo "  ‚ö†Ô∏è  Translator: Prisma non d√©tect√©"
fi

# ZMQ
echo "üîå ZMQ:"
if netstat -tuln 2>/dev/null | grep -q ":5555\|:5558"; then
    echo "  ‚úÖ Ports ZMQ ouverts"
else
    echo "  ‚ö†Ô∏è  Ports ZMQ non d√©tect√©s"
fi

# REST
echo "üåê REST:"
if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
    echo "  ‚úÖ Gateway /health OK"
else
    echo "  ‚ùå Gateway /health KO"
fi

if curl -f -s http://localhost:8000/health >/dev/null 2>&1; then
    echo "  ‚úÖ Translator /health OK"
else
    echo "  ‚ùå Translator /health KO"
fi

echo "‚úÖ V√©rification termin√©e"
EOF

    scp -o StrictHostKeyChecking=no /tmp/verify-conn.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/verify-conn.sh && /tmp/verify-conn.sh"
    rm -f /tmp/verify-conn.sh
}

# Red√©marrage des services
restart_services() {
    local ip="$1"
    log_info "üîÑ Red√©marrage des services..."

    cat << 'EOF' > /tmp/restart.sh
#!/bin/bash
cd /opt/meeshy
docker-compose down --remove-orphans || true
docker system prune -f || true
docker-compose pull
docker-compose up -d
sleep 30
docker-compose ps
echo "‚úÖ Services red√©marr√©s"
EOF

    scp -o StrictHostKeyChecking=no /tmp/restart.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/restart.sh && /tmp/restart.sh"
    rm -f /tmp/restart.sh
}

# Fonction pour reset complet (Traefik + Base de donn√©es)
reset_complete() {
    local ip="$1"
    local domain="${2:-localhost}"
    log_info "üîÑ Reset complet sur $ip (domaine: $domain) - Traefik + Base de donn√©es"

    # Script de reset complet
    cat << 'EOF' > /tmp/reset-complete.sh
#!/bin/bash
set -e

echo "üîÑ RESET COMPLET - TRAEFIK + BASE DE DONN√âES"
echo "==========================================="

# Arr√™ter tous les services
echo "‚èπÔ∏è  Arr√™t de tous les services..."
docker-compose down --remove-orphans || true

# Supprimer TOUS les volumes (Traefik + Base de donn√©es + Cache)
echo "üóëÔ∏è  Suppression de TOUS les volumes..."
docker volume rm meeshy_traefik_certs 2>/dev/null || true
docker volume rm meeshy_traefik_data 2>/dev/null || true
docker volume rm meeshy_mongodb_data 2>/dev/null || true
docker volume rm meeshy_redis_data 2>/dev/null || true
docker volume rm meeshy_models_data 2>/dev/null || true
docker volume rm meeshy_translator_cache 2>/dev/null || true
docker volume rm meeshy_translator_generated 2>/dev/null || true

# Nettoyage complet du syst√®me Docker
echo "üßπ Nettoyage complet du syst√®me Docker..."
docker system prune -af || true
docker volume prune -f || true
docker network prune -f || true

# Supprimer les images inutilis√©es
echo "üóëÔ∏è  Suppression des images inutilis√©es..."
docker image prune -af || true

echo "‚úÖ Reset complet termin√© - Tous les volumes et donn√©es supprim√©s"
EOF

    # Ex√©cuter le reset complet
    scp -o StrictHostKeyChecking=no /tmp/reset-complete.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/reset-complete.sh && cd /opt/meeshy && /tmp/reset-complete.sh"
    rm -f /tmp/reset-complete.sh

    log_success "Reset complet termin√© - Red√©marrage du d√©ploiement..."
    
    # Red√©ployer avec les nouvelles configurations
    deploy_complete "$ip" "$domain"
}

# Afficher l'aide
show_help() {
    echo -e "${BLUE}üöÄ MEESHY - SCRIPT UNIFI√â DE D√âPLOIEMENT${NC}"
    echo "================================================"
    echo ""
    echo -e "${GREEN}Usage:${NC}"
    echo "  $0 [COMMAND] [DROPLET_IP] [--force-refresh]"
    echo ""
    echo -e "${GREEN}Commands:${NC}"
    echo -e "${CYAN}  deploy${NC}       - D√©ploiement complet"
    echo -e "${CYAN}  deploy-reset${NC} - D√©ploiement avec reset complet (Traefik + DB)"
    echo -e "${CYAN}  fix${NC}          - Correction rapide (red√©marrage)"
    echo -e "${CYAN}  test${NC}         - Tests complets post-d√©ploiement"
    echo -e "${CYAN}  verify${NC}       - V√©rification des connexions"
    echo -e "${CYAN}  health${NC}       - V√©rification compl√®te de sant√©"
    echo -e "${CYAN}  simple-health${NC} - V√©rification simple et robuste"
    echo -e "${CYAN}  replica${NC}      - Configuration du replica set MongoDB"
    echo -e "${CYAN}  ssl${NC}          - Test des certificats SSL et Traefik"
    echo -e "${CYAN}  fix-translator${NC} - Correction des permissions du container translator"
    echo -e "${CYAN}  deploy-passwords${NC} - D√©ploiement fiable des mots de passe Traefik"
    echo -e "${CYAN}  status${NC}       - √âtat des services"
    echo -e "${CYAN}  logs${NC}         - Logs des services"
    echo -e "${CYAN}  restart${NC}      - Red√©marrage des services"
    echo -e "${CYAN}  stop${NC}         - Arr√™t des services"
    echo -e "${CYAN}  recreate${NC}     - Recr√©ation du droplet"
    echo ""
    echo -e "${GREEN}Options:${NC}"
    echo -e "${CYAN}  --force-refresh${NC} - Forcer le t√©l√©chargement des images"
    echo ""
    echo -e "${GREEN}Exemples:${NC}"
    echo "  $0 deploy 157.230.15.51"
    echo "  $0 deploy-reset 157.230.15.51"
    echo "  $0 test 157.230.15.51"
    echo "  $0 verify 157.230.15.51"
    echo "  $0 simple-health 157.230.15.51"
    echo "  $0 replica 157.230.15.51"
    echo "  $0 ssl 157.230.15.51"
    echo "  $0 fix-translator 157.230.15.51"
    echo "  $0 deploy-passwords 157.230.15.51"
    echo "  $0 --force-refresh deploy 157.230.15.51"
    echo ""
    echo -e "${YELLOW}üí° Toutes les connexions sont v√©rifi√©es automatiquement${NC}"
    echo -e "${YELLOW}üí° MongoDB, ZMQ et REST endpoints valid√©s${NC}"
    echo -e "${RED}‚ö†Ô∏è  deploy-reset supprime TOUTES les donn√©es (Traefik + DB)${NC}"
}

# Point d'entr√©e principal
main() {
    # Parsing des options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force-refresh)
                FORCE_REFRESH=true
                shift
                ;;
            *)
                break
                ;;
        esac
    done

    COMMAND="${1:-}"
    DROPLET_IP="$2"

    case "$COMMAND" in
        "deploy")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            # R√©cup√©rer le domaine depuis l'environnement ou utiliser localhost
            local domain=$(grep "^DOMAIN=" env.digitalocean 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "localhost")
            deploy_complete "$DROPLET_IP" "$domain"
            ;;
        "deploy-reset")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            # R√©cup√©rer le domaine depuis l'environnement ou utiliser localhost
            local domain=$(grep "^DOMAIN=" env.digitalocean 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "localhost")
            reset_complete "$DROPLET_IP" "$domain"
            ;;
        "fix")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            deploy_fix "$DROPLET_IP"
            ;;
        "test")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            run_tests "$DROPLET_IP"
            ;;
        "verify")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            verify_connections "$DROPLET_IP"
            ;;
        "health")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            health_check "$DROPLET_IP"
            ;;
        "simple-health")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            simple_health_check "$DROPLET_IP"
            ;;
        "replica")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            configure_mongodb_replica "$DROPLET_IP"
            ;;
        "ssl")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            test_ssl_certificates "$DROPLET_IP"
            ;;
        "fix-translator")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            fix_translator_permissions "$DROPLET_IP"
            ;;
        "deploy-passwords")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            deploy_traefik_passwords "$DROPLET_IP"
            ;;
        "status")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "cd /opt/meeshy && docker-compose ps"
            ;;
        "logs")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "cd /opt/meeshy && docker-compose logs --tail=50"
            ;;
        "restart")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            restart_services "$DROPLET_IP"
            ;;
        "stop")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "cd /opt/meeshy && docker-compose down"
            log_success "Services arr√™t√©s"
            ;;
        "ssl")
            if [ -z "$DROPLET_IP" ]; then
                log_error "IP du droplet manquante"
                show_help
                exit 1
            fi
            test_ssh_connection "$DROPLET_IP" || exit 1
            local ssl_command="${3:-help}"
            local domain="${4:-'meeshy.me'}"
            local email="${5:-'admin@meeshy.me'}"
            ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "cd /opt/meeshy && ./scripts/manage-ssl.sh $ssl_command $domain $email"
            ;;
        "recreate")
            log_error "Fonction recreate non impl√©ment√©e - utiliser DigitalOcean directement"
            log_info "Alternative: doctl compute droplet delete <id> && doctl compute droplet create..."
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            log_error "Commande inconnue: $COMMAND"
            show_help
            exit 1
            ;;
    esac
}

# Ex√©cuter le script principal
main "$@"
