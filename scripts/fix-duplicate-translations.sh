#!/bin/bash

# Script pour corriger les traductions en doublon
# Ce script applique toutes les corrections n√©cessaires

set -e  # Arr√™ter en cas d'erreur

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo "=========================================="
echo "üîß Correction des traductions en doublon"
echo "=========================================="
echo ""

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fonction pour afficher les logs
log_info() {
    echo -e "${GREEN}‚úì${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

log_error() {
    echo -e "${RED}‚úó${NC} $1"
}

# V√©rifier si on est dans le bon r√©pertoire
if [ ! -f "$PROJECT_ROOT/package.json" ]; then
    log_error "Ce script doit √™tre ex√©cut√© depuis le r√©pertoire racine du projet"
    exit 1
fi

# √âtape 1: V√©rifier que Node.js est install√©
echo "üìã √âtape 1: V√©rification des pr√©requis"
if ! command -v node &> /dev/null; then
    log_error "Node.js n'est pas install√©"
    exit 1
fi
log_info "Node.js version: $(node --version)"
echo ""

# √âtape 2: Nettoyer les doublons existants (mode dry-run d'abord)
echo "üìã √âtape 2: Test de nettoyage des doublons (dry-run)"
log_warning "Ex√©cution en mode dry-run (aucune modification)"
cd "$PROJECT_ROOT"
node scripts/cleanup-duplicate-translations.js --dry-run

echo ""
read -p "Voulez-vous continuer et supprimer r√©ellement les doublons? (y/N) " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_warning "Op√©ration annul√©e par l'utilisateur"
    exit 0
fi

# √âtape 3: Nettoyer les doublons existants (r√©el)
echo ""
echo "üìã √âtape 3: Nettoyage des doublons"
node scripts/cleanup-duplicate-translations.js
log_info "Nettoyage termin√©"
echo ""

# √âtape 4: G√©n√©rer les clients Prisma
echo "üìã √âtape 4: G√©n√©ration des clients Prisma"
cd "$PROJECT_ROOT/gateway"
log_info "G√©n√©ration du client Prisma..."
npx prisma generate
log_info "Client Prisma g√©n√©r√©"
echo ""

# √âtape 5: Instructions pour cr√©er l'index MongoDB
echo "üìã √âtape 5: Cr√©ation de l'index unique MongoDB"
echo ""
log_warning "IMPORTANT: Vous devez cr√©er manuellement l'index unique dans MongoDB"
echo ""
echo "Ex√©cutez les commandes suivantes dans mongosh:"
echo ""
echo "----------------------------------------"
echo "use meeshy"
echo ""
echo "db.MessageTranslation.createIndex("
echo "  { messageId: 1, targetLanguage: 1 },"
echo "  { unique: true, name: \"message_target_language_unique\" }"
echo ")"
echo ""
echo "db.MessageTranslation.getIndexes()"
echo "----------------------------------------"
echo ""

read -p "Appuyez sur Entr√©e une fois l'index cr√©√© dans MongoDB..." -r
echo ""

# √âtape 6: V√©rifier l'index
echo "üìã √âtape 6: V√©rification de l'index MongoDB"
log_info "V√©rification de l'index..."
echo ""
echo "Ex√©cutez cette commande pour v√©rifier:"
echo "mongosh --eval 'use meeshy; db.MessageTranslation.getIndexes()'"
echo ""

# √âtape 7: Red√©marrer les services
echo "üìã √âtape 7: Red√©marrage des services"
read -p "Voulez-vous red√©marrer les services? (y/N) " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    cd "$PROJECT_ROOT"
    if [ -f "docker-compose.yml" ]; then
        log_info "Red√©marrage via docker-compose..."
        docker-compose restart gateway
    else
        log_warning "docker-compose.yml non trouv√©, red√©marrage manuel n√©cessaire"
    fi
fi

echo ""
echo "=========================================="
echo "‚úÖ Corrections appliqu√©es avec succ√®s!"
echo "=========================================="
echo ""
echo "üìù Prochaines √©tapes:"
echo "  1. V√©rifier les logs du gateway"
echo "  2. Tester l'envoi de messages"
echo "  3. V√©rifier qu'il n'y a plus de doublons"
echo ""
echo "üìÑ Consultez TRADUCTIONS_DOUBLONS_FIX.md pour plus de d√©tails"
echo ""

