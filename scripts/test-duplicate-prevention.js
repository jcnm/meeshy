#!/usr/bin/env node
/**
 * Script pour tester la pr√©vention des doublons dans les conversations
 * Meeshy - Test de la pr√©vention des doublons
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDuplicatePrevention() {
  console.log('üß™ Test de la pr√©vention des doublons dans les conversations...\n');

  try {
    // 1. Trouver une conversation de test
    const testConversation = await prisma.conversation.findFirst({
      where: {
        identifier: 'meeshy'
      }
    });

    if (!testConversation) {
      console.log('‚ùå Aucune conversation de test trouv√©e');
      return;
    }

    console.log(`üìã Conversation de test: ${testConversation.title || testConversation.identifier} (ID: ${testConversation.id})`);

    // 2. Trouver un utilisateur de test
    const testUser = await prisma.user.findFirst({
      where: {
        isActive: true
      }
    });

    if (!testUser) {
      console.log('‚ùå Aucun utilisateur de test trouv√©');
      return;
    }

    console.log(`üë§ Utilisateur de test: ${testUser.username} (ID: ${testUser.id})`);

    // 3. V√©rifier si l'utilisateur est d√©j√† membre
    const existingMember = await prisma.conversationMember.findFirst({
      where: {
        conversationId: testConversation.id,
        userId: testUser.id,
        isActive: true
      }
    });

    if (existingMember) {
      console.log(`‚úÖ L'utilisateur est d√©j√† membre (ID: ${existingMember.id})`);
      
      // 4. Tester la pr√©vention de doublon
      console.log('\nüß™ Test de la pr√©vention de doublon...');
      
      try {
        // Essayer d'ajouter l'utilisateur √† nouveau
        await prisma.conversationMember.create({
          data: {
            conversationId: testConversation.id,
            userId: testUser.id,
            role: 'MEMBER',
            joinedAt: new Date(),
            isActive: true
          }
        });
        
        console.log('‚ùå ERREUR: Un doublon a √©t√© cr√©√© ! La contrainte unique ne fonctionne pas.');
        
        // Nettoyer le doublon cr√©√©
        const duplicates = await prisma.conversationMember.findMany({
          where: {
            conversationId: testConversation.id,
            userId: testUser.id,
            isActive: true
          },
          orderBy: {
            joinedAt: 'asc'
          }
        });

        if (duplicates.length > 1) {
          const toDelete = duplicates.slice(1);
          for (const duplicate of toDelete) {
            await prisma.conversationMember.update({
              where: { id: duplicate.id },
              data: { isActive: false }
            });
            console.log(`üßπ Doublon ${duplicate.id} nettoy√©`);
          }
        }
        
      } catch (error) {
        if (error.code === 'P2002') {
          console.log('‚úÖ SUCC√àS: La contrainte unique emp√™che la cr√©ation de doublons !');
          console.log(`   Erreur attendue: ${error.message}`);
        } else {
          console.log(`‚ùå Erreur inattendue: ${error.message}`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è  L\'utilisateur n\'est pas encore membre de cette conversation');
      
      // 5. Ajouter l'utilisateur une premi√®re fois
      console.log('\n‚ûï Ajout de l\'utilisateur √† la conversation...');
      
      const newMember = await prisma.conversationMember.create({
        data: {
          conversationId: testConversation.id,
          userId: testUser.id,
          role: 'MEMBER',
          joinedAt: new Date(),
          isActive: true
        }
      });
      
      console.log(`‚úÖ Utilisateur ajout√© (ID: ${newMember.id})`);
      
      // 6. Tester la pr√©vention de doublon
      console.log('\nüß™ Test de la pr√©vention de doublon...');
      
      try {
        // Essayer d'ajouter l'utilisateur √† nouveau
        await prisma.conversationMember.create({
          data: {
            conversationId: testConversation.id,
            userId: testUser.id,
            role: 'MEMBER',
            joinedAt: new Date(),
            isActive: true
          }
        });
        
        console.log('‚ùå ERREUR: Un doublon a √©t√© cr√©√© ! La contrainte unique ne fonctionne pas.');
        
      } catch (error) {
        if (error.code === 'P2002') {
          console.log('‚úÖ SUCC√àS: La contrainte unique emp√™che la cr√©ation de doublons !');
          console.log(`   Erreur attendue: ${error.message}`);
        } else {
          console.log(`‚ùå Erreur inattendue: ${error.message}`);
        }
      }
    }

    console.log('\n‚úÖ Test de pr√©vention des doublons termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
testDuplicatePrevention();
