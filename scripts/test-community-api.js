#!/usr/bin/env node

/**
 * Script de test pour diagnostiquer le probl√®me avec l'API des communaut√©s
 */

const axios = require('axios');

const GATEWAY_URL = 'http://localhost:3000';

// Fonction pour tester l'authentification
async function testAuth() {
  try {
    console.log('üîê Test d\'authentification...');
    
    // Connexion avec un utilisateur existant
    const loginResponse = await axios.post(`${GATEWAY_URL}/auth/login`, {
      email: 'admin@meeshy.com', // Ajustez selon votre configuration
      password: 'admin123' // Ajustez selon votre configuration
    });

    if (loginResponse.data.success) {
      console.log('‚úÖ Authentification r√©ussie');
      return loginResponse.data.data.token;
    } else {
      console.log('‚ùå √âchec de l\'authentification');
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erreur d\'authentification:', error.response?.data?.message || error.message);
    
    // Essayer avec d'autres credentials
    try {
      const loginResponse2 = await axios.post(`${GATEWAY_URL}/auth/login`, {
        email: 'meeshy@meeshy.com',
        password: 'meeshy123'
      });

      if (loginResponse2.data.success) {
        console.log('‚úÖ Authentification r√©ussie avec meeshy@meeshy.com');
        return loginResponse2.data.data.token;
      }
    } catch (error2) {
      console.log('‚ùå √âchec avec meeshy@meeshy.com aussi');
    }
    
    return null;
  }
}

// Fonction pour lister les communaut√©s
async function testListCommunities(token) {
  try {
    console.log('\nüìã Test de la liste des communaut√©s...');
    
    const response = await axios.get(`${GATEWAY_URL}/communities`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.data.success) {
      const communities = response.data.data;
      console.log('‚úÖ Liste des communaut√©s r√©cup√©r√©e avec succ√®s:');
      console.log(`   - Nombre de communaut√©s: ${communities.length}`);
      
      if (communities.length > 0) {
        console.log('\n   Communaut√©s disponibles:');
        communities.forEach((community, index) => {
          console.log(`   ${index + 1}. ${community.name} (${community.identifier || community.id})`);
          console.log(`      - ID: ${community.id}`);
          console.log(`      - Identifier: ${community.identifier || 'Non d√©fini'}`);
          console.log(`      - Cr√©ateur: ${community.creator?.username || 'Inconnu'}`);
          console.log(`      - Membres: ${community._count?.members || 0}`);
          console.log(`      - Conversations: ${community._count?.Conversation || 0}`);
        });
        
        return communities;
      } else {
        console.log('   Aucune communaut√© trouv√©e');
        return [];
      }
    } else {
      console.log('‚ùå √âchec de la r√©cup√©ration de la liste des communaut√©s');
      return [];
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration de la liste des communaut√©s:', error.response?.data?.message || error.message);
    return [];
  }
}

// Fonction pour tester l'acc√®s √† une communaut√© sp√©cifique
async function testCommunityAccess(token, communityId) {
  try {
    console.log(`\nüîç Test d'acc√®s √† la communaut√©: ${communityId}`);
    
    const response = await axios.get(`${GATEWAY_URL}/communities/${communityId}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.data.success) {
      const community = response.data.data;
      console.log('‚úÖ Acc√®s √† la communaut√© r√©ussi:');
      console.log(`   - Nom: ${community.name}`);
      console.log(`   - ID: ${community.id}`);
      console.log(`   - Identifier: ${community.identifier || 'Non d√©fini'}`);
      console.log(`   - Cr√©ateur: ${community.creator?.username || 'Inconnu'}`);
      console.log(`   - Membres: ${community._count?.members || 0}`);
      console.log(`   - Conversations: ${community._count?.Conversation || 0}`);
      return true;
    } else {
      console.log('‚ùå √âchec de l\'acc√®s √† la communaut√©');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de l\'acc√®s √† la communaut√©:', error.response?.data?.message || error.message);
    if (error.response?.data) {
      console.log('   D√©tails de l\'erreur:', JSON.stringify(error.response.data, null, 2));
    }
    return false;
  }
}

// Fonction pour cr√©er une communaut√© de test
async function testCreateCommunity(token) {
  try {
    console.log('\n‚ûï Test de cr√©ation d\'une communaut√©...');
    
    const testCommunity = {
      name: 'Test Community',
      description: 'Communaut√© cr√©√©e pour les tests',
      isPrivate: false
    };
    
    const response = await axios.post(`${GATEWAY_URL}/communities`, testCommunity, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.data.success) {
      const community = response.data.data;
      console.log('‚úÖ Communaut√© cr√©√©e avec succ√®s:');
      console.log(`   - Nom: ${community.name}`);
      console.log(`   - ID: ${community.id}`);
      console.log(`   - Identifier: ${community.identifier || 'Non d√©fini'}`);
      return community;
    } else {
      console.log('‚ùå √âchec de la cr√©ation de la communaut√©');
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la cr√©ation de la communaut√©:', error.response?.data?.message || error.message);
    if (error.response?.data) {
      console.log('   D√©tails de l\'erreur:', JSON.stringify(error.response.data, null, 2));
    }
    return null;
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ D√©marrage des tests de l\'API des communaut√©s\n');
  
  // Test d'authentification
  const token = await testAuth();
  if (!token) {
    console.log('\n‚ùå Impossible de continuer sans authentification');
    process.exit(1);
  }
  
  // Test de la liste des communaut√©s
  const communities = await testListCommunities(token);
  
  // Test d'acc√®s aux communaut√©s existantes
  if (communities.length > 0) {
    console.log('\nüîç Test d\'acc√®s aux communaut√©s existantes...');
    for (const community of communities.slice(0, 3)) { // Tester les 3 premi√®res
      await testCommunityAccess(token, community.id);
      if (community.identifier) {
        await testCommunityAccess(token, community.identifier);
      }
    }
  } else {
    console.log('\n‚ûï Aucune communaut√© existante, test de cr√©ation...');
    const newCommunity = await testCreateCommunity(token);
    if (newCommunity) {
      await testCommunityAccess(token, newCommunity.id);
      if (newCommunity.identifier) {
        await testCommunityAccess(token, newCommunity.identifier);
      }
    }
  }
  
  console.log('\nüìã Tests termin√©s');
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Erreur non g√©r√©e:', reason);
  process.exit(1);
});

// Ex√©cution du script
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testAuth,
  testListCommunities,
  testCommunityAccess,
  testCreateCommunity
};
