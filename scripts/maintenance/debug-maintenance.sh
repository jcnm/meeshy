#!/bin/bash

# Script de diagnostic pour les t√¢ches de maintenance
set -e

echo "üîç Diagnostic des t√¢ches de maintenance automatiques"
echo "=================================================="

# Variables
GATEWAY_URL="http://localhost:3000"
MAINTENANCE_URL="$GATEWAY_URL/maintenance"

echo "üìä 1. V√©rification du service de maintenance..."
STATS=$(curl -s "$MAINTENANCE_URL/stats")
echo "   R√©ponse: $STATS"

# Extraire les informations
ONLINE_USERS=$(echo $STATS | jq -r '.data.onlineUsers')
TOTAL_USERS=$(echo $STATS | jq -r '.data.totalUsers')
MAINTENANCE_ACTIVE=$(echo $STATS | jq -r '.data.maintenanceActive')
OFFLINE_THRESHOLD=$(echo $STATS | jq -r '.data.offlineThresholdMinutes')

echo "   Utilisateurs en ligne: $ONLINE_USERS/$TOTAL_USERS"
echo "   Maintenance active: $MAINTENANCE_ACTIVE"
echo "   Seuil hors ligne: $OFFLINE_THRESHOLD minutes"

echo ""
echo "üîß 2. Test des fonctionnalit√©s manuelles..."

# Test du nettoyage
echo "   ‚Üí Test nettoyage des donn√©es..."
CLEANUP_RESPONSE=$(curl -s -X POST "$MAINTENANCE_URL/cleanup")
echo "   R√©ponse: $CLEANUP_RESPONSE"

# Test de mise √† jour de statut
echo "   ‚Üí Test mise √† jour statut utilisateur..."
TEST_USER_ID="debug-user-$(date +%s)"
STATUS_RESPONSE=$(curl -s -X POST "$MAINTENANCE_URL/user-status" \
  -H "Content-Type: application/json" \
  -d "{\"userId\":\"$TEST_USER_ID\",\"isOnline\":true}")
echo "   R√©ponse: $STATUS_RESPONSE"

echo ""
echo "üìã 3. V√©rification des logs de d√©marrage..."

# Chercher les logs de maintenance dans les derniers logs
echo "   ‚Üí Recherche dans les logs r√©cents..."
MAINTENANCE_LOGS=$(tail -n 1000 logs/gateway.log | grep -E "(maintenance|MaintenanceService|startMaintenanceTasks)" | wc -l)
echo "   Logs de maintenance trouv√©s: $MAINTENANCE_LOGS"

if [ "$MAINTENANCE_LOGS" -eq 0 ]; then
    echo "   ‚ö†Ô∏è  Aucun log de maintenance trouv√©"
    echo "   ‚Üí Recherche des logs d'initialisation..."
    INIT_LOGS=$(tail -n 1000 logs/gateway.log | grep -E "(MeeshySocketIOManager.*initialis√©|‚úÖ.*initialis√©)" | wc -l)
    echo "   Logs d'initialisation trouv√©s: $INIT_LOGS"
fi

echo ""
echo "üîç 4. V√©rification des erreurs..."

# Chercher les erreurs dans les logs
ERROR_LOGS=$(tail -n 1000 logs/gateway.log | grep -E "(error|Error|ERROR|‚ùå)" | wc -l)
echo "   Erreurs trouv√©es: $ERROR_LOGS"

if [ "$ERROR_LOGS" -gt 0 ]; then
    echo "   ‚Üí Derni√®res erreurs:"
    tail -n 1000 logs/gateway.log | grep -E "(error|Error|ERROR|‚ùå)" | tail -3
fi

echo ""
echo "üìä 5. V√©rification des processus..."

# V√©rifier si le processus gateway fonctionne
GATEWAY_PROCESSES=$(ps aux | grep -E "(gateway|node.*gateway)" | grep -v grep | wc -l)
echo "   Processus gateway actifs: $GATEWAY_PROCESSES"

if [ "$GATEWAY_PROCESSES" -gt 0 ]; then
    echo "   ‚Üí Processus gateway:"
    ps aux | grep -E "(gateway|node.*gateway)" | grep -v grep | head -3
fi

echo ""
echo "üéØ 6. Diagnostic des t√¢ches automatiques..."

if [ "$MAINTENANCE_ACTIVE" = "false" ]; then
    echo "   ‚ùå Les t√¢ches de maintenance automatiques ne sont pas actives"
    echo ""
    echo "üîç Causes possibles:"
    echo "   1. Erreur lors de l'initialisation du MaintenanceService"
    echo "   2. Erreur lors du d√©marrage des t√¢ches automatiques"
    echo "   3. Le code de maintenance n'est pas ex√©cut√©"
    echo "   4. Probl√®me de compilation TypeScript"
    echo ""
    echo "üí° Solutions:"
    echo "   - V√©rifier les logs d'erreur"
    echo "   - Red√©marrer le service gateway"
    echo "   - V√©rifier la compilation TypeScript"
    echo "   - Ajouter plus de logs de d√©bogage"
else
    echo "   ‚úÖ Les t√¢ches de maintenance automatiques sont actives"
fi

echo ""
echo "‚úÖ Diagnostic termin√©"
