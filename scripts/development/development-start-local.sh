#!/bin/bash

# üöÄ Script de d√©marrage pour l'environnement de d√©veloppement LOCAL
# Ce script d√©marre l'environnement complet Meeshy en mode d√©veloppement
# - Services Docker: MongoDB, Redis
# - Services Node: Gateway, Frontend, Translator (via scripts .sh)
# - Gestion propre de l'arr√™t avec Ctrl+C
set -e

# Variables globales pour le nettoyage
TRANSLATOR_PID=""
GATEWAY_PID=""
FRONTEND_PID=""
DOCKER_COMPOSE_STARTED=false

# Fonction de nettoyage appel√©e lors de l'arr√™t
cleanup() {
    echo ""
    echo -e "${YELLOW}üõë Arr√™t en cours... (Ctrl+C d√©tect√©)${NC}"
    
    # Arr√™ter les services Node.js
    if [ -n "$TRANSLATOR_PID" ] && kill -0 "$TRANSLATOR_PID" 2>/dev/null; then
        echo -e "${YELLOW}üõë Arr√™t du Translator (PID: $TRANSLATOR_PID)${NC}"
        kill -TERM "$TRANSLATOR_PID" 2>/dev/null || true
    fi
    
    if [ -n "$GATEWAY_PID" ] && kill -0 "$GATEWAY_PID" 2>/dev/null; then
        echo -e "${YELLOW}üõë Arr√™t du Gateway (PID: $GATEWAY_PID)${NC}"
        kill -TERM "$GATEWAY_PID" 2>/dev/null || true
    fi
    
    if [ -n "$FRONTEND_PID" ] && kill -0 "$FRONTEND_PID" 2>/dev/null; then
        echo -e "${YELLOW}üõë Arr√™t du Frontend (PID: $FRONTEND_PID)${NC}"
        kill -TERM "$FRONTEND_PID" 2>/dev/null || true
    fi
    
    # Arr√™ter les services Docker
    if [ "$DOCKER_COMPOSE_STARTED" = true ]; then
        echo -e "${YELLOW}üê≥ Arr√™t des services Docker...${NC}"
        cd /Users/smpceo/Downloads/Meeshy/meeshy
        docker-compose -f docker-compose.dev.yml down 2>/dev/null || true
    fi
    
    echo -e "${GREEN}‚úÖ Arr√™t termin√© proprement${NC}"
    exit 0
}

# Capturer les signaux pour un arr√™t propre
trap cleanup SIGINT SIGTERM

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}üöÄ D√©marrage de l'environnement Meeshy LOCAL (DEV)${NC}"
echo -e "${YELLOW}   Architecture: Services Node natifs + Services Docker${NC}"
echo -e "${PURPLE}   Utilisez Ctrl+C pour arr√™ter proprement tous les services${NC}"
echo ""

# Export et configuration des variables d'environnement pour localhost
echo -e "${BLUE}üîß Configuration des variables d'environnement...${NC}"

# Variables d'environnement pour le d√©veloppement LOCAL
export NODE_ENV="development"
export ENVIRONMENT="local"

# Base de donn√©es et cache (Docker sur localhost)
export DATABASE_TYPE="MONGODB"
export DATABASE_URL="mongodb://meeshy:MeeshyPassword123@localhost:27017/meeshy?authSource=admin&replicaSet=rs0"
export REDIS_URL="redis://localhost:6379"

# URLs des services (natifs sur localhost)
export TRANSLATOR_URL="http://localhost:8000"
export GATEWAY_URL="http://localhost:3000"
export FRONTEND_URL="http://localhost:3100"

# Configuration WebSocket et API pour localhost
export NEXT_PUBLIC_API_URL="http://localhost:3000"
export NEXT_PUBLIC_TRANSLATION_URL="http://localhost:8000"
export NEXT_PUBLIC_WS_URL="ws://localhost:3000/api/ws"

# Configuration ZMQ (communication inter-services sur localhost)
export ZMQ_PUSH_URL="tcp://localhost:5555"
export ZMQ_SUB_URL="tcp://localhost:5558"

# Configuration Prisma
export PRISMA_SCHEMA_PATH="../shared/prisma/schema.prisma"

# Configuration ML/Translator pour dev
export ML_BATCH_SIZE="16"
export TRANSLATION_CACHE_TTL="3600"
export SUPPORTED_LANGUAGES="fr,en,es,de,pt,zh,ja,ar"
export DEFAULT_LANGUAGE="fr"
export AUTO_DETECT_LANGUAGE="true"

# Configuration s√©curit√© (dev uniquement)
export JWT_SECRET="dev-jwt-secret-key-change-in-production"
export CORS_ORIGIN="http://localhost:3100"

# Configuration logging
export LOG_LEVEL="debug"
export LOG_FORMAT="pretty"

# √âcrire les variables dans les fichiers .env.local pour chaque service
echo -e "${YELLOW}üìù Cr√©ation des fichiers .env.local...${NC}"

# Fichier .env.local global
cat > /Users/smpceo/Downloads/Meeshy/meeshy/.env.local << EOF
NODE_ENV=development
ENVIRONMENT=local
DATABASE_URL=mongodb://meeshy:MeeshyPassword123@localhost:27017/meeshy?authSource=admin&replicaSet=rs0
REDIS_URL=redis://localhost:6379
TRANSLATOR_URL=http://localhost:8000
GATEWAY_URL=http://localhost:3000
FRONTEND_URL=http://localhost:3100
NEXT_PUBLIC_API_URL=http://localhost:3000
NEXT_PUBLIC_TRANSLATION_URL=http://localhost:8000
NEXT_PUBLIC_WS_URL=ws://localhost:3000/ws
ZMQ_PUSH_URL=tcp://localhost:5555
ZMQ_SUB_URL=tcp://localhost:5558
PRISMA_SCHEMA_PATH=../shared/prisma/schema.prisma
JWT_SECRET=dev-jwt-secret-key-change-in-production
CORS_ORIGIN=http://localhost:3100

# Chemins locaux pour le d√©veloppement (pas Docker)
MODELS_PATH=./models
TORCH_HOME=./models
HF_HOME=./models
MODEL_CACHE_DIR=./models
CACHE_DIR=./cache
LOG_DIR=./logs
PRISMA_CLIENT_OUTPUT_DIRECTORY=./client
EOF

# Frontend .env.local
cat > /Users/smpceo/Downloads/Meeshy/meeshy/frontend/.env.local << EOF
NODE_ENV=development
NEXT_PUBLIC_API_URL=http://localhost:3000
NEXT_PUBLIC_TRANSLATION_URL=http://localhost:8000
NEXT_PUBLIC_WS_URL=ws://localhost:3000/ws
EOF

# Gateway .env.local  
cat > /Users/smpceo/Downloads/Meeshy/meeshy/gateway/.env.local << EOF
NODE_ENV=development
DATABASE_URL=mongodb://meeshy:MeeshyPassword123@localhost:27017/meeshy?authSource=admin&replicaSet=rs0
REDIS_URL=redis://localhost:6379
TRANSLATOR_URL=http://localhost:8000
ZMQ_PUSH_URL=tcp://localhost:5555
ZMQ_SUB_URL=tcp://localhost:5558
PRISMA_SCHEMA_PATH=../shared/prisma/schema.prisma
PORT=3000
CORS_ORIGIN=http://localhost:3100
JWT_SECRET=dev-jwt-secret-key-change-in-production

# Chemins locaux pour le d√©veloppement
MODELS_PATH=./models
TORCH_HOME=./models
HF_HOME=./models
MODEL_CACHE_DIR=./models
CACHE_DIR=./cache
LOG_DIR=./logs
PRISMA_CLIENT_OUTPUT_DIRECTORY=./client
EOF

# Translator .env.local
cat > /Users/smpceo/Downloads/Meeshy/meeshy/translator/.env.local << EOF
NODE_ENV=development
DATABASE_URL=mongodb://meeshy:MeeshyPassword123@localhost:27017/meeshy?authSource=admin&replicaSet=rs0
REDIS_URL=redis://localhost:6379
ZMQ_PUSH_URL=tcp://localhost:5555
ZMQ_SUB_URL=tcp://localhost:5558
PRISMA_SCHEMA_PATH=../shared/prisma/schema.prisma
ML_BATCH_SIZE=16
TRANSLATION_CACHE_TTL=3600
SUPPORTED_LANGUAGES=fr,en,es,de,pt,zh,ja,ar
DEFAULT_LANGUAGE=fr
PORT=8000

# Chemins locaux pour le d√©veloppement
MODELS_PATH=./models
TORCH_HOME=./models
HF_HOME=./models
MODEL_CACHE_DIR=./models
CACHE_DIR=./cache
LOG_DIR=./logs
PRISMA_CLIENT_OUTPUT_DIRECTORY=./client
EOF

echo -e "${BLUE}üìã Configuration de l'environnement LOCAL:${NC}"
echo -e "  ${GREEN}NODE_ENV:${NC} $NODE_ENV"
echo -e "  ${GREEN}DATABASE_URL:${NC} ${DATABASE_URL/\/\/.*@/\/\/***@}"
echo -e "  ${GREEN}Frontend:${NC} $FRONTEND_URL"
echo -e "  ${GREEN}Gateway:${NC} $GATEWAY_URL"
echo -e "  ${GREEN}Translator:${NC} $TRANSLATOR_URL"
echo ""

# Fonction pour v√©rifier si shared a √©t√© modifi√© et doit √™tre redistribu√©
check_and_distribute_shared() {
    echo -e "${BLUE}üîç V√©rification de la distribution de /shared...${NC}"
    
    local shared_dir="/Users/smpceo/Downloads/Meeshy/meeshy/shared"
    local gateway_version="/Users/smpceo/Downloads/Meeshy/meeshy/gateway/shared/version.txt"
    local translator_version="/Users/smpceo/Downloads/Meeshy/meeshy/translator/shared/version.txt"
    
    local needs_distribution=false
    
    # V√©rifier si les fichiers de version existent
    if [[ ! -f "$gateway_version" ]] || [[ ! -f "$translator_version" ]]; then
        echo -e "${YELLOW}üì¶ Premi√®re distribution ou fichiers manquants d√©tect√©s${NC}"
        needs_distribution=true
    else
        # Comparer les timestamps des fichiers dans shared/ avec la derni√®re distribution
        local gateway_version_timestamp=$(stat -f %m "$gateway_version" 2>/dev/null || echo "0")
        local translator_version_timestamp=$(stat -f %m "$translator_version" 2>/dev/null || echo "0")
        local min_version_timestamp=$((gateway_version_timestamp < translator_version_timestamp ? gateway_version_timestamp : translator_version_timestamp))
        
        # V√©rifier si des fichiers dans shared/ sont plus r√©cents
        local shared_files_newer=$(find "$shared_dir" -type f \( -name "*.prisma" -o -name "*.proto" -o -name "*.ts" -o -name "*.js" \) -newer "$gateway_version" 2>/dev/null | wc -l)
        
        if [[ $shared_files_newer -gt 0 ]]; then
            echo -e "${YELLOW}üì¶ Modifications d√©tect√©es dans /shared depuis la derni√®re distribution${NC}"
            needs_distribution=true
        else
            echo -e "${GREEN}‚úÖ /shared est √† jour, pas de redistribution n√©cessaire${NC}"
        fi
    fi
    
    if [[ "$needs_distribution" == "true" ]]; then
        echo -e "${BLUE}üöÄ Distribution de /shared en cours...${NC}"
        
        cd "$shared_dir"
        
        # V√©rifier si le script distribute existe
        if [[ ! -f "scripts/distribute.sh" ]]; then
            echo -e "${RED}‚ùå Script distribute.sh non trouv√© dans /shared/scripts/${NC}"
            return 1
        fi
        
        # Ex√©cuter la distribution
        chmod +x scripts/distribute.sh
        if ./scripts/distribute.sh; then
            echo -e "${GREEN}‚úÖ Distribution de /shared termin√©e avec succ√®s${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors de la distribution de /shared${NC}"
            return 1
        fi
        
        # Retourner au r√©pertoire principal
        cd /Users/smpceo/Downloads/Meeshy/meeshy
        
        return 0
    fi
    
    return 0
}

# Fonction pour g√©n√©rer les clients Prisma si n√©cessaire
generate_prisma_clients() {
    echo -e "${BLUE}üîß G√©n√©ration des clients Prisma...${NC}"
    
    # Gateway - Client TypeScript
    echo -e "${PURPLE}üì¶ G√©n√©ration du client Prisma pour Gateway...${NC}"
    cd /Users/smpceo/Downloads/Meeshy/meeshy/gateway
    if [[ -f "./shared/prisma/schema.prisma" ]]; then
        if pnpm prisma generate --schema=./shared/prisma/schema.prisma; then
            echo -e "${GREEN}‚úÖ Client Prisma Gateway g√©n√©r√© avec succ√®s${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors de la g√©n√©ration du client Prisma Gateway${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Schema Prisma non trouv√© pour Gateway${NC}"
    fi
    
    # Translator - Client Python
    echo -e "${PURPLE}üêç G√©n√©ration du client Prisma pour Translator...${NC}"
    cd /Users/smpceo/Downloads/Meeshy/meeshy/translator
    if [[ -f "shared/prisma/schema.prisma" ]]; then
        # V√©rifier si Python et Prisma sont disponibles
        if command -v python3 >/dev/null 2>&1; then
            python3 -m venv .venv
            if [ ! -f ".venv/bin/activate" ]; then
                echo -e "${RED}‚ùå Script d'activation .venv/bin/activate non trouv√©"
                exit 1
            fi
            echo -e "${GREEN}‚úÖ Script d'activation .venv/bin/activate trouv√©"
            source .venv/bin/activate 
            echo -e "${GREEN}‚úÖ Environnement virtuel trouv√©"
            if ! command -v prisma >/dev/null 2>&1; then
                echo -e "${RED}‚ùå Installation de prisma non trouv√©"
                python3 -m pip install prisma
            fi
            echo -e "${GREEN}‚úÖ Prisma install√©"
            echo -e "${BLUE}üîß G√©n√©ration du client Prisma pour Translator...${NC}"
            if prisma generate --schema=shared/prisma/schema.prisma; then
                echo -e "${GREEN}‚úÖ Client Prisma Translator g√©n√©r√© avec succ√®s${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  G√©n√©ration du client Prisma Python √©chou√©e, continuons...${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Python3 non disponible, g√©n√©ration Prisma Python ignor√©e${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Schema Prisma non trouv√© pour Translator${NC}"
    fi
    
    # Retourner au r√©pertoire principal
    cd /Users/smpceo/Downloads/Meeshy/meeshy
    
    return 0
}

# Ex√©cuter la v√©rification et distribution de shared
check_and_distribute_shared

# G√©n√©rer les clients Prisma apr√®s la distribution
generate_prisma_clients

# Fonction pour v√©rifier si un port est occup√©
check_port() {
    local port=$1
    local service=$2
    if lsof -ti:$port >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Port $port d√©j√† occup√© ($service)${NC}"
        return 1
    fi
    return 0
}

# Fonction pour attendre qu'un service soit pr√™t
wait_for_service() {
    local url=$1
    local service_name=$2
    local max_attempts=3
    local attempt=1
    
    echo -e "${YELLOW}‚è≥ Attente du service $service_name...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if mongosh --eval "db.adminCommand('ping')" 2>&1; then
            echo -e "${GREEN}‚úÖ $service_name est pr√™t !${NC}"
            return 0
        fi
        echo -n "."
        sleep 1
        attempt=$((attempt + 1))
    done
    
    echo -e "${RED}‚ùå Timeout: $service_name n'est pas pr√™t apr√®s $((max_attempts * 2)) secondes${NC}"
    return 1
}

# V√©rification des ports
echo -e "${BLUE}üîç V√©rification des ports...${NC}"
ports_ok=true

if ! check_port 3000 "Gateway"; then ports_ok=false; fi
if ! check_port 3100 "Frontend"; then ports_ok=false; fi
if ! check_port 8000 "Translator"; then ports_ok=false; fi

if [ "$ports_ok" = false ]; then
    echo -e "${RED}‚ùå Certains ports sont occup√©s. Arr√™tez les services en cours.${NC}"
    echo -e "${YELLOW}üí° Utilisez: pkill -f 'node.*server.js' ou pkill -f 'python.*main.py'${NC}"
    exit 1
fi

# D√©marrage des services Docker (infrastructure)
echo -e "${BLUE}üê≥ D√©marrage des services Docker (infrastructure)...${NC}"
cd /Users/smpceo/Downloads/Meeshy/meeshy

# D√©marrer seulement les services d'infrastructure avec le docker-compose de dev
docker-compose -f docker-compose.dev.yml up -d
DOCKER_COMPOSE_STARTED=true

echo -e "${YELLOW}‚è≥ Attente du d√©marrage des services Docker...${NC}"
sleep 2

# V√©rification des services Docker
echo -e "${BLUE}üìä Statut des services Docker:${NC}"
docker-compose -f docker-compose.dev.yml ps

# V√©rifier la connectivit√© MongoDB
echo -e "${BLUE}üîç Test de connectivit√© MongoDB...${NC}"
if ! wait_for_service "mongodb://localhost:27017" "MongoDB"; then
    # Essayer avec netcat comme fallback
    if nc -z localhost 27017; then
        echo -e "${GREEN}‚úÖ MongoDB est accessible sur le port 27017${NC}"
    else
        echo -e "${RED}‚ùå MongoDB n'est pas accessible${NC}"
        exit 1
    fi
fi

# Initialiser le replica set MongoDB si n√©cessaire
echo -e "${BLUE}üîß V√©rification du replica set MongoDB...${NC}"
if [[ -f "scripts/development/init-mongodb-replica.sh" ]]; then
    echo -e "${YELLOW}üöÄ Initialisation du replica set MongoDB...${NC}"
    if ./scripts/development/init-mongodb-replica.sh; then
        echo -e "${GREEN}‚úÖ Replica set MongoDB configur√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Replica set MongoDB d√©j√† configur√© ou erreur mineure${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Script d'initialisation du replica set non trouv√©${NC}"
fi

# V√©rifier la connectivit√© Redis
echo -e "${BLUE}üîç Test de connectivit√© Redis...${NC}"
if nc -z localhost 6379; then
    echo -e "${GREEN}‚úÖ Redis est accessible sur le port 6379${NC}"
else
    echo -e "${RED}‚ùå Redis n'est pas accessible${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}‚úÖ Services Docker d√©marr√©s avec succ√®s !${NC}"
echo ""

# D√©marrage des services Node (en arri√®re-plan)
echo -e "${BLUE}üöÄ D√©marrage des services Node.js...${NC}"

# D√©marrer le Translator en arri√®re-plan
echo -e "${PURPLE}üî§ D√©marrage du Translator...${NC}"
cd /Users/smpceo/Downloads/Meeshy/meeshy/translator
chmod +x translator.sh
nohup ./translator.sh > translator.log 2>&1 &
TRANSLATOR_PID=$!
echo "PID Translator: $TRANSLATOR_PID"

# Attendre que le translator soit pr√™t
sleep 2
if ! wait_for_service "http://localhost:8000/health" "Translator"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Translator pas encore pr√™t, continuons...${NC}"
fi

# D√©marrer le Gateway en arri√®re-plan
echo -e "${PURPLE}üåê D√©marrage du Gateway...${NC}"
cd /Users/smpceo/Downloads/Meeshy/meeshy/gateway
chmod +x gateway.sh
nohup ./gateway.sh > gateway.log 2>&1 &
GATEWAY_PID=$!
echo "PID Gateway: $GATEWAY_PID"

# Attendre que le gateway soit pr√™t
sleep 2
if ! wait_for_service "http://localhost:3000/health" "Gateway"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Gateway pas encore pr√™t, continuons...${NC}"
fi

# D√©marrer le Frontend en arri√®re-plan
echo -e "${PURPLE}üé® D√©marrage du Frontend...${NC}"
cd /Users/smpceo/Downloads/Meeshy/meeshy/frontend
chmod +x frontend.sh
nohup ./frontend.sh > frontend.log 2>&1 &
FRONTEND_PID=$!
echo "PID Frontend: $FRONTEND_PID"

# Attendre que le frontend soit pr√™t
sleep 2
if ! wait_for_service "http://localhost:3100" "Frontend"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Frontend pas encore pr√™t, continuons...${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Environnement Meeshy LOCAL d√©marr√© avec succ√®s !${NC}"
echo ""
echo -e "${CYAN}üåê URLs d'acc√®s:${NC}"
echo -e "  ${GREEN}Frontend:${NC}   http://localhost:3100"
echo -e "  ${GREEN}Gateway:${NC}    http://localhost:3000"
echo -e "  ${GREEN}Translator:${NC} http://localhost:8000"
echo -e "  ${GREEN}MongoDB:${NC}    mongodb://localhost:27017"
echo -e "  ${GREEN}Redis:${NC}      redis://localhost:6379"
echo ""
echo -e "${CYAN}üìä Process IDs:${NC}"
echo -e "  ${GREEN}Translator:${NC} $TRANSLATOR_PID"
echo -e "  ${GREEN}Gateway:${NC}    $GATEWAY_PID"
echo -e "  ${GREEN}Frontend:${NC}   $FRONTEND_PID"
echo ""
echo -e "${CYAN}üìù Logs des services:${NC}"
echo -e "  ${GREEN}Translator:${NC} tail -f /Users/smpceo/Downloads/Meeshy/meeshy/translator/translator.log"
echo -e "  ${GREEN}Gateway:${NC}    tail -f /Users/smpceo/Downloads/Meeshy/meeshy/gateway/gateway.log"
echo -e "  ${GREEN}Frontend:${NC}   tail -f /Users/smpceo/Downloads/Meeshy/meeshy/frontend/frontend.log"
echo ""
echo -e "${PURPLE}üõë Pour arr√™ter tous les services: Appuyez sur Ctrl+C${NC}"
echo -e "${PURPLE}üöÄ Environnement de d√©veloppement LOCAL pr√™t !${NC}"

# Boucle infinie pour maintenir le script actif et permettre l'arr√™t avec Ctrl+C
echo -e "${YELLOW}‚è≥ Services en cours d'ex√©cution... (Ctrl+C pour arr√™ter)${NC}"
while true; do
    # V√©rifier que les services sont toujours en cours
    services_running=0
    
    if [ -n "$TRANSLATOR_PID" ] && kill -0 "$TRANSLATOR_PID" 2>/dev/null; then
        services_running=$((services_running + 1))
    else
        echo -e "${RED}‚ö†Ô∏è  Translator arr√™t√© inattendu${NC}"
    fi
    
    if [ -n "$GATEWAY_PID" ] && kill -0 "$GATEWAY_PID" 2>/dev/null; then
        services_running=$((services_running + 1))
    else
        echo -e "${RED}‚ö†Ô∏è  Gateway arr√™t√© inattendu${NC}"
    fi
    
    if [ -n "$FRONTEND_PID" ] && kill -0 "$FRONTEND_PID" 2>/dev/null; then
        services_running=$((services_running + 1))
    else
        echo -e "${RED}‚ö†Ô∏è  Frontend arr√™t√© inattendu${NC}"
    fi
    
    if [ $services_running -eq 0 ]; then
        echo -e "${RED}‚ùå Tous les services sont arr√™t√©s${NC}"
        cleanup
    fi
    
    sleep 2
done
