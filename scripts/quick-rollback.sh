#!/bin/bash

# ===== MEESHY - ROLLBACK RAPIDE =====
# Script pour effectuer un rollback rapide en cas de probl√®me
# Usage: ./scripts/quick-rollback.sh [DROPLET_IP] [OPTIONS]

set -e

# Couleurs pour les logs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales
DROPLET_IP=""
VERBOSE=false
FORCE=false

# Fonctions utilitaires
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üîÑ MEESHY - ROLLBACK RAPIDE${NC}"
    echo "============================="
    echo ""
    echo "Usage: $0 [DROPLET_IP] [OPTIONS]"
    echo ""
    echo "Description:"
    echo "  Effectue un rollback rapide vers les versions pr√©c√©dentes"
    echo "  en cas de probl√®me avec la mise √† jour"
    echo ""
    echo "Options:"
    echo "  --force                 Forcer le rollback sans confirmation"
    echo "  --verbose               Mode verbeux"
    echo "  --help, -h              Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 192.168.1.100"
    echo "  $0 157.230.15.51 --force"
    echo "  $0 157.230.15.51 --verbose"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION:${NC}"
    echo "  ‚Ä¢ Ce script restaure les versions pr√©c√©dentes"
    echo "  ‚Ä¢ La base de donn√©es et l'infrastructure ne sont PAS modifi√©es"
    echo "  ‚Ä¢ Les donn√©es utilisateur sont pr√©serv√©es"
    echo ""
}

# Parser les arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                FORCE=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                if [ -z "$DROPLET_IP" ]; then
                    DROPLET_IP="$1"
                fi
                shift
                ;;
        esac
    done
}

# Test de connexion SSH
test_ssh_connection() {
    local ip="$1"
    log_info "Test de connexion SSH vers $ip..."
    if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$ip "echo 'Connexion SSH r√©ussie'" >/dev/null 2>&1; then
        log_success "Connexion SSH r√©ussie"
        return 0
    else
        log_error "Impossible de se connecter au serveur $ip"
        return 1
    fi
}

# V√©rifier l'√©tat actuel
check_current_status() {
    local ip="$1"
    log_info "V√©rification de l'√©tat actuel des services..."
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        cd /opt/meeshy
        echo "üîç √âTAT ACTUEL DES SERVICES"
        echo "==========================="
        
        echo "üìä Services en cours d'ex√©cution:"
        docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        
        echo ""
        echo "üîç Tests de connectivit√©:"
        
        # Test Gateway
        if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
            echo "‚úÖ Gateway: Op√©rationnel"
        else
            echo "‚ùå Gateway: Probl√®me d√©tect√©"
        fi
        
        # Test Frontend
        if curl -f -s http://localhost:3100 >/dev/null 2>&1; then
            echo "‚úÖ Frontend: Op√©rationnel"
        else
            echo "‚ùå Frontend: Probl√®me d√©tect√©"
        fi
        
        # Test via Traefik
        if curl -f -s -H "Host: gate.meeshy.me" http://localhost/health >/dev/null 2>&1; then
            echo "‚úÖ Gateway via Traefik: Op√©rationnel"
        else
            echo "‚ùå Gateway via Traefik: Probl√®me d√©tect√©"
        fi
        
        if curl -f -s -H "Host: meeshy.me" http://localhost >/dev/null 2>&1; then
            echo "‚úÖ Frontend via Traefik: Op√©rationnel"
        else
            echo "‚ùå Frontend via Traefik: Probl√®me d√©tect√©"
        fi
EOF
}

# Confirmation utilisateur
confirm_rollback() {
    if [ "$FORCE" = "true" ]; then
        return 0
    fi
    
    echo ""
    log_warning "‚ö†Ô∏è  ATTENTION: Vous √™tes sur le point d'effectuer un rollback"
    echo ""
    log_warning "Cette action va:"
    echo "   ‚Ä¢ Restaurer les versions pr√©c√©dentes de gateway et frontend"
    echo "   ‚Ä¢ Arr√™ter les versions actuelles"
    echo "   ‚Ä¢ Red√©marrer avec les versions pr√©c√©dentes"
    echo "   ‚Ä¢ Pr√©server la base de donn√©es et l'infrastructure"
    echo ""
    
    read -p "√ätes-vous s√ªr de vouloir continuer ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Rollback annul√© par l'utilisateur"
        exit 0
    fi
}

# Rollback vers les versions pr√©c√©dentes
rollback_services() {
    local ip="$1"
    log_info "Rollback vers les versions pr√©c√©dentes..."
    
    # Cr√©er le script de rollback
    cat << 'EOF' > /tmp/rollback-services.sh
#!/bin/bash
set -e

cd /opt/meeshy

echo "üîÑ ROLLBACK VERS LES VERSIONS PR√âC√âDENTES"
echo "========================================="

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå Fichier docker-compose.yml non trouv√© dans /opt/meeshy"
    exit 1
fi

echo "üìã √âtat des services avant le rollback:"
docker-compose ps --format "table {{.Name}}\t{{.Status}}"

echo ""
echo "üîÑ ROLLBACK S√âQUENTIEL"
echo "======================"

# Arr√™ter les services actuels
echo "‚èπÔ∏è  Arr√™t des services actuels..."
docker-compose stop gateway frontend

# Supprimer les conteneurs actuels
echo "üóëÔ∏è  Suppression des conteneurs actuels..."
docker-compose rm -f gateway frontend

# Red√©marrer avec les versions pr√©c√©dentes
echo "üöÄ Red√©marrage avec les versions pr√©c√©dentes..."

# Red√©marrer le Gateway
echo "üö™ Red√©marrage du Gateway..."
docker-compose up -d gateway

# Attendre que le Gateway soit pr√™t
echo "‚è≥ Attente que le Gateway soit pr√™t..."
sleep 10

# V√©rifier que le Gateway r√©pond
for i in {1..10}; do
    if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
        echo "‚úÖ Gateway op√©rationnel"
        break
    fi
    echo "‚è≥ Tentative $i/10 pour le Gateway..."
    sleep 3
done

# Red√©marrer le Frontend
echo "üé® Red√©marrage du Frontend..."
docker-compose up -d frontend

# Attendre que le Frontend soit pr√™t
echo "‚è≥ Attente que le Frontend soit pr√™t..."
sleep 5

# V√©rifier que le Frontend r√©pond
for i in {1..5}; do
    if curl -f -s http://localhost:3100 >/dev/null 2>&1; then
        echo "‚úÖ Frontend op√©rationnel"
        break
    fi
    echo "‚è≥ Tentative $i/5 pour le Frontend..."
    sleep 2
done

echo ""
echo "üìä √âtat des services apr√®s le rollback:"
docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üéâ ROLLBACK TERMIN√â AVEC SUCC√àS !"
echo "================================="
echo "‚úÖ Gateway: Restaur√© √† la version pr√©c√©dente"
echo "‚úÖ Frontend: Restaur√© √† la version pr√©c√©dente"
echo "‚úÖ Base de donn√©es: Pr√©serv√©e"
echo "‚úÖ Infrastructure: Pr√©serv√©e"
EOF

    # Transf√©rer et ex√©cuter le script
    scp -o StrictHostKeyChecking=no /tmp/rollback-services.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/rollback-services.sh && /tmp/rollback-services.sh"
    rm -f /tmp/rollback-services.sh
}

# V√©rification post-rollback
verify_rollback() {
    local ip="$1"
    log_info "V√©rification post-rollback..."
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        cd /opt/meeshy
        echo "üîç V√âRIFICATION POST-ROLLBACK"
        echo "============================="
        
        echo "üìä √âtat des services:"
        docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        
        echo ""
        echo "üîç Tests de connectivit√©:"
        
        # Test Gateway
        if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
            echo "‚úÖ Gateway: Endpoint /health accessible"
        else
            echo "‚ùå Gateway: Endpoint /health inaccessible"
        fi
        
        # Test Frontend
        if curl -f -s http://localhost:3100 >/dev/null 2>&1; then
            echo "‚úÖ Frontend: Accessible sur le port 3100"
        else
            echo "‚ùå Frontend: Non accessible sur le port 3100"
        fi
        
        # Test via Traefik
        if curl -f -s -H "Host: gate.meeshy.me" http://localhost/health >/dev/null 2>&1; then
            echo "‚úÖ Gateway: Accessible via Traefik"
        else
            echo "‚ö†Ô∏è  Gateway: Non accessible via Traefik"
        fi
        
        if curl -f -s -H "Host: meeshy.me" http://localhost >/dev/null 2>&1; then
            echo "‚úÖ Frontend: Accessible via Traefik"
        else
            echo "‚ö†Ô∏è  Frontend: Non accessible via Traefik"
        fi
        
        echo ""
        echo "üìã Versions des images:"
        docker images | grep -E "(gateway|frontend)" | head -5
EOF
}

# Fonction principale
main() {
    # Parser les arguments
    parse_arguments "$@"
    
    # V√©rifier que l'IP est fournie
    if [ -z "$DROPLET_IP" ]; then
        log_error "IP du serveur manquante"
        show_help
        exit 1
    fi
    
    log_info "üîÑ D√©marrage du rollback rapide sur $DROPLET_IP"
    log_warning "‚ö†Ô∏è  Cette action va restaurer les versions pr√©c√©dentes"
    
    # Test de connexion
    test_ssh_connection "$DROPLET_IP" || exit 1
    
    # V√©rifier l'√©tat actuel
    check_current_status "$DROPLET_IP"
    
    # Confirmation utilisateur
    confirm_rollback
    
    # Rollback des services
    rollback_services "$DROPLET_IP"
    
    # V√©rification post-rollback
    verify_rollback "$DROPLET_IP"
    
    # R√©sum√© final
    echo ""
    echo "üéâ ROLLBACK RAPIDE TERMIN√â AVEC SUCC√àS !"
    echo "========================================"
    echo "‚úÖ Gateway: Restaur√© √† la version pr√©c√©dente"
    echo "‚úÖ Frontend: Restaur√© √† la version pr√©c√©dente"
    echo "‚úÖ Base de donn√©es: Pr√©serv√©e (donn√©es intactes)"
    echo "‚úÖ Infrastructure: Pr√©serv√©e (Traefik, Redis, MongoDB op√©rationnels)"
    echo ""
    echo "üîó Acc√®s aux services:"
    echo "   ‚Ä¢ Frontend: https://meeshy.me"
    echo "   ‚Ä¢ Gateway API: https://gate.meeshy.me"
    echo "   ‚Ä¢ Dashboard Traefik: https://traefik.meeshy.me"
    echo ""
    echo "üìã Commandes utiles:"
    echo "   ‚Ä¢ Statut: ssh root@$DROPLET_IP 'cd /opt/meeshy && docker-compose ps'"
    echo "   ‚Ä¢ Logs: ssh root@$DROPLET_IP 'cd /opt/meeshy && docker-compose logs gateway frontend'"
    echo "   ‚Ä¢ Red√©marrage: ssh root@$DROPLET_IP 'cd /opt/meeshy && docker-compose restart gateway frontend'"
    echo ""
    echo "üí° Pour effectuer une nouvelle mise √† jour:"
    echo "   ‚Ä¢ Mise √† jour standard: ./scripts/update-production.sh $DROPLET_IP"
    echo "   ‚Ä¢ Mise √† jour sans interruption: ./scripts/zero-downtime-update.sh $DROPLET_IP"
}

# Ex√©cuter le script principal
main "$@"
