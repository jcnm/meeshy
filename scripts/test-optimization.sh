#!/bin/bash

# Script de test pour v√©rifier l'int√©gration des optimisations

set -e

echo "üß™ Test d'int√©gration des optimisations Meeshy..."

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Test 1: V√©rifier que tous les nouveaux fichiers existent
print_status "V√©rification des nouveaux fichiers..."

NEW_FILES=(
    "./components/conversations/ConversationList.tsx"
    "./components/conversations/ConversationMessages.tsx"
    "./components/conversations/ConversationEmptyState.tsx"
    "./components/conversations/ConversationLayoutResponsiveRefactored.tsx"
    "./components/conversations/VirtualizedMessageList.tsx"
    "./context/ConversationContext.tsx"
    "./hooks/use-swr-conversations.ts"
    "./services/optimized-socketio.service.ts"
    "./shared/types/unified-message.ts"
    "./app/conversations/page-refactored.tsx"
)

for file in "${NEW_FILES[@]}"; do
    if [ -f "$file" ]; then
        print_success "‚úÖ $file existe"
    else
        print_error "‚ùå $file manquant"
    fi
done

# Test 2: V√©rifier les imports TypeScript
print_status "V√©rification des imports TypeScript..."

# Changer vers le r√©pertoire frontend pour les tests
cd frontend

# Test de compilation TypeScript
if pnpm run build > /dev/null 2>&1; then
    print_success "‚úÖ Compilation TypeScript r√©ussie"
else
    print_error "‚ùå Erreurs de compilation TypeScript"
    echo "D√©tails des erreurs:"
    pnpm run build 2>&1 | grep -E "(error|Error)" || true
fi

# Test 3: V√©rifier les d√©pendances
print_status "V√©rification des d√©pendances..."

REQUIRED_DEPS=("swr" "react-window" "react-window-infinite-loader")

for dep in "${REQUIRED_DEPS[@]}"; do
    if pnpm list "$dep" > /dev/null 2>&1; then
        print_success "‚úÖ $dep install√©"
    else
        print_warning "‚ö†Ô∏è  $dep non install√©"
        echo "Installation de $dep..."
        pnpm add "$dep"
    fi
done

# Test 4: V√©rifier la structure des composants
print_status "V√©rification de la structure des composants..."

# V√©rifier que ConversationList n'a pas trop de hooks
CONVERSATION_LIST_HOOKS=$(grep -c "use[A-Z]" ./components/conversations/ConversationList.tsx || echo "0")
if [ "$CONVERSATION_LIST_HOOKS" -lt 20 ]; then
    print_success "‚úÖ ConversationList: $CONVERSATION_LIST_HOOKS hooks (< 20)"
else
    print_warning "‚ö†Ô∏è  ConversationList: $CONVERSATION_LIST_HOOKS hooks (>= 20)"
fi

# V√©rifier que ConversationMessages n'a pas trop de hooks
CONVERSATION_MESSAGES_HOOKS=$(grep -c "use[A-Z]" ./components/conversations/ConversationMessages.tsx || echo "0")
if [ "$CONVERSATION_MESSAGES_HOOKS" -lt 20 ]; then
    print_success "‚úÖ ConversationMessages: $CONVERSATION_MESSAGES_HOOKS hooks (< 20)"
else
    print_warning "‚ö†Ô∏è  ConversationMessages: $CONVERSATION_MESSAGES_HOOKS hooks (>= 20)"
fi

# Test 5: V√©rifier les types unifi√©s
print_status "V√©rification des types unifi√©s..."

if grep -q "export interface UnifiedMessage" ./shared/types/unified-message.ts; then
    print_success "‚úÖ Type UnifiedMessage d√©fini"
else
    print_error "‚ùå Type UnifiedMessage manquant"
fi

if grep -q "export.*UnifiedMessage" ./shared/types/index.ts; then
    print_success "‚úÖ Type UnifiedMessage export√©"
else
    print_error "‚ùå Type UnifiedMessage non export√©"
fi

# Test 6: V√©rifier le contexte
print_status "V√©rification du contexte..."

if grep -q "useReducer" ./context/ConversationContext.tsx; then
    print_success "‚úÖ ConversationContext utilise useReducer"
else
    print_error "‚ùå ConversationContext n'utilise pas useReducer"
fi

if grep -q "UnifiedMessage" ./context/ConversationContext.tsx; then
    print_success "‚úÖ ConversationContext utilise UnifiedMessage"
else
    print_error "‚ùå ConversationContext n'utilise pas UnifiedMessage"
fi

# Test 7: V√©rifier SWR
print_status "V√©rification de SWR..."

if grep -q "useSWR" ./hooks/use-swr-conversations.ts; then
    print_success "‚úÖ SWR hooks impl√©ment√©s"
else
    print_error "‚ùå SWR hooks manquants"
fi

# Test 8: V√©rifier Socket.IO optimis√©
print_status "V√©rification de Socket.IO optimis√©..."

if grep -q "lazy loading" ./services/optimized-socketio.service.ts; then
    print_success "‚úÖ Socket.IO optimis√© avec lazy loading"
else
    print_warning "‚ö†Ô∏è  Socket.IO optimis√© sans lazy loading"
fi

if grep -q "destroy" ./services/optimized-socketio.service.ts; then
    print_success "‚úÖ Socket.IO optimis√© avec cleanup"
else
    print_warning "‚ö†Ô∏è  Socket.IO optimis√© sans cleanup"
fi

# Test 9: V√©rifier la virtualisation
print_status "V√©rification de la virtualisation..."

if grep -q "react-window" ./components/conversations/VirtualizedMessageList.tsx; then
    print_success "‚úÖ Virtualisation impl√©ment√©e"
else
    print_error "‚ùå Virtualisation manquante"
fi

# Test 10: V√©rifier la documentation
print_status "V√©rification de la documentation..."

if [ -f "OPTIMIZATION_GUIDE.md" ]; then
    print_success "‚úÖ Guide d'optimisation cr√©√©"
else
    print_error "‚ùå Guide d'optimisation manquant"
fi

# R√©sum√©
echo ""
echo "üéØ R√âSUM√â DES TESTS:"
echo "===================="

TOTAL_TESTS=10
PASSED_TESTS=0

# Compter les tests r√©ussis (approximation bas√©e sur les messages de succ√®s)
PASSED_TESTS=$(grep -c "‚úÖ" <<< "$(cat)" || echo "0")

echo "Tests r√©ussis: $PASSED_TESTS/$TOTAL_TESTS"

if [ "$PASSED_TESTS" -ge 8 ]; then
    print_success "üéâ Optimisations correctement int√©gr√©es!"
    echo ""
    echo "Prochaines √©tapes:"
    echo "1. Tester l'interface utilisateur"
    echo "2. V√©rifier les performances"
    echo "3. D√©ployer en production"
else
    print_warning "‚ö†Ô∏è  Certaines optimisations n√©cessitent des corrections"
    echo ""
    echo "Actions recommand√©es:"
    echo "1. Corriger les erreurs identifi√©es"
    echo "2. Relancer les tests"
    echo "3. V√©rifier l'int√©gration"
fi

echo ""
echo "üìö Documentation: OPTIMIZATION_GUIDE.md"
echo "üîß Script de migration: scripts/optimization-migration.sh"
