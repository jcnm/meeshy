#!/bin/bash

# ===== MEESHY - MISE √Ä JOUR S√âLECTIVE GATEWAY ET FRONTEND =====
# Script pour mettre √† jour uniquement la gateway et le frontend en production
# Usage: ./scripts/update-gateway-frontend.sh [DROPLET_IP] [OPTIONS]
# 
# ‚ö†Ô∏è  IMPORTANT: Ce script ne touche PAS √† la base de donn√©es ni √† l'infrastructure
# ‚ö†Ô∏è  Seules les applications gateway et frontend sont mises √† jour

set -e

# Couleurs pour les logs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales
DROPLET_IP=""
FORCE_REFRESH=false
SKIP_HEALTH_CHECK=false
VERBOSE=false

# Fonctions utilitaires
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üöÄ MEESHY - MISE √Ä JOUR S√âLECTIVE GATEWAY ET FRONTEND${NC}"
    echo "=============================================================="
    echo ""
    echo "Usage: $0 [DROPLET_IP] [OPTIONS]"
    echo ""
    echo "Description:"
    echo "  Met √† jour uniquement la gateway et le frontend en production"
    echo "  sans toucher √† la base de donn√©es ni √† l'infrastructure"
    echo ""
    echo "Options:"
    echo "  --force-refresh         Forcer le t√©l√©chargement des nouvelles images"
    echo "  --skip-health-check     Ignorer la v√©rification de sant√© post-d√©ploiement"
    echo "  --verbose               Mode verbeux"
    echo "  --help, -h              Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 192.168.1.100"
    echo "  $0 157.230.15.51 --force-refresh"
    echo "  $0 157.230.15.51 --verbose"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION:${NC}"
    echo "  ‚Ä¢ La base de donn√©es et l'infrastructure ne sont PAS modifi√©es"
    echo "  ‚Ä¢ Seules les applications gateway et frontend sont mises √† jour"
    echo "  ‚Ä¢ Les services sont red√©marr√©s de mani√®re s√©quentielle"
    echo ""
}

# Parser les arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force-refresh)
                FORCE_REFRESH=true
                shift
                ;;
            --skip-health-check)
                SKIP_HEALTH_CHECK=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                if [ -z "$DROPLET_IP" ]; then
                    DROPLET_IP="$1"
                fi
                shift
                ;;
        esac
    done
}

# Test de connexion SSH
test_ssh_connection() {
    local ip="$1"
    log_info "Test de connexion SSH vers $ip..."
    if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$ip "echo 'Connexion SSH r√©ussie'" >/dev/null 2>&1; then
        log_success "Connexion SSH r√©ussie"
        return 0
    else
        log_error "Impossible de se connecter au serveur $ip"
        return 1
    fi
}

# V√©rifier l'√©tat actuel des services
check_current_status() {
    local ip="$1"
    log_info "V√©rification de l'√©tat actuel des services..."
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        cd /opt/meeshy
        echo "=== √âTAT ACTUEL DES SERVICES ==="
        docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        echo "=== VERSIONS ACTUELLES DES IMAGES ==="
        docker images | grep -E "(gateway|frontend)" | head -10
EOF
}

# Sauvegarder la configuration actuelle
backup_current_config() {
    local ip="$1"
    log_info "Sauvegarde de la configuration actuelle..."
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        cd /opt/meeshy
        BACKUP_DIR="/opt/meeshy/backup-$(date +%Y%m%d-%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        
        # Sauvegarder les fichiers de configuration
        cp docker-compose.yml "$BACKUP_DIR/" 2>/dev/null || true
        cp .env "$BACKUP_DIR/" 2>/dev/null || true
        
        # Sauvegarder l'√©tat des conteneurs
        docker-compose ps > "$BACKUP_DIR/services-status.txt" 2>/dev/null || true
        docker images > "$BACKUP_DIR/images-list.txt" 2>/dev/null || true
        
        echo "‚úÖ Sauvegarde cr√©√©e dans: $BACKUP_DIR"
EOF
}

# Mise √† jour s√©lective des services
update_services() {
    local ip="$1"
    log_info "Mise √† jour s√©lective des services gateway et frontend..."
    
    # Cr√©er le script de mise √† jour
    cat << 'EOF' > /tmp/update-services.sh
#!/bin/bash
set -e

echo "üöÄ MISE √Ä JOUR S√âLECTIVE GATEWAY ET FRONTEND"
echo "==========================================="

cd /opt/meeshy

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå Fichier docker-compose.yml non trouv√© dans /opt/meeshy"
    exit 1
fi

echo "üìã √âtat des services avant la mise √† jour:"
docker-compose ps --format "table {{.Name}}\t{{.Status}}"

# T√©l√©charger les nouvelles images si demand√©
if [ "$FORCE_REFRESH" = "true" ]; then
    echo "üì¶ T√©l√©chargement forc√© des nouvelles images..."
    docker-compose pull gateway frontend
else
    echo "üì¶ T√©l√©chargement des images gateway et frontend..."
    docker-compose pull gateway frontend
fi

echo ""
echo "üîÑ MISE √Ä JOUR S√âQUENTIELLE DES SERVICES"
echo "======================================="

# √âtape 1: Arr√™ter les services √† mettre √† jour
echo "‚èπÔ∏è  Arr√™t des services gateway et frontend..."
docker-compose stop gateway frontend

# √âtape 2: Supprimer les anciens conteneurs
echo "üóëÔ∏è  Suppression des anciens conteneurs..."
docker-compose rm -f gateway frontend

# √âtape 3: Red√©marrer gateway en premier
echo "üö™ Red√©marrage du service gateway..."
docker-compose up -d gateway

# Attendre que le gateway soit pr√™t
echo "‚è≥ Attente que le gateway soit pr√™t..."
sleep 10

# V√©rifier que le gateway r√©pond
for i in {1..10}; do
    if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
        echo "‚úÖ Gateway op√©rationnel"
        break
    fi
    echo "‚è≥ Tentative $i/10 pour le gateway..."
    sleep 3
done

# √âtape 4: Red√©marrer le frontend
echo "üé® Red√©marrage du service frontend..."
docker-compose up -d frontend

# Attendre que le frontend soit pr√™t
echo "‚è≥ Attente que le frontend soit pr√™t..."
sleep 5

# V√©rifier que le frontend r√©pond
for i in {1..5}; do
    if curl -f -s http://localhost:3100 >/dev/null 2>&1; then
        echo "‚úÖ Frontend op√©rationnel"
        break
    fi
    echo "‚è≥ Tentative $i/5 pour le frontend..."
    sleep 2
done

echo ""
echo "üìä √âtat des services apr√®s la mise √† jour:"
docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üéâ Mise √† jour s√©lective termin√©e avec succ√®s!"
echo "‚úÖ Gateway: Mis √† jour et op√©rationnel"
echo "‚úÖ Frontend: Mis √† jour et op√©rationnel"
echo "‚úÖ Base de donn√©es: Non modifi√©e"
echo "‚úÖ Infrastructure: Non modifi√©e"
EOF

    # Transf√©rer et ex√©cuter le script
    scp -o StrictHostKeyChecking=no /tmp/update-services.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/update-services.sh && FORCE_REFRESH=$FORCE_REFRESH /tmp/update-services.sh"
    rm -f /tmp/update-services.sh
}

# V√©rification de sant√© post-d√©ploiement
health_check() {
    local ip="$1"
    log_info "V√©rification de sant√© post-d√©ploiement..."
    
    # Cr√©er le script de v√©rification
    cat << 'EOF' > /tmp/health-check.sh
#!/bin/bash
cd /opt/meeshy

echo "üè• V√âRIFICATION DE SANT√â POST-D√âPLOIEMENT"
echo "========================================"

# V√©rifier l'√©tat des conteneurs
echo "üìä √âtat des conteneurs:"
docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üîç Tests de connectivit√©:"

# Test Gateway
echo "üö™ Test Gateway..."
if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
    echo "‚úÖ Gateway: Endpoint /health accessible"
    
    # Test de r√©ponse de sant√©
    health_response=$(curl -s http://localhost:3000/health 2>/dev/null)
    if echo "$health_response" | grep -q "status\|ok\|healthy"; then
        echo "‚úÖ Gateway: R√©ponse de sant√© valide"
    else
        echo "‚ö†Ô∏è  Gateway: R√©ponse de sant√© suspecte: $health_response"
    fi
else
    echo "‚ùå Gateway: Endpoint /health inaccessible"
fi

# Test Frontend
echo "üé® Test Frontend..."
if curl -f -s http://localhost:3100 >/dev/null 2>&1; then
    echo "‚úÖ Frontend: Accessible sur le port 3100"
    
    # V√©rifier que c'est bien Next.js
    response=$(curl -s http://localhost:3100 2>/dev/null | head -c 200)
    if echo "$response" | grep -q "Next\|React\|meeshy\|Meeshy"; then
        echo "‚úÖ Frontend: R√©ponse Next.js d√©tect√©e"
    else
        echo "‚ö†Ô∏è  Frontend: R√©ponse non-Next.js d√©tect√©e"
    fi
else
    echo "‚ùå Frontend: Non accessible sur le port 3100"
fi

# Test via Traefik (si configur√©)
echo "üåê Test via Traefik..."
if curl -f -s -H "Host: gate.meeshy.me" http://localhost/health >/dev/null 2>&1; then
    echo "‚úÖ Gateway: Accessible via Traefik (gate.meeshy.me)"
else
    echo "‚ö†Ô∏è  Gateway: Non accessible via Traefik"
fi

if curl -f -s -H "Host: meeshy.me" http://localhost >/dev/null 2>&1; then
    echo "‚úÖ Frontend: Accessible via Traefik (meeshy.me)"
else
    echo "‚ö†Ô∏è  Frontend: Non accessible via Traefik"
fi

# V√©rifier les logs r√©cents pour les erreurs
echo ""
echo "üìã V√©rification des logs r√©cents:"

echo "--- Gateway ---"
docker-compose logs --tail=5 gateway | grep -E "(error|Error|ERROR|failed|Failed|FAILED)" || echo "Aucune erreur r√©cente"

echo "--- Frontend ---"
docker-compose logs --tail=5 frontend | grep -E "(error|Error|ERROR|failed|Failed|FAILED)" || echo "Aucune erreur r√©cente"

echo ""
echo "üéØ R√âSUM√â DE LA V√âRIFICATION:"
echo "============================="
healthy_services=$(docker-compose ps --format "{{.Name}} {{.Status}}" | grep -E "(gateway|frontend)" | grep -c "Up")
total_services=2
echo "Services mis √† jour op√©rationnels: $healthy_services/$total_services"

if [ $healthy_services -eq $total_services ]; then
    echo "üéâ TOUS LES SERVICES MIS √Ä JOUR SONT OP√âRATIONNELS !"
    exit 0
else
    echo "‚ö†Ô∏è  CERTAINS SERVICES ONT DES PROBL√àMES"
    exit 1
fi
EOF

    # Transf√©rer et ex√©cuter le script
    scp -o StrictHostKeyChecking=no /tmp/health-check.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/health-check.sh && /tmp/health-check.sh"
    rm -f /tmp/health-check.sh
}

# Nettoyage des anciennes images
cleanup_old_images() {
    local ip="$1"
    log_info "Nettoyage des anciennes images..."
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        cd /opt/meeshy
        echo "üßπ Nettoyage des anciennes images Docker..."
        
        # Supprimer les images non utilis√©es
        docker image prune -f
        
        # Afficher l'espace lib√©r√©
        echo "üìä Espace disque apr√®s nettoyage:"
        df -h /var/lib/docker 2>/dev/null || df -h /
        
        echo "‚úÖ Nettoyage termin√©"
EOF
}

# Fonction principale
main() {
    # Parser les arguments
    parse_arguments "$@"
    
    # V√©rifier que l'IP est fournie
    if [ -z "$DROPLET_IP" ]; then
        log_error "IP du serveur manquante"
        show_help
        exit 1
    fi
    
    log_info "üöÄ D√©marrage de la mise √† jour s√©lective sur $DROPLET_IP"
    log_info "Services √† mettre √† jour: Gateway et Frontend uniquement"
    log_warning "‚ö†Ô∏è  La base de donn√©es et l'infrastructure ne seront PAS modifi√©es"
    
    # Test de connexion
    test_ssh_connection "$DROPLET_IP" || exit 1
    
    # V√©rifier l'√©tat actuel
    check_current_status "$DROPLET_IP"
    
    # Sauvegarder la configuration
    backup_current_config "$DROPLET_IP"
    
    # Mettre √† jour les services
    update_services "$DROPLET_IP"
    
    # V√©rification de sant√© (si demand√©e)
    if [ "$SKIP_HEALTH_CHECK" = "false" ]; then
        health_check "$DROPLET_IP"
    else
        log_warning "V√©rification de sant√© ignor√©e"
    fi
    
    # Nettoyage
    cleanup_old_images "$DROPLET_IP"
    
    # R√©sum√© final
    echo ""
    echo "üéâ MISE √Ä JOUR S√âLECTIVE TERMIN√âE AVEC SUCC√àS !"
    echo "==============================================="
    echo "‚úÖ Gateway: Mis √† jour et op√©rationnel"
    echo "‚úÖ Frontend: Mis √† jour et op√©rationnel"
    echo "‚úÖ Base de donn√©es: Non modifi√©e (donn√©es pr√©serv√©es)"
    echo "‚úÖ Infrastructure: Non modifi√©e (Traefik, Redis, MongoDB pr√©serv√©s)"
    echo ""
    echo "üîó Acc√®s aux services:"
    echo "   ‚Ä¢ Frontend: https://meeshy.me"
    echo "   ‚Ä¢ Gateway API: https://gate.meeshy.me"
    echo "   ‚Ä¢ Dashboard Traefik: https://traefik.meeshy.me"
    echo ""
    echo "üìã Commandes utiles:"
    echo "   ‚Ä¢ Statut: ssh root@$DROPLET_IP 'cd /opt/meeshy && docker-compose ps'"
    echo "   ‚Ä¢ Logs: ssh root@$DROPLET_IP 'cd /opt/meeshy && docker-compose logs gateway frontend'"
    echo "   ‚Ä¢ Red√©marrage: ssh root@$DROPLET_IP 'cd /opt/meeshy && docker-compose restart gateway frontend'"
}

# Ex√©cuter le script principal
main "$@"
