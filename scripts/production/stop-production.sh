#!/bin/bash

# üõë Script d'arr√™t pour l'environnement de PRODUCTION (DigitalOcean)
# Ce script arr√™te tous les services Meeshy en production
set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}üõë Arr√™t de l'environnement Meeshy PRODUCTION${NC}"
echo ""

# Charger la configuration de production si disponible
if [ -f ".env.production" ]; then
    echo -e "${BLUE}üìã Chargement de la configuration production${NC}"
    set -a
    source .env.production
    set +a
fi

# Fonction pour afficher les logs avant arr√™t
show_service_status() {
    echo -e "${BLUE}üìä Statut actuel des services:${NC}"
    docker-compose -f docker-compose.prod.yml ps 2>/dev/null || echo "Aucun service en cours"
}

# Fonction pour sauvegarder les logs
backup_logs() {
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_dir="./logs/backup_$timestamp"
    
    echo -e "${YELLOW}üìù Sauvegarde des logs avant arr√™t...${NC}"
    
    mkdir -p "$backup_dir"
    
    # Sauvegarder les logs de chaque service
    services=("traefik" "frontend" "gateway" "translator" "database" "redis")
    
    for service in "${services[@]}"; do
        echo -e "${BLUE}üíæ Sauvegarde des logs $service...${NC}"
        docker-compose -f docker-compose.prod.yml logs "$service" > "$backup_dir/${service}.log" 2>/dev/null || true
    done
    
    echo -e "${GREEN}‚úÖ Logs sauvegard√©s dans: $backup_dir${NC}"
}

# Afficher le statut actuel
show_service_status

# Option pour sauvegarder les logs
read -p "Voulez-vous sauvegarder les logs avant l'arr√™t ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    backup_logs
fi

# Arr√™t gracieux des services
echo -e "${BLUE}üõë Arr√™t gracieux des services de production...${NC}"

# Arr√™ter les services dans l'ordre optimal
services_order=("frontend" "gateway" "translator" "traefik" "redis" "database")

for service in "${services_order[@]}"; do
    echo -e "${YELLOW}üõë Arr√™t de $service...${NC}"
    docker-compose -f docker-compose.prod.yml stop "$service" 2>/dev/null || echo "Service $service d√©j√† arr√™t√©"
    sleep 2
done

# Arr√™t complet
echo -e "${BLUE}üõë Arr√™t complet de tous les services...${NC}"
docker-compose -f docker-compose.prod.yml down --remove-orphans

# Option pour nettoyer les volumes (ATTENTION: perte de donn√©es)
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Options de nettoyage:${NC}"
echo -e "${RED}ATTENTION: Les options suivantes peuvent supprimer des donn√©es !${NC}"
echo ""

read -p "Voulez-vous supprimer les conteneurs arr√™t√©s ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}üóëÔ∏è  Suppression des conteneurs arr√™t√©s...${NC}"
    docker-compose -f docker-compose.prod.yml rm -f
fi

read -p "Voulez-vous supprimer les volumes de donn√©es ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${RED}üóëÔ∏è  Suppression des volumes de donn√©es...${NC}"
    echo -e "${RED}ATTENTION: Ceci supprimera TOUTES les donn√©es (base de donn√©es, cache, certificats SSL) !${NC}"
    read -p "√ätes-vous VRAIMENT s√ªr ? Tapez 'DELETE' pour confirmer: " confirm
    if [ "$confirm" = "DELETE" ]; then
        docker-compose -f docker-compose.prod.yml down -v
        echo -e "${RED}‚úÖ Volumes supprim√©s${NC}"
    else
        echo -e "${GREEN}‚úÖ Volumes conserv√©s${NC}"
    fi
fi

read -p "Voulez-vous supprimer les images Docker ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}üóëÔ∏è  Suppression des images Docker...${NC}"
    
    # Supprimer les images Meeshy
    images=("$TRANSLATOR_IMAGE" "$GATEWAY_IMAGE" "$FRONTEND_IMAGE")
    for image in "${images[@]}"; do
        if [ -n "$image" ]; then
            echo -e "${BLUE}üóëÔ∏è  Suppression de l'image: $image${NC}"
            docker rmi "$image" 2>/dev/null || echo "Image $image d√©j√† supprim√©e"
        fi
    done
    
    # Nettoyer les images orphelines
    echo -e "${BLUE}üßπ Nettoyage des images orphelines...${NC}"
    docker image prune -f
fi

# Nettoyage g√©n√©ral du syst√®me Docker (optionnel)
read -p "Voulez-vous faire un nettoyage complet de Docker ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}üßπ Nettoyage complet de Docker...${NC}"
    docker system prune -f
fi

# V√©rification finale
echo -e "${BLUE}üìä Statut final:${NC}"
docker-compose -f docker-compose.prod.yml ps 2>/dev/null || echo "Aucun service Meeshy en cours"

# V√©rifier les processus Docker restants
running_containers=$(docker ps --filter "name=meeshy" --format "table {{.Names}}\t{{.Status}}" 2>/dev/null | grep -v NAMES || true)
if [ -n "$running_containers" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Conteneurs Meeshy encore en cours:${NC}"
    echo "$running_containers"
else
    echo -e "${GREEN}‚úÖ Aucun conteneur Meeshy en cours${NC}"
fi

echo ""
echo -e "${GREEN}‚úÖ Environnement Meeshy PRODUCTION arr√™t√© avec succ√®s !${NC}"
echo ""
echo -e "${CYAN}üìã R√©sum√©:${NC}"
echo -e "  ${GREEN}Services Docker:${NC} Arr√™t√©s"
echo -e "  ${GREEN}Conteneurs:${NC} Supprim√©s (si demand√©)"
echo -e "  ${GREEN}Volumes:${NC} Conserv√©s (sauf si suppression demand√©e)"
echo -e "  ${GREEN}Logs:${NC} Sauvegard√©s (si demand√©)"
echo ""
echo -e "${PURPLE}üöÄ Pour red√©marrer l'environnement de production:${NC}"
echo -e "  ${YELLOW}./scripts/production/start-production.sh${NC}"
echo ""
echo -e "${CYAN}üí° Conseils:${NC}"
echo -e "  ${GREEN}Surveillance:${NC} V√©rifiez que le domaine n'est plus accessible"
echo -e "  ${GREEN}DNS:${NC} Les enregistrements DNS pointent toujours vers ce serveur"
echo -e "  ${GREEN}SSL:${NC} Les certificats Let's Encrypt sont conserv√©s (sauf si volumes supprim√©s)"
echo ""
