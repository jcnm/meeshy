#!/bin/bash

# Script de reset de la base de donn√©es Digital Ocean pour Meeshy
# Ce script supprime compl√®tement la base de donn√©es et la recr√©e
# ATTENTION: Ceci supprimera TOUTES les donn√©es existantes !

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

# Variables par d√©faut
DROPLET_IP=""
FORCE_RESET=false
SKIP_CONFIRMATION=false
BACKUP_BEFORE_RESET=true

# Fonctions utilitaires
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Fonction pour afficher l'aide
show_help() {
    echo -e "${BLUE}Script de Reset de Base de Donn√©es Digital Ocean${NC}"
    echo ""
    echo "Usage: $0 [OPTIONS] DROPLET_IP"
    echo ""
    echo "Arguments:"
    echo "  DROPLET_IP              IP du droplet Digital Ocean"
    echo ""
    echo "Options:"
    echo "  --force                 Forcer le reset sans confirmation"
    echo "  --no-backup             Ne pas cr√©er de backup avant le reset"
    echo "  --help                  Afficher cette aide"
    echo ""
    echo "Description:"
    echo "  Ce script supprime compl√®tement la base de donn√©es MongoDB"
    echo "  et la recr√©e avec les configurations de production."
    echo ""
    echo "  ‚ö†Ô∏è  ATTENTION: Ceci supprimera TOUTES les donn√©es existantes !"
    echo ""
    echo "Exemples:"
    echo "  $0 157.230.15.51                    # Reset avec confirmation"
    echo "  $0 --force 157.230.15.51            # Reset forc√©"
    echo "  $0 --no-backup 157.230.15.51        # Reset sans backup"
    echo ""
}

# Fonction pour tester la connexion SSH
test_ssh_connection() {
    local ip="$1"
    log_info "Test de connexion SSH vers $ip..."
    
    if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$ip "echo 'Connexion SSH r√©ussie'" >/dev/null 2>&1; then
        log_success "Connexion SSH r√©ussie"
        return 0
    else
        log_error "Impossible de se connecter au serveur $ip"
        return 1
    fi
}

# Fonction pour cr√©er un backup de la base de donn√©es
create_database_backup() {
    local ip="$1"
    log_info "Cr√©ation d'un backup de la base de donn√©es..."
    
    # Script de backup
    cat << 'EOF' > /tmp/backup-database.sh
#!/bin/bash
set -e

echo "üì¶ Cr√©ation du backup de la base de donn√©es..."

# Cr√©er le r√©pertoire de backup
mkdir -p /opt/meeshy/backups
BACKUP_DIR="/opt/meeshy/backups"
BACKUP_FILE="$BACKUP_DIR/meeshy-backup-$(date +%Y%m%d-%H%M%S).tar.gz"

# V√©rifier que MongoDB est en cours d'ex√©cution
if ! docker-compose ps database | grep -q "Up"; then
    echo "‚ùå MongoDB n'est pas en cours d'ex√©cution"
    exit 1
fi

# Cr√©er le backup
echo "üì¶ Cr√©ation du backup: $BACKUP_FILE"
docker-compose exec -T database mongodump --db meeshy --out /tmp/backup

# Compresser le backup
cd /tmp
tar -czf "$BACKUP_FILE" backup/
rm -rf /tmp/backup

echo "‚úÖ Backup cr√©√©: $BACKUP_FILE"

# Lister les backups existants
echo "üìã Backups existants:"
ls -la "$BACKUP_DIR"/*.tar.gz 2>/dev/null || echo "Aucun backup trouv√©"

# Nettoyer les anciens backups (garder les 5 derniers)
echo "üßπ Nettoyage des anciens backups..."
cd "$BACKUP_DIR"
ls -t *.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm -f

echo "‚úÖ Backup termin√© avec succ√®s"
EOF

    # Transf√©rer et ex√©cuter le script de backup
    scp -o StrictHostKeyChecking=no /tmp/backup-database.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/backup-database.sh && cd /opt/meeshy && /tmp/backup-database.sh"
    
    # Nettoyer
    rm -f /tmp/backup-database.sh
    
    log_success "Backup de la base de donn√©es cr√©√© avec succ√®s"
}

# Fonction pour reset la base de donn√©es
reset_database() {
    local ip="$1"
    log_info "Reset de la base de donn√©es..."
    
    # Script de reset
    cat << 'EOF' > /tmp/reset-database.sh
#!/bin/bash
set -e

echo "üîÑ Reset de la base de donn√©es MongoDB..."

# Arr√™ter tous les services
echo "‚èπÔ∏è  Arr√™t des services..."
docker-compose down --remove-orphans || true

# Supprimer les volumes de donn√©es
echo "üóëÔ∏è  Suppression des volumes de donn√©es..."
docker volume rm meeshy_mongodb_data 2>/dev/null || true
docker volume rm meeshy_redis_data 2>/dev/null || true
docker volume rm meeshy_models_data 2>/dev/null || true

# Nettoyer le syst√®me Docker
echo "üßπ Nettoyage du syst√®me Docker..."
docker system prune -f || true
docker volume prune -f || true

# Red√©marrer MongoDB
echo "üöÄ Red√©marrage de MongoDB..."
docker-compose up -d database

# Attendre que MongoDB soit pr√™t
echo "‚è≥ Attente que MongoDB soit pr√™t..."
for i in {1..30}; do
    if docker-compose exec -T database mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
        echo "‚úÖ MongoDB pr√™t"
        break
    fi
    echo "‚è≥ Tentative $i/30..."
    sleep 2
done

# Initialiser le replica set
echo "üîß Initialisation du replica set..."
docker-compose exec -T database mongosh --eval "
    try {
        rs.initiate({
            _id: 'rs0',
            members: [
                { _id: 0, host: 'meeshy-database:27017' }
            ]
        });
        print('‚úÖ Replica set rs0 initialis√© avec succ√®s');
    } catch (e) {
        if (e.message.includes('already initialized')) {
            print('‚ö†Ô∏è  Replica set d√©j√† initialis√©');
        } else {
            print('‚ùå Erreur initialisation replica set: ' + e.message);
            throw e;
        }
    }
"

# Attendre que le replica set soit pr√™t
echo "‚è≥ Attente que le replica set soit pr√™t..."
for i in {1..20}; do
    if docker-compose exec -T database mongosh --eval "rs.status().ok" 2>/dev/null | grep -q "1"; then
        echo "‚úÖ Replica set rs0 pr√™t"
        break
    fi
    echo "‚è≥ Tentative $i/20 pour le replica set..."
    sleep 3
done

# V√©rifier la connexion √† la base de donn√©es
echo "üîç V√©rification de la connexion √† la base de donn√©es..."
if docker-compose exec -T database mongosh --eval "use meeshy; db.runCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ Base de donn√©es 'meeshy' accessible"
else
    echo "‚ùå Probl√®me de connexion √† la base de donn√©es"
    exit 1
fi

echo "‚úÖ Reset de la base de donn√©es termin√© avec succ√®s"
EOF

    # Transf√©rer et ex√©cuter le script de reset
    scp -o StrictHostKeyChecking=no /tmp/reset-database.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/reset-database.sh && cd /opt/meeshy && /tmp/reset-database.sh"
    
    # Nettoyer
    rm -f /tmp/reset-database.sh
    
    log_success "Reset de la base de donn√©es termin√© avec succ√®s"
}

# Fonction pour red√©marrer les services avec les nouvelles configurations
restart_services() {
    local ip="$1"
    log_info "Red√©marrage des services avec les nouvelles configurations..."
    
    # Script de red√©marrage
    cat << 'EOF' > /tmp/restart-services.sh
#!/bin/bash
set -e

echo "üîÑ Red√©marrage des services avec les nouvelles configurations..."

# Red√©marrer Redis
echo "üî¥ Red√©marrage de Redis..."
docker-compose up -d redis
sleep 2

# V√©rifier Redis
for i in {1..10}; do
    if docker-compose exec -T redis redis-cli --no-auth-warning -a MeeshyRedis123 ping >/dev/null 2>&1; then
        echo "‚úÖ Redis pr√™t"
        break
    fi
    echo "‚è≥ Tentative $i/10 pour Redis..."
    sleep 2
done

# Red√©marrer Translator
echo "üåê Red√©marrage de Translator..."
docker-compose up -d translator
sleep 10

# V√©rifier Translator
for i in {1..15}; do
    if curl -f -s http://localhost:8000/health >/dev/null 2>&1; then
        echo "‚úÖ Translator pr√™t"
        break
    fi
    echo "‚è≥ Tentative $i/15 pour Translator..."
    sleep 2
done

# Red√©marrer Gateway
echo "üö™ Red√©marrage de Gateway..."
docker-compose up -d gateway
sleep 5

# V√©rifier Gateway
for i in {1..15}; do
    if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
        echo "‚úÖ Gateway pr√™t"
        break
    fi
    echo "‚è≥ Tentative $i/15 pour Gateway..."
    sleep 2
done

# Red√©marrer Frontend
echo "üé® Red√©marrage de Frontend..."
docker-compose up -d frontend
sleep 5

# V√©rifier Frontend
for i in {1..10}; do
    if docker-compose exec -T frontend curl -f -s http://localhost:3100 >/dev/null 2>&1; then
        echo "‚úÖ Frontend pr√™t"
        break
    fi
    echo "‚è≥ Tentative $i/10 pour Frontend..."
    sleep 2
done

echo "üìä √âtat final des services:"
docker-compose ps

echo "‚úÖ Tous les services red√©marr√©s avec succ√®s"
EOF

    # Transf√©rer et ex√©cuter le script de red√©marrage
    scp -o StrictHostKeyChecking=no /tmp/restart-services.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/restart-services.sh && cd /opt/meeshy && /tmp/restart-services.sh"
    
    # Nettoyer
    rm -f /tmp/restart-services.sh
    
    log_success "Services red√©marr√©s avec succ√®s"
}

# Fonction pour v√©rifier la sant√© des services
verify_services_health() {
    local ip="$1"
    log_info "V√©rification de la sant√© des services..."
    
    # Script de v√©rification
    cat << 'EOF' > /tmp/verify-health.sh
#!/bin/bash
set -e

echo "üè• V√©rification de la sant√© des services..."

# V√©rifier MongoDB
echo "üìä Test MongoDB:"
if docker-compose exec -T database mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
    echo "‚úÖ MongoDB: Service accessible"
    
    # V√©rifier la base de donn√©es meeshy
    if docker-compose exec -T database mongosh --eval "use meeshy; db.runCommand('ping')" >/dev/null 2>&1; then
        echo "‚úÖ Base de donn√©es 'meeshy': Accessible"
        
        # V√©rifier les collections
        collections=$(docker-compose exec -T database mongosh --eval "use meeshy; db.getCollectionNames()" --quiet 2>/dev/null | grep -v "MongoDB\|connecting\|switched" | head -5)
        if [ -n "$collections" ]; then
            echo "‚úÖ Collections d√©tect√©es: $collections"
        else
            echo "‚ö†Ô∏è  Aucune collection d√©tect√©e (base vide - normal apr√®s reset)"
        fi
    else
        echo "‚ùå Base de donn√©es 'meeshy': Non accessible"
        exit 1
    fi
else
    echo "‚ùå MongoDB: Service inaccessible"
    exit 1
fi

# V√©rifier Redis
echo "üî¥ Test Redis:"
if docker-compose exec -T redis redis-cli --no-auth-warning -a MeeshyRedis123 ping >/dev/null 2>&1; then
    echo "‚úÖ Redis: Connect√© et op√©rationnel"
else
    echo "‚ùå Redis: Probl√®me de connexion"
    exit 1
fi

# V√©rifier Gateway
echo "üö™ Test Gateway:"
if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
    echo "‚úÖ Gateway: Health check OK"
else
    echo "‚ùå Gateway: Health check √©chou√©"
    exit 1
fi

# V√©rifier Translator
echo "üåê Test Translator:"
if curl -f -s http://localhost:8000/health >/dev/null 2>&1; then
    echo "‚úÖ Translator: Health check OK"
else
    echo "‚ùå Translator: Health check √©chou√©"
    exit 1
fi

# V√©rifier Frontend
echo "üé® Test Frontend:"
if docker-compose exec -T frontend curl -f -s http://localhost:3100 >/dev/null 2>&1; then
    echo "‚úÖ Frontend: Accessible"
else
    echo "‚ùå Frontend: Non accessible"
    exit 1
fi

echo "üéâ Tous les services sont op√©rationnels !"
EOF

    # Transf√©rer et ex√©cuter le script de v√©rification
    scp -o StrictHostKeyChecking=no /tmp/verify-health.sh root@$ip:/tmp/
    ssh -o StrictHostKeyChecking=no root@$ip "chmod +x /tmp/verify-health.sh && cd /opt/meeshy && /tmp/verify-health.sh"
    
    # Nettoyer
    rm -f /tmp/verify-health.sh
    
    log_success "V√©rification de la sant√© des services termin√©e"
}

# Fonction pour demander confirmation
ask_confirmation() {
    if [ "$SKIP_CONFIRMATION" = true ]; then
        return 0
    fi
    
    echo -e "${RED}‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es de la base de donn√©es !${NC}"
    echo -e "${YELLOW}üìã Op√©rations qui seront effectu√©es:${NC}"
    echo -e "  ‚Ä¢ Arr√™t de tous les services"
    echo -e "  ‚Ä¢ Suppression des volumes de donn√©es MongoDB"
    echo -e "  ‚Ä¢ Suppression des volumes de donn√©es Redis"
    echo -e "  ‚Ä¢ Suppression des volumes de mod√®les ML"
    echo -e "  ‚Ä¢ Nettoyage du syst√®me Docker"
    echo -e "  ‚Ä¢ Recr√©ation de la base de donn√©es vide"
    echo -e "  ‚Ä¢ Red√©marrage des services"
    echo ""
    
    if [ "$BACKUP_BEFORE_RESET" = true ]; then
        echo -e "${GREEN}‚úÖ Un backup sera cr√©√© avant le reset${NC}"
    else
        echo -e "${RED}‚ùå Aucun backup ne sera cr√©√©${NC}"
    fi
    
    echo ""
    read -p "√ätes-vous s√ªr de vouloir continuer ? (tapez 'RESET' pour confirmer): " confirmation
    
    if [ "$confirmation" != "RESET" ]; then
        log_error "Op√©ration annul√©e par l'utilisateur"
        exit 1
    fi
    
    log_success "Confirmation re√ßue, d√©marrage du reset..."
}

# Fonction principale
main() {
    # Parser les arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help)
                show_help
                exit 0
                ;;
            --force)
                FORCE_RESET=true
                SKIP_CONFIRMATION=true
                shift
                ;;
            --no-backup)
                BACKUP_BEFORE_RESET=false
                shift
                ;;
            *)
                if [ -z "$DROPLET_IP" ]; then
                    DROPLET_IP="$1"
                else
                    log_error "Argument inconnu: $1"
                    show_help
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # V√©rifier que l'IP du droplet est fournie
    if [ -z "$DROPLET_IP" ]; then
        log_error "IP du droplet manquante"
        show_help
        exit 1
    fi
    
    echo -e "${BLUE}üîÑ Script de Reset de Base de Donn√©es Digital Ocean${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo ""
    echo -e "${YELLOW}üéØ Cible: ${CYAN}$DROPLET_IP${NC}"
    echo ""
    
    # Tester la connexion SSH
    test_ssh_connection "$DROPLET_IP" || exit 1
    
    # Demander confirmation
    ask_confirmation
    
    # Cr√©er un backup si demand√©
    if [ "$BACKUP_BEFORE_RESET" = true ]; then
        create_database_backup "$DROPLET_IP"
    fi
    
    # Reset de la base de donn√©es
    reset_database "$DROPLET_IP"
    
    # Red√©marrer les services
    restart_services "$DROPLET_IP"
    
    # V√©rifier la sant√© des services
    verify_services_health "$DROPLET_IP"
    
    # Afficher le r√©sum√©
    echo ""
    log_success "üéâ Reset de la base de donn√©es termin√© avec succ√®s !"
    echo ""
    echo -e "${BLUE}üìã R√©sum√© des op√©rations:${NC}"
    echo -e "  ‚Ä¢ ‚úÖ Connexion SSH √©tablie"
    if [ "$BACKUP_BEFORE_RESET" = true ]; then
        echo -e "  ‚Ä¢ ‚úÖ Backup de la base de donn√©es cr√©√©"
    fi
    echo -e "  ‚Ä¢ ‚úÖ Base de donn√©es reset√©e"
    echo -e "  ‚Ä¢ ‚úÖ Services red√©marr√©s"
    echo -e "  ‚Ä¢ ‚úÖ Sant√© des services v√©rifi√©e"
    echo ""
    echo -e "${YELLOW}üîê Prochaines √©tapes:${NC}"
    echo -e "  ‚Ä¢ Utilisez le script de d√©ploiement avec les nouvelles configurations"
    echo -e "  ‚Ä¢ Les utilisateurs par d√©faut seront cr√©√©s automatiquement"
    echo -e "  ‚Ä¢ V√©rifiez que tous les services fonctionnent correctement"
    echo ""
    echo -e "${GREEN}üöÄ La base de donn√©es est pr√™te pour le d√©ploiement !${NC}"
}

# Ex√©cuter le script principal
main "$@"
