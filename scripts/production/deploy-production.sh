#!/bin/bash

# Script de d√©ploiement optimis√© en production pour Meeshy
# Ce script orchestre le processus de d√©ploiement optimis√© :
# 1. G√©n√©ration des configurations s√©curis√©es
# 2. Build et push des images Docker (si n√©cessaire)
# 3. Reset de la base de donn√©es (si n√©cessaire)
# 4. D√©ploiement optimis√© (infrastructure et configuration uniquement)
# 
# OPTIMISATION: Ne transmet que les fichiers essentiels pour l'infrastructure
# et la configuration, pas les sources qui sont d√©j√† build√©es dans les images

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
SECRETS_DIR="$PROJECT_ROOT/secrets"
CONFIG_DIR="$PROJECT_ROOT/config"

# Variables par d√©faut
DROPLET_IP=""
SKIP_CONFIG_GENERATION=false
SKIP_BUILD=false
SKIP_DB_RESET=false
SKIP_DEPLOYMENT=false
FORCE_REBUILD=false
FORCE_DB_RESET=false
VERBOSE=false

# Fonctions utilitaires
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_step() { echo -e "${CYAN}üîÑ $1${NC}"; }

# Chargement des variables d'environnement DigitalOcean
if [ -f "$PROJECT_ROOT/env.digitalocean" ]; then
    log_info "Chargement des variables d'environnement DigitalOcean..."
    set -a  # Automatically export all variables
    source "$PROJECT_ROOT/env.digitalocean"
    set +a  # Stop automatically exporting
    log_success "Variables d'environnement DigitalOcean charg√©es"
else
    log_warning "Fichier env.digitalocean non trouv√©, utilisation des variables par d√©faut"
fi

# Fonction pour afficher l'aide
show_help() {
    echo -e "${BLUE}Script de D√©ploiement Complet en Production Meeshy${NC}"
    echo ""
    echo "Usage: $0 [OPTIONS] DROPLET_IP"
    echo ""
    echo "Arguments:"
    echo "  DROPLET_IP              IP du droplet Digital Ocean"
    echo ""
    echo "Options:"
    echo "  --skip-config           Ignorer la g√©n√©ration des configurations"
    echo "  --skip-build            Ignorer le build et push des images"
    echo "  --skip-db-reset         Ignorer le reset de la base de donn√©es"
    echo "  --skip-deployment       Ignorer le d√©ploiement final"
    echo "  --force-rebuild         Forcer la reconstruction des images"
    echo "  --force-db-reset        Forcer le reset de la base de donn√©es"
    echo "  --verbose               Mode verbeux"
    echo "  --help                  Afficher cette aide"
    echo ""
    echo "Description:"
    echo "  Ce script orchestre le d√©ploiement optimis√© en production :"
    echo "  1. G√©n√©ration des configurations s√©curis√©es"
    echo "  2. Build et push des images Docker (si n√©cessaire)"
    echo "  3. Reset de la base de donn√©es (si n√©cessaire)"
    echo "  4. D√©ploiement optimis√© (infrastructure et configuration uniquement)"
    echo ""
    echo "  OPTIMISATION: Ne transmet que les fichiers essentiels :"
    echo "  - Configuration Docker Compose et environnement"
    echo "  - Configuration Nginx et Supervisor"
    echo "  - Sch√©mas de base de donn√©es et scripts d'init"
    echo "  - Fichiers Proto pour la communication inter-services"
    echo "  - Les sources sont d√©j√† build√©es dans les images Docker"
    echo ""
    echo "Exemples:"
    echo "  $0 157.230.15.51                    # D√©ploiement complet"
    echo "  $0 --skip-build 157.230.15.51       # D√©ploiement sans rebuild"
    echo "  $0 --force-rebuild 157.230.15.51    # D√©ploiement avec rebuild forc√©"
    echo "  $0 --skip-db-reset 157.230.15.51    # D√©ploiement sans reset DB"
    echo ""
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    log_step "V√©rification des pr√©requis..."
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -f "$PROJECT_ROOT/package.json" ]; then
        log_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet Meeshy"
        exit 1
    fi
    
    # V√©rifier que Docker est disponible
    if ! command -v docker >/dev/null 2>&1; then
        log_error "Docker n'est pas install√© ou n'est pas dans le PATH"
        exit 1
    fi
    
    # V√©rifier que Docker est en cours d'ex√©cution
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker n'est pas en cours d'ex√©cution"
        exit 1
    fi
    
    # V√©rifier que SSH est disponible
    if ! command -v ssh >/dev/null 2>&1; then
        log_error "SSH n'est pas install√© ou n'est pas dans le PATH"
        exit 1
    fi
    
    # V√©rifier que les scripts n√©cessaires existent
    local required_scripts=(
        "$SCRIPT_DIR/generate-production-config.sh"
        "$SCRIPT_DIR/reset-database.sh"
        "$PROJECT_ROOT/scripts/deployment/build-and-push-docker-images.sh"
        "$PROJECT_ROOT/scripts/meeshy-deploy.sh"
    )
    
    for script in "${required_scripts[@]}"; do
        if [ ! -f "$script" ]; then
            log_error "Script requis non trouv√©: $script"
            exit 1
        fi
        
        if [ ! -x "$script" ]; then
            log_warning "Script non ex√©cutable, correction des permissions: $script"
            chmod +x "$script"
        fi
    done
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Fonction pour corriger les permissions des volumes du translator
fix_translator_volume_permissions() {
    log_step "Correction des permissions des volumes pour le translator..."
    
    # Utilisation de l'utilisateur OVHcloud AI Deploy (42420:42420)
    local user_id="42420:42420"
    local permissions="755"
    
    # Fonction utilitaire pour corriger les permissions d'un volume
    fix_volume_permissions() {
        local volume_name="$1"
        local mount_path="$2"
        local description="$3"
        
        log_info "  ‚Ä¢ Correction des permissions du volume $description ($volume_name)..."
        
        # V√©rifier que le volume existe
        if ! docker volume inspect "$volume_name" >/dev/null 2>&1; then
            log_warning "    Volume $volume_name n'existe pas, cr√©ation..."
            docker volume create "$volume_name"
        fi
        
        # Corriger les permissions
        if docker run --rm -v "${volume_name}:${mount_path}" alpine chown -R "$user_id" "$mount_path" 2>/dev/null; then
            docker run --rm -v "${volume_name}:${mount_path}" alpine chmod -R "$permissions" "$mount_path" 2>/dev/null
            log_success "    ‚úÖ Permissions corrig√©es pour $description"
        else
            log_warning "    ‚ö†Ô∏è  Impossible de corriger les permissions pour $description (volume peut √™tre vide)"
        fi
    }
    
    # Corriger les permissions des volumes du translator
    fix_volume_permissions "meeshy_translator_models" "/workspace/models" "translator_models"
    fix_volume_permissions "meeshy_translator_cache" "/workspace/cache" "translator_cache"
    fix_volume_permissions "meeshy_translator_generated" "/workspace/generated" "translator_generated"
    
    log_success "Permissions des volumes du translator corrig√©es"
}

# Fonction pour g√©n√©rer les configurations de production
generate_production_config() {
    if [ "$SKIP_CONFIG_GENERATION" = true ]; then
        log_info "G√©n√©ration des configurations ignor√©e (--skip-config)"
        return 0
    fi
    
    log_step "G√©n√©ration des configurations de production..."
    
    # V√©rifier si les configurations existent d√©j√†
    if [ -f "$SECRETS_DIR/production-secrets.env" ] && [ "$FORCE_REBUILD" = false ]; then
        log_warning "Les configurations de production existent d√©j√†"
        echo -e "${YELLOW}Utilisez --force-rebuild pour forcer la r√©g√©n√©ration${NC}"
        return 0
    fi
    
    # G√©n√©rer les configurations
    if [ "$VERBOSE" = true ]; then
        bash "$SCRIPT_DIR/generate-production-config.sh" --force
    else
        bash "$SCRIPT_DIR/generate-production-config.sh" --force >/dev/null 2>&1
    fi
    
    if [ $? -eq 0 ]; then
        log_success "Configurations de production g√©n√©r√©es"
    else
        log_error "√âchec de la g√©n√©ration des configurations"
        exit 1
    fi
}

# Fonction pour build et push les images Docker
build_and_push_images() {
    if [ "$SKIP_BUILD" = true ]; then
        log_info "Build et push des images ignor√©s (--skip-build)"
        return 0
    fi
    
    log_step "Build et push des images Docker..."
    
    # Options pour le build
    local build_options=""
    if [ "$FORCE_REBUILD" = true ]; then
        build_options="--force-rebuild"
    fi
    
    # Ex√©cuter le build
    if [ "$VERBOSE" = true ]; then
        bash "$PROJECT_ROOT/scripts/deployment/build-and-push-docker-images.sh" $build_options
    else
        bash "$PROJECT_ROOT/scripts/deployment/build-and-push-docker-images.sh" $build_options >/dev/null 2>&1
    fi
    
    if [ $? -eq 0 ]; then
        log_success "Images Docker build√©es et pouss√©es"
    else
        log_error "√âchec du build et push des images"
        exit 1
    fi
}

# Fonction pour reset la base de donn√©es
reset_database() {
    if [ "$SKIP_DB_RESET" = true ]; then
        log_info "Reset de la base de donn√©es ignor√© (--skip-db-reset)"
        return 0
    fi
    
    log_step "Reset de la base de donn√©es..."
    
    # Options pour le reset
    local reset_options=""
    if [ "$FORCE_DB_RESET" = true ]; then
        reset_options="--force"
    fi
    
    # Ex√©cuter le reset
    if [ "$VERBOSE" = true ]; then
        bash "$SCRIPT_DIR/reset-database.sh" $reset_options "$DROPLET_IP"
    else
        bash "$SCRIPT_DIR/reset-database.sh" $reset_options "$DROPLET_IP" >/dev/null 2>&1
    fi
    
    if [ $? -eq 0 ]; then
        log_success "Base de donn√©es reset√©e"
    else
        log_error "√âchec du reset de la base de donn√©es"
        exit 1
    fi
}

# Fonction pour d√©ployer l'application (optimis√©e - seulement infrastructure et config)
deploy_application() {
    if [ "$SKIP_DEPLOYMENT" = true ]; then
        log_info "D√©ploiement ignor√© (--skip-deployment)"
        return 0
    fi
    
    log_step "D√©ploiement optimis√© de l'application (infrastructure et configuration uniquement)..."
    
    # V√©rifier que les configurations existent
    if [ ! -f "$PROJECT_ROOT/env.digitalocean" ]; then
        log_error "Fichier de configuration non trouv√©: $PROJECT_ROOT/env.digitalocean"
        exit 1
    fi
    
    if [ ! -f "$SECRETS_DIR/production-secrets.env" ]; then
        log_error "Fichier de secrets non trouv√©: $SECRETS_DIR/production-secrets.env"
        log_info "Ex√©cutez d'abord la g√©n√©ration des configurations"
        exit 1
    fi
    
    # Cr√©er r√©pertoire temporaire pour les fichiers essentiels uniquement
    local deploy_dir="/tmp/meeshy-deploy-optimized-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$deploy_dir"
    
    log_info "Pr√©paration des fichiers essentiels pour le d√©ploiement..."
    
    # 1. Fichiers Docker Compose et configuration
    cp "$PROJECT_ROOT/docker-compose.traefik.yml" "$deploy_dir/docker-compose.yml"
    
    # 2. Fichier d'environnement de production (base env.digitalocean + secrets de production)
    local env_file="$deploy_dir/.env"
    cp "$PROJECT_ROOT/env.digitalocean" "$env_file"
    
    # Supprimer les placeholders avant d'ajouter les vrais secrets
    log_info "Suppression des placeholders de secrets..."
    sed -i.bak '/^JWT_SECRET=CHANGE_ME_/d' "$env_file"
    sed -i.bak '/^ADMIN_PASSWORD=CHANGE_ME_/d' "$env_file"
    sed -i.bak '/^MEESHY_BIGBOSS_PASSWORD=CHANGE_ME_/d' "$env_file"
    sed -i.bak '/^MONGODB_PASSWORD=CHANGE_ME_/d' "$env_file"
    sed -i.bak '/^REDIS_PASSWORD=CHANGE_ME_/d' "$env_file"
    sed -i.bak '/^TRAEFIK_USERS=admin:CHANGE_ME_/d' "$env_file"
    sed -i.bak '/^API_USERS=admin:CHANGE_ME_/d' "$env_file"
    sed -i.bak '/^MONGO_USERS=admin:CHANGE_ME_/d' "$env_file"
    sed -i.bak '/^REDIS_USERS=admin:CHANGE_ME_/d' "$env_file"
    rm -f "$env_file.bak"
    
    echo "" >> "$env_file"
    echo "# ===== SECRETS DE PRODUCTION ======" >> "$env_file"
    echo "# G√©n√©r√©s automatiquement le $(date)" >> "$env_file"
    cat "$SECRETS_DIR/production-secrets.env" >> "$env_file"
    log_info "Configuration env.digitalocean + secrets de production ajout√©s (placeholders supprim√©s)"
    
    # 3. Configuration Docker essentielle uniquement
    mkdir -p "$deploy_dir/docker"
    cp -r "$PROJECT_ROOT/docker/nginx" "$deploy_dir/docker/"
    cp -r "$PROJECT_ROOT/docker/supervisor" "$deploy_dir/docker/"
    
    # 4. Fichiers shared essentiels pour la configuration (pas les sources)
    mkdir -p "$deploy_dir/shared"
    
    # Sch√©mas de base de donn√©es
    cp "$PROJECT_ROOT/shared/schema.prisma" "$deploy_dir/shared/"
    cp "$PROJECT_ROOT/shared/schema.postgresql.prisma" "$deploy_dir/shared/"
    
    # Scripts d'initialisation de base de donn√©es
    cp "$PROJECT_ROOT/shared/init-postgresql.sql" "$deploy_dir/shared/"
    cp "$PROJECT_ROOT/shared/init-database.sh" "$deploy_dir/shared/"
    cp "$PROJECT_ROOT/shared/init-mongodb-replica.sh" "$deploy_dir/shared/"
    cp "$PROJECT_ROOT/shared/mongodb-keyfile" "$deploy_dir/shared/"
    
    # Fichiers Proto pour la communication inter-services
    mkdir -p "$deploy_dir/shared/proto"
    cp "$PROJECT_ROOT/shared/proto/messaging.proto" "$deploy_dir/shared/proto/"
    
    # Version pour le suivi
    cp "$PROJECT_ROOT/shared/version.txt" "$deploy_dir/shared/" 2>/dev/null || echo "1.0.0" > "$deploy_dir/shared/version.txt"
    
    log_success "Fichiers essentiels pr√©par√©s (infrastructure et configuration uniquement)"
    
    # Envoyer sur serveur
    log_info "üì§ Envoi des fichiers optimis√©s..."
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "mkdir -p /opt/meeshy"
    scp -o StrictHostKeyChecking=no "$deploy_dir/docker-compose.yml" root@$DROPLET_IP:/opt/meeshy/
    scp -o StrictHostKeyChecking=no "$deploy_dir/.env" root@$DROPLET_IP:/opt/meeshy/
    scp -r -o StrictHostKeyChecking=no "$deploy_dir/docker" root@$DROPLET_IP:/opt/meeshy/
    scp -r -o StrictHostKeyChecking=no "$deploy_dir/shared" root@$DROPLET_IP:/opt/meeshy/
    
    # Nettoyer le r√©pertoire temporaire
    rm -rf "$deploy_dir"
    
    # Ex√©cuter le script de d√©ploiement sur le serveur
    log_info "üöÄ Lancement du d√©ploiement sur le serveur..."
    
    # Script de d√©ploiement optimis√©
    cat << 'EOF' > /tmp/deploy-optimized.sh
#!/bin/bash
set -e
cd /opt/meeshy

echo "üê≥ V√©rification de Docker..."
if ! command -v docker &> /dev/null; then
    echo "Installation de Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    usermod -aG docker $USER
    systemctl enable docker
    systemctl start docker
    rm get-docker.sh
fi

echo "üì¶ V√©rification de Docker Compose..."
if ! command -v docker-compose &> /dev/null; then
    echo "Installation de Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
fi

echo "üõë Arr√™t des services existants..."
docker-compose down --remove-orphans || true

echo "üßπ Nettoyage des images inutilis√©es..."
docker system prune -f || true

echo "üì• Pull des images Docker pr√©-build√©es..."
docker-compose pull

echo "üöÄ D√©marrage des services..."
docker-compose up -d

echo "‚è≥ Attente du d√©marrage des services..."
sleep 30

echo "üîß Configuration MongoDB replica set..."
# Attendre que MongoDB soit pr√™t
echo "‚è≥ Attente que MongoDB soit pr√™t..."
until docker exec meeshy-database mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
    echo "MongoDB pas encore pr√™t, attente..."
    sleep 2
done

echo "‚úÖ MongoDB est pr√™t, configuration du replica set..."
# Utiliser le script d'initialisation automatique
echo "üîÑ Ex√©cution du script d'initialisation MongoDB..."
docker exec meeshy-database bash /shared/init-mongodb-replica.sh

echo "üîÑ Red√©marrage de la gateway pour appliquer la configuration MongoDB..."
docker-compose restart gateway

echo "‚è≥ Attente du red√©marrage de la gateway..."
sleep 15

# Fonction pour corriger les permissions des volumes du translator
fix_translator_volume_permissions() {
    echo "üîß Correction des permissions des volumes pour le translator..."
    
    # Utilisation de l'utilisateur OVHcloud AI Deploy (42420:42420)
    local user_id="42420:42420"
    local permissions="755"
    
    # Fonction utilitaire pour corriger les permissions d'un volume
    fix_volume_permissions() {
        local volume_name="$1"
        local mount_path="$2"
        local description="$3"
        
        echo "  ‚Ä¢ Correction des permissions du volume $description ($volume_name)..."
        
        # V√©rifier que le volume existe
        if ! docker volume inspect "$volume_name" >/dev/null 2>&1; then
            echo "    Volume $volume_name n'existe pas, cr√©ation..."
            docker volume create "$volume_name"
        fi
        
        # Corriger les permissions
        if docker run --rm -v "${volume_name}:${mount_path}" alpine chown -R "$user_id" "$mount_path" 2>/dev/null; then
            docker run --rm -v "${volume_name}:${mount_path}" alpine chmod -R "$permissions" "$mount_path" 2>/dev/null
            echo "    ‚úÖ Permissions corrig√©es pour $description"
        else
            echo "    ‚ö†Ô∏è  Impossible de corriger les permissions pour $description (volume peut √™tre vide)"
        fi
    }
    
    # Corriger les permissions des volumes du translator
    fix_volume_permissions "meeshy_translator_models" "/workspace/models" "translator_models"
    fix_volume_permissions "meeshy_translator_cache" "/workspace/cache" "translator_cache"
    fix_volume_permissions "meeshy_translator_generated" "/workspace/generated" "translator_generated"
    
    echo "‚úÖ Permissions des volumes du translator corrig√©es"
}

# Correction des permissions des volumes du translator
fix_translator_volume_permissions

echo "üîÑ Red√©marrage du translator avec les bonnes permissions..."
docker-compose restart translator

echo "‚è≥ Attente du red√©marrage du translator..."
sleep 20

echo "üîç V√©rification de la sant√© des services..."
docker-compose ps

echo "‚úÖ D√©ploiement optimis√© termin√©!"
EOF

    scp -o StrictHostKeyChecking=no /tmp/deploy-optimized.sh root@$DROPLET_IP:/tmp/
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "chmod +x /tmp/deploy-optimized.sh && /tmp/deploy-optimized.sh"
    rm -f /tmp/deploy-optimized.sh
    
    if [ $? -eq 0 ]; then
        log_success "Application d√©ploy√©e avec succ√®s (d√©ploiement optimis√©)"
    else
        log_error "√âchec du d√©ploiement de l'application"
        exit 1
    fi
}

# Fonction pour v√©rifier le d√©ploiement
verify_deployment() {
    log_step "V√©rification du d√©ploiement..."
    
    # V√©rifier la sant√© des services
    if [ "$VERBOSE" = true ]; then
        bash "$PROJECT_ROOT/scripts/meeshy-deploy.sh" health "$DROPLET_IP"
    else
        bash "$PROJECT_ROOT/scripts/meeshy-deploy.sh" health "$DROPLET_IP" >/dev/null 2>&1
    fi
    
    if [ $? -eq 0 ]; then
        log_success "D√©ploiement v√©rifi√© avec succ√®s"
    else
        log_warning "Probl√®mes d√©tect√©s lors de la v√©rification"
        log_info "Ex√©cutez manuellement: $PROJECT_ROOT/scripts/meeshy-deploy.sh health $DROPLET_IP"
    fi
}

# Fonction pour afficher le r√©sum√© final
show_final_summary() {
    echo ""
    log_success "üéâ D√©ploiement optimis√© en production termin√© avec succ√®s !"
    echo ""
    echo -e "${BLUE}üìã R√©sum√© du d√©ploiement optimis√©:${NC}"
    echo -e "  ‚Ä¢ ‚úÖ Pr√©requis v√©rifi√©s"
    
    if [ "$SKIP_CONFIG_GENERATION" = false ]; then
        echo -e "  ‚Ä¢ ‚úÖ Configurations de production g√©n√©r√©es"
    fi
    
    if [ "$SKIP_BUILD" = false ]; then
        echo -e "  ‚Ä¢ ‚úÖ Images Docker build√©es et pouss√©es"
    fi
    
    if [ "$SKIP_DB_RESET" = false ]; then
        echo -e "  ‚Ä¢ ‚úÖ Base de donn√©es reset√©e"
    fi
    
    if [ "$SKIP_DEPLOYMENT" = false ]; then
        echo -e "  ‚Ä¢ ‚úÖ Application d√©ploy√©e"
    fi
    
    echo -e "  ‚Ä¢ ‚úÖ D√©ploiement v√©rifi√©"
    echo ""
    echo -e "${GREEN}‚ö° Optimisations appliqu√©es:${NC}"
    echo -e "  ‚Ä¢ ‚úÖ Transmission uniquement des fichiers essentiels"
    echo -e "  ‚Ä¢ ‚úÖ Pas de transfert des sources (d√©j√† dans les images)"
    echo -e "  ‚Ä¢ ‚úÖ Configuration infrastructure et environnement uniquement"
    echo -e "  ‚Ä¢ ‚úÖ Utilisation des images Docker pr√©-build√©es"
    echo ""
    echo -e "${YELLOW}üîê Informations de connexion:${NC}"
    echo -e "  ‚Ä¢ Consultez le fichier: ${CYAN}$SECRETS_DIR/production-secrets.env${NC}"
    echo -e "  ‚Ä¢ Transf√©rez ces informations sur Digital Ocean"
    echo ""
    echo -e "${YELLOW}üåê Acc√®s √† l'application:${NC}"
    echo -e "  ‚Ä¢ Frontend: ${CYAN}https://meeshy.me${NC}"
    echo -e "  ‚Ä¢ API Gateway: ${CYAN}https://gate.meeshy.me${NC}"
    echo -e "  ‚Ä¢ Service ML: ${CYAN}https://ml.meeshy.me${NC}"
    echo -e "  ‚Ä¢ Dashboard Traefik: ${CYAN}https://traefik.meeshy.me${NC}"
    echo ""
    echo -e "${YELLOW}üõ†Ô∏è  Commandes utiles:${NC}"
    echo -e "  ‚Ä¢ V√©rifier la sant√©: ${CYAN}./scripts/meeshy-deploy.sh health $DROPLET_IP${NC}"
    echo -e "  ‚Ä¢ Voir les logs: ${CYAN}./scripts/meeshy-deploy.sh logs $DROPLET_IP${NC}"
    echo -e "  ‚Ä¢ Red√©marrer: ${CYAN}./scripts/meeshy-deploy.sh restart $DROPLET_IP${NC}"
    echo ""
    echo -e "${GREEN}üöÄ L'application est maintenant en production !${NC}"
}

# Fonction principale
main() {
    # Parser les arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help)
                show_help
                exit 0
                ;;
            --skip-config)
                SKIP_CONFIG_GENERATION=true
                shift
                ;;
            --skip-build)
                SKIP_BUILD=true
                shift
                ;;
            --skip-db-reset)
                SKIP_DB_RESET=true
                shift
                ;;
            --skip-deployment)
                SKIP_DEPLOYMENT=true
                shift
                ;;
            --force-rebuild)
                FORCE_REBUILD=true
                shift
                ;;
            --force-db-reset)
                FORCE_DB_RESET=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            *)
                if [ -z "$DROPLET_IP" ]; then
                    DROPLET_IP="$1"
                else
                    log_error "Argument inconnu: $1"
                    show_help
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # V√©rifier que l'IP du droplet est fournie
    if [ -z "$DROPLET_IP" ]; then
        log_error "IP du droplet manquante"
        show_help
        exit 1
    fi
    
    echo -e "${BLUE}üöÄ Script de D√©ploiement Optimis√© en Production Meeshy${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo ""
    echo -e "${YELLOW}üéØ Cible: ${CYAN}$DROPLET_IP${NC}"
    echo -e "${YELLOW}üìã √âtapes:${NC}"
    echo -e "  ‚Ä¢ G√©n√©ration des configurations: ${CYAN}$([ "$SKIP_CONFIG_GENERATION" = true ] && echo "IGNOR√â" || echo "ACTIF")${NC}"
    echo -e "  ‚Ä¢ Build et push des images: ${CYAN}$([ "$SKIP_BUILD" = true ] && echo "IGNOR√â" || echo "ACTIF")${NC}"
    echo -e "  ‚Ä¢ Reset de la base de donn√©es: ${CYAN}$([ "$SKIP_DB_RESET" = true ] && echo "IGNOR√â" || echo "ACTIF")${NC}"
    echo -e "  ‚Ä¢ D√©ploiement final: ${CYAN}$([ "$SKIP_DEPLOYMENT" = true ] && echo "IGNOR√â" || echo "ACTIF")${NC}"
    echo ""
    
    # V√©rifier les pr√©requis
    check_prerequisites
    
    # G√©n√©rer les configurations de production
    generate_production_config
    
    # Build et push les images Docker
    build_and_push_images
    
    # Reset la base de donn√©es
    reset_database
    
    # D√©ployer l'application
    deploy_application
    
    # V√©rifier le d√©ploiement
    verify_deployment
    
    # Afficher le r√©sum√© final
    show_final_summary
}

# Ex√©cuter le script principal
main "$@"
