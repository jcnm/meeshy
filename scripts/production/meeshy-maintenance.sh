#!/bin/bash

# ===== MEESHY - MAINTENANCE ET NETTOYAGE =====
# Script sp√©cialis√© pour la maintenance et le nettoyage des services Meeshy
# Usage: ./meeshy-maintenance.sh [COMMAND] [OPTIONS]

set -e

# Charger la configuration globale
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/meeshy-config.sh"

# Initialiser la tra√ßabilit√©
init_tracing "meeshy-maintenance" "maintenance_operations"

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üîß MEESHY - MAINTENANCE ET NETTOYAGE${NC}"
    echo "======================================="
    echo ""
    echo "Usage:"
    echo "  ./meeshy-maintenance.sh [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  clean       - Nettoyer les conteneurs et images inutilis√©s"
    echo "  backup      - Sauvegarder les donn√©es"
    echo "  restore     - Restaurer les donn√©es"
    echo "  update      - Mettre √† jour et red√©marrer"
    echo "  health      - V√©rifier la sant√© des services"
    echo "  optimize    - Optimiser les performances"
    echo "  security    - V√©rifications de s√©curit√©"
    echo ""
    echo "Options:"
    echo "  --force     - Forcer l'op√©ration"
    echo "  --dry-run   - Simulation sans ex√©cution"
    echo "  --help      - Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  ./meeshy-maintenance.sh clean"
    echo "  ./meeshy-maintenance.sh backup --force"
    echo "  ./meeshy-maintenance.sh update"
    echo "  ./meeshy-maintenance.sh health"
    echo ""
}

# Nettoyer les conteneurs et images inutilis√©s
clean_system() {
    local force="$1"
    local dry_run="$2"
    
    log_info "Nettoyage du syst√®me..."
    trace_operation "clean_system" "STARTED" "Starting system cleanup"
    
    if [ "$dry_run" = true ]; then
        log_info "Mode simulation - aucune action ne sera effectu√©e"
    fi
    
    cd "$PROJECT_DIR"
    
    # Arr√™ter tous les conteneurs
    if [ "$dry_run" = false ]; then
        if [ "$force" = true ]; then
            log_warning "Arr√™t forc√© de tous les conteneurs..."
            docker stop $(docker ps -aq) 2>/dev/null || true
        else
            log_info "Arr√™t des conteneurs Meeshy..."
            docker stop $(docker ps -q --filter "name=meeshy-") 2>/dev/null || true
        fi
    else
        log_info "Simulation: Arr√™t des conteneurs"
    fi
    
    # Supprimer tous les conteneurs
    if [ "$dry_run" = false ]; then
        if [ "$force" = true ]; then
            log_warning "Suppression de tous les conteneurs..."
            docker rm $(docker ps -aq) 2>/dev/null || true
        else
            log_info "Suppression des conteneurs Meeshy..."
            docker rm $(docker ps -aq --filter "name=meeshy-") 2>/dev/null || true
        fi
    else
        log_info "Simulation: Suppression des conteneurs"
    fi
    
    # Supprimer les images inutilis√©es
    if [ "$dry_run" = false ]; then
        log_info "Suppression des images inutilis√©es..."
        docker image prune -f
    else
        log_info "Simulation: Suppression des images inutilis√©es"
    fi
    
    # Supprimer les volumes inutilis√©s
    if [ "$dry_run" = false ]; then
        log_info "Suppression des volumes inutilis√©s..."
        docker volume prune -f
    else
        log_info "Simulation: Suppression des volumes inutilis√©s"
    fi
    
    # Supprimer les r√©seaux inutilis√©s
    if [ "$dry_run" = false ]; then
        log_info "Suppression des r√©seaux inutilis√©s..."
        docker network prune -f
    else
        log_info "Simulation: Suppression des r√©seaux inutilis√©s"
    fi
    
    log_success "Nettoyage termin√©"
    trace_operation "clean_system" "SUCCESS" "System cleanup completed"
}

# Sauvegarder les donn√©es
backup_data() {
    local force="$1"
    local dry_run="$2"
    
    log_info "Sauvegarde des donn√©es..."
    trace_operation "backup_data" "STARTED" "Starting data backup"
    
    local backup_dir="$MEESHY_BACKUP_DIR"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    
    if [ "$dry_run" = true ]; then
        log_info "Mode simulation - aucune sauvegarde ne sera effectu√©e"
        log_info "R√©pertoire de sauvegarde: $backup_dir"
        log_info "Timestamp: $timestamp"
        return
    fi
    
    mkdir -p "$backup_dir"
    
    # Sauvegarder la base de donn√©es
    log_info "Sauvegarde de MongoDB..."
    if docker ps | grep -q "meeshy-database"; then
        docker exec meeshy-database mongodump --out /tmp/backup
        docker cp meeshy-database:/tmp/backup "$backup_dir/mongodb_$timestamp"
        log_success "MongoDB sauvegard√©"
    else
        log_warning "MongoDB non disponible pour la sauvegarde"
    fi
    
    # Sauvegarder Redis
    log_info "Sauvegarde de Redis..."
    if docker ps | grep -q "meeshy-redis"; then
        docker exec meeshy-redis redis-cli BGSAVE
        docker cp meeshy-redis:/data/dump.rdb "$backup_dir/redis_$timestamp.rdb"
        log_success "Redis sauvegard√©"
    else
        log_warning "Redis non disponible pour la sauvegarde"
    fi
    
    # Sauvegarder les volumes
    log_info "Sauvegarde des volumes..."
    docker run --rm -v meeshy_database_data:/data -v "$backup_dir":/backup alpine tar czf /backup/database_data_$timestamp.tar.gz -C /data . 2>/dev/null || true
    docker run --rm -v meeshy_redis_data:/data -v "$backup_dir":/backup alpine tar czf /backup/redis_data_$timestamp.tar.gz -C /data . 2>/dev/null || true
    
    log_success "Sauvegarde termin√©e dans $backup_dir"
    trace_operation "backup_data" "SUCCESS" "Data backup completed"
}

# Restaurer les donn√©es
restore_data() {
    local force="$1"
    local dry_run="$2"
    
    log_warning "Cette op√©ration va restaurer les donn√©es depuis la derni√®re sauvegarde"
    
    if [ "$dry_run" = true ]; then
        log_info "Mode simulation - aucune restauration ne sera effectu√©e"
        return
    fi
    
    if [ "$force" != true ]; then
        read -p "√ätes-vous s√ªr ? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Restauration annul√©e"
            return
        fi
    fi
    
    log_info "Restauration des donn√©es..."
    trace_operation "restore_data" "STARTED" "Starting data restore"
    
    local backup_dir="$MEESHY_BACKUP_DIR"
    
    # Trouver la derni√®re sauvegarde
    local latest_backup=$(ls -t "$backup_dir" | head -1)
    
    if [ -z "$latest_backup" ]; then
        log_error "Aucune sauvegarde trouv√©e"
        trace_operation "restore_data" "FAILED" "No backup found"
        return
    fi
    
    log_info "Restauration depuis $latest_backup"
    
    # Restaurer la base de donn√©es
    if [[ "$latest_backup" == mongodb_* ]]; then
        docker cp "$backup_dir/$latest_backup" meeshy-database:/tmp/restore
        docker exec meeshy-database mongorestore /tmp/restore
        log_success "MongoDB restaur√©"
    fi
    
    # Restaurer Redis
    if [[ "$latest_backup" == redis_*.rdb ]]; then
        docker cp "$backup_dir/$latest_backup" meeshy-redis:/data/dump.rdb
        docker restart meeshy-redis
        log_success "Redis restaur√©"
    fi
    
    log_success "Restauration termin√©e"
    trace_operation "restore_data" "SUCCESS" "Data restore completed"
}

# Mettre √† jour et red√©marrer
update_services() {
    local force="$1"
    local dry_run="$2"
    
    log_info "Mise √† jour des services Meeshy..."
    trace_operation "update_services" "STARTED" "Starting services update"
    
    cd "$PROJECT_DIR"
    
    if [ "$dry_run" = false ]; then
        # === √âTAPE 1: BACKUP AUTOMATIQUE ===
        log_warning "‚ö†Ô∏è  Sauvegarde automatique avant mise √† jour..."
        if [ -f "$SCRIPT_DIR/meeshy-auto-backup.sh" ]; then
            bash "$SCRIPT_DIR/meeshy-auto-backup.sh" "$PROJECT_DIR/backups" || {
                log_warning "Le backup automatique a √©chou√©, mais on continue..."
            }
        else
            log_warning "Script de backup non trouv√©, on continue sans backup..."
        fi
        
        # === √âTAPE 2: T√âL√âCHARGEMENT DES IMAGES ===
        log_info "T√©l√©chargement des derni√®res images..."
        $COMPOSE_CMD -f "$COMPOSE_FILE" --env-file "$ENV_FILE" pull
        
        # === √âTAPE 3: ARR√äT DES SERVICES (SANS SUPPRIMER LES VOLUMES) ===
        log_info "Arr√™t des services (conservation des volumes)..."
        $COMPOSE_CMD -f "$COMPOSE_FILE" --env-file "$ENV_FILE" stop
        
        # === √âTAPE 4: SUPPRESSION DES ANCIENS CONTENEURS ===
        log_info "Suppression des anciens conteneurs..."
        $COMPOSE_CMD -f "$COMPOSE_FILE" --env-file "$ENV_FILE" rm -f
        
        # === √âTAPE 5: RED√âMARRAGE AVEC LES NOUVELLES IMAGES ===
        log_info "Red√©marrage des services avec les nouvelles images..."
        $COMPOSE_CMD -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d
        
        log_success "‚úÖ Mise √† jour termin√©e (volumes et donn√©es pr√©serv√©s)"
        log_info "üíæ Backup disponible dans: $PROJECT_DIR/backups/"
    else
        log_info "Mode simulation - mise √† jour simul√©e"
    fi
    
    trace_operation "update_services" "SUCCESS" "Services update completed"
}

# V√©rifier la sant√© des services
check_health() {
    log_info "V√©rification de la sant√© des services..."
    trace_operation "check_health" "STARTED" "Starting health check"
    
    cd "$PROJECT_DIR"
    
    # V√©rifier les conteneurs
    local containers=("meeshy-traefik" "meeshy-database" "meeshy-redis" "meeshy-translator" "meeshy-gateway" "meeshy-frontend")
    local healthy_containers=0
    local total_containers=${#containers[@]}
    
    for container in "${containers[@]}"; do
        if docker ps | grep -q "$container"; then
            local status=$(docker inspect --format='{{.State.Status}}' "$container" 2>/dev/null || echo "unknown")
            if [ "$status" = "running" ]; then
                log_success "$container: En cours d'ex√©cution"
                ((healthy_containers++))
            else
                log_warning "$container: Statut $status"
            fi
        else
            log_error "$container: Non trouv√©"
        fi
    done
    
    # R√©sum√© de sant√©
    echo ""
    echo "=== R√âSUM√â DE SANT√â ==="
    echo "Conteneurs sains: $healthy_containers/$total_containers"
    
    if [ "$healthy_containers" -eq "$total_containers" ]; then
        log_success "Tous les services sont op√©rationnels"
        trace_operation "check_health" "SUCCESS" "All services healthy"
    else
        log_warning "Certains services ont des probl√®mes"
        trace_operation "check_health" "WARNING" "$healthy_containers/$total_containers services healthy"
    fi
}

# Optimiser les performances
optimize_performance() {
    local force="$1"
    local dry_run="$2"
    
    log_info "Optimisation des performances..."
    trace_operation "optimize_performance" "STARTED" "Starting performance optimization"
    
    if [ "$dry_run" = true ]; then
        log_info "Mode simulation - aucune optimisation ne sera effectu√©e"
        return
    fi
    
    cd "$PROJECT_DIR"
    
    # Nettoyer les logs anciens
    log_info "Nettoyage des logs anciens..."
    find "$MEESHY_LOGS_DIR" -name "*.log" -mtime +7 -delete 2>/dev/null || true
    
    # Optimiser les volumes Docker
    log_info "Optimisation des volumes Docker..."
    docker system df
    
    # Red√©marrer les services pour lib√©rer la m√©moire
    if [ "$force" = true ]; then
        log_info "Red√©marrage des services pour lib√©rer la m√©moire..."
        $COMPOSE_CMD -f "$COMPOSE_FILE" --env-file "$ENV_FILE" restart
    fi
    
    log_success "Optimisation termin√©e"
    trace_operation "optimize_performance" "SUCCESS" "Performance optimization completed"
}

# V√©rifications de s√©curit√©
security_check() {
    log_info "V√©rifications de s√©curit√©..."
    trace_operation "security_check" "STARTED" "Starting security check"
    
    cd "$PROJECT_DIR"
    
    # V√©rifier les permissions des fichiers sensibles
    log_info "V√©rification des permissions des fichiers sensibles..."
    if [ -f "$ENV_FILE" ]; then
        local perms=$(stat -c "%a" "$ENV_FILE" 2>/dev/null || echo "unknown")
        if [ "$perms" = "600" ]; then
            log_success "Permissions du fichier d'environnement: $perms (s√©curis√©)"
        else
            log_warning "Permissions du fichier d'environnement: $perms (recommand√©: 600)"
        fi
    fi
    
    # V√©rifier les conteneurs en cours d'ex√©cution
    log_info "V√©rification des conteneurs en cours d'ex√©cution..."
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    # V√©rifier les ports ouverts
    log_info "V√©rification des ports ouverts..."
    netstat -tuln | grep -E ":(80|443|3000|8000|3100) " || echo "Aucun port Meeshy d√©tect√©"
    
    log_success "V√©rifications de s√©curit√© termin√©es"
    trace_operation "security_check" "SUCCESS" "Security check completed"
}

# Fonction principale
main() {
    local command="$1"
    local force=false
    local dry_run=false
    
    # Parser les arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                force=true
                shift
                ;;
            --dry-run)
                dry_run=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                if [ -z "$command" ]; then
                    command="$1"
                fi
                shift
                ;;
        esac
    done
    
    # V√©rifications pr√©liminaires
    check_prerequisites
    load_environment
    
    # Ex√©cuter la commande demand√©e
    case "$command" in
        "clean")
            clean_system "$force" "$dry_run"
            ;;
        "backup")
            backup_data "$force" "$dry_run"
            ;;
        "restore")
            restore_data "$force" "$dry_run"
            ;;
        "update")
            update_services "$force" "$dry_run"
            ;;
        "health")
            check_health
            ;;
        "optimize")
            optimize_performance "$force" "$dry_run"
            ;;
        "security")
            security_check
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            log_error "Commande inconnue: $command"
            show_help
            exit 1
            ;;
    esac
    
    # Finaliser la tra√ßabilit√©
    finalize_tracing "SUCCESS" "Maintenance operation completed: $command"
}

# Ex√©cuter la fonction principale
main "$@"
