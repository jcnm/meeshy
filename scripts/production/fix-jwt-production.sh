#!/bin/bash

# ===== SCRIPT DE CORRECTION JWT POUR PRODUCTION =====
# Ce script corrige le probl√®me de cl√© JWT incoh√©rente en production
# Il force la r√©initialisation de la base de donn√©es avec la bonne cl√© JWT

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß Correction du probl√®me JWT en production${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  Ce script va r√©initialiser la base de donn√©es avec la bonne cl√© JWT${NC}"
echo ""

# V√©rifier que nous sommes en production
if [ "$NODE_ENV" != "production" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  NODE_ENV n'est pas d√©fini sur 'production'${NC}"
    echo -e "${YELLOW}   Assurez-vous d'ex√©cuter ce script en production${NC}"
    read -p "Continuer quand m√™me ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}‚ùå Script annul√©${NC}"
        exit 1
    fi
fi

# Charger les variables d'environnement de production
if [ -f "env.production" ]; then
    echo -e "${BLUE}üìã Chargement de la configuration de production...${NC}"
    export $(grep -v '^#' env.production | xargs)
else
    echo -e "${RED}‚ùå Fichier env.production non trouv√©${NC}"
    exit 1
fi

# Charger les secrets de production
if [ -f "secrets/production-secrets.env" ]; then
    echo -e "${BLUE}üîê Chargement des secrets de production...${NC}"
    export $(grep -v '^#' secrets/production-secrets.env | xargs)
else
    echo -e "${RED}‚ùå Fichier secrets/production-secrets.env non trouv√©${NC}"
    exit 1
fi

# V√©rifier que la cl√© JWT est d√©finie
if [ -z "$JWT_SECRET" ]; then
    echo -e "${RED}‚ùå JWT_SECRET n'est pas d√©fini${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Configuration charg√©e${NC}"
echo -e "${BLUE}üîë Cl√© JWT: ${JWT_SECRET:0:20}...${NC}"
echo ""

# Afficher les informations de connexion
echo -e "${BLUE}üìä Configuration de la base de donn√©es:${NC}"
echo -e "  ${GREEN}Type:${NC} $DATABASE_TYPE"
echo -e "  ${GREEN}URL:${NC} ${DATABASE_URL/\/\/.*@/\/\/***@}"
echo -e "  ${GREEN}Reset forc√©:${NC} $FORCE_DB_RESET"
echo ""

# Confirmation finale
echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: Ce script va:${NC}"
echo -e "  ${YELLOW}1. Arr√™ter les services en cours${NC}"
echo -e "  ${YELLOW}2. R√©initialiser compl√®tement la base de donn√©es${NC}"
echo -e "  ${YELLOW}3. Recr√©er les utilisateurs avec la bonne cl√© JWT${NC}"
echo -e "  ${YELLOW}4. Red√©marrer les services${NC}"
echo ""

read -p "√ätes-vous s√ªr de vouloir continuer ? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${RED}‚ùå Script annul√©${NC}"
    exit 1
fi

echo -e "${BLUE}üöÄ D√©but de la correction JWT...${NC}"

# 1. Arr√™ter les services
echo -e "${BLUE}üõë Arr√™t des services...${NC}"
docker-compose -f docker-compose.prod.yml down || true

# 2. Forcer la r√©initialisation de la base de donn√©es
echo -e "${BLUE}üóëÔ∏è  R√©initialisation de la base de donn√©es...${NC}"
export FORCE_DB_RESET=true

# 3. Red√©marrer les services avec la bonne configuration
echo -e "${BLUE}üöÄ Red√©marrage des services avec la bonne cl√© JWT...${NC}"
docker-compose -f docker-compose.prod.yml up -d

# 4. Attendre que les services soient pr√™ts
echo -e "${BLUE}‚è≥ Attente du d√©marrage des services...${NC}"
sleep 30

# 5. V√©rifier que les services sont en cours d'ex√©cution
echo -e "${BLUE}üîç V√©rification des services...${NC}"

# V√©rifier le Gateway
if curl -s -f http://localhost:3000/health > /dev/null; then
    echo -e "${GREEN}‚úÖ Gateway: Op√©rationnel${NC}"
else
    echo -e "${RED}‚ùå Gateway: Non accessible${NC}"
fi

# V√©rifier le Frontend
if curl -s -f http://localhost:3100 > /dev/null; then
    echo -e "${GREEN}‚úÖ Frontend: Op√©rationnel${NC}"
else
    echo -e "${RED}‚ùå Frontend: Non accessible${NC}"
fi

# V√©rifier le Translator
if curl -s -f http://localhost:8000/health > /dev/null; then
    echo -e "${GREEN}‚úÖ Translator: Op√©rationnel${NC}"
else
    echo -e "${RED}‚ùå Translator: Non accessible${NC}"
fi

# 6. Tester l'authentification
echo -e "${BLUE}üîê Test de l'authentification...${NC}"

# Tester la connexion admin
ADMIN_RESPONSE=$(curl -s -X POST http://localhost:3000/auth/login \
    -H "Content-Type: application/json" \
    -d '{"username":"admin","password":"'$ADMIN_PASSWORD'"}')

if echo "$ADMIN_RESPONSE" | grep -q '"success":true'; then
    echo -e "${GREEN}‚úÖ Authentification admin: Succ√®s${NC}"
else
    echo -e "${RED}‚ùå Authentification admin: √âchec${NC}"
    echo -e "${YELLOW}   R√©ponse: $ADMIN_RESPONSE${NC}"
fi

# Tester la connexion meeshy
MEESHY_RESPONSE=$(curl -s -X POST http://localhost:3000/auth/login \
    -H "Content-Type: application/json" \
    -d '{"username":"meeshy","password":"'$MEESHY_PASSWORD'"}')

if echo "$MEESHY_RESPONSE" | grep -q '"success":true'; then
    echo -e "${GREEN}‚úÖ Authentification meeshy: Succ√®s${NC}"
else
    echo -e "${RED}‚ùå Authentification meeshy: √âchec${NC}"
    echo -e "${YELLOW}   R√©ponse: $MEESHY_RESPONSE${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Correction JWT termin√©e !${NC}"
echo ""
echo -e "${BLUE}üìã Informations de connexion:${NC}"
echo -e "  ${GREEN}Admin:${NC} admin / $ADMIN_PASSWORD"
echo -e "  ${GREEN}Meeshy:${NC} meeshy / $MEESHY_PASSWORD"
echo -e "  ${GREEN}Atabeth:${NC} atabeth / $ATABETH_PASSWORD"
echo ""
echo -e "${BLUE}üåê URLs d'acc√®s:${NC}"
echo -e "  ${GREEN}Frontend:${NC} http://localhost:3100"
echo -e "  ${GREEN}Gateway:${NC} http://localhost:3000"
echo -e "  ${GREEN}Translator:${NC} http://localhost:8000"
echo ""
echo -e "${GREEN}‚úÖ Vous pouvez maintenant vous connecter avec les bonnes cl√©s JWT !${NC}"
