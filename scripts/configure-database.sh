#!/bin/bash

# MongoDB Configuration Script for Meeshy
# This script configures Meeshy to use MongoDB exclusively

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
DEFAULT_DATABASE_IMAGE="mongo:8.0"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Function to show help
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -i, --image IMAGE     Custom MongoDB image (default: mongo:8.0)"
    echo "  -h, --help            Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                    # Use default MongoDB 8.0"
    echo "  $0 -i mongo:7.0      # Use MongoDB 7.0"
    echo ""
    echo "Environment Variables:"
    echo "  DATABASE_IMAGE        Custom MongoDB image"
}

# Function to get database image
get_database_image() {
    local custom_image="$1"
    
    if [ -n "$custom_image" ]; then
        echo "$custom_image"
    else
        echo "$DEFAULT_DATABASE_IMAGE"
    fi
}

# Function to create environment file
create_env_file() {
    local db_image="$1"
    
    local env_file=".env.database"
    
    print_status "Creating MongoDB environment file: $env_file"
    
    cat > "$env_file" << EOF
# MongoDB Configuration for Meeshy
# Generated by configure-database.sh

# Database Type (MongoDB only for now)
DATABASE_TYPE=MONGODB

# Database Image
DATABASE_IMAGE=$db_image

# MongoDB Configuration
MONGODB_URL=mongodb://meeshy:MeeshyPassword123@database:27017/meeshy?authSource=admin
MONGODB_DATABASE=meeshy
MONGODB_USER=meeshy
MONGODB_PASSWORD=MeeshyPassword123

# Prisma Configuration (MongoDB)
DATABASE_URL=\$MONGODB_URL
PRISMA_SCHEMA_PATH=./shared/schema.prisma
EOF
    
    print_status "Environment file created: $env_file"
}

# Function to update docker-compose
update_docker_compose() {
    local db_image="$1"
    
    local compose_file="docker-compose.yml"
    local configurable_file="docker-compose.configurable.yml"
    
    if [ -f "$configurable_file" ]; then
        print_status "Updating docker-compose.yml from configurable template"
        
        # Create a temporary file with environment variables
        local temp_env=".env.temp"
        cat > "$temp_env" << EOF
DATABASE_TYPE=MONGODB
DATABASE_IMAGE=$db_image
EOF
        
        # Generate docker-compose.yml from template
        envsubst < "$configurable_file" > "$compose_file"
        
        # Clean up
        rm -f "$temp_env"
        
        print_status "docker-compose.yml updated successfully"
    else
        print_warning "Configurable template not found: $configurable_file"
        print_warning "Please ensure the template exists before running this script"
    fi
}

# Function to show configuration summary
show_summary() {
    local db_image="$1"
    
    print_header "MongoDB Configuration Summary"
    echo "Database Type: MongoDB (exclusive)"
    echo "Database Image: $db_image"
    echo ""
    
    echo "MongoDB Configuration:"
    echo "  - Port: 27017"
    echo "  - Database: meeshy"
    echo "  - User: meeshy"
    echo "  - Password: MeeshyPassword123"
    echo "  - Schema: ./shared/schema.prisma"
    echo "  - Prisma Variable: DATABASE_URL"
    echo ""
    
    echo "Files created/updated:"
    echo "  - .env.database (MongoDB configuration)"
    echo "  - docker-compose.yml (updated from template)"
    echo ""
    echo "Next steps:"
    echo "  1. Review the configuration in .env.database"
    echo "  2. Start services: docker-compose up -d"
    echo "  3. Check logs: docker-compose logs -f"
}

# Main script
main() {
    local database_image=""
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--image)
                database_image="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Check if environment variables override defaults
    if [ -n "$DATABASE_IMAGE" ]; then
        database_image="$DATABASE_IMAGE"
    fi
    
    # Get database image
    database_image=$(get_database_image "$database_image")
    
    print_header "Configuring Meeshy for MongoDB"
    print_status "Database Type: MongoDB (exclusive)"
    print_status "Database Image: $database_image"
    echo ""
    
    # Create environment file
    create_env_file "$database_image"
    
    # Update docker-compose
    update_docker_compose "$database_image"
    
    # Show summary
    show_summary "$database_image"
    
    print_status "MongoDB configuration completed successfully!"
}

# Run main function
main "$@"
