#!/bin/bash

# Database Configuration Script for Meeshy
# This script allows you to choose between MongoDB and PostgreSQL

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
DEFAULT_DATABASE_TYPE="MONGODB"
DEFAULT_DATABASE_IMAGE="mongo:8.0"
DEFAULT_POSTGRESQL_IMAGE="postgres:15-alpine"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Function to show help
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -t, --type TYPE       Database type (MONGODB or POSTGRESQL)"
    echo "  -i, --image IMAGE     Custom database image"
    echo "  -h, --help            Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 -t MONGODB                    # Use MongoDB (default)"
    echo "  $0 -t POSTGRESQL                 # Use PostgreSQL"
    echo "  $0 -t POSTGRESQL -i postgres:16  # Use PostgreSQL 16"
    echo ""
    echo "Environment Variables:"
    echo "  DATABASE_TYPE         Database type (MONGODB or POSTGRESQL)"
    echo "  DATABASE_IMAGE        Custom database image"
}

# Function to validate database type
validate_database_type() {
    local db_type="$1"
    case "$db_type" in
        MONGODB|POSTGRESQL)
            return 0
            ;;
        *)
            print_error "Invalid database type: $db_type"
            print_error "Valid types: MONGODB, POSTGRESQL"
            return 1
            ;;
    esac
}

# Function to get database image
get_database_image() {
    local db_type="$1"
    local custom_image="$2"
    
    if [ -n "$custom_image" ]; then
        echo "$custom_image"
    else
        case "$db_type" in
            MONGODB)
                echo "$DEFAULT_DATABASE_IMAGE"
                ;;
            POSTGRESQL)
                echo "$DEFAULT_POSTGRESQL_IMAGE"
                ;;
        esac
    fi
}

# Function to create environment file
create_env_file() {
    local db_type="$1"
    local db_image="$2"
    
    local env_file=".env.database"
    
    print_status "Creating database environment file: $env_file"
    
    cat > "$env_file" << EOF
# Database Configuration for Meeshy
# Generated by configure-database.sh

# Database Type
DATABASE_TYPE=$db_type

# Database Image
DATABASE_IMAGE=$db_image

# MongoDB Configuration
MONGODB_URL=mongodb://meeshy:MeeshyPassword123@database:27017/meeshy?authSource=admin
MONGODB_DATABASE=meeshy
MONGODB_USER=meeshy
MONGODB_PASSWORD=MeeshyPassword123

# PostgreSQL Configuration
POSTGRESQL_URL=postgresql://meeshy:MeeshyPassword123@database:5432/meeshy
POSTGRESQL_DATABASE=meeshy
POSTGRESQL_USER=meeshy
POSTGRESQL_PASSWORD=MeeshyPassword123
POSTGRESQL_HOST=database
POSTGRESQL_PORT=5432

# Prisma Configuration
EOF

    if [ "$db_type" = "MONGODB" ]; then
        cat >> "$env_file" << EOF
PRISMA_DATABASE_URL=\$MONGODB_URL
PRISMA_SCHEMA_PATH=./shared/schema.prisma
EOF
    else
        cat >> "$env_file" << EOF
PRISMA_DATABASE_URL=\$POSTGRESQL_URL
PRISMA_SCHEMA_PATH=./shared/schema.postgresql.prisma
EOF
    fi
    
    print_status "Environment file created: $env_file"
}

# Function to update docker-compose
update_docker_compose() {
    local db_type="$1"
    local db_image="$2"
    
    local compose_file="docker-compose.yml"
    local configurable_file="docker-compose.configurable.yml"
    
    if [ -f "$configurable_file" ]; then
        print_status "Updating docker-compose.yml from configurable template"
        
        # Create a temporary file with environment variables
        local temp_env=".env.temp"
        cat > "$temp_env" << EOF
DATABASE_TYPE=$db_type
DATABASE_IMAGE=$db_image
EOF
        
        # Generate docker-compose.yml from template
        envsubst < "$configurable_file" > "$compose_file"
        
        # Clean up
        rm -f "$temp_env"
        
        print_status "docker-compose.yml updated successfully"
    else
        print_warning "Configurable template not found: $configurable_file"
        print_warning "Please ensure the template exists before running this script"
    fi
}

# Function to show configuration summary
show_summary() {
    local db_type="$1"
    local db_image="$2"
    
    print_header "Database Configuration Summary"
    echo "Database Type: $db_type"
    echo "Database Image: $db_image"
    echo ""
    
    case "$db_type" in
        MONGODB)
            echo "MongoDB Configuration:"
            echo "  - Port: 27017"
            echo "  - Database: meeshy"
            echo "  - User: meeshy"
            echo "  - Password: MeeshyPassword123"
            echo "  - Schema: ./shared/schema.prisma"
            ;;
        POSTGRESQL)
            echo "PostgreSQL Configuration:"
            echo "  - Port: 5432"
            echo "  - Database: meeshy"
            echo "  - User: meeshy"
            echo "  - Password: MeeshyPassword123"
            echo "  - Schema: ./shared/schema.postgresql.prisma"
            ;;
    esac
    
    echo ""
    echo "Files created/updated:"
    echo "  - .env.database (database configuration)"
    echo "  - docker-compose.yml (updated from template)"
    echo ""
    echo "Next steps:"
    echo "  1. Review the configuration in .env.database"
    echo "  2. Start services: docker-compose up -d"
    echo "  3. Check logs: docker-compose logs -f"
}

# Main script
main() {
    local database_type="$DEFAULT_DATABASE_TYPE"
    local database_image=""
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -t|--type)
                database_type="$2"
                shift 2
                ;;
            -i|--image)
                database_image="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Check if environment variables override defaults
    if [ -n "$DATABASE_TYPE" ]; then
        database_type="$DATABASE_TYPE"
    fi
    
    if [ -n "$DATABASE_IMAGE" ]; then
        database_image="$DATABASE_IMAGE"
    fi
    
    # Validate database type
    if ! validate_database_type "$database_type"; then
        exit 1
    fi
    
    # Get database image
    database_image=$(get_database_image "$database_type" "$database_image")
    
    print_header "Configuring Meeshy Database"
    print_status "Database Type: $database_type"
    print_status "Database Image: $database_image"
    echo ""
    
    # Create environment file
    create_env_file "$database_type" "$database_image"
    
    # Update docker-compose
    update_docker_compose "$database_type" "$database_image"
    
    # Show summary
    show_summary "$database_type" "$database_image"
    
    print_status "Database configuration completed successfully!"
}

# Run main function
main "$@"
