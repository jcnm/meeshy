#!/bin/bash

# ===== MEESHY - MISE √Ä JOUR PRISMA SCHEMA EN PRODUCTION =====
# Script pour mettre √† jour le schema Prisma et r√©g√©n√©rer les clients
# Usage: ./deploy-prisma-update.sh [DROPLET_IP]

set -e

# Charger la configuration de d√©ploiement
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/deploy-config.sh"

# Variables
DROPLET_IP="${1:-157.230.15.51}"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
DEPLOY_DIR="/opt/meeshy"

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üîÑ MEESHY - MISE √Ä JOUR PRISMA SCHEMA${NC}"
    echo "=========================================="
    echo ""
    echo "Usage:"
    echo "  ./deploy-prisma-update.sh [DROPLET_IP]"
    echo ""
    echo "Description:"
    echo "  Met √† jour le schema Prisma sur le serveur de production et r√©g√©n√®re les clients."
    echo "  Pour MongoDB, cela ne cr√©e pas de migration mais met √† jour le client Prisma."
    echo ""
    echo "Exemples:"
    echo "  ./deploy-prisma-update.sh 157.230.15.51"
    echo "  ./deploy-prisma-update.sh"
    echo ""
}

# Fonction de mise √† jour Prisma
update_prisma_schema() {
    log_info "üîÑ Mise √† jour du schema Prisma sur le serveur de production"
    
    # √âtape 1: V√©rifier que le schema existe localement
    if [ ! -f "$PROJECT_ROOT/shared/schema.prisma" ]; then
        log_error "‚ùå Schema Prisma non trouv√©: $PROJECT_ROOT/shared/schema.prisma"
        exit 1
    fi
    
    log_success "‚úÖ Schema Prisma trouv√© localement"
    
    # √âtape 2: Copier le nouveau schema sur le serveur
    log_info "üì§ Copie du schema Prisma sur le serveur..."
    
    # Cr√©er une sauvegarde du schema actuel
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP \
        "cp $DEPLOY_DIR/shared/schema.prisma $DEPLOY_DIR/shared/schema.prisma.backup-\$(date +%Y%m%d-%H%M%S)"
    
    # Copier le nouveau schema vers le r√©pertoire shared
    scp -o StrictHostKeyChecking=no \
        "$PROJECT_ROOT/shared/schema.prisma" \
        "root@$DROPLET_IP:$DEPLOY_DIR/shared/schema.prisma"
    
    log_success "‚úÖ Schema Prisma copi√© sur le serveur"
    
    # √âtape 3: Pull les derni√®res images Docker avec le nouveau schema
    log_info "üì• Pull des derni√®res images Docker..."
    
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << 'EOF'
cd /opt/meeshy
docker compose pull meeshy-gateway meeshy-translator
EOF
    
    if [ $? -eq 0 ]; then
        log_success "‚úÖ Images Docker mises √† jour"
    else
        log_warning "‚ö†Ô∏è  Erreur lors du pull des images"
    fi
    
    # √âtape 4: Red√©marrer les services pour appliquer les changements
    log_info "üîÑ Red√©marrage des services..."
    
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << 'EOF'
cd /opt/meeshy
docker compose up -d --force-recreate meeshy-gateway meeshy-translator
EOF
    
    if [ $? -eq 0 ]; then
        log_success "‚úÖ Services red√©marr√©s avec succ√®s"
    else
        log_error "‚ùå Erreur lors du red√©marrage des services"
        exit 1
    fi
    
    # √âtape 5: V√©rifier que les services sont bien d√©marr√©s
    log_info "üîç V√©rification de l'√©tat des services..."
    sleep 5
    
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << 'EOF'
cd /opt/meeshy
docker compose ps | grep -E "meeshy-gateway|meeshy-translator"
EOF
    
    log_success "‚úÖ Mise √† jour Prisma termin√©e avec succ√®s!"
    echo ""
    log_info "üìù Prochaines √©tapes recommand√©es:"
    echo "  1. V√©rifier les logs: ssh root@$DROPLET_IP 'cd /opt/meeshy && docker compose logs -f meeshy-gateway'"
    echo "  2. Tester l'API: curl https://meeshy.me/health"
    echo "  3. V√©rifier le fonctionnement de l'application"
}

# Fonction de mise √† jour avec rebuild complet (si n√©cessaire)
update_with_rebuild() {
    log_info "üî® Mise √† jour avec rebuild complet des conteneurs"
    
    # √âtape 1: Cr√©er une sauvegarde du schema actuel
    log_info "ÔøΩ Cr√©ation d'une sauvegarde du schema actuel..."
    
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP \
        "cp $DEPLOY_DIR/shared/schema.prisma $DEPLOY_DIR/shared/schema.prisma.backup-\$(date +%Y%m%d-%H%M%S)"
    
    log_success "‚úÖ Sauvegarde cr√©√©e"
    
    # √âtape 2: Copier le nouveau schema
    log_info "üì§ Copie du nouveau schema Prisma..."
    
    scp -o StrictHostKeyChecking=no \
        "$PROJECT_ROOT/shared/schema.prisma" \
        "root@$DROPLET_IP:$DEPLOY_DIR/shared/schema.prisma"
    
    log_success "‚úÖ Nouveau schema copi√©"
    
    # √âtape 3: Pull les derni√®res images depuis Docker Hub
    log_info "ÔøΩ Pull des derni√®res images Docker..."
    
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << 'EOF'
cd /opt/meeshy
docker compose pull meeshy-gateway meeshy-translator
EOF
    
    if [ $? -eq 0 ]; then
        log_success "‚úÖ Images Docker mises √† jour"
    else
        log_warning "‚ö†Ô∏è  Impossible de pull les images (elles seront reconstruites localement)"
    fi
    
    # √âtape 4: Red√©marrer les services avec les nouvelles images
    log_info "üîÑ Red√©marrage des services..."
    
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << 'EOF'
cd /opt/meeshy
docker compose up -d --force-recreate meeshy-gateway meeshy-translator
EOF
    
    if [ $? -eq 0 ]; then
        log_success "‚úÖ Services red√©marr√©s avec les nouvelles images"
    else
        log_error "‚ùå Erreur lors du red√©marrage des services"
        exit 1
    fi
    
    # √âtape 5: Attendre que les services soient pr√™ts
    log_info "‚è≥ Attente du d√©marrage des services..."
    sleep 10
    
    # √âtape 6: V√©rifier l'√©tat des services
    log_info "üîç V√©rification de l'√©tat des services..."
    
    ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << 'EOF'
cd /opt/meeshy
docker compose ps meeshy-gateway meeshy-translator
EOF
    
    log_success "‚úÖ Mise √† jour compl√®te termin√©e!"
}

# Fonction principale
main() {
    # Initialiser la tra√ßabilit√©
    init_deploy_tracing "deploy-prisma-update" "update_prisma_schema"
    
    log_info "üöÄ D√©but de la mise √† jour Prisma sur $DROPLET_IP"
    echo ""
    
    # Afficher les options
    echo -e "${CYAN}Options de mise √† jour:${NC}"
    echo "  1. Mise √† jour simple (r√©g√©n√©ration des clients)"
    echo "  2. Mise √† jour avec rebuild (reconstruction des images)"
    echo "  3. Annuler"
    echo ""
    
    read -p "Choisissez une option (1-3): " choice
    
    case $choice in
        1)
            update_prisma_schema
            ;;
        2)
            update_with_rebuild
            ;;
        3)
            log_info "Op√©ration annul√©e"
            exit 0
            ;;
        *)
            log_error "Option invalide"
            exit 1
            ;;
    esac
    
    echo ""
    log_success "üéâ Mise √† jour Prisma termin√©e avec succ√®s!"
    trace_deploy_operation "update_prisma_schema" "COMPLETED" "Prisma schema updated successfully on $DROPLET_IP"
}

# V√©rifier les arguments
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

# Ex√©cuter
main
