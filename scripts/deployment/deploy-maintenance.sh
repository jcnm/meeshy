#!/bin/bash

# ===== MEESHY - MAINTENANCE ET GESTION =====
# Script sp√©cialis√© pour la maintenance et la gestion des services
# Usage: ./deploy-maintenance.sh [COMMAND] [DROPLET_IP]

set -e

# Charger la configuration de d√©ploiement
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/deploy-config.sh"

# Initialiser la tra√ßabilit√©
init_deploy_tracing "deploy-maintenance" "maintenance_operations"

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üîß MEESHY - MAINTENANCE ET GESTION${NC}"
    echo "====================================="
    echo ""
    echo "Usage:"
    echo "  ./deploy-maintenance.sh [COMMAND] [DROPLET_IP]"
    echo ""
    echo "Commands:"
    echo -e "${GREEN}  Gestion des services:${NC}"
    echo "    status     - Afficher le statut des services"
    echo "    logs       - Afficher les logs des services"
    echo "    restart    - Red√©marrer les services"
    echo "    stop       - Arr√™ter les services"
    echo "    start      - D√©marrer les services"
    echo ""
    echo -e "${GREEN}  Maintenance:${NC}"
    echo "    cleanup    - Nettoyer les ressources Docker"
    echo "    backup     - Sauvegarder les donn√©es"
    echo "    restore    - Restaurer les donn√©es"
    echo "    update     - Mettre √† jour les services"
    echo ""
    echo -e "${GREEN}  Monitoring:${NC}"
    echo "    monitor    - Surveillance en temps r√©el"
    echo "    stats      - Statistiques des services"
    echo "    health     - V√©rification de sant√©"
    echo ""
    echo "Exemples:"
    echo "  ./deploy-maintenance.sh status 192.168.1.100"
    echo "  ./deploy-maintenance.sh logs 192.168.1.100"
    echo "  ./deploy-maintenance.sh restart 192.168.1.100"
    echo "  ./deploy-maintenance.sh cleanup 192.168.1.100"
    echo ""
}

# Afficher le statut des services
show_services_status() {
    local ip="$1"
    
    log_info "Affichage du statut des services..."
    trace_deploy_operation "show_status" "STARTED" "Showing services status on $ip"
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        cd /opt/meeshy
        
        echo "=== STATUT DES SERVICES MEESHY ==="
        echo "Date: $(date)"
        echo "Serveur: $(hostname)"
        echo ""
        
        # Statut d√©taill√©
        docker compose ps
        
        echo ""
        echo "=== R√âSUM√â DU STATUT ==="
        
        # Compter les services
        total_services=$(docker compose ps | grep -E "(traefik|redis|mongodb|gateway|translator|frontend)" | wc -l)
        running_services=$(docker compose ps | grep -E "(traefik|redis|mongodb|gateway|translator|frontend)" | grep "Up" | wc -l)
        
        echo "Services total: $total_services"
        echo "Services en cours d'ex√©cution: $running_services"
        
        if [ $running_services -eq $total_services ]; then
            echo "‚úÖ Tous les services sont en cours d'ex√©cution"
        else
            echo "‚ùå Certains services ne sont pas en cours d'ex√©cution"
        fi
        
        echo ""
        echo "=== UTILISATION DES RESSOURCES ==="
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Statut des services affich√©"
        trace_deploy_operation "show_status" "SUCCESS" "Services status displayed on $ip"
    else
        log_error "√âchec de l'affichage du statut"
        trace_deploy_operation "show_status" "FAILED" "Services status display failed on $ip"
        exit 1
    fi
}

# Afficher les logs des services
show_services_logs() {
    local ip="$1"
    local service="${2:-all}"
    local lines="${3:-50}"
    
    log_info "Affichage des logs des services..."
    trace_deploy_operation "show_logs" "STARTED" "Showing services logs on $ip"
    
    if [ "$service" = "all" ]; then
        # Afficher les logs de tous les services
        ssh -o StrictHostKeyChecking=no root@$ip << EOF
            cd /opt/meeshy
            
            echo "=== LOGS DES SERVICES MEESHY (derni√®res $lines lignes) ==="
            echo "Date: \$(date)"
            echo ""
            
            services=("traefik" "redis" "mongodb" "gateway" "translator" "frontend")
            
            for svc in "\${services[@]}"; do
                echo "--- \$svc ---"
                docker compose logs --tail=$lines \$svc
                echo ""
            done
EOF
    else
        # Afficher les logs d'un service sp√©cifique
        ssh -o StrictHostKeyChecking=no root@$ip << EOF
            cd /opt/meeshy
            
            echo "=== LOGS DU SERVICE $service (derni√®res $lines lignes) ==="
            echo "Date: \$(date)"
            echo ""
            
            docker compose logs --tail=$lines $service
EOF
    fi
    
    if [ $? -eq 0 ]; then
        log_success "Logs des services affich√©s"
        trace_deploy_operation "show_logs" "SUCCESS" "Services logs displayed on $ip"
    else
        log_error "√âchec de l'affichage des logs"
        trace_deploy_operation "show_logs" "FAILED" "Services logs display failed on $ip"
        exit 1
    fi
}

# Red√©marrer les services
restart_services() {
    local ip="$1"
    local service="${2:-all}"
    
    log_info "Red√©marrage des services..."
    trace_deploy_operation "restart_services" "STARTED" "Restarting services on $ip"
    
    if [ "$service" = "all" ]; then
        # Red√©marrer tous les services
        ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
            cd /opt/meeshy
            
            echo "=== RED√âMARRAGE DE TOUS LES SERVICES ==="
            echo "Date: $(date)"
            echo ""
            
            # Arr√™ter tous les services SANS supprimer les volumes
            echo "Arr√™t des services (conservation des volumes)..."
            docker compose stop
            
            # Attendre un peu
            sleep 5
            
            # Red√©marrer tous les services
            echo "Red√©marrage des services..."
            docker compose up -d
            
            # Attendre que les services soient pr√™ts
            echo "Attente que les services soient pr√™ts..."
            sleep 30
            
            # V√©rifier le statut
            echo "V√©rification du statut..."
            docker compose ps
EOF
    else
        # Red√©marrer un service sp√©cifique
        ssh -o StrictHostKeyChecking=no root@$ip << EOF
            cd /opt/meeshy
            
            echo "=== RED√âMARRAGE DU SERVICE $service ==="
            echo "Date: \$(date)"
            echo ""
            
            # Red√©marrer le service
            echo "Red√©marrage du service $service..."
            docker compose restart $service
            
            # Attendre que le service soit pr√™t
            echo "Attente que le service soit pr√™t..."
            sleep 3
            
            # V√©rifier le statut
            echo "V√©rification du statut..."
            docker compose ps $service
EOF
    fi
    
    if [ $? -eq 0 ]; then
        log_success "Services red√©marr√©s avec succ√®s"
        trace_deploy_operation "restart_services" "SUCCESS" "Services restarted on $ip"
    else
        log_error "√âchec du red√©marrage des services"
        trace_deploy_operation "restart_services" "FAILED" "Services restart failed on $ip"
        exit 1
    fi
}

# Arr√™ter les services
stop_services() {
    local ip="$1"
    local service="${2:-all}"
    
    log_info "Arr√™t des services..."
    trace_deploy_operation "stop_services" "STARTED" "Stopping services on $ip"
    
    if [ "$service" = "all" ]; then
        # Arr√™ter tous les services
        ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
            cd /opt/meeshy
            
            echo "=== ARR√äT DE TOUS LES SERVICES ==="
            echo "Date: $(date)"
            echo ""
            
            # Arr√™ter tous les services SANS supprimer les volumes ni les r√©seaux
            echo "Arr√™t des services (conservation des volumes et r√©seaux)..."
            docker compose stop
            
            # V√©rifier le statut
            echo "V√©rification du statut..."
            docker compose ps
EOF
    else
        # Arr√™ter un service sp√©cifique
        ssh -o StrictHostKeyChecking=no root@$ip << EOF
            cd /opt/meeshy
            
            echo "=== ARR√äT DU SERVICE $service ==="
            echo "Date: \$(date)"
            echo ""
            
            # Arr√™ter le service
            echo "Arr√™t du service $service..."
            docker compose stop $service
            
            # V√©rifier le statut
            echo "V√©rification du statut..."
            docker compose ps $service
EOF
    fi
    
    if [ $? -eq 0 ]; then
        log_success "Services arr√™t√©s avec succ√®s"
        trace_deploy_operation "stop_services" "SUCCESS" "Services stopped on $ip"
    else
        log_error "√âchec de l'arr√™t des services"
        trace_deploy_operation "stop_services" "FAILED" "Services stop failed on $ip"
        exit 1
    fi
}

# D√©marrer les services
start_services() {
    local ip="$1"
    local service="${2:-all}"
    
    log_info "D√©marrage des services..."
    trace_deploy_operation "start_services" "STARTED" "Starting services on $ip"
    
    if [ "$service" = "all" ]; then
        # D√©marrer tous les services
        ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
            cd /opt/meeshy
            
            echo "=== D√âMARRAGE DE TOUS LES SERVICES ==="
            echo "Date: $(date)"
            echo ""
            
            # D√©marrer tous les services
            echo "D√©marrage des services..."
            docker compose up -d
            
            # Attendre que les services soient pr√™ts
            echo "Attente que les services soient pr√™ts..."
            sleep 30
            
            # V√©rifier le statut
            echo "V√©rification du statut..."
            docker compose ps
EOF
    else
        # D√©marrer un service sp√©cifique
        ssh -o StrictHostKeyChecking=no root@$ip << EOF
            cd /opt/meeshy
            
            echo "=== D√âMARRAGE DU SERVICE $service ==="
            echo "Date: \$(date)"
            echo ""
            
            # D√©marrer le service
            echo "D√©marrage du service $service..."
            docker compose up -d $service
            
            # Attendre que le service soit pr√™t
            echo "Attente que le service soit pr√™t..."
            sleep 3
            
            # V√©rifier le statut
            echo "V√©rification du statut..."
            docker compose ps $service
EOF
    fi
    
    if [ $? -eq 0 ]; then
        log_success "Services d√©marr√©s avec succ√®s"
        trace_deploy_operation "start_services" "SUCCESS" "Services started on $ip"
    else
        log_error "√âchec du d√©marrage des services"
        trace_deploy_operation "start_services" "FAILED" "Services start failed on $ip"
        exit 1
    fi
}

# Nettoyer les ressources Docker
cleanup_docker_resources() {
    local ip="$1"
    
    log_info "Nettoyage des ressources Docker..."
    trace_deploy_operation "cleanup_docker" "STARTED" "Cleaning up Docker resources on $ip"
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        echo "=== NETTOYAGE DES RESSOURCES DOCKER ==="
        echo "Date: $(date)"
        echo ""
        
        # Afficher l'espace utilis√© avant le nettoyage
        echo "Espace utilis√© avant le nettoyage:"
        docker system df
        
        echo ""
        echo "=== NETTOYAGE EN COURS ==="
        
        # Supprimer les conteneurs arr√™t√©s
        echo "Suppression des conteneurs arr√™t√©s..."
        docker container prune -f
        
        # Supprimer les images non utilis√©es
        echo "Suppression des images non utilis√©es..."
        docker image prune -f
        
        # Supprimer les volumes non utilis√©s
        echo "Suppression des volumes non utilis√©s..."
        docker volume prune -f
        
        # Supprimer les r√©seaux non utilis√©s
        echo "Suppression des r√©seaux non utilis√©s..."
        docker network prune -f
        
        # Nettoyage complet (optionnel, plus agressif)
        echo "Nettoyage complet du syst√®me Docker..."
        docker system prune -f
        
        echo ""
        echo "=== ESPACE LIB√âR√â ==="
        docker system df
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Nettoyage des ressources Docker termin√©"
        trace_deploy_operation "cleanup_docker" "SUCCESS" "Docker resources cleanup completed on $ip"
    else
        log_error "√âchec du nettoyage des ressources Docker"
        trace_deploy_operation "cleanup_docker" "FAILED" "Docker resources cleanup failed on $ip"
        exit 1
    fi
}

# Sauvegarder les donn√©es
backup_data() {
    local ip="$1"
    local backup_dir="${2:-/opt/meeshy/backups}"
    
    log_info "Sauvegarde des donn√©es..."
    trace_deploy_operation "backup_data" "STARTED" "Backing up data on $ip"
    
    ssh -o StrictHostKeyChecking=no root@$ip << EOF
        echo "=== SAUVEGARDE DES DONN√âES ==="
        echo "Date: \$(date)"
        echo "R√©pertoire de sauvegarde: $backup_dir"
        echo ""
        
        # Cr√©er le r√©pertoire de sauvegarde
        mkdir -p $backup_dir
        
        # Sauvegarder MongoDB
        echo "Sauvegarde de MongoDB..."
        docker exec meeshy-database mongodump --out /tmp/backup
        docker cp meeshy-database:/tmp/backup $backup_dir/mongodb_backup_\$(date +%Y%m%d_%H%M%S)
        docker exec meeshy-database rm -rf /tmp/backup
        
        # Sauvegarder Redis (optionnel)
        echo "Sauvegarde de Redis..."
        docker exec meeshy-redis redis-cli BGSAVE
        sleep 5
        docker cp meeshy-redis:/data/dump.rdb $backup_dir/redis_backup_\$(date +%Y%m%d_%H%M%S).rdb
        
        # Sauvegarder les configurations
        echo "Sauvegarde des configurations..."
        tar -czf $backup_dir/config_backup_\$(date +%Y%m%d_%H%M%S).tar.gz /opt/meeshy/docker-compose.yml /opt/meeshy/.env /opt/meeshy/docker/ /opt/meeshy/shared/
        
        echo ""
        echo "=== SAUVEGARDE TERMIN√âE ==="
        ls -la $backup_dir/
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Sauvegarde des donn√©es termin√©e"
        trace_deploy_operation "backup_data" "SUCCESS" "Data backup completed on $ip"
    else
        log_error "√âchec de la sauvegarde des donn√©es"
        trace_deploy_operation "backup_data" "FAILED" "Data backup failed on $ip"
        exit 1
    fi
}

# Surveillance en temps r√©el
monitor_services() {
    local ip="$1"
    local duration="${2:-60}"
    
    log_info "Surveillance des services en temps r√©el..."
    trace_deploy_operation "monitor_services" "STARTED" "Monitoring services on $ip"
    
    ssh -o StrictHostKeyChecking=no root@$ip << EOF
        echo "=== SURVEILLANCE DES SERVICES ==="
        echo "Date: \$(date)"
        echo "Dur√©e: $duration secondes"
        echo ""
        
        # Surveillance des conteneurs
        echo "Surveillance des conteneurs..."
        timeout $duration docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Surveillance termin√©e"
        trace_deploy_operation "monitor_services" "SUCCESS" "Services monitoring completed on $ip"
    else
        log_warning "Surveillance interrompue"
        trace_deploy_operation "monitor_services" "WARNING" "Services monitoring interrupted on $ip"
    fi
}

# Fonction principale
main() {
    local command="$1"
    local ip="$2"
    local service="$3"
    
    # Parser les arguments si appel√© directement
    if [ -z "$command" ] && [ -n "$COMMAND" ]; then
        command="$COMMAND"
    fi
    
    if [ -z "$ip" ] && [ -n "$DROPLET_IP" ]; then
        ip="$DROPLET_IP"
    fi
    
    if [ -z "$command" ] || [ -z "$ip" ]; then
        log_error "Commande ou IP du serveur manquante"
        show_help
        exit 1
    fi
    
    log_info "üîß Maintenance des services Meeshy sur le serveur $ip"
    
    case "$command" in
        "status")
            show_services_status "$ip"
            ;;
        "logs")
            show_services_logs "$ip" "$service"
            ;;
        "restart")
            restart_services "$ip" "$service"
            ;;
        "stop")
            stop_services "$ip" "$service"
            ;;
        "start")
            start_services "$ip" "$service"
            ;;
        "cleanup")
            cleanup_docker_resources "$ip"
            ;;
        "backup")
            backup_data "$ip"
            ;;
        "monitor")
            monitor_services "$ip"
            ;;
        "health")
            # Utiliser le script de v√©rification de sant√©
            "$SCRIPT_DIR/deploy-health-check.sh" "$ip"
            ;;
        *)
            log_error "Commande inconnue: $command"
            show_help
            exit 1
            ;;
    esac
    
    log_success "Op√©ration de maintenance termin√©e avec succ√®s"
    
    # Finaliser la tra√ßabilit√©
    finalize_deploy_tracing "SUCCESS" "Maintenance operation $command completed for $ip"
}

# Ex√©cuter la fonction principale si le script est appel√© directement
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi
