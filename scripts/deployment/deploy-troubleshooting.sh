#!/bin/bash

# ===== MEESHY - D√âPANNAGE ET R√âPARATION =====
# Script sp√©cialis√© pour le d√©pannage, diagnostic et r√©paration automatique
# Usage: ./deploy-troubleshooting.sh [COMMAND] [DROPLET_IP] [OPTIONS]

set -e

# Charger la configuration de d√©ploiement
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/deploy-config.sh"

# Initialiser la tra√ßabilit√©
init_deploy_tracing "deploy-troubleshooting" "troubleshooting_operations"

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üîß MEESHY - D√âPANNAGE ET R√âPARATION${NC}"
    echo "======================================"
    echo ""
    echo "Usage:"
    echo "  ./deploy-troubleshooting.sh [COMMAND] [DROPLET_IP] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo -e "${GREEN}  Diagnostic:${NC}"
    echo "    diagnose               - Diagnostic complet automatique"
    echo "    check-logs             - Analyser les logs d'erreur"
    echo "    check-resources        - V√©rifier les ressources syst√®me"
    echo "    check-network          - V√©rifier la connectivit√© r√©seau"
    echo "    check-storage          - V√©rifier l'espace disque"
    echo ""
    echo -e "${GREEN}  R√©paration automatique:${NC}"
    echo "    auto-fix               - Tentative de r√©paration automatique"
    echo "    fix-services           - R√©parer les services d√©faillants"
    echo "    fix-permissions        - Corriger toutes les permissions"
    echo "    fix-mongodb            - R√©parer MongoDB et replica set"
    echo "    fix-networking         - R√©parer la configuration r√©seau"
    echo ""
    echo -e "${GREEN}  Reset et nettoyage:${NC}"
    echo "    reset-services         - Red√©marrer tous les services"
    echo "    reset-volumes          - Nettoyer et recr√©er les volumes"
    echo "    reset-complete         - Reset complet (ATTENTION: destructif)"
    echo "    cleanup-docker         - Nettoyer Docker (images, volumes, etc.)"
    echo ""
    echo -e "${GREEN}  Maintenance:${NC}"
    echo "    backup-data            - Sauvegarder les donn√©es importantes"
    echo "    restore-data           - Restaurer les donn√©es"
    echo "    update-services        - Mettre √† jour les services"
    echo ""
    echo "Options:"
    echo "  --force                - Forcer l'ex√©cution sans confirmation"
    echo "  --backup-before        - Sauvegarder avant modification"
    echo "  --verbose              - Mode verbeux"
    echo "  --dry-run              - Simulation sans modification"
    echo ""
    echo "Exemples:"
    echo "  ./deploy-troubleshooting.sh diagnose 192.168.1.100"
    echo "  ./deploy-troubleshooting.sh auto-fix 192.168.1.100 --backup-before"
    echo "  ./deploy-troubleshooting.sh reset-services 192.168.1.100 --force"
    echo "  ./deploy-troubleshooting.sh backup-data 192.168.1.100"
    echo ""
}

# Variables globales
FORCE=false
BACKUP_BEFORE=false
VERBOSE=false
DRY_RUN=false

# Diagnostic complet automatique
diagnose_system() {
    local ip="$1"
    
    log_info "üîç Diagnostic complet du syst√®me..."
    trace_deploy_operation "diagnose_system" "STARTED" "Starting system diagnosis on $ip"
    
    local issues_found=0
    
    echo ""
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}    DIAGNOSTIC SYST√àME - MEESHY${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo ""
    
    # 1. V√©rifier la connectivit√© de base
    log_info "üì° 1. Test de connectivit√© de base..."
    if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$ip "echo 'SSH OK'" >/dev/null 2>&1; then
        log_success "‚úÖ Connectivit√© SSH: OK"
    else
        log_error "‚ùå Connectivit√© SSH: √âCHEC"
        ((issues_found++))
    fi
    
    # 2. V√©rifier les ressources syst√®me
    log_info "üíæ 2. V√©rification des ressources syst√®me..."
    check_system_resources "$ip" || ((issues_found++))
    
    # 3. V√©rifier Docker
    log_info "üê≥ 3. V√©rification de Docker..."
    check_docker_status "$ip" || ((issues_found++))
    
    # 4. V√©rifier les services
    log_info "üîß 4. V√©rification des services..."
    check_services_status "$ip" || ((issues_found++))
    
    # 5. V√©rifier les logs d'erreur
    log_info "üìã 5. Analyse des logs d'erreur..."
    analyze_error_logs "$ip" || ((issues_found++))
    
    # 6. V√©rifier la connectivit√© r√©seau
    log_info "üåê 6. V√©rification de la connectivit√© r√©seau..."
    check_network_connectivity "$ip" || ((issues_found++))
    
    # 7. V√©rifier les permissions
    log_info "üîí 7. V√©rification des permissions..."
    check_permissions_status "$ip" || ((issues_found++))
    
    echo ""
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}      R√âSUM√â DU DIAGNOSTIC${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    if [ $issues_found -eq 0 ]; then
        log_success "‚úÖ Aucun probl√®me critique d√©tect√©"
        trace_deploy_operation "diagnose_system" "SUCCESS" "No critical issues found"
    else
        log_warning "‚ö†Ô∏è  $issues_found probl√®me(s) d√©tect√©(s)"
        log_info "üí° Utilisez 'auto-fix' pour tenter une r√©paration automatique"
        trace_deploy_operation "diagnose_system" "WARNING" "$issues_found issues found"
    fi
    
    echo ""
    
    return $issues_found
}

# V√©rifier les ressources syst√®me
check_system_resources() {
    local ip="$1"
    local issues=0
    
    # V√©rifier l'espace disque
    local disk_usage=$(ssh -o StrictHostKeyChecking=no root@$ip "df -h / | tail -1 | awk '{print \$5}' | sed 's/%//'" 2>/dev/null || echo "100")
    
    if [ "$disk_usage" -gt 90 ]; then
        log_error "‚ùå Espace disque critique: ${disk_usage}% utilis√©"
        ((issues++))
    elif [ "$disk_usage" -gt 80 ]; then
        log_warning "‚ö†Ô∏è  Espace disque √©lev√©: ${disk_usage}% utilis√©"
    else
        log_success "‚úÖ Espace disque: ${disk_usage}% utilis√©"
    fi
    
    # V√©rifier la m√©moire
    local memory_usage=$(ssh -o StrictHostKeyChecking=no root@$ip "free | grep Mem | awk '{printf \"%.0f\", \$3/\$2 * 100.0}'" 2>/dev/null || echo "100")
    
    if [ "$memory_usage" -gt 95 ]; then
        log_error "‚ùå Utilisation m√©moire critique: ${memory_usage}%"
        ((issues++))
    elif [ "$memory_usage" -gt 85 ]; then
        log_warning "‚ö†Ô∏è  Utilisation m√©moire √©lev√©e: ${memory_usage}%"
    else
        log_success "‚úÖ Utilisation m√©moire: ${memory_usage}%"
    fi
    
    # V√©rifier la charge syst√®me
    local load_avg=$(ssh -o StrictHostKeyChecking=no root@$ip "uptime | awk -F'load average:' '{print \$2}' | awk '{print \$1}' | sed 's/,//'" 2>/dev/null || echo "0")
    local cpu_count=$(ssh -o StrictHostKeyChecking=no root@$ip "nproc" 2>/dev/null || echo "1")
    
    # Convertir en entier pour la comparaison
    load_int=$(echo "$load_avg * 100" | bc 2>/dev/null | cut -d. -f1 || echo "0")
    cpu_threshold=$((cpu_count * 100))
    
    if [ "$load_int" -gt "$cpu_threshold" ]; then
        log_warning "‚ö†Ô∏è  Charge syst√®me √©lev√©e: $load_avg (CPUs: $cpu_count)"
    else
        log_success "‚úÖ Charge syst√®me: $load_avg"
    fi
    
    return $issues
}

# V√©rifier le statut de Docker
check_docker_status() {
    local ip="$1"
    local issues=0
    
    # V√©rifier que Docker est install√©
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v docker" >/dev/null 2>&1; then
        log_success "‚úÖ Docker install√©"
    else
        log_error "‚ùå Docker non install√©"
        ((issues++))
        return $issues
    fi
    
    # V√©rifier que Docker fonctionne
    if ssh -o StrictHostKeyChecking=no root@$ip "docker ps" >/dev/null 2>&1; then
        log_success "‚úÖ Docker d√©mon actif"
    else
        log_error "‚ùå Docker d√©mon inactif"
        ((issues++))
    fi
    
    # V√©rifier Docker Compose
    if ssh -o StrictHostKeyChecking=no root@$ip "docker compose version" >/dev/null 2>&1; then
        log_success "‚úÖ Docker Compose disponible"
    else
        log_error "‚ùå Docker Compose non disponible"
        ((issues++))
    fi
    
    return $issues
}

# V√©rifier le statut des services
check_services_status() {
    local ip="$1"
    local issues=0
    
    local services=("traefik" "redis" "mongodb" "gateway" "translator" "frontend")
    
    for service in "${services[@]}"; do
        if ssh -o StrictHostKeyChecking=no root@$ip "cd /opt/meeshy && docker compose ps $service | grep -q 'Up'" 2>/dev/null; then
            log_success "‚úÖ Service $service: En cours d'ex√©cution"
        else
            log_error "‚ùå Service $service: Arr√™t√© ou en erreur"
            ((issues++))
        fi
    done
    
    return $issues
}

# Analyser les logs d'erreur
analyze_error_logs() {
    local ip="$1"
    local issues=0
    
    # Analyser les logs des services pour d√©tecter les erreurs
    local services=("traefik" "redis" "mongodb" "gateway" "translator" "frontend")
    
    for service in "${services[@]}"; do
        local error_count=$(ssh -o StrictHostKeyChecking=no root@$ip "cd /opt/meeshy && docker compose logs --tail=50 $service 2>/dev/null | grep -i 'error\|failed\|exception' | wc -l" 2>/dev/null || echo "0")
        
        if [ "$error_count" -gt 0 ]; then
            log_warning "‚ö†Ô∏è  Service $service: $error_count erreur(s) r√©cente(s)"
            
            if [ "$VERBOSE" = "true" ]; then
                log_info "üìã Derni√®res erreurs pour $service:"
                ssh -o StrictHostKeyChecking=no root@$ip "cd /opt/meeshy && docker compose logs --tail=10 $service | grep -i 'error\|failed\|exception'" || true
            fi
            ((issues++))
        else
            log_success "‚úÖ Service $service: Aucune erreur r√©cente"
        fi
    done
    
    return $issues
}

# V√©rifier la connectivit√© r√©seau
check_network_connectivity() {
    local ip="$1"
    local issues=0
    
    # Test des ports principaux
    local ports=("80:HTTP" "443:HTTPS" "8080:Traefik" "3000:Gateway" "8000:Translator")
    
    for port_info in "${ports[@]}"; do
        local port=$(echo "$port_info" | cut -d: -f1)
        local service=$(echo "$port_info" | cut -d: -f2)
        
        if nc -z -w5 "$ip" "$port" 2>/dev/null; then
            log_success "‚úÖ Port $port ($service): Accessible"
        else
            log_error "‚ùå Port $port ($service): Inaccessible"
            ((issues++))
        fi
    done
    
    # Test de r√©solution DNS interne
    if ssh -o StrictHostKeyChecking=no root@$ip "cd /opt/meeshy && docker compose exec -T gateway ping -c 1 mongodb" >/dev/null 2>&1; then
        log_success "‚úÖ R√©solution DNS interne: OK"
    else
        log_error "‚ùå R√©solution DNS interne: √âCHEC"
        ((issues++))
    fi
    
    return $issues
}

# V√©rifier les permissions
check_permissions_status() {
    local ip="$1"
    local issues=0
    
    # V√©rifier les permissions des fichiers de configuration
    if ssh -o StrictHostKeyChecking=no root@$ip "test -f /opt/meeshy/secrets/production-secrets.env" 2>/dev/null; then
        local perms=$(ssh -o StrictHostKeyChecking=no root@$ip "ls -l /opt/meeshy/secrets/production-secrets.env | cut -d' ' -f1")
        if [[ "$perms" == "-rw-------" ]]; then
            log_success "‚úÖ Permissions secrets: Correctes ($perms)"
        else
            log_warning "‚ö†Ô∏è  Permissions secrets: √Ä corriger ($perms)"
            ((issues++))
        fi
    else
        log_warning "‚ö†Ô∏è  Fichier secrets non trouv√©"
    fi
    
    # V√©rifier les volumes Docker
    local volumes=("meeshy_models_data" "meeshy_translator_cache")
    for volume in "${volumes[@]}"; do
        if ssh -o StrictHostKeyChecking=no root@$ip "docker volume ls | grep -q $volume" 2>/dev/null; then
            log_success "‚úÖ Volume $volume: Pr√©sent"
        else
            log_warning "‚ö†Ô∏è  Volume $volume: Manquant"
            ((issues++))
        fi
    done
    
    return $issues
}

# R√©paration automatique
auto_fix() {
    local ip="$1"
    
    log_info "üîß Tentative de r√©paration automatique..."
    trace_deploy_operation "auto_fix" "STARTED" "Starting automatic repair on $ip"
    
    if [ "$BACKUP_BEFORE" = "true" ]; then
        backup_current_state "$ip"
    fi
    
    local fixes_applied=0
    
    # 1. Red√©marrer Docker si n√©cessaire
    if ! ssh -o StrictHostKeyChecking=no root@$ip "docker ps" >/dev/null 2>&1; then
        log_info "üîÑ Red√©marrage de Docker..."
        if ssh -o StrictHostKeyChecking=no root@$ip "systemctl restart docker && sleep 3"; then
            log_success "‚úÖ Docker red√©marr√©"
            ((fixes_applied++))
        else
            log_error "‚ùå √âchec du red√©marrage de Docker"
        fi
    fi
    
    # 2. Corriger les permissions
    log_info "üîí Correction des permissions..."
    if fix_all_permissions "$ip"; then
        log_success "‚úÖ Permissions corrig√©es"
        ((fixes_applied++))
    fi
    
    # 3. Red√©marrer les services d√©faillants
    log_info "üîÑ Red√©marrage des services d√©faillants..."
    if fix_failed_services "$ip"; then
        log_success "‚úÖ Services red√©marr√©s"
        ((fixes_applied++))
    fi
    
    # 4. Nettoyer Docker
    log_info "üßπ Nettoyage Docker..."
    if cleanup_docker_system "$ip"; then
        log_success "‚úÖ Nettoyage Docker termin√©"
        ((fixes_applied++))
    fi
    
    log_info "üéâ R√©paration automatique termin√©e: $fixes_applied correction(s) appliqu√©e(s)"
    trace_deploy_operation "auto_fix" "SUCCESS" "$fixes_applied fixes applied"
    
    # Relancer un diagnostic
    log_info "üîç Nouveau diagnostic post-r√©paration..."
    diagnose_system "$ip"
}

# Corriger toutes les permissions
fix_all_permissions() {
    local ip="$1"
    
    log_info "üîí Correction de toutes les permissions..."
    
    # Corriger les permissions des secrets
    ssh -o StrictHostKeyChecking=no root@$ip "
        if [ -f /opt/meeshy/secrets/production-secrets.env ]; then
            chmod 600 /opt/meeshy/secrets/production-secrets.env
            chown root:root /opt/meeshy/secrets/production-secrets.env
            echo 'Permissions secrets corrig√©es'
        fi
    "
    
    # Corriger les permissions des volumes translator
    "$SCRIPT_DIR/deploy-security.sh" fix-translator "$ip"
    
    return 0
}

# R√©parer les services d√©faillants
fix_failed_services() {
    local ip="$1"
    
    log_info "üîÑ R√©paration des services d√©faillants..."
    
    local services=("traefik" "redis" "mongodb" "gateway" "translator" "frontend")
    local services_fixed=0
    
    for service in "${services[@]}"; do
        if ! ssh -o StrictHostKeyChecking=no root@$ip "cd /opt/meeshy && docker compose ps $service | grep -q 'Up'" 2>/dev/null; then
            log_info "üîÑ Red√©marrage du service $service..."
            
            if ssh -o StrictHostKeyChecking=no root@$ip "cd /opt/meeshy && docker compose restart $service" 2>/dev/null; then
                log_success "‚úÖ Service $service red√©marr√©"
                ((services_fixed++))
            else
                log_error "‚ùå √âchec du red√©marrage de $service"
            fi
        fi
    done
    
    log_info "$services_fixed service(s) red√©marr√©(s)"
    return 0
}

# Nettoyer le syst√®me Docker
cleanup_docker_system() {
    local ip="$1"
    
    log_info "üßπ Nettoyage du syst√®me Docker..."
    
    ssh -o StrictHostKeyChecking=no root@$ip "
        echo 'Nettoyage des conteneurs arr√™t√©s...'
        docker container prune -f || true
        
        echo 'Nettoyage des images inutilis√©es...'
        docker image prune -f || true
        
        echo 'Nettoyage des volumes orphelins...'
        docker volume prune -f || true
        
        echo 'Nettoyage des r√©seaux inutilis√©s...'
        docker network prune -f || true
        
        echo 'Nettoyage termin√©'
    "
    
    return 0
}

# Sauvegarder l'√©tat actuel
backup_current_state() {
    local ip="$1"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    
    log_info "üíæ Sauvegarde de l'√©tat actuel..."
    
    # Cr√©er le r√©pertoire de sauvegarde
    mkdir -p "$DEPLOY_LOGS_DIR/backups"
    
    # Sauvegarder la configuration
    ssh -o StrictHostKeyChecking=no root@$ip "cd /opt/meeshy && tar -czf /tmp/meeshy_backup_${timestamp}.tar.gz docker-compose.yml .env secrets/ docker/ 2>/dev/null || true"
    
    # R√©cup√©rer la sauvegarde
    scp -o StrictHostKeyChecking=no root@$ip:/tmp/meeshy_backup_${timestamp}.tar.gz "$DEPLOY_LOGS_DIR/backups/" 2>/dev/null || log_warning "‚ö†Ô∏è  Impossible de r√©cup√©rer la sauvegarde"
    
    # Sauvegarder la base de donn√©es MongoDB
    backup_mongodb "$ip" "$timestamp"
    
    log_success "‚úÖ Sauvegarde termin√©e: backups/meeshy_backup_${timestamp}.tar.gz"
}

# Sauvegarder MongoDB
backup_mongodb() {
    local ip="$1"
    local timestamp="$2"
    
    log_info "üíæ Sauvegarde de MongoDB..."
    
    ssh -o StrictHostKeyChecking=no root@$ip "
        cd /opt/meeshy
        if docker compose ps mongodb | grep -q 'Up'; then
            echo 'Cr√©ation de la sauvegarde MongoDB...'
            docker compose exec -T mongodb mongodump --db meeshy --out /tmp/mongodb_backup_${timestamp}/ 2>/dev/null || true
            cd /tmp && tar -czf mongodb_backup_${timestamp}.tar.gz mongodb_backup_${timestamp}/ 2>/dev/null || true
            rm -rf mongodb_backup_${timestamp}/ 2>/dev/null || true
            echo 'Sauvegarde MongoDB termin√©e'
        else
            echo 'MongoDB non d√©marr√© - Sauvegarde ignor√©e'
        fi
    "
    
    # R√©cup√©rer la sauvegarde MongoDB
    scp -o StrictHostKeyChecking=no root@$ip:/tmp/mongodb_backup_${timestamp}.tar.gz "$DEPLOY_LOGS_DIR/backups/" 2>/dev/null || log_warning "‚ö†Ô∏è  Impossible de r√©cup√©rer la sauvegarde MongoDB"
}

# Reset complet (DESTRUCTIF)
reset_complete() {
    local ip="$1"
    
    log_warning "‚ö†Ô∏è  ATTENTION: Reset complet demand√© - Cette op√©ration est DESTRUCTIVE"
    
    if [ "$FORCE" != "true" ]; then
        echo ""
        echo -e "${RED}Cette op√©ration va:${NC}"
        echo -e "${RED}‚Ä¢ Supprimer tous les conteneurs${NC}"
        echo -e "${RED}‚Ä¢ Supprimer tous les volumes${NC}"
        echo -e "${RED}‚Ä¢ Supprimer toutes les donn√©es${NC}"
        echo -e "${RED}‚Ä¢ Supprimer la configuration${NC}"
        echo ""
        read -p "√ätes-vous s√ªr de vouloir continuer? (tapez 'CONFIRMER'): " confirmation
        
        if [ "$confirmation" != "CONFIRMER" ]; then
            log_info "Op√©ration annul√©e"
            return 0
        fi
    fi
    
    log_info "üî• D√©but du reset complet..."
    trace_deploy_operation "reset_complete" "STARTED" "Starting complete reset on $ip"
    
    # Sauvegarder avant destruction si demand√©
    if [ "$BACKUP_BEFORE" = "true" ]; then
        backup_current_state "$ip"
    fi
    
    # Arr√™ter et supprimer tout
    ssh -o StrictHostKeyChecking=no root@$ip "
        cd /opt/meeshy 2>/dev/null || true
        
        echo 'Arr√™t de tous les services...'
        docker compose down --remove-orphans || true
        
        echo 'Suppression de tous les volumes...'
        docker volume ls | grep meeshy | awk '{print \$2}' | xargs -r docker volume rm || true
        
        echo 'Suppression des images...'
        docker image prune -af || true
        
        echo 'Nettoyage complet du syst√®me Docker...'
        docker system prune -af --volumes || true
        
        echo 'Suppression de la configuration...'
        rm -rf /opt/meeshy || true
        
        echo 'Reset complet termin√©'
    "
    
    log_success "‚úÖ Reset complet termin√©"
    trace_deploy_operation "reset_complete" "SUCCESS" "Complete reset finished on $ip"
    
    log_info "üí° Vous pouvez maintenant red√©ployer avec: ./deploy-orchestrator.sh deploy $ip"
}

# Point d'entr√©e principal
main() {
    local command="${1:-help}"
    local ip="$2"
    
    # Parser les options
    shift 2 2>/dev/null || true
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                FORCE=true
                shift
                ;;
            --backup-before)
                BACKUP_BEFORE=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
    
    case "$command" in
        "diagnose")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            diagnose_system "$ip"
            ;;
        "auto-fix")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            auto_fix "$ip"
            ;;
        "check-logs")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            analyze_error_logs "$ip"
            ;;
        "check-resources")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            check_system_resources "$ip"
            ;;
        "check-network")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            check_network_connectivity "$ip"
            ;;
        "fix-services")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            fix_failed_services "$ip"
            ;;
        "fix-permissions")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            fix_all_permissions "$ip"
            ;;
        "reset-services")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            "$SCRIPT_DIR/deploy-maintenance.sh" restart "$ip"
            ;;
        "reset-complete")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            reset_complete "$ip"
            ;;
        "cleanup-docker")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            cleanup_docker_system "$ip"
            ;;
        "backup-data")
            if [ -z "$ip" ]; then
                log_error "IP du serveur requise"
                exit 1
            fi
            backup_current_state "$ip"
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            log_error "Commande inconnue: $command"
            show_help
            exit 1
            ;;
    esac
}

# Ex√©cuter le script principal
main "$@"
