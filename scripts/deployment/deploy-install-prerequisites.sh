#!/bin/bash

# ===== MEESHY - INSTALLATION DES PR√âREQUIS =====
# Script sp√©cialis√© pour installer les pr√©requis sur le serveur de d√©ploiement
# Usage: ./deploy-install-prerequisites.sh [DROPLET_IP]

set -e

# Charger la configuration de d√©ploiement
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/deploy-config.sh"

# Initialiser la tra√ßabilit√©
init_deploy_tracing "deploy-install-prerequisites" "install_prerequisites"

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üì¶ MEESHY - INSTALLATION DES PR√âREQUIS${NC}"
    echo "============================================="
    echo ""
    echo "Usage:"
    echo "  ./deploy-install-prerequisites.sh [DROPLET_IP]"
    echo ""
    echo "Description:"
    echo "  Installe les pr√©requis n√©cessaires sur le serveur de d√©ploiement:"
    echo "  ‚Ä¢ Docker et Docker Compose"
    echo "  ‚Ä¢ OpenSSL pour la g√©n√©ration de certificats"
    echo "  ‚Ä¢ Outils syst√®me essentiels"
    echo ""
    echo "Exemples:"
    echo "  ./deploy-install-prerequisites.sh 192.168.1.100"
    echo "  ./deploy-install-prerequisites.sh 157.230.15.51"
    echo ""
}

# V√©rifier les pr√©requis existants
check_existing_prerequisites() {
    local ip="$1"
    
    log_info "V√©rification des pr√©requis existants sur le serveur..."
    trace_deploy_operation "check_prerequisites" "STARTED" "Checking existing prerequisites on $ip"
    
    # V√©rifier Docker
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v docker >/dev/null 2>&1" >/dev/null 2>&1; then
        local docker_version=$(ssh -o StrictHostKeyChecking=no root@$ip "docker --version" 2>/dev/null || echo "unknown")
        log_success "Docker d√©j√† install√©: $docker_version"
    else
        log_info "Docker non install√©, installation n√©cessaire"
    fi
    
    # V√©rifier Docker Compose
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v docker-compose >/dev/null 2>&1 || docker compose version >/dev/null 2>&1" >/dev/null 2>&1; then
        local compose_version=$(ssh -o StrictHostKeyChecking=no root@$ip "docker-compose --version 2>/dev/null || docker compose version 2>/dev/null" || echo "unknown")
        log_success "Docker Compose d√©j√† install√©: $compose_version"
    else
        log_info "Docker Compose non install√©, installation n√©cessaire"
    fi
    
    # V√©rifier OpenSSL
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v openssl >/dev/null 2>&1" >/dev/null 2>&1; then
        local openssl_version=$(ssh -o StrictHostKeyChecking=no root@$ip "openssl version" 2>/dev/null || echo "unknown")
        log_success "OpenSSL d√©j√† install√©: $openssl_version"
    else
        log_info "OpenSSL non install√©, installation n√©cessaire"
    fi
    
    # V√©rifier les outils syst√®me
    local system_tools=("curl" "wget" "git" "htpasswd" "jq")
    for tool in "${system_tools[@]}"; do
        if ssh -o StrictHostKeyChecking=no root@$ip "command -v $tool >/dev/null 2>&1" >/dev/null 2>&1; then
            log_success "$tool d√©j√† install√©"
        else
            log_info "$tool non install√©, installation n√©cessaire"
        fi
    done
    
    trace_deploy_operation "check_prerequisites" "SUCCESS" "Prerequisites check completed on $ip"
}

# Installer Docker
install_docker() {
    local ip="$1"
    
    log_info "Installation de Docker..."
    trace_deploy_operation "install_docker" "STARTED" "Installing Docker on $ip"
    
    # Script d'installation Docker
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        # Mettre √† jour le syst√®me
        apt-get update -y
        
        # Installer les pr√©requis
        apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
        
        # Ajouter la cl√© GPG officielle de Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        
        # Ajouter le repository Docker
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Mettre √† jour les packages
        apt-get update -y
        
        # Installer Docker
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        
        # D√©marrer et activer Docker
        systemctl start docker
        systemctl enable docker
        
        # Ajouter l'utilisateur root au groupe docker
        usermod -aG docker root
        
        # V√©rifier l'installation
        docker --version
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Docker install√© avec succ√®s"
        trace_deploy_operation "install_docker" "SUCCESS" "Docker installed successfully on $ip"
    else
        log_error "√âchec de l'installation de Docker"
        trace_deploy_operation "install_docker" "FAILED" "Docker installation failed on $ip"
        exit 1
    fi
}

# Installer Docker Compose (version standalone si n√©cessaire)
install_docker_compose() {
    local ip="$1"
    
    log_info "Installation de Docker Compose..."
    trace_deploy_operation "install_docker_compose" "STARTED" "Installing Docker Compose on $ip"
    
    # V√©rifier si Docker Compose est d√©j√† disponible via le plugin
    if ssh -o StrictHostKeyChecking=no root@$ip "docker compose version >/dev/null 2>&1" >/dev/null 2>&1; then
        log_success "Docker Compose (plugin) d√©j√† disponible"
        trace_deploy_operation "install_docker_compose" "SUCCESS" "Docker Compose plugin already available on $ip"
        return 0
    fi
    
    # Installer Docker Compose standalone
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        # T√©l√©charger la derni√®re version de Docker Compose
        COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
        curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        
        # Rendre ex√©cutable
        chmod +x /usr/local/bin/docker-compose
        
        # Cr√©er un lien symbolique
        ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
        
        # V√©rifier l'installation
        docker-compose --version
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Docker Compose install√© avec succ√®s"
        trace_deploy_operation "install_docker_compose" "SUCCESS" "Docker Compose installed successfully on $ip"
    else
        log_error "√âchec de l'installation de Docker Compose"
        trace_deploy_operation "install_docker_compose" "FAILED" "Docker Compose installation failed on $ip"
        exit 1
    fi
}

# Installer OpenSSL et outils syst√®me
install_system_tools() {
    local ip="$1"
    
    log_info "Installation des outils syst√®me..."
    trace_deploy_operation "install_system_tools" "STARTED" "Installing system tools on $ip"
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        # Mettre √† jour le syst√®me
        apt-get update -y
        
        # Installer seulement les outils essentiels pour Docker
        apt-get install -y \
            openssl \
            curl \
            wget \
            git \
            jq
        
        # V√©rifier les installations
        openssl version
        curl --version | head -1
        wget --version | head -1
        git --version
        jq --version
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Outils syst√®me install√©s avec succ√®s"
        trace_deploy_operation "install_system_tools" "SUCCESS" "System tools installed successfully on $ip"
    else
        log_error "√âchec de l'installation des outils syst√®me"
        trace_deploy_operation "install_system_tools" "FAILED" "System tools installation failed on $ip"
        exit 1
    fi
}

# V√©rifier les outils syst√®me essentiels (sans installation forc√©e)
check_system_tools() {
    local ip="$1"
    
    log_info "V√©rification des outils syst√®me essentiels..."
    trace_deploy_operation "check_system_tools" "STARTED" "Checking system tools on $ip"
    
    # V√©rifier OpenSSL
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v openssl >/dev/null 2>&1" >/dev/null 2>&1; then
        local openssl_version=$(ssh -o StrictHostKeyChecking=no root@$ip "openssl version" 2>/dev/null || echo "unknown")
        log_success "OpenSSL d√©j√† install√©: $openssl_version"
    else
        log_warning "OpenSSL non install√©, installation n√©cessaire"
        install_openssl "$ip"
    fi
    
    # V√©rifier curl
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v curl >/dev/null 2>&1" >/dev/null 2>&1; then
        log_success "curl d√©j√† install√©"
    else
        log_warning "curl non install√©, installation n√©cessaire"
        install_curl "$ip"
    fi
    
    # V√©rifier wget
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v wget >/dev/null 2>&1" >/dev/null 2>&1; then
        log_success "wget d√©j√† install√©"
    else
        log_warning "wget non install√©, installation n√©cessaire"
        install_wget "$ip"
    fi
    
    # V√©rifier git
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v git >/dev/null 2>&1" >/dev/null 2>&1; then
        log_success "git d√©j√† install√©"
    else
        log_warning "git non install√©, installation n√©cessaire"
        install_git "$ip"
    fi
    
    # V√©rifier jq
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v jq >/dev/null 2>&1" >/dev/null 2>&1; then
        log_success "jq d√©j√† install√©"
    else
        log_warning "jq non install√©, installation n√©cessaire"
        install_jq "$ip"
    fi
    
    log_success "V√©rification des outils syst√®me termin√©e"
    trace_deploy_operation "check_system_tools" "SUCCESS" "System tools check completed on $ip"
}

# Installer OpenSSL uniquement si n√©cessaire
install_openssl() {
    local ip="$1"
    log_info "Installation d'OpenSSL..."
    ssh -o StrictHostKeyChecking=no root@$ip "apt-get update -y && apt-get install -y openssl"
    log_success "OpenSSL install√©"
}

# Installer curl uniquement si n√©cessaire
install_curl() {
    local ip="$1"
    log_info "Installation de curl..."
    ssh -o StrictHostKeyChecking=no root@$ip "apt-get update -y && apt-get install -y curl"
    log_success "curl install√©"
}

# Installer wget uniquement si n√©cessaire
install_wget() {
    local ip="$1"
    log_info "Installation de wget..."
    ssh -o StrictHostKeyChecking=no root@$ip "apt-get update -y && apt-get install -y wget"
    log_success "wget install√©"
}

# Installer git uniquement si n√©cessaire
install_git() {
    local ip="$1"
    log_info "Installation de git..."
    ssh -o StrictHostKeyChecking=no root@$ip "apt-get update -y && apt-get install -y git"
    log_success "git install√©"
}

# Installer jq uniquement si n√©cessaire
install_jq() {
    local ip="$1"
    log_info "Installation de jq..."
    ssh -o StrictHostKeyChecking=no root@$ip "apt-get update -y && apt-get install -y jq"
    log_success "jq install√©"
}

# Configurer le pare-feu (optionnel)
configure_firewall() {
    local ip="$1"
    
    log_info "V√©rification de la configuration du pare-feu..."
    trace_deploy_operation "configure_firewall" "STARTED" "Checking firewall configuration on $ip"
    
    # V√©rifier si UFW est install√©
    if ssh -o StrictHostKeyChecking=no root@$ip "command -v ufw >/dev/null 2>&1" >/dev/null 2>&1; then
        log_info "UFW d√©tect√©, configuration du pare-feu..."
        ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
            # Activer UFW
            ufw --force enable
            
            # R√®gles par d√©faut
            ufw default deny incoming
            ufw default allow outgoing
            
            # Autoriser SSH
            ufw allow ssh
            
            # Autoriser HTTP et HTTPS
            ufw allow 80/tcp
            ufw allow 443/tcp
            
            # V√©rifier le statut
            ufw status verbose
EOF
        
        if [ $? -eq 0 ]; then
            log_success "Pare-feu configur√© avec succ√®s"
            trace_deploy_operation "configure_firewall" "SUCCESS" "Firewall configured successfully on $ip"
        else
            log_warning "Configuration du pare-feu √©chou√©e (peut √™tre normal)"
            trace_deploy_operation "configure_firewall" "WARNING" "Firewall configuration failed on $ip"
        fi
    else
        log_info "UFW non install√©, pare-feu non configur√© (normal pour un d√©ploiement containeris√©)"
        trace_deploy_operation "configure_firewall" "SKIPPED" "UFW not installed, firewall configuration skipped on $ip"
    fi
}

# Optimiser les param√®tres syst√®me
optimize_system() {
    local ip="$1"
    
    log_info "Optimisation des param√®tres syst√®me..."
    trace_deploy_operation "optimize_system" "STARTED" "Optimizing system parameters on $ip"
    
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        # Optimiser les limites de fichiers
        echo "* soft nofile 65536" >> /etc/security/limits.conf
        echo "* hard nofile 65536" >> /etc/security/limits.conf
        
        # Optimiser les param√®tres r√©seau
        cat >> /etc/sysctl.conf << 'SYSCTL_EOF'
# Optimisations r√©seau pour Docker
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 65536 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.core.netdev_max_backlog = 5000
net.ipv4.tcp_congestion_control = bbr
SYSCTL_EOF
        
        # Appliquer les param√®tres
        sysctl -p
        
        # Optimiser Docker
        mkdir -p /etc/docker
        cat > /etc/docker/daemon.json << 'DOCKER_EOF'
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "storage-driver": "overlay2",
  "live-restore": true,
  "userland-proxy": false,
  "experimental": false,
  "metrics-addr": "127.0.0.1:9323",
  "default-address-pools": [
    {
      "base": "172.17.0.0/12",
      "size": 24
    }
  ]
}
DOCKER_EOF
        
        # Red√©marrer Docker pour appliquer les changements
        systemctl restart docker
        
        # V√©rifier que Docker fonctionne
        docker info >/dev/null 2>&1
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Syst√®me optimis√© avec succ√®s"
        trace_deploy_operation "optimize_system" "SUCCESS" "System optimized successfully on $ip"
    else
        log_warning "Optimisation du syst√®me √©chou√©e (peut √™tre normal)"
        trace_deploy_operation "optimize_system" "WARNING" "System optimization failed on $ip"
    fi
}

# V√©rifier l'installation compl√®te
verify_installation() {
    local ip="$1"
    
    log_info "V√©rification de l'installation compl√®te..."
    trace_deploy_operation "verify_installation" "STARTED" "Verifying complete installation on $ip"
    
    # V√©rifier Docker
    if ssh -o StrictHostKeyChecking=no root@$ip "docker --version >/dev/null 2>&1" >/dev/null 2>&1; then
        local docker_version=$(ssh -o StrictHostKeyChecking=no root@$ip "docker --version" 2>/dev/null)
        log_success "‚úÖ Docker: $docker_version"
    else
        log_error "‚ùå Docker non fonctionnel"
        trace_deploy_operation "verify_installation" "FAILED" "Docker verification failed on $ip"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ssh -o StrictHostKeyChecking=no root@$ip "docker-compose --version >/dev/null 2>&1 || docker compose version >/dev/null 2>&1" >/dev/null 2>&1; then
        local compose_version=$(ssh -o StrictHostKeyChecking=no root@$ip "docker-compose --version 2>/dev/null || docker compose version 2>/dev/null")
        log_success "‚úÖ Docker Compose: $compose_version"
    else
        log_error "‚ùå Docker Compose non fonctionnel"
        trace_deploy_operation "verify_installation" "FAILED" "Docker Compose verification failed on $ip"
        exit 1
    fi
    
    # V√©rifier OpenSSL
    if ssh -o StrictHostKeyChecking=no root@$ip "openssl version >/dev/null 2>&1" >/dev/null 2>&1; then
        local openssl_version=$(ssh -o StrictHostKeyChecking=no root@$ip "openssl version" 2>/dev/null)
        log_success "‚úÖ OpenSSL: $openssl_version"
    else
        log_error "‚ùå OpenSSL non fonctionnel"
        trace_deploy_operation "verify_installation" "FAILED" "OpenSSL verification failed on $ip"
        exit 1
    fi
    
    # V√©rifier les outils syst√®me
    local system_tools=("curl" "wget" "git" "htpasswd" "jq")
    for tool in "${system_tools[@]}"; do
        if ssh -o StrictHostKeyChecking=no root@$ip "command -v $tool >/dev/null 2>&1" >/dev/null 2>&1; then
            log_success "‚úÖ $tool: Disponible"
        else
            log_error "‚ùå $tool: Non disponible"
            trace_deploy_operation "verify_installation" "FAILED" "$tool verification failed on $ip"
            exit 1
        fi
    done
    
    # Test de fonctionnement Docker
    log_info "Test de fonctionnement Docker..."
    if ssh -o StrictHostKeyChecking=no root@$ip "docker run --rm hello-world >/dev/null 2>&1" >/dev/null 2>&1; then
        log_success "‚úÖ Docker: Test de fonctionnement r√©ussi"
    else
        log_error "‚ùå Docker: Test de fonctionnement √©chou√©"
        trace_deploy_operation "verify_installation" "FAILED" "Docker functionality test failed on $ip"
        exit 1
    fi
    
    log_success "Tous les pr√©requis sont install√©s et fonctionnels"
    trace_deploy_operation "verify_installation" "SUCCESS" "All prerequisites installed and functional on $ip"
}

# Fonction principale
main() {
    local ip="$1"
    
    # Parser les arguments si appel√© directement
    if [ -z "$ip" ] && [ -n "$DROPLET_IP" ]; then
        ip="$DROPLET_IP"
    fi
    
    if [ -z "$ip" ]; then
        log_error "IP du serveur manquante"
        show_help
        exit 1
    fi
    
    log_info "üöÄ Installation des pr√©requis sur le serveur $ip"
    
    # V√©rifier les pr√©requis existants
    check_existing_prerequisites "$ip"
    
    # Installer Docker
    install_docker "$ip"
    
    # Installer Docker Compose
    install_docker_compose "$ip"
    
    # V√©rifier les outils syst√®me essentiels (sans installation forc√©e)
    check_system_tools "$ip"
    
    # Configurer le pare-feu (optionnel)
    configure_firewall "$ip"
    
    # Optimiser le syst√®me
    optimize_system "$ip"
    
    # V√©rifier l'installation
    verify_installation "$ip"
    
    # R√©sum√© de l'installation
    echo ""
    echo "=== R√âSUM√â DE L'INSTALLATION ==="
    echo "‚úÖ Docker: Install√© et fonctionnel"
    echo "‚úÖ Docker Compose: Install√© et fonctionnel"
    echo "‚úÖ OpenSSL: Install√© et fonctionnel"
    echo "‚úÖ Outils syst√®me: Install√©s et fonctionnels"
    echo "‚úÖ Pare-feu: Configur√©"
    echo "‚úÖ Syst√®me: Optimis√©"
    echo "==============================="
    
    log_success "Installation des pr√©requis termin√©e avec succ√®s"
    
    # Finaliser la tra√ßabilit√©
    finalize_deploy_tracing "SUCCESS" "Prerequisites installation completed for $ip"
}

# Ex√©cuter la fonction principale si le script est appel√© directement
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi
