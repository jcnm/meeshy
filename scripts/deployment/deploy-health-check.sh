#!/bin/bash

# ===== MEESHY - V√âRIFICATION DE SANT√â =====
# Script sp√©cialis√© pour v√©rifier la sant√© des services et effectuer des tests
# Usage: ./deploy-health-check.sh [DROPLET_IP]

set -e

# Charger la configuration de d√©ploiement
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/deploy-config.sh"

# Initialiser la tra√ßabilit√©
init_deploy_tracing "deploy-health-check" "health_check"

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üè• MEESHY - V√âRIFICATION DE SANT√â${NC}"
    echo "====================================="
    echo ""
    echo "Usage:"
    echo "  ./deploy-health-check.sh [DROPLET_IP]"
    echo ""
    echo "Description:"
    echo "  V√©rifie la sant√© des services Meeshy:"
    echo "  ‚Ä¢ Statut des conteneurs Docker"
    echo "  ‚Ä¢ Connectivit√© des services"
    echo "  ‚Ä¢ Tests de fonctionnalit√©"
    echo "  ‚Ä¢ V√©rification des logs d'erreur"
    echo ""
    echo "Exemples:"
    echo "  ./deploy-health-check.sh 192.168.1.100"
    echo "  ./deploy-health-check.sh 157.230.15.51"
    echo ""
}

# V√©rifier le statut des conteneurs
check_container_status() {
    local ip="$1"
    
    log_info "V√©rification du statut des conteneurs..."
    trace_deploy_operation "check_containers" "STARTED" "Checking container status on $ip"
    
    # V√©rifier le statut de tous les conteneurs
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        cd /opt/meeshy
        
        echo "=== STATUT DES CONTENEURS ==="
        docker compose ps
        
        echo ""
        echo "=== V√âRIFICATION D√âTAILL√âE ==="
        
        # V√©rifier chaque service
        services=("traefik" "redis" "mongodb" "gateway" "translator" "frontend")
        
        for service in "${services[@]}"; do
            echo "--- $service ---"
            if docker compose ps $service | grep -q "Up"; then
                echo "‚úÖ $service: En cours d'ex√©cution"
                
                # V√©rifier la sant√© du conteneur
                container_id=$(docker compose ps -q $service)
                if [ -n "$container_id" ]; then
                    health_status=$(docker inspect --format='{{.State.Health.Status}}' $container_id 2>/dev/null || echo "no-health-check")
                    echo "   Sant√©: $health_status"
                fi
            else
                echo "‚ùå $service: Non d√©marr√© ou en erreur"
                
                # Afficher les logs d'erreur
                echo "   Derniers logs d'erreur:"
                docker compose logs --tail=5 $service | grep -i error || echo "   Aucune erreur r√©cente"
            fi
        done
EOF
    
    if [ $? -eq 0 ]; then
        log_success "V√©rification du statut des conteneurs termin√©e"
        trace_deploy_operation "check_containers" "SUCCESS" "Container status check completed on $ip"
    else
        log_error "√âchec de la v√©rification du statut des conteneurs"
        trace_deploy_operation "check_containers" "FAILED" "Container status check failed on $ip"
        exit 1
    fi
}

# V√©rifier la connectivit√© des services
check_services_connectivity() {
    local ip="$1"
    
    log_info "V√©rification de la connectivit√© des services..."
    trace_deploy_operation "check_connectivity" "STARTED" "Checking services connectivity on $ip"
    
    # Tests de connectivit√©
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        echo "=== TESTS DE CONNECTIVIT√â ==="
        
        # Test Traefik
        echo "--- Traefik ---"
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/rawdata | grep -q "200"; then
            echo "‚úÖ Traefik: Accessible sur le port 8080"
        else
            echo "‚ùå Traefik: Non accessible sur le port 8080"
        fi
        
        # Test Redis
        echo "--- Redis ---"
        if docker exec meeshy-redis redis-cli ping | grep -q "PONG"; then
            echo "‚úÖ Redis: R√©pond aux commandes"
            
            # Test de lecture/√©criture
            if docker exec meeshy-redis redis-cli set test_key "test_value" && docker exec meeshy-redis redis-cli get test_key | grep -q "test_value"; then
                echo "‚úÖ Redis: Lecture/√©criture fonctionnelle"
                docker exec meeshy-redis redis-cli del test_key >/dev/null
            else
                echo "‚ùå Redis: Probl√®me de lecture/√©criture"
            fi
        else
            echo "‚ùå Redis: Ne r√©pond pas aux commandes"
        fi
        
        # Test MongoDB
        echo "--- MongoDB ---"
        if docker exec meeshy-database mongosh --eval "db.adminCommand('ping')" | grep -q "ok.*1"; then
            echo "‚úÖ MongoDB: R√©pond aux commandes"
            
            # Test du replica set
            if docker exec meeshy-database mongosh --eval "rs.status()" | grep -q "ok.*1"; then
                echo "‚úÖ MongoDB: Replica set fonctionnel"
            else
                echo "‚ùå MongoDB: Probl√®me avec le replica set"
            fi
        else
            echo "‚ùå MongoDB: Ne r√©pond pas aux commandes"
        fi
        
        # Test Gateway
        echo "--- Gateway ---"
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health | grep -q "200"; then
            echo "‚úÖ Gateway: Accessible sur le port 3000"
        else
            echo "‚ùå Gateway: Non accessible sur le port 3000"
        fi
        
        # Test Translator
        echo "--- Translator ---"
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health | grep -q "200"; then
            echo "‚úÖ Translator: Accessible sur le port 8000"
        else
            echo "‚ùå Translator: Non accessible sur le port 8000"
        fi
        
        # Test Frontend
        echo "--- Frontend ---"
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200"; then
            echo "‚úÖ Frontend: Accessible sur le port 3000"
        else
            echo "‚ùå Frontend: Non accessible sur le port 3000"
        fi
EOF
    
    if [ $? -eq 0 ]; then
        log_success "V√©rification de la connectivit√© termin√©e"
        trace_deploy_operation "check_connectivity" "SUCCESS" "Services connectivity check completed on $ip"
    else
        log_warning "Certains tests de connectivit√© ont √©chou√©"
        trace_deploy_operation "check_connectivity" "WARNING" "Some connectivity tests failed on $ip"
    fi
}

# Effectuer des tests de fonctionnalit√©
run_functionality_tests() {
    local ip="$1"
    
    log_info "Tests de fonctionnalit√© des services..."
    trace_deploy_operation "functionality_tests" "STARTED" "Running functionality tests on $ip"
    
    # Tests de fonctionnalit√©
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        echo "=== TESTS DE FONCTIONNALIT√â ==="
        
        # Test de l'API Gateway
        echo "--- Test API Gateway ---"
        if curl -s http://localhost:3001/api/health | grep -q "ok"; then
            echo "‚úÖ API Gateway: Endpoint de sant√© fonctionnel"
        else
            echo "‚ùå API Gateway: Endpoint de sant√© non fonctionnel"
        fi
        
        # Test de l'API de traduction
        echo "--- Test API de traduction ---"
        if curl -s http://localhost:8000/health | grep -q "ok"; then
            echo "‚úÖ API de traduction: Endpoint de sant√© fonctionnel"
        else
            echo "‚ùå API de traduction: Endpoint de sant√© non fonctionnel"
        fi
        
        # Test de la base de donn√©es
        echo "--- Test base de donn√©es ---"
        if docker exec meeshy-database mongosh --eval "db.adminCommand('ping')" | grep -q "ok.*1"; then
            echo "‚úÖ Base de donn√©es: Connexion fonctionnelle"
            
            # Test de cr√©ation de donn√©es
            if docker exec meeshy-database mongosh --eval "db.test.insertOne({test: 'value'})" | grep -q "acknowledged.*true"; then
                echo "‚úÖ Base de donn√©es: Cr√©ation de donn√©es fonctionnelle"
                docker exec meeshy-database mongosh --eval "db.test.drop()" >/dev/null
            else
                echo "‚ùå Base de donn√©es: Probl√®me de cr√©ation de donn√©es"
            fi
        else
            echo "‚ùå Base de donn√©es: Connexion non fonctionnelle"
        fi
        
        # Test du cache Redis
        echo "--- Test cache Redis ---"
        if docker exec meeshy-redis redis-cli ping | grep -q "PONG"; then
            echo "‚úÖ Cache Redis: Connexion fonctionnelle"
            
            # Test de mise en cache
            if docker exec meeshy-redis redis-cli set test_cache "test_value" && docker exec meeshy-redis redis-cli get test_cache | grep -q "test_value"; then
                echo "‚úÖ Cache Redis: Mise en cache fonctionnelle"
                docker exec meeshy-redis redis-cli del test_cache >/dev/null
            else
                echo "‚ùå Cache Redis: Probl√®me de mise en cache"
            fi
        else
            echo "‚ùå Cache Redis: Connexion non fonctionnelle"
        fi
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Tests de fonctionnalit√© termin√©s"
        trace_deploy_operation "functionality_tests" "SUCCESS" "Functionality tests completed on $ip"
    else
        log_warning "Certains tests de fonctionnalit√© ont √©chou√©"
        trace_deploy_operation "functionality_tests" "WARNING" "Some functionality tests failed on $ip"
    fi
}

# V√©rifier les logs d'erreur
check_error_logs() {
    local ip="$1"
    
    log_info "V√©rification des logs d'erreur..."
    trace_deploy_operation "check_error_logs" "STARTED" "Checking error logs on $ip"
    
    # V√©rifier les logs d'erreur
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        echo "=== V√âRIFICATION DES LOGS D'ERREUR ==="
        
        services=("traefik" "redis" "mongodb" "gateway" "translator" "frontend")
        
        for service in "${services[@]}"; do
            echo "--- $service ---"
            
            # Chercher les erreurs dans les logs
            error_count=$(docker compose logs $service | grep -i error | wc -l)
            warning_count=$(docker compose logs $service | grep -i warning | wc -l)
            
            if [ $error_count -gt 0 ]; then
                echo "‚ùå $service: $error_count erreur(s) d√©tect√©e(s)"
                echo "   Derni√®res erreurs:"
                docker compose logs $service | grep -i error | tail -3
            else
                echo "‚úÖ $service: Aucune erreur d√©tect√©e"
            fi
            
            if [ $warning_count -gt 0 ]; then
                echo "‚ö†Ô∏è  $service: $warning_count avertissement(s) d√©tect√©(s)"
            fi
        done
EOF
    
    if [ $? -eq 0 ]; then
        log_success "V√©rification des logs d'erreur termin√©e"
        trace_deploy_operation "check_error_logs" "SUCCESS" "Error logs check completed on $ip"
    else
        log_warning "Impossible de v√©rifier tous les logs d'erreur"
        trace_deploy_operation "check_error_logs" "WARNING" "Could not check all error logs on $ip"
    fi
}

# V√©rifier les ressources syst√®me
check_system_resources() {
    local ip="$1"
    
    log_info "V√©rification des ressources syst√®me..."
    trace_deploy_operation "check_resources" "STARTED" "Checking system resources on $ip"
    
    # V√©rifier les ressources syst√®me
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        echo "=== V√âRIFICATION DES RESSOURCES SYST√àME ==="
        
        # Utilisation CPU
        echo "--- CPU ---"
        cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
        echo "Utilisation CPU: ${cpu_usage}%"
        
        # Utilisation m√©moire
        echo "--- M√©moire ---"
        memory_info=$(free -m | grep "Mem:")
        total_memory=$(echo $memory_info | awk '{print $2}')
        used_memory=$(echo $memory_info | awk '{print $3}')
        memory_percent=$((used_memory * 100 / total_memory))
        echo "Utilisation m√©moire: ${memory_percent}% (${used_memory}MB/${total_memory}MB)"
        
        # Utilisation disque
        echo "--- Disque ---"
        disk_usage=$(df -h / | tail -1 | awk '{print $5}' | cut -d'%' -f1)
        echo "Utilisation disque: ${disk_usage}%"
        
        # Utilisation Docker
        echo "--- Docker ---"
        docker_stats=$(docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | grep meeshy)
        if [ -n "$docker_stats" ]; then
            echo "Utilisation des conteneurs Meeshy:"
            echo "$docker_stats"
        else
            echo "Aucun conteneur Meeshy en cours d'ex√©cution"
        fi
        
        # V√©rifier les limites
        if [ $cpu_usage -gt 80 ]; then
            echo "‚ö†Ô∏è  Utilisation CPU √©lev√©e: ${cpu_usage}%"
        fi
        
        if [ $memory_percent -gt 80 ]; then
            echo "‚ö†Ô∏è  Utilisation m√©moire √©lev√©e: ${memory_percent}%"
        fi
        
        if [ $disk_usage -gt 80 ]; then
            echo "‚ö†Ô∏è  Utilisation disque √©lev√©e: ${disk_usage}%"
        fi
EOF
    
    if [ $? -eq 0 ]; then
        log_success "V√©rification des ressources syst√®me termin√©e"
        trace_deploy_operation "check_resources" "SUCCESS" "System resources check completed on $ip"
    else
        log_warning "Impossible de v√©rifier toutes les ressources syst√®me"
        trace_deploy_operation "check_resources" "WARNING" "Could not check all system resources on $ip"
    fi
}

# G√©n√©rer un rapport de sant√©
generate_health_report() {
    local ip="$1"
    
    log_info "G√©n√©ration du rapport de sant√©..."
    trace_deploy_operation "generate_report" "STARTED" "Generating health report for $ip"
    
    # G√©n√©rer le rapport
    ssh -o StrictHostKeyChecking=no root@$ip << 'EOF'
        echo "=== RAPPORT DE SANT√â MEESHY ==="
        echo "Date: $(date)"
        echo "Serveur: $(hostname)"
        echo "IP: $(hostname -I | awk '{print $1}')"
        echo ""
        
        # Statut des services
        echo "--- STATUT DES SERVICES ---"
        docker compose ps
        
        echo ""
        
        # R√©sum√© de sant√©
        echo "--- R√âSUM√â DE SANT√â ---"
        
        # Compter les services en cours d'ex√©cution
        running_services=$(docker compose ps | grep "Up" | wc -l)
        total_services=6  # traefik, redis, mongodb, gateway, translator, frontend
        
        echo "Services en cours d'ex√©cution: $running_services/$total_services"
        
        if [ $running_services -eq $total_services ]; then
            echo "‚úÖ Tous les services sont en cours d'ex√©cution"
        else
            echo "‚ùå Certains services ne sont pas en cours d'ex√©cution"
        fi
        
        # V√©rifier les erreurs
        total_errors=0
        services=("traefik" "redis" "mongodb" "gateway" "translator" "frontend")
        
        for service in "${services[@]}"; do
            error_count=$(docker compose logs $service | grep -i error | wc -l)
            total_errors=$((total_errors + error_count))
        done
        
        echo "Erreurs totales d√©tect√©es: $total_errors"
        
        if [ $total_errors -eq 0 ]; then
            echo "‚úÖ Aucune erreur d√©tect√©e"
        else
            echo "‚ùå Des erreurs ont √©t√© d√©tect√©es"
        fi
        
        echo ""
        echo "=== FIN DU RAPPORT ==="
EOF
    
    if [ $? -eq 0 ]; then
        log_success "Rapport de sant√© g√©n√©r√©"
        trace_deploy_operation "generate_report" "SUCCESS" "Health report generated for $ip"
    else
        log_error "√âchec de la g√©n√©ration du rapport de sant√©"
        trace_deploy_operation "generate_report" "FAILED" "Health report generation failed for $ip"
        exit 1
    fi
}

# Fonction principale
main() {
    local ip="$1"
    
    # Parser les arguments si appel√© directement
    if [ -z "$ip" ] && [ -n "$DROPLET_IP" ]; then
        ip="$DROPLET_IP"
    fi
    
    if [ -z "$ip" ]; then
        log_error "IP du serveur manquante"
        show_help
        exit 1
    fi
    
    log_info "üè• V√©rification de la sant√© des services Meeshy sur le serveur $ip"
    
    # V√©rifier le statut des conteneurs
    check_container_status "$ip"
    
    # V√©rifier la connectivit√©
    check_services_connectivity "$ip"
    
    # Effectuer des tests de fonctionnalit√©
    run_functionality_tests "$ip"
    
    # V√©rifier les logs d'erreur
    check_error_logs "$ip"
    
    # V√©rifier les ressources syst√®me
    check_system_resources "$ip"
    
    # G√©n√©rer le rapport de sant√©
    generate_health_report "$ip"
    
    # R√©sum√© de la v√©rification
    echo ""
    echo "=== R√âSUM√â DE LA V√âRIFICATION DE SANT√â ==="
    echo "‚úÖ Statut des conteneurs: V√©rifi√©"
    echo "‚úÖ Connectivit√© des services: Test√©e"
    echo "‚úÖ Tests de fonctionnalit√©: Effectu√©s"
    echo "‚úÖ Logs d'erreur: V√©rifi√©s"
    echo "‚úÖ Ressources syst√®me: V√©rifi√©es"
    echo "‚úÖ Rapport de sant√©: G√©n√©r√©"
    echo "======================================="
    
    log_success "V√©rification de sant√© termin√©e avec succ√®s"
    
    # Finaliser la tra√ßabilit√©
    finalize_deploy_tracing "SUCCESS" "Health check completed for $ip"
}

# Ex√©cuter la fonction principale si le script est appel√© directement
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi
