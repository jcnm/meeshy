#!/bin/bash

# ===== MEESHY - VALIDATION DE CONFIGURATION PR√â-D√âPLOIEMENT =====
# Script de validation des variables d'environnement avant d√©ploiement en production
# Usage: ./deploy-validate-config.sh [ENV_FILE]

set -e

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Compteurs de validation
ERRORS=0
WARNINGS=0
CHECKS=0

# Fonctions utilitaires
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { 
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS++))
}
log_error() { 
    echo -e "${RED}‚ùå $1${NC}"
    ((ERRORS++))
}
log_check() {
    echo -e "${CYAN}üîç $1${NC}"
    ((CHECKS++))
}

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üõ°Ô∏è MEESHY - VALIDATION DE CONFIGURATION PR√â-D√âPLOIEMENT${NC}"
    echo "============================================================"
    echo ""
    echo "Usage: $0 [ENV_FILE]"
    echo ""
    echo "Description:"
    echo "  Valide les variables d'environnement avant d√©ploiement en production"
    echo "  V√©rifie les configurations critiques pour √©viter les erreurs de d√©ploiement"
    echo ""
    echo "Arguments:"
    echo "  ENV_FILE    Chemin vers le fichier .env (d√©faut: env.production)"
    echo ""
    echo "Validations effectu√©es:"
    echo "  ‚Ä¢ FORCE_DB_RESET doit √™tre false en production"
    echo "  ‚Ä¢ URLs doivent correspondre √† l'environnement (https pour production)"
    echo "  ‚Ä¢ Mots de passe ne doivent pas contenir de valeurs par d√©faut"
    echo "  ‚Ä¢ Variables critiques ne doivent pas √™tre vides"
    echo "  ‚Ä¢ Configuration SSL/TLS appropri√©e"
    echo "  ‚Ä¢ Configuration de base de donn√©es correcte"
    echo ""
}

# Charger le fichier d'environnement
load_env_file() {
    local env_file="$1"
    
    if [ ! -f "$env_file" ]; then
        log_error "Fichier $env_file non trouv√©"
        exit 1
    fi
    
    log_info "Chargement du fichier: $env_file"
    
    # Charger les variables sans les exporter (pour √©viter de polluer l'environnement actuel)
    while IFS='=' read -r key value; do
        # Ignorer les commentaires et lignes vides
        if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
            # Supprimer les guillemets et espaces
            value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//" | xargs)
            eval "ENV_$key=\"$value\""
        fi
    done < "$env_file"
}

# Validation critique: FORCE_DB_RESET
validate_force_db_reset() {
    log_check "Validation de FORCE_DB_RESET"
    
    if [ "$ENV_NODE_ENV" == "production" ] || [ "$ENV_DEPLOYMENT_ENV" == "production" ] || [ "$ENV_DEPLOYMENT_ENV" == "digitalocean" ]; then
        if [ "$ENV_FORCE_DB_RESET" == "true" ]; then
            log_error "FORCE_DB_RESET=true d√©tect√© en PRODUCTION!"
            log_error "  Cette configuration SUPPRIMERA TOUTES les donn√©es de production!"
            log_error "  Changez FORCE_DB_RESET=false dans votre fichier .env"
            return 1
        else
            log_success "FORCE_DB_RESET=$ENV_FORCE_DB_RESET (OK pour production)"
        fi
    else
        if [ "$ENV_FORCE_DB_RESET" == "true" ]; then
            log_warning "FORCE_DB_RESET=true d√©tect√© en d√©veloppement"
            log_warning "  Les donn√©es seront r√©initialis√©es au d√©marrage"
        else
            log_success "FORCE_DB_RESET=$ENV_FORCE_DB_RESET"
        fi
    fi
}

# Validation des URLs
validate_urls() {
    log_check "Validation des URLs"
    
    local is_production=false
    if [ "$ENV_NODE_ENV" == "production" ] || [ "$ENV_DEPLOYMENT_ENV" == "production" ] || [ "$ENV_DEPLOYMENT_ENV" == "digitalocean" ]; then
        is_production=true
    fi
    
    # V√©rifier INTERNAL_BACKEND_URL
    if [ -n "$ENV_INTERNAL_BACKEND_URL" ]; then
        if $is_production; then
            if [[ "$ENV_INTERNAL_BACKEND_URL" =~ ^http:// ]]; then
                log_error "INTERNAL_BACKEND_URL utilise HTTP en production: $ENV_INTERNAL_BACKEND_URL"
                log_error "  Utilisez HTTPS pour la production (ex: https://gate.meeshy.me)"
            elif [[ "$ENV_INTERNAL_BACKEND_URL" =~ gateway:3000 ]]; then
                log_error "INTERNAL_BACKEND_URL utilise l'URL interne Docker en production: $ENV_INTERNAL_BACKEND_URL"
                log_error "  Utilisez l'URL publique pour la production (ex: https://gate.meeshy.me)"
            elif [[ "$ENV_INTERNAL_BACKEND_URL" =~ ^https:// ]]; then
                log_success "INTERNAL_BACKEND_URL=$ENV_INTERNAL_BACKEND_URL (HTTPS OK)"
            else
                log_warning "INTERNAL_BACKEND_URL format inattendu: $ENV_INTERNAL_BACKEND_URL"
            fi
        else
            log_success "INTERNAL_BACKEND_URL=$ENV_INTERNAL_BACKEND_URL"
        fi
    else
        log_warning "INTERNAL_BACKEND_URL non d√©finie"
    fi
    
    # V√©rifier INTERNAL_WS_URL
    if [ -n "$ENV_INTERNAL_WS_URL" ]; then
        if $is_production; then
            if [[ "$ENV_INTERNAL_WS_URL" =~ ^ws:// ]]; then
                log_error "INTERNAL_WS_URL utilise WS en production: $ENV_INTERNAL_WS_URL"
                log_error "  Utilisez WSS pour la production (ex: wss://gate.meeshy.me)"
            elif [[ "$ENV_INTERNAL_WS_URL" =~ gateway:3000 ]]; then
                log_error "INTERNAL_WS_URL utilise l'URL interne Docker en production: $ENV_INTERNAL_WS_URL"
                log_error "  Utilisez l'URL publique pour la production (ex: wss://gate.meeshy.me)"
            elif [[ "$ENV_INTERNAL_WS_URL" =~ ^wss:// ]]; then
                log_success "INTERNAL_WS_URL=$ENV_INTERNAL_WS_URL (WSS OK)"
            else
                log_warning "INTERNAL_WS_URL format inattendu: $ENV_INTERNAL_WS_URL"
            fi
        else
            log_success "INTERNAL_WS_URL=$ENV_INTERNAL_WS_URL"
        fi
    else
        log_warning "INTERNAL_WS_URL non d√©finie"
    fi
}

# Validation des mots de passe
validate_passwords() {
    log_check "Validation des mots de passe"
    
    local default_passwords=(
        "CHANGE_ME"
        "admin123"
        "password"
        "secret"
        "default"
    )
    
    # Variables de mots de passe √† v√©rifier
    local password_vars=(
        "MONGODB_PASSWORD"
        "ADMIN_PASSWORD"
        "MEESHY_BIGBOSS_PASSWORD"
        "JWT_SECRET"
        "TRAEFIK_DASHBOARD_PASSWORD"
    )
    
    for var in "${password_vars[@]}"; do
        local var_name="ENV_$var"
        local var_value="${!var_name}"
        
        if [ -z "$var_value" ]; then
            log_error "$var est vide"
            continue
        fi
        
        # V√©rifier les valeurs par d√©faut
        local has_default=false
        for default in "${default_passwords[@]}"; do
            if [[ "$var_value" == *"$default"* ]]; then
                log_error "$var contient une valeur par d√©faut: $default"
                has_default=true
                break
            fi
        done
        
        if ! $has_default; then
            # V√©rifier la longueur (au moins 8 caract√®res)
            if [ ${#var_value} -lt 8 ]; then
                log_warning "$var est trop court (${#var_value} caract√®res, minimum 8 recommand√©)"
            else
                log_success "$var configur√© (${#var_value} caract√®res)"
            fi
        fi
    done
}

# Validation de l'environnement
validate_environment() {
    log_check "Validation de l'environnement"
    
    if [ -z "$ENV_NODE_ENV" ]; then
        log_warning "NODE_ENV non d√©fini"
    else
        log_success "NODE_ENV=$ENV_NODE_ENV"
    fi
    
    if [ -z "$ENV_DEPLOYMENT_ENV" ]; then
        log_warning "DEPLOYMENT_ENV non d√©fini"
    else
        log_success "DEPLOYMENT_ENV=$ENV_DEPLOYMENT_ENV"
    fi
}

# Validation de la base de donn√©es
validate_database() {
    log_check "Validation de la configuration de base de donn√©es"
    
    if [ -z "$ENV_DATABASE_URL" ]; then
        log_error "DATABASE_URL non d√©finie"
    else
        log_success "DATABASE_URL d√©finie"
        
        # V√©rifier le format pour MongoDB
        if [[ "$ENV_DATABASE_URL" =~ ^mongodb ]]; then
            log_success "Format MongoDB d√©tect√©"
            
            # V√©rifier si c'est un replica set
            if [[ "$ENV_DATABASE_URL" =~ replicaSet ]]; then
                log_success "Configuration Replica Set d√©tect√©e"
            else
                log_warning "Replica Set non configur√© (recommand√© pour production)"
            fi
        fi
    fi
}

# Validation du domaine
validate_domain() {
    log_check "Validation du domaine"
    
    if [ -z "$ENV_DOMAIN" ]; then
        log_error "DOMAIN non d√©fini"
    else
        log_success "DOMAIN=$ENV_DOMAIN"
        
        # V√©rifier si c'est un domaine valide (pas localhost ou IP)
        if [[ "$ENV_DOMAIN" == "localhost" ]] || [[ "$ENV_DOMAIN" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            log_warning "DOMAIN utilise localhost ou une IP: $ENV_DOMAIN"
            log_warning "  Utilisez un nom de domaine pour la production"
        fi
    fi
    
    if [ -z "$ENV_CERTBOT_EMAIL" ]; then
        log_warning "CERTBOT_EMAIL non d√©fini (requis pour SSL)"
    else
        log_success "CERTBOT_EMAIL=$ENV_CERTBOT_EMAIL"
    fi
}

# G√©n√©ration du rapport
generate_report() {
    echo ""
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}RAPPORT DE VALIDATION${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo ""
    echo "Total de v√©rifications: $CHECKS"
    echo "Avertissements: $WARNINGS"
    echo "Erreurs: $ERRORS"
    echo ""
    
    if [ $ERRORS -gt 0 ]; then
        log_error "‚ùå VALIDATION √âCHOU√âE - $ERRORS erreur(s) critique(s)"
        log_error "Le d√©ploiement en production est BLOQU√â"
        log_error "Corrigez les erreurs ci-dessus avant de d√©ployer"
        return 1
    elif [ $WARNINGS -gt 0 ]; then
        log_warning "‚ö†Ô∏è VALIDATION R√âUSSIE AVEC AVERTISSEMENTS - $WARNINGS avertissement(s)"
        log_warning "Le d√©ploiement peut continuer mais v√©rifiez les avertissements"
        return 0
    else
        log_success "‚úÖ VALIDATION R√âUSSIE - Configuration pr√™te pour le d√©ploiement"
        return 0
    fi
}

# Fonction principale
main() {
    local env_file="${1:-env.production}"
    
    echo -e "${CYAN}üõ°Ô∏è MEESHY - VALIDATION DE CONFIGURATION PR√â-D√âPLOIEMENT${NC}"
    echo "============================================================"
    echo ""
    
    if [ "$env_file" == "--help" ] || [ "$env_file" == "-h" ]; then
        show_help
        exit 0
    fi
    
    # Charger le fichier d'environnement
    load_env_file "$env_file"
    
    echo ""
    log_info "D√©but de la validation..."
    echo ""
    
    # Ex√©cuter toutes les validations
    validate_environment
    echo ""
    validate_force_db_reset
    echo ""
    validate_urls
    echo ""
    validate_passwords
    echo ""
    validate_database
    echo ""
    validate_domain
    echo ""
    
    # G√©n√©rer le rapport final
    generate_report
    
    return $?
}

# Ex√©cuter la fonction principale
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi
