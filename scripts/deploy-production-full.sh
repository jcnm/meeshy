#!/bin/bash

# Script de d√©ploiement production complet Meeshy
# Usage: ./scripts/deploy-production-full.sh [SERVER_IP]

set -e

SERVER_IP="${1:-}"

if [ -z "$SERVER_IP" ]; then
    echo "‚ùå Usage: $0 [SERVER_IP]"
    echo "Exemple: $0 157.230.15.51"
    exit 1
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo "üöÄ D√©ploiement Production Complet Meeshy"
echo "========================================"
echo "Serveur: $SERVER_IP"
echo "Compose: docker-compose.traefik.yml"
echo ""

# 1. V√©rifier les fichiers critiques
echo "üìã V√©rification des fichiers critiques..."
if [ ! -f "$PROJECT_ROOT/env.production" ]; then
    echo "‚ùå Fichier env.production manquant"
    exit 1
fi

if [ ! -f "$PROJECT_ROOT/docker-compose.traefik.yml" ]; then
    echo "‚ùå Fichier docker-compose.traefik.yml manquant"
    exit 1
fi

echo "‚úÖ Fichiers critiques pr√©sents"
echo ""

# 2. V√©rifier la configuration (FORCE_DB_RESET=false, URLs correctes)
echo "üîç V√©rification de la configuration..."
FORCE_RESET=$(grep "^FORCE_DB_RESET=" "$PROJECT_ROOT/env.production" | grep -v "^#" | tail -1 | cut -d'=' -f2 | tr -d '"')
INTERNAL_URL=$(grep "^INTERNAL_BACKEND_URL=" "$PROJECT_ROOT/env.production" | grep -v "^#" | tail -1 | cut -d'=' -f2 | tr -d '"')

if [ "$FORCE_RESET" = "true" ]; then
    echo "‚ùå ERREUR: FORCE_DB_RESET=true d√©tect√©!"
    echo "   Ceci supprimerait toutes les donn√©es en production!"
    echo "   Changez FORCE_DB_RESET=false dans env.production"
    exit 1
fi

if [[ "$INTERNAL_URL" != https://* ]]; then
    echo "‚ö†Ô∏è  AVERTISSEMENT: INTERNAL_BACKEND_URL n'utilise pas HTTPS: $INTERNAL_URL"
    echo "   Pour la production, utilisez: https://gate.meeshy.me"
    read -p "Continuer quand m√™me? (yes/NO): " confirm
    if [ "$confirm" != "yes" ]; then
        exit 0
    fi
fi

echo "‚úÖ Configuration valid√©e"
echo ""

# 3. Nettoyer l'environnement de production
echo "üßπ Nettoyage de l'environnement de production..."
ssh -o StrictHostKeyChecking=no root@$SERVER_IP << 'EOF'
    echo "Arr√™t des services existants..."
    cd /opt/meeshy 2>/dev/null || true
    
    # Arr√™ter avec le compose Traefik si existant
    docker-compose -f docker-compose.traefik.yml down 2>/dev/null || \
    docker-compose down 2>/dev/null || \
    docker compose down 2>/dev/null || true
    
    # Nettoyer les conteneurs arr√™t√©s
    docker container prune -f 2>/dev/null || true
    
    # Nettoyer les images non utilis√©es (garde les volumes de donn√©es)
    docker image prune -af 2>/dev/null || true
    
    # Nettoyer les r√©seaux non utilis√©s
    docker network prune -f 2>/dev/null || true
    
    # Cr√©er le r√©pertoire s'il n'existe pas
    mkdir -p /opt/meeshy
    
    # Nettoyer les fichiers de config (garde les volumes Docker)
    cd /opt/meeshy
    rm -f docker-compose.yml .env 2>/dev/null || true
    rm -rf config shared 2>/dev/null || true
    
    echo "‚úÖ Nettoyage termin√©"
EOF

echo "‚úÖ Environnement nettoy√©"
echo ""

# 4. Pr√©parer le fichier .env avec √©chappement correct des mots de passe
echo "üîê Pr√©paration du fichier .env avec √©chappement des mots de passe..."
TEMP_ENV="/tmp/meeshy-env-escaped-$$"

# Copier env.production et √©chapper les variables contenant des mots de passe
while IFS='=' read -r key value; do
    # Ignorer les commentaires et lignes vides
    if [[ "$key" =~ ^[[:space:]]*# ]] || [[ -z "$key" ]]; then
        echo "$key=$value" >> "$TEMP_ENV"
        continue
    fi
    
    # √âchapper les variables de mots de passe (TRAEFIK_USERS, API_USERS, etc.)
    if [[ "$key" =~ (TRAEFIK_USERS|API_USERS|MONGO_USERS|REDIS_USERS) ]]; then
        # Supprimer les guillemets existants et √©chapper correctement
        clean_value=$(echo "$value" | sed 's/^"//;s/"$//')
        # √âchapper les caract√®res sp√©ciaux pour bash
        escaped_value=$(printf '%s' "$clean_value" | sed 's/\$/\\$/g; s/"/\\"/g; s/`/\\`/g')
        echo "$key=\"$escaped_value\"" >> "$TEMP_ENV"
    else
        echo "$key=$value" >> "$TEMP_ENV"
    fi
done < "$PROJECT_ROOT/env.production"

echo "‚úÖ Fichier .env pr√©par√© avec √©chappement correct"

# 5. Copier les fichiers de configuration
echo "üì¶ Copie des fichiers de configuration..."
scp -o StrictHostKeyChecking=no "$TEMP_ENV" root@$SERVER_IP:/opt/meeshy/.env
scp -o StrictHostKeyChecking=no "$PROJECT_ROOT/docker-compose.traefik.yml" root@$SERVER_IP:/opt/meeshy/docker-compose.yml

# Nettoyer le fichier temporaire
rm -f "$TEMP_ENV"

# Copier les dossiers de configuration
if [ -d "$PROJECT_ROOT/config" ]; then
    scp -o StrictHostKeyChecking=no -r "$PROJECT_ROOT/config" root@$SERVER_IP:/opt/meeshy/
fi

if [ -d "$PROJECT_ROOT/shared" ]; then
    scp -o StrictHostKeyChecking=no -r "$PROJECT_ROOT/shared" root@$SERVER_IP:/opt/meeshy/
fi

echo "‚úÖ Fichiers copi√©s"
echo ""

# 5. Cr√©er les r√©seaux Docker
echo "üåê Cr√©ation des r√©seaux Docker..."
ssh -o StrictHostKeyChecking=no root@$SERVER_IP << 'EOF'
    # Cr√©er les r√©seaux si n√©cessaire
    docker network create traefik-public 2>/dev/null || echo "R√©seau traefik-public existe d√©j√†"
    docker network create meeshy-network 2>/dev/null || echo "R√©seau meeshy-network existe d√©j√†"
    echo "‚úÖ R√©seaux Docker cr√©√©s/v√©rifi√©s"
EOF

echo ""

# 6. D√©marrer les services de mani√®re s√©quentielle
echo "üöÄ D√©marrage des services..."
ssh -o StrictHostKeyChecking=no root@$SERVER_IP << 'EOF'
    cd /opt/meeshy
    
    echo "üì• T√©l√©chargement des images Docker..."
    docker-compose pull
    
    echo ""
    echo "üîß D√©marrage de l'infrastructure..."
    
    # 1. Traefik
    echo "  ‚Üí Traefik..."
    docker-compose up -d traefik
    sleep 3
    
    # 2. Redis
    echo "  ‚Üí Redis..."
    docker-compose up -d redis
    sleep 3
    
    # 3. MongoDB
    echo "  ‚Üí MongoDB..."
    docker-compose up -d mongodb
    sleep 10
    
    echo ""
    echo "üöÄ D√©marrage des services applicatifs..."
    
    # 4. Gateway
    echo "  ‚Üí Gateway..."
    docker-compose up -d gateway
    sleep 5
    
    # 5. Translator
    echo "  ‚Üí Translator..."
    docker-compose up -d translator
    sleep 15
    
    # 6. Frontend
    echo "  ‚Üí Frontend..."
    docker-compose up -d frontend
    sleep 5
    
    echo ""
    echo "‚úÖ Tous les services d√©marr√©s"
EOF

echo ""

# 7. V√©rification de sant√©
echo "üè• V√©rification de sant√© des services..."
sleep 5

ssh -o StrictHostKeyChecking=no root@$SERVER_IP << 'EOF'
    cd /opt/meeshy
    
    echo "üìä √âtat des services:"
    docker-compose ps
    
    echo ""
    echo "üîç Tests de connectivit√©:"
    
    # Test Gateway
    if curl -f -s -k https://gate.meeshy.me/health >/dev/null 2>&1 || curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
        echo "‚úÖ Gateway: OK"
    else
        echo "‚ö†Ô∏è  Gateway: Inaccessible (peut prendre quelques secondes de plus)"
    fi
    
    # Test Frontend
    if curl -f -s -k https://meeshy.me >/dev/null 2>&1 || curl -f -s http://localhost:3100 >/dev/null 2>&1; then
        echo "‚úÖ Frontend: OK"
    else
        echo "‚ö†Ô∏è  Frontend: Inaccessible (peut prendre quelques secondes de plus)"
    fi
    
    # Test Traefik
    if curl -f -s http://localhost:8080 >/dev/null 2>&1; then
        echo "‚úÖ Traefik: OK"
    else
        echo "‚ö†Ô∏è  Traefik: Inaccessible"
    fi
    
    echo ""
    echo "üìã Logs r√©cents (derni√®res 20 lignes):"
    docker-compose logs --tail=20
EOF

echo ""
echo "üéâ D√©ploiement termin√© !"
echo "======================="
echo ""
echo "üîó Acc√®s aux services:"
echo "   ‚Ä¢ Frontend: https://meeshy.me"
echo "   ‚Ä¢ Gateway API: https://gate.meeshy.me"
echo "   ‚Ä¢ Traefik Dashboard: https://traefik.meeshy.me"
echo ""
echo "üìã Commandes utiles:"
echo "   ‚Ä¢ Logs: ssh root@$SERVER_IP 'cd /opt/meeshy && docker-compose logs -f'"
echo "   ‚Ä¢ Status: ssh root@$SERVER_IP 'cd /opt/meeshy && docker-compose ps'"
echo "   ‚Ä¢ Restart: ssh root@$SERVER_IP 'cd /opt/meeshy && docker-compose restart [service]'"
echo ""
