version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: meeshy-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${CERTBOT_EMAIL:-admin@meeshy.me}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
    networks:
      - meeshy-network

  # Database Service
  database:
    image: ${DATABASE_IMAGE:-mongo:8.0}
    container_name: meeshy-database
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME:-meeshy}
    volumes:
      - database_data:/data/db
      - database_config:/data/configdb
      - ./shared/init-mongodb-replica.sh:/docker-entrypoint-initdb.d/init-mongodb-replica.sh:ro
      - ./shared/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: ${REDIS_IMAGE:-redis:8-alpine}
    container_name: meeshy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Translator Service
  translator:
    image: ${TRANSLATOR_IMAGE:-isopen/meeshy-translator:1.0.39-alpha
    container_name: meeshy-translator
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - TRANSLATION_MODEL_PATH=${TRANSLATION_MODEL_PATH:-/app/models}
      - WORKER_COUNT=${TRANSLATOR_WORKER_COUNT:-2}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - translator_models:/app/models
    networks:
      - meeshy-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.translator.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/translate`)"
      - "traefik.http.routers.translator.entrypoints=websecure"
      - "traefik.http.routers.translator.tls.certresolver=letsencrypt"
      - "traefik.http.services.translator.loadbalancer.server.port=8000"

  # Gateway Service
  gateway:
    image: ${GATEWAY_IMAGE:-isopen/meeshy-gateway:1.0.39-alpha
    container_name: meeshy-gateway
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - TRANSLATOR_URL=${TRANSLATOR_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    networks:
      - meeshy-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      translator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway-api.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.gateway-api.entrypoints=websecure"
      - "traefik.http.routers.gateway-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.gateway-api.loadbalancer.server.port=3000"
      - "traefik.http.routers.gateway-ws.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.gateway-ws.entrypoints=websecure"
      - "traefik.http.routers.gateway-ws.tls.certresolver=letsencrypt"
      - "traefik.http.services.gateway-ws.loadbalancer.server.port=3000"

  # Frontend Service
  frontend:
    image: ${FRONTEND_IMAGE:-isopen/meeshy-frontend:1.0.39-alpha
    container_name: meeshy-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - NEXT_PUBLIC_TRANSLATION_URL=${NEXT_PUBLIC_TRANSLATION_URL}
      - NEXT_PUBLIC_FRONTEND_URL=${NEXT_PUBLIC_FRONTEND_URL}
      - NODE_ENV=${NODE_ENV:-production}
    networks:
      - meeshy-network
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3100"
      - "traefik.http.routers.frontend.priority=1"

volumes:
  database_data:
  database_config:
  redis_data:
  translator_models:
  traefik_certs:

networks:
  meeshy-network:
    driver: bridge
