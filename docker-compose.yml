version: '3.8'

services:
  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: meeshy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: meeshy
      POSTGRES_USER: meeshy_user
      POSTGRES_PASSWORD: meeshy_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/shared/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meeshy_user -d meeshy"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meeshy-network

  # ===== BACKEND FASTIFY =====
  backend:
    build:
      context: ./backend
      dockerfile: fastify-service/Dockerfile
    container_name: meeshy-backend-fastify
    restart: unless-stopped
    environment:
      NODE_ENV: production
      FASTIFY_PORT: 3001
      FASTIFY_HOST: 0.0.0.0
      DATABASE_URL: postgresql://meeshy_user:meeshy_password@postgres:5432/meeshy
      JWT_SECRET: meeshy-jwt-secret-production
      JWT_EXPIRES_IN: 1h
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: 60000
      GRPC_TRANSLATION_HOST: translation-service
      GRPC_TRANSLATION_PORT: 50051
      LOG_LEVEL: info
      WS_MAX_CONNECTIONS: 1000
      WS_PING_INTERVAL: 30000
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      translation-service:
        condition: service_started
    volumes:
      - ./backend/shared:/app/shared
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - meeshy-network

  # ===== TRANSLATION SERVICE =====
  translation-service:
    build:
      context: ./backend
      dockerfile: translation-service/Dockerfile
    container_name: meeshy-translation
    restart: unless-stopped
    environment:
      GRPC_PORT: 50051
      MODEL_CACHE_DIR: /app/models
      SUPPORTED_LANGUAGES: "fr,en,es,de,pt,zh,ja,ar"
      MAX_TEXT_LENGTH: 5000
      DEFAULT_MODEL: nllb-200-distilled-600M
      DEVICE: cpu
    ports:
      - "50051:50051"
    volumes:
      - translation_models:/app/models
      - ./backend/translation-service/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "python3 -c 'import grpc; channel = grpc.insecure_channel(\"localhost:50051\"); channel.close()' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - meeshy-network

  # ===== FRONTEND NEXT.JS =====
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: meeshy-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXT_PUBLIC_TRANSLATION_URL: http://localhost:50051
      NEXTJS_URL: http://localhost:3000
      NEXTJS_PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - translation-service
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - meeshy-network

  # ===== REDIS CACHE (OPTIONNEL) =====
  redis:
    image: redis:7-alpine
    container_name: meeshy-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meeshy-network

  # ===== NGINX REVERSE PROXY =====
  nginx:
    image: nginx:alpine
    container_name: meeshy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
      - ./docker/nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - translation-service
    networks:
      - meeshy-network

  # ===== MONITORING (OPTIONNEL) =====
  prometheus:
    image: prom/prometheus:latest
    container_name: meeshy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.enable-lifecycle'
    networks:
      - meeshy-network

  grafana:
    image: grafana/grafana:latest
    container_name: meeshy-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - meeshy-network

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  translation_models:
    driver: local
  backend-logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===== NETWORKS =====
networks:
  meeshy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
