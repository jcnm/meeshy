# Meeshy - Production Docker Compose for Microservices Architecture

services:
  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-meeshy}
      POSTGRES_USER: ${POSTGRES_USER:-meeshy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-MeeshyP@ssword}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/prisma/migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-meeshy} -d ${POSTGRES_DB:-meeshy}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meeshy-network

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meeshy-network

  # ===== TRANSLATOR SERVICE (FastAPI + ML) =====
  translator:
    build:
      context: translator
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://${POSTGRES_USER:-meeshy}:${POSTGRES_PASSWORD:-MeeshyP@ssword}@postgres:5432/${POSTGRES_DB:-meeshy}
        - REDIS_URL=redis://redis:6379
        - GRPC_HOST=0.0.0.0
        - GRPC_PORT=50051
        - HTTP_PORT=8000
        - ZMQ_PORT=5555
        - LOG_LEVEL=${LOG_LEVEL:-info}
        - SUPPORTED_LANGUAGES=${SUPPORTED_LANGUAGES:-"fr,en,es,de,pt,zh,ja,ar"}
        - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-fr}
        - MAX_TEXT_LENGTH=${MAX_TEXT_LENGTH:-5000}
        - BASIC_MODEL=${BASIC_MODEL:-t5-small}
        - MEDIUM_MODEL=${MEDIUM_MODEL:-nllb-200-distilled-600M}
        - PREMIUM_MODEL=${PREMIUM_MODEL:-nllb-200-distilled-1.3B}
        - DEVICE=${DEVICE:-cpu}
        - ML_BATCH_SIZE=${ML_BATCH_SIZE:-4}
        - GPU_MEMORY_FRACTION=${GPU_MEMORY_FRACTION:-0.8}
        - TRANSLATION_TIMEOUT=${TRANSLATION_TIMEOUT:-60}
        - CONCURRENT_TRANSLATIONS=${CONCURRENT_TRANSLATIONS:-5}
        - WORKERS=${WORKERS:-2}
        - AUTO_CLEANUP_CORRUPTED_MODELS=${AUTO_CLEANUP_CORRUPTED_MODELS:-true}
        - FORCE_MODEL_REDOWNLOAD=${FORCE_MODEL_REDOWNLOAD:-false}
        - TRANSLATION_CACHE_TTL=${TRANSLATION_CACHE_TTL:-3600}
    image: isopen/meeshy-translator:0.4.9-alpha
    container_name: translator
    restart: unless-stopped
    # OPTIMISATION: Resource limits optimisés pour ML
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    # Enable GPU support if available
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-meeshy}:${POSTGRES_PASSWORD:-MeeshyP@ssword}@postgres:5432/${POSTGRES_DB:-meeshy}
      REDIS_URL: redis://redis:6379
      TRANSLATOR_GRPC_PORT: 50051
      TRANSLATOR_HTTP_PORT: 8000
      TRANSLATOR_ZMQ_PULL_PORT: 5555
      TRANSLATOR_ZMQ_PUB_PORT: 5558
      # OPTIMISATION: Paramètres ML optimisés pour Docker
      ML_BATCH_SIZE: 4
      SUPPORTED_LANGUAGES: "fr,en,es,de,pt,zh,ja,ar"
      DEFAULT_LANGUAGE: "fr"
      DEVICE: "cpu"
      PYTHONUNBUFFERED: 1
      MODELS_PATH: /app/models
      TORCH_HOME: /app/models
      HF_HOME: /app/models
      MODEL_CACHE_DIR: /app/models
      GPU_MEMORY_FRACTION: "0.7"
      TRANSLATION_TIMEOUT: 60
      MAX_TEXT_LENGTH: 1000
      CONCURRENT_TRANSLATIONS: 5
      # OPTIMISATION: Paramètres de performance
      TRANSLATION_WORKERS: 4
      NORMAL_WORKERS: 2
      ANY_WORKERS: 1
      # OPTIMISATION: Gestion mémoire
      PYTORCH_CUDA_ALLOC_CONF: "max_split_size_mb:128"
      OMP_NUM_THREADS: 4
      MKL_NUM_THREADS: 4
      NUMEXPR_NUM_THREADS: 4
    ports:
      - "${TRANSLATOR_HTTP_PORT:-8000}:8000"
      - "${TRANSLATOR_GRPC_PORT:-50051}:50051"
      - "${TRANSLATOR_ZMQ_PULL_PORT:-5555}:5555"
      - "${TRANSLATOR_ZMQ_PUB_PORT:-5558}:5558"
    volumes:
      - translator_cache:/app/cache
      - translator_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10)"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s  # OPTIMISATION: Plus de temps pour le chargement des modèles
    networks:
      - meeshy-network

  # ===== GATEWAY SERVICE (Fastify + WebSocket) =====
  gateway:
    build:
      context: gateway
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://${POSTGRES_USER:-meeshy}:${POSTGRES_PASSWORD:-MeeshyP@ssword}@postgres:5432/${POSTGRES_DB:-meeshy}
        - REDIS_URL=redis://redis:6379
        - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
        - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
        - FASTIFY_PORT=${GATEWAY_PORT:-3000}
        - FASTIFY_HOST=0.0.0.0
        - LOG_LEVEL=${LOG_LEVEL:-info}
        - WS_MAX_CONNECTIONS=${WS_MAX_CONNECTIONS:-100000}
        - WS_PING_INTERVAL=${WS_PING_INTERVAL:-30000}
        - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-1000}
        - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60000}
        - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3100}
        - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3100}
        - GRPC_TRANSLATION_HOST=translator
        - GRPC_TRANSLATION_PORT=50051
        - TRANSLATOR_GRPC_URL=translator:50051
        # ZMQ Configuration
        - ZMQ_TRANSLATOR_HOST=translator
        - ZMQ_TRANSLATOR_SUB_PORT=${ZMQ_TRANSLATOR_SUB_PORT:-5558}
        - ZMQ_TRANSLATOR_PUSH_PORT=${ZMQ_TRANSLATOR_PUSH_PORT:-5555}
        - ZMQ_TIMEOUT=${ZMQ_TIMEOUT:-30000}
    image: isopen/meeshy-gateway:0.4.9-alpha
    container_name: gateway
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-meeshy}:${POSTGRES_PASSWORD:-MeeshyP@ssword}@postgres:5432/${POSTGRES_DB:-meeshy}
      REDIS_URL: redis://redis:6379
      TRANSLATOR_GRPC_URL: translator:50051
      # ZMQ Configuration
      ZMQ_TRANSLATOR_HOST: translator
      ZMQ_TRANSLATOR_SUB_PORT: ${ZMQ_TRANSLATOR_SUB_PORT:-5558}
      ZMQ_TRANSLATOR_PUSH_PORT: ${ZMQ_TRANSLATOR_PUSH_PORT:-5555}
      ZMQ_TIMEOUT: ${ZMQ_TIMEOUT:-3000}
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      CORS_ORIGIN: http://localhost:3100
      CORS_ORIGINS: http://localhost:3100
      ALLOWED_ORIGINS: http://localhost:3100
      WS_MAX_CONNECTIONS: 100000
      NODE_ENV: production
    ports:
      - "${GATEWAY_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      translator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - meeshy-network

  # ===== FRONTEND SERVICE (Next.js) =====
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - PORT=${FRONTEND_PORT:-3100}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3000}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:3000}
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL:-http://localhost:3000}
        - NEXT_TELEMETRY_DISABLED=1
        - NEXT_PUBLIC_DISABLE_CLIENT_TRANSLATION=true
        - NEXT_PUBLIC_USE_API_TRANSLATION_ONLY=true
        - DATABASE_URL=postgresql://${POSTGRES_USER:-meeshy}:${POSTGRES_PASSWORD:-MeeshyP@ssword}@postgres:5432/${POSTGRES_DB:-meeshy}
    image: isopen/meeshy-frontend:0.4.9-alpha
    container_name: frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_WS_URL: ws://localhost:3000
      NEXT_PUBLIC_BACKEND_URL: http://localhost:3000
      NEXT_PUBLIC_TRANSLATION_URL: http://localhost:8000
      # Internal URLs for SSR inside the container
      INTERNAL_BACKEND_URL: http://gateway:3000
      INTERNAL_WS_URL: ws://gateway:3000
      PORT: 3100
      HOSTNAME: 0.0.0.0
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-3100}:3100"
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://0.0.0.0:3100', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - meeshy-network

  # # ===== NGINX REVERSE PROXY =====
  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx
  #   restart: unless-stopped
  #   ports:
  #     - "${NGINX_HTTP_PORT:-80}:80"
  #     - "${NGINX_HTTPS_PORT:-443}:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
  #   depends_on:
  #     - frontend
  #     - gateway
  #   networks:
  #     - meeshy-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  translator_cache:
    driver: local
  translator_models:
    driver: local

networks:
  meeshy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
