# Meeshy - Production Docker Compose for Microservices Architecture
version: '3.8'

services:
  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: meeshy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-meeshy}
      POSTGRES_USER: ${POSTGRES_USER:-meeshy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-MeeshyP@ssword}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/prisma/migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-meeshy} -d ${POSTGRES_DB:-meeshy}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meeshy-network

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: meeshy-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meeshy-network

  # ===== TRANSLATOR SERVICE (FastAPI + ML) =====
  translator:
    build:
      context: .
      dockerfile: translator/Dockerfile
    container_name: meeshy-translator
    restart: unless-stopped
    # Resource limits for ML workloads
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    # Enable GPU support if available
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-meeshy}:${POSTGRES_PASSWORD:-MeeshyP@ssword}@postgres:5432/${POSTGRES_DB:-meeshy}
      REDIS_URL: redis://redis:6379
      GRPC_PORT: 50051
      HTTP_PORT: 8000
      ZMQ_PORT: 5555
      ML_BATCH_SIZE: 16
      SUPPORTED_LANGUAGES: "fr,en,es,de,pt,zh,ja,ar"
      DEFAULT_LANGUAGE: "fr"
      DEVICE: "cpu"
      PYTHONUNBUFFERED: 1
      MODELS_PATH: /app/models
      TORCH_HOME: /app/models
      HF_HOME: /app/models
      TRANSFORMERS_CACHE: /app/models
      GPU_MEMORY_FRACTION: "0.7"
      TRANSLATION_TIMEOUT: 60
      MAX_TEXT_LENGTH: 1000
      CONCURRENT_TRANSLATIONS: 5
    ports:
      - "${TRANSLATOR_HTTP_PORT:-8000}:8000"
      - "${TRANSLATOR_GRPC_PORT:-50051}:50051"
      - "${TRANSLATOR_ZMQ_PORT:-5555}:5555"
    volumes:
      - translator_cache:/app/cache
      - translator_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10)"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    networks:
      - meeshy-network

  # ===== GATEWAY SERVICE (Fastify + WebSocket) =====
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    container_name: meeshy-gateway
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-meeshy}:${POSTGRES_PASSWORD:-MeeshyP@ssword}@postgres:5432/${POSTGRES_DB:-meeshy}
      REDIS_URL: redis://redis:6379
      TRANSLATOR_GRPC_URL: translator:50051
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      CORS_ORIGIN: http://localhost:3100
      WS_MAX_CONNECTIONS: 100000
      NODE_ENV: production
    ports:
      - "${GATEWAY_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      translator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - meeshy-network

  # ===== FRONTEND SERVICE (Next.js) =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: meeshy-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://gateway:3000
      NEXT_PUBLIC_WS_URL: ws://gateway:3000
      PORT: 3100
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-3100}:3100"
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3100', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - meeshy-network

  # ===== NGINX REVERSE PROXY =====
  nginx:
    image: nginx:alpine
    container_name: meeshy-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - gateway
    networks:
      - meeshy-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  translator_cache:
    driver: local
  translator_models:
    driver: local

networks:
  meeshy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
