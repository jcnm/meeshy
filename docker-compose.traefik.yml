services:
  # Traefik Reverse Proxy with automatic SSL
  traefik:
    image: traefik:v3.3
    container_name: meeshy-traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=meeshy-network"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${CERTBOT_EMAIL:-admin@meeshy.me}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
      - ./config/dynamic.yaml:/dynamic.yaml:ro
    networks:
      - meeshy-network
    labels:
      - "traefik.enable=true"
      # Dashboard Traefik sur traefik.${DOMAIN}
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      # Authentification pour Traefik dashboard
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USERS:-admin:$$2y$$10$$K.KmJz8WCBxWciXuNGmg6OunyBw6qZY9.x5VJsQu0KaOd7L3EiGti}"

  # Database Service
  database:
    image: ${DATABASE_IMAGE:-mongo:8.0}
    container_name: meeshy-database
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all --noauth
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-meeshy}
    volumes:
      - database_data:/data/db
      - database_config:/data/configdb
      - ./shared/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh:ro
      - ./shared/init-mongodb-replica.sh:/docker-entrypoint-initdb.d/init-mongodb-replica.sh:ro
      - ./shared/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./shared/init-postgresql.sql:/docker-entrypoint-initdb.d/init-postgresql.sql:ro
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh mongodb://localhost:27017/${MONGODB_DATABASE:-meeshy} --quiet || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NoSQLClient - Interface MongoDB sur mongo.${DOMAIN}
  nosqlclient:
    image: mongoclient/mongoclient:latest
    container_name: meeshy-nosqlclient
    restart: unless-stopped
    environment:
      MONGOCLIENT_DEFAULT_CONNECTION_URL: "mongodb://${MONGODB_USER:-meeshy}:${MONGODB_PASSWORD:-MeeshyPassword123}@database:27017/${MONGODB_DATABASE:-meeshy}?authSource=admin"
      ROOT_URL: "https://mongo.${DOMAIN:-localhost}"
      PORT: 3000
    depends_on:
      database:
        condition: service_healthy
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nosqlclient.rule=Host(`mongo.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.nosqlclient.entrypoints=websecure"
      - "traefik.http.routers.nosqlclient.tls.certresolver=letsencrypt"
      - "traefik.http.services.nosqlclient.loadbalancer.server.port=3000"
      - "traefik.http.routers.nosqlclient.middlewares=mongo-auth"
      # Authentification pour MongoDB interface
      - "traefik.http.middlewares.mongo-auth.basicauth.users=${MONGO_USERS:-admin:$$2y$$10$$K.KmJz8WCBxWciXuNGmg6OunyBw6qZY9.x5VJsQu0KaOd7L3EiGti}"

  # Redis Cache
  redis:
    image: redis:8-alpine
    container_name: meeshy-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # P3X Redis UI - Interface Redis sur redis.${DOMAIN}
  p3x-redis-ui:
    image: patrikx3/p3x-redis-ui:latest
    container_name: meeshy-p3x-redis-ui
    restart: unless-stopped
    environment:
      - P3X_REDIS_UI_SETTINGS={"hostname":"redis","port":6379,"password":"","database":0}
      - P3X_REDIS_UI_HTTP_PORT=7843
      - P3XRS_SETTINGS_PATH=/settings
    volumes:
      - redis-ui-data:/settings
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :7843 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.p3x-redis.rule=Host(`redis.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.p3x-redis.entrypoints=websecure"
      - "traefik.http.routers.p3x-redis.tls.certresolver=letsencrypt"
      - "traefik.http.services.p3x-redis.loadbalancer.server.port=7843"
      - "traefik.http.routers.p3x-redis.middlewares=redis-auth"
      # Authentification pour Redis interface
      - "traefik.http.middlewares.redis-auth.basicauth.users=${REDIS_USERS:-admin:$$2y$$10$$K.KmJz8WCBxWciXuNGmg6OunyBw6qZY9.x5VJsQu0KaOd7L3EiGti}"

  # Translator Service sur ml.${DOMAIN}
  translator:
    image: ${TRANSLATOR_IMAGE:-isopen/meeshy-translator:1.0.37-alpha}
    container_name: meeshy-translator
    restart: unless-stopped
    environment:
      - DATABASE_TYPE=${DATABASE_TYPE:-MONGODB}
      - DATABASE_URL=${DATABASE_URL}
      - PRISMA_SCHEMA_PATH=${PRISMA_SCHEMA_PATH}
      - PYTHONPATH=/workspace:/workspace/generated
      - PYTHONUNBUFFERED=1
      - NODE_ENV=production
    volumes:
      - models_data:/workspace/models
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "traefik.enable=true"
      # Service ML sur ml.${DOMAIN}
      - "traefik.http.routers.translator.rule=Host(`ml.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.translator.entrypoints=websecure"
      - "traefik.http.routers.translator.tls.certresolver=letsencrypt"
      - "traefik.http.services.translator.loadbalancer.server.port=8000"
      # Pas d'authentification pour ML service

  # Gateway Service sur gate.${DOMAIN}
  gateway:
    image: ${GATEWAY_IMAGE:-isopen/meeshy-gateway:1.0.37-alpha}
    container_name: meeshy-gateway
    restart: unless-stopped
    environment:
      - DATABASE_TYPE=${DATABASE_TYPE:-MONGODB}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - TRANSLATOR_URL=http://translator:8000
      - ZMQ_PUSH_URL=tcp://translator:5555
      - ZMQ_SUB_URL=tcp://translator:5558
      - NODE_ENV=production
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      # API Gateway sur gate.${DOMAIN}
      - "traefik.http.routers.gateway.rule=Host(`gate.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.gateway.entrypoints=websecure"
      - "traefik.http.routers.gateway.tls.certresolver=letsencrypt"
      - "traefik.http.services.gateway.loadbalancer.server.port=3000"

  # Frontend Service sur ${DOMAIN}
  frontend:
    image: ${FRONTEND_IMAGE:-isopen/meeshy-frontend:1.0.37-alpha}
    container_name: meeshy-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=https://gate.${DOMAIN:-localhost}
      - NEXT_PUBLIC_WS_URL=wss://gate.${DOMAIN:-localhost}
      - NEXT_PUBLIC_TRANSLATION_URL=https://ml.${DOMAIN:-localhost}/translate
      - NEXT_PUBLIC_BACKEND_URL=https://gate.${DOMAIN:-localhost}
      - NEXT_PUBLIC_FRONTEND_URL=https://${DOMAIN:-localhost}
      - NEXT_PUBLIC_DISABLE_CLIENT_TRANSLATION=${NEXT_PUBLIC_DISABLE_CLIENT_TRANSLATION:-true}
      - NEXT_PUBLIC_USE_API_TRANSLATION_ONLY=${NEXT_PUBLIC_USE_API_TRANSLATION_ONLY:-true}
      - NEXT_PUBLIC_DEBUG_LOGS=${NEXT_PUBLIC_DEBUG_LOGS:-false}
      - NODE_ENV=production
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - meeshy-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://0.0.0.0:3100"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      # Frontend principal sur ${DOMAIN} et www.${DOMAIN}
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN:-localhost}`) || Host(`www.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3100"
      - "traefik.http.routers.frontend.priority=1"

volumes:
  database_data:
  database_config:
  redis_data:
  redis-ui-data:
  traefik_certs:
  models_data:

networks:
  meeshy-network:
    driver: bridge