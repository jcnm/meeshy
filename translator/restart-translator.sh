#!/bin/bash

# Script de red√©marrage optimis√© pour le service de traduction Meeshy
# Inclut des optimisations pour les mod√®les ML

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîÑ [DOCKER] Red√©marrage optimis√© du service de traduction Meeshy${NC}"
echo "=============================================="

# Variables
CONTAINER_NAME="translator"
SERVICE_NAME="translator"

# Fonction de log
log() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Arr√™t propre du service
echo -e "${BLUE}üõë Arr√™t du service de traduction...${NC}"
if docker ps | grep -q "$CONTAINER_NAME"; then
    log "Arr√™t du conteneur $CONTAINER_NAME"
    docker stop $CONTAINER_NAME
    sleep 5
else
    warn "Conteneur $CONTAINER_NAME non trouv√© (d√©j√† arr√™t√©)"
fi

# 2. Nettoyage des ressources
echo -e "${BLUE}üßπ Nettoyage des ressources...${NC}"
docker system prune -f --volumes=false
log "Nettoyage des ressources termin√©"

# 3. V√©rification de la configuration Docker
echo -e "${BLUE}‚öôÔ∏è V√©rification de la configuration...${NC}"
if [ ! -f "docker-compose.yml" ]; then
    error "docker-compose.yml non trouv√©"
    exit 1
fi

# 4. Red√©marrage avec optimisations
echo -e "${BLUE}üöÄ Red√©marrage du service avec optimisations...${NC}"
docker-compose up -d $SERVICE_NAME

# 5. Attendre le d√©marrage
echo -e "${BLUE}‚è≥ Attente du d√©marrage (peut prendre plusieurs minutes pour les mod√®les ML)...${NC}"
sleep 30

# 6. V√©rification de l'√©tat
echo -e "${BLUE}üîç V√©rification de l'√©tat du service...${NC}"
for i in {1..12}; do
    if docker ps | grep -q "$CONTAINER_NAME" && docker logs --tail=10 $CONTAINER_NAME 2>/dev/null | grep -q "‚úÖ"; then
        log "Service d√©marr√© avec succ√®s"
        break
    else
        warn "Attente... ($i/12)"
        sleep 30
    fi
done

# 7. Test de connectivit√©
echo -e "${BLUE}üåê Test de connectivit√©...${NC}"
if curl -s http://localhost:8000/health >/dev/null 2>&1; then
    log "API accessible"
else
    warn "API non encore accessible (normal pendant le chargement des mod√®les)"
fi

# 8. Affichage des logs r√©cents
echo -e "${BLUE}üìù Logs r√©cents...${NC}"
docker logs --tail=20 $CONTAINER_NAME

# 9. Informations finales
echo -e "${GREEN}‚úÖ Red√©marrage termin√©${NC}"
echo ""
echo -e "${BLUE}üí° Informations importantes:${NC}"
echo "‚Ä¢ Le chargement des mod√®les ML peut prendre 2-5 minutes"
echo "‚Ä¢ Surveillez les logs: docker logs -f $CONTAINER_NAME"
echo "‚Ä¢ Test de traduction: curl -X POST http://localhost:8000/translate -H 'Content-Type: application/json' -d '{\"text\":\"Hello\",\"source_language\":\"en\",\"target_language\":\"fr\",\"model_type\":\"basic\"}'"
echo "‚Ä¢ Diagnostic complet: ./docker-diagnostic.sh"

# 10. Monitoring optionnel
read -p "Voulez-vous surveiller les logs en temps r√©el? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}üì∫ Surveillance des logs...${NC}"
    docker logs -f $CONTAINER_NAME
fi
