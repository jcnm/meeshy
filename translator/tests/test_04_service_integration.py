#!/usr/bin/env python3
"""
Test 04 - Int√©gration avec le service de traduction
Niveau: Expert - Test de l'int√©gration compl√®te
"""

import sys
import os
import logging
import asyncio

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

try:
    from services.quantized_ml_service import QuantizedMLService
    from utils.model_utils import create_model_manager
    from config.settings import get_settings
    SERVICE_AVAILABLE = True
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è Service non disponible: {e}")
    SERVICE_AVAILABLE = False

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_service_creation():
    """Test de cr√©ation du service de traduction"""
    logger.info("üß™ Test 04.1: Cr√©ation du service de traduction")
    
    if not SERVICE_AVAILABLE:
        logger.warning("‚ö†Ô∏è Service non disponible, test ignor√©")
        return True
    
    try:
        # Cr√©er le service
        service = QuantizedMLService(model_type="basic", quantization_level="float16")
        
        # V√©rifier les attributs essentiels
        assert hasattr(service, 'model_manager')
        assert hasattr(service, 'initialize')
        assert hasattr(service, 'translate')
        assert hasattr(service, 'get_models_status')
        
        logger.info("‚úÖ Service de traduction cr√©√© avec succ√®s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation service: {e}")
        return False

async def test_model_verification_integration():
    """Test de l'int√©gration de la v√©rification des mod√®les"""
    logger.info("üß™ Test 04.2: Int√©gration de la v√©rification des mod√®les")
    
    if not SERVICE_AVAILABLE:
        logger.warning("‚ö†Ô∏è Service non disponible, test ignor√©")
        return True
    
    try:
        # Cr√©er le service
        service = QuantizedMLService(model_type="all", quantization_level="float16")
        
        # V√©rifier le statut des mod√®les
        models_status = service.get_models_status()
        
        logger.info("üìä Statut des mod√®les dans le service:")
        for model_name, status in models_status.items():
            status_text = "‚úÖ Local" if status['local'] else "‚ùå Manquant"
            logger.info(f"  - {model_name}: {status_text}")
        
        # Compter les mod√®les disponibles
        local_count = sum(1 for status in models_status.values() if status['local'])
        total_count = len(models_status)
        
        logger.info(f"\nüìà R√©sum√©:")
        logger.info(f"  - Mod√®les disponibles: {local_count}/{total_count}")
        
        # Le test r√©ussit si au moins un mod√®le est disponible
        success = local_count > 0
        if success:
            logger.info("‚úÖ Int√©gration de la v√©rification r√©ussie")
        else:
            logger.warning("‚ö†Ô∏è Aucun mod√®le disponible dans le service")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Erreur int√©gration v√©rification: {e}")
        return False

async def test_service_initialization():
    """Test de l'initialisation du service"""
    logger.info("üß™ Test 04.3: Initialisation du service")
    
    if not SERVICE_AVAILABLE:
        logger.warning("‚ö†Ô∏è Service non disponible, test ignor√©")
        return True
    
    try:
        # Cr√©er le service avec un mod√®le simple
        service = QuantizedMLService(model_type="basic", quantization_level="float16")
        
        logger.info("üöÄ Initialisation du service...")
        
        # Initialiser le service
        success = await service.initialize()
        
        if success:
            logger.info("‚úÖ Service initialis√© avec succ√®s")
            
            # V√©rifier que les mod√®les sont charg√©s
            available_models = service.get_available_models()
            logger.info(f"üìã Mod√®les disponibles: {available_models}")
            
            # Nettoyer le service
            await service.cleanup()
            logger.info("üßπ Service nettoy√©")
            
            return True
        else:
            logger.error("‚ùå √âchec de l'initialisation du service")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation service: {e}")
        return False

async def test_translation_with_local_models():
    """Test de traduction avec des mod√®les locaux"""
    logger.info("üß™ Test 04.4: Traduction avec mod√®les locaux")
    
    if not SERVICE_AVAILABLE:
        logger.warning("‚ö†Ô∏è Service non disponible, test ignor√©")
        return True
    
    try:
        # Cr√©er le service
        service = QuantizedMLService(model_type="basic", quantization_level="float16")
        
        # V√©rifier d'abord les mod√®les disponibles
        models_status = service.get_models_status()
        local_models = [name for name, status in models_status.items() if status['local']]
        
        if not local_models:
            logger.warning("‚ö†Ô∏è Aucun mod√®le local disponible pour la traduction")
            return True  # Test r√©ussi car pas d'erreur
        
        logger.info(f"üìù Test de traduction avec {len(local_models)} mod√®le(s) local(aux)")
        
        # Initialiser le service
        init_success = await service.initialize()
        if not init_success:
            logger.error("‚ùå Impossible d'initialiser le service pour la traduction")
            return False
        
        # Test de traduction simple
        test_text = "Hello, how are you?"
        result = await service.translate(test_text, "en", "fr", "basic")
        
        if result and 'translated_text' in result:
            translated = result['translated_text']
            logger.info(f"‚úÖ Traduction r√©ussie:")
            logger.info(f"  - Original: {test_text}")
            logger.info(f"  - Traduit: {translated}")
            logger.info(f"  - Mod√®le utilis√©: {result.get('model_used', 'N/A')}")
            
            # Nettoyer le service
            await service.cleanup()
            return True
        else:
            logger.error("‚ùå √âchec de la traduction")
            await service.cleanup()
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Erreur traduction: {e}")
        return False

async def run_all_tests():
    """Ex√©cute tous les tests d'int√©gration"""
    logger.info("üöÄ D√©marrage des tests d'int√©gration (Test 04)")
    logger.info("=" * 50)
    
    tests = [
        ("Cr√©ation du service", test_service_creation),
        ("Int√©gration v√©rification", test_model_verification_integration),
        ("Initialisation du service", test_service_initialization),
        ("Traduction avec mod√®les locaux", test_translation_with_local_models),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã {test_name}...")
        
        # Ex√©cuter le test (synchrone ou asynchrone)
        if asyncio.iscoroutinefunction(test_func):
            result = await test_func()
        else:
            result = test_func()
        
        if result:
            passed += 1
            logger.info(f"‚úÖ {test_name} - R√âUSSI")
        else:
            logger.error(f"‚ùå {test_name} - √âCHOU√â")
    
    logger.info("\n" + "=" * 50)
    logger.info(f"üìä R√©sultats Test 04: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        logger.info("üéâ Tous les tests d'int√©gration ont r√©ussi!")
        return True
    else:
        logger.error(f"üí• {total - passed} test(s) ont √©chou√©")
        return False

if __name__ == "__main__":
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)
