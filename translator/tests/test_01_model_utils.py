#!/usr/bin/env python3
"""
Test 01 - Utilitaires de base du gestionnaire de mod√®les
Niveau: Simple - V√©rification des fonctions de base
"""

import sys
import os
import logging

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

try:
    from utils.model_utils import create_model_manager
    from config.settings import get_settings
    UTILS_AVAILABLE = True
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è Utilitaires non disponibles: {e}")
    UTILS_AVAILABLE = False

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_model_manager_creation():
    """Test de cr√©ation du gestionnaire de mod√®les"""
    logger.info("üß™ Test 01.1: Cr√©ation du gestionnaire de mod√®les")
    
    if not UTILS_AVAILABLE:
        logger.warning("‚ö†Ô∏è Utilitaires non disponibles, test ignor√©")
        return True
    
    try:
        settings = get_settings()
        manager = create_model_manager(settings.models_path)
        
        assert manager is not None
        assert hasattr(manager, 'models_path')
        assert hasattr(manager, 'is_model_downloaded')
        assert hasattr(manager, 'download_model_if_needed')
        
        logger.info("‚úÖ Gestionnaire de mod√®les cr√©√© avec succ√®s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation gestionnaire: {e}")
        return False

def test_model_path_generation():
    """Test de g√©n√©ration des chemins de mod√®les"""
    logger.info("üß™ Test 01.2: G√©n√©ration des chemins de mod√®les")
    
    if not UTILS_AVAILABLE:
        logger.warning("‚ö†Ô∏è Utilitaires non disponibles, test ignor√©")
        return True
    
    try:
        settings = get_settings()
        manager = create_model_manager(settings.models_path)
        
        # Test avec diff√©rents formats de noms
        test_models = [
            "facebook/nllb-200-distilled-600M",
            "Helsinki-NLP/opus-mt-en-fr",
            "t5-small"
        ]
        
        for model_name in test_models:
            path = manager.get_model_local_path(model_name)
            assert path is not None
            assert isinstance(path, type(manager.models_path))
            logger.info(f"  ‚úÖ Chemin g√©n√©r√© pour {model_name}: {path}")
        
        logger.info("‚úÖ G√©n√©ration des chemins r√©ussie")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration chemins: {e}")
        return False

def test_model_info_retrieval():
    """Test de r√©cup√©ration des informations de mod√®les"""
    logger.info("üß™ Test 01.3: R√©cup√©ration des informations de mod√®les")
    
    if not UTILS_AVAILABLE:
        logger.warning("‚ö†Ô∏è Utilitaires non disponibles, test ignor√©")
        return True
    
    try:
        settings = get_settings()
        manager = create_model_manager(settings.models_path)
        
        # Test avec un mod√®le connu
        model_name = "facebook/nllb-200-distilled-600M"
        info = manager.get_model_info(model_name)
        
        assert info is not None
        assert 'id' in info
        assert 'size' in info
        assert 'downloads' in info
        
        logger.info(f"‚úÖ Informations r√©cup√©r√©es pour {model_name}")
        logger.info(f"  - ID: {info['id']}")
        logger.info(f"  - Taille: {info.get('size', 0)} bytes")
        logger.info(f"  - T√©l√©chargements: {info.get('downloads', 0)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration infos: {e}")
        return False

def run_all_tests():
    """Ex√©cute tous les tests de base"""
    logger.info("üöÄ D√©marrage des tests de base (Test 01)")
    logger.info("=" * 50)
    
    tests = [
        ("Cr√©ation du gestionnaire", test_model_manager_creation),
        ("G√©n√©ration des chemins", test_model_path_generation),
        ("R√©cup√©ration des infos", test_model_info_retrieval),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã {test_name}...")
        if test_func():
            passed += 1
            logger.info(f"‚úÖ {test_name} - R√âUSSI")
        else:
            logger.error(f"‚ùå {test_name} - √âCHOU√â")
    
    logger.info("\n" + "=" * 50)
    logger.info(f"üìä R√©sultats Test 01: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        logger.info("üéâ Tous les tests de base ont r√©ussi!")
        return True
    else:
        logger.error(f"üí• {total - passed} test(s) ont √©chou√©")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
