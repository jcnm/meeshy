# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from ._builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class User(bases.BaseUser):
    """Utilisateur enregistrÃ© de la plateforme
    """

    id: _str
    username: _str
    firstName: _str
    lastName: _str
    email: _str
    phoneNumber: Optional[_str] = None
    password: _str
    displayName: Optional[_str] = None
    avatar: Optional[_str] = None
    isOnline: _bool
    lastSeen: datetime.datetime
    lastActiveAt: datetime.datetime
    systemLanguage: _str
    regionalLanguage: _str
    customDestinationLanguage: Optional[_str] = None
    autoTranslateEnabled: _bool
    translateToSystemLanguage: _bool
    translateToRegionalLanguage: _bool
    useCustomDestination: _bool
    role: _str
    """USER, ADMIN, MODO, AUDIT, ANALYST, BIGBOSS
    """

    isActive: _bool
    deactivatedAt: Optional[datetime.datetime] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    createdCommunities: Optional[List['models.Community']] = None
    communityMemberships: Optional[List['models.CommunityMember']] = None
    conversations: Optional[List['models.ConversationMember']] = None
    conversationPreferences: Optional[List['models.ConversationPreference']] = None
    createdShareLinks: Optional[List['models.ConversationShareLink']] = None
    receivedFriendRequests: Optional[List['models.FriendRequest']] = None
    sentFriendRequests: Optional[List['models.FriendRequest']] = None
    messageReadStatus: Optional[List['models.MessageReadStatus']] = None
    sentMessages: Optional[List['models.Message']] = None
    notifications: Optional[List['models.Notification']] = None
    typingIndicators: Optional[List['models.TypingIndicator']] = None
    preferences: Optional[List['models.UserPreference']] = None
    stats: Optional['models.UserStats'] = None
    communityAdmins: Optional[List['models.CommunityAdmin']] = None
    communityModerators: Optional[List['models.CommunityModerator']] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserKeys']] = None,
        exclude: Optional[Iterable['types.UserKeys']] = None,
        required: Optional[Iterable['types.UserKeys']] = None,
        optional: Optional[Iterable['types.UserKeys']] = None,
        relations: Optional[Mapping['types.UserRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.UserKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _User_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _User_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _User_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _User_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _User_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _User_relational_fields:
                        raise errors.UnknownRelationalFieldError('User', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid User / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'User',
            }
        )
        _created_partial_types.add(name)


class Conversation(bases.BaseConversation):
    """Conversation entre utilisateurs (direct, group, public, global)
    """

    id: _str
    identifier: Optional[_str] = None
    """Identifiant lisible par l'homme (ex: "meeshy", "general", "support")
    """

    type: _str
    """direct, group, public, global
    """

    title: Optional[_str] = None
    description: Optional[_str] = None
    image: Optional[_str] = None
    avatar: Optional[_str] = None
    communityId: Optional[_str] = None
    isActive: _bool
    isArchived: _bool
    lastMessageAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    anonymousParticipants: Optional[List['models.AnonymousParticipant']] = None
    members: Optional[List['models.ConversationMember']] = None
    preferences: Optional[List['models.ConversationPreference']] = None
    shareLinks: Optional[List['models.ConversationShareLink']] = None
    community: Optional['models.Community'] = None
    messages: Optional[List['models.Message']] = None
    typingIndicators: Optional[List['models.TypingIndicator']] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ConversationKeys']] = None,
        exclude: Optional[Iterable['types.ConversationKeys']] = None,
        required: Optional[Iterable['types.ConversationKeys']] = None,
        optional: Optional[Iterable['types.ConversationKeys']] = None,
        relations: Optional[Mapping['types.ConversationRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ConversationKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Conversation_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Conversation_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Conversation_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Conversation_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Conversation_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Conversation_relational_fields:
                        raise errors.UnknownRelationalFieldError('Conversation', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Conversation / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Conversation',
            }
        )
        _created_partial_types.add(name)


class ConversationMember(bases.BaseConversationMember):
    """Appartenance d'un utilisateur Ã  une conversation
    """

    id: _str
    conversationId: _str
    userId: _str
    role: _str
    """admin, moderator, member
    """

    canSendMessage: _bool
    canSendFiles: _bool
    canSendImages: _bool
    canSendVideos: _bool
    canSendAudios: _bool
    canSendLocations: _bool
    canSendLinks: _bool
    joinedAt: datetime.datetime
    leftAt: Optional[datetime.datetime] = None
    isActive: _bool
    user: Optional['models.User'] = None
    conversation: Optional['models.Conversation'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ConversationMemberKeys']] = None,
        exclude: Optional[Iterable['types.ConversationMemberKeys']] = None,
        required: Optional[Iterable['types.ConversationMemberKeys']] = None,
        optional: Optional[Iterable['types.ConversationMemberKeys']] = None,
        relations: Optional[Mapping['types.ConversationMemberRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ConversationMemberKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _ConversationMember_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _ConversationMember_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _ConversationMember_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _ConversationMember_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _ConversationMember_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _ConversationMember_relational_fields:
                        raise errors.UnknownRelationalFieldError('ConversationMember', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid ConversationMember / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'ConversationMember',
            }
        )
        _created_partial_types.add(name)


class ConversationShareLink(bases.BaseConversationShareLink):
    """Lien de partage pour accÃ¨s anonyme Ã  une conversation
    """

    id: _str
    linkId: _str
    identifier: Optional[_str] = None
    """Identifiant lisible par l'homme (ex: "meeshy-public", "support-link")
    """

    conversationId: _str
    createdBy: _str
    name: Optional[_str] = None
    description: Optional[_str] = None
    maxUses: Optional[_int] = None
    currentUses: _int
    maxConcurrentUsers: Optional[_int] = None
    currentConcurrentUsers: _int
    maxUniqueSessions: Optional[_int] = None
    currentUniqueSessions: _int
    expiresAt: Optional[datetime.datetime] = None
    isActive: _bool
    allowAnonymousMessages: _bool
    allowAnonymousFiles: _bool
    allowAnonymousImages: _bool
    allowViewHistory: _bool
    requireNickname: _bool
    requireEmail: _bool
    allowedCountries: List[_str]
    allowedLanguages: List[_str]
    allowedIpRanges: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    anonymousParticipants: Optional[List['models.AnonymousParticipant']] = None
    creator: Optional['models.User'] = None
    conversation: Optional['models.Conversation'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )

    @field_validator('allowedCountries', 'allowedLanguages', 'allowedIpRanges', pre=True, allow_reuse=True)
    @classmethod
    def _transform_required_list_fields(cls, value: object) -> object:
        # When using raw queries, some databases will return `None` for an array field that has not been set yet.
        #
        # In our case we want to use an empty list instead as that is the internal Prisma behaviour and we want
        # to use the same consistent structure between the core ORM and raw queries. For example, if we updated
        # our type definitions to include `None` for `List` fields then it would be misleading as it will only
        # ever be `None` in raw queries.
        if value is None:
            return []

        return value

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ConversationShareLinkKeys']] = None,
        exclude: Optional[Iterable['types.ConversationShareLinkKeys']] = None,
        required: Optional[Iterable['types.ConversationShareLinkKeys']] = None,
        optional: Optional[Iterable['types.ConversationShareLinkKeys']] = None,
        relations: Optional[Mapping['types.ConversationShareLinkRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ConversationShareLinkKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _ConversationShareLink_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _ConversationShareLink_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _ConversationShareLink_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _ConversationShareLink_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _ConversationShareLink_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _ConversationShareLink_relational_fields:
                        raise errors.UnknownRelationalFieldError('ConversationShareLink', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid ConversationShareLink / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'ConversationShareLink',
            }
        )
        _created_partial_types.add(name)


class AnonymousParticipant(bases.BaseAnonymousParticipant):
    """Participant anonyme via lien de partage
    """

    id: _str
    conversationId: _str
    shareLinkId: _str
    firstName: _str
    lastName: _str
    username: _str
    email: Optional[_str] = None
    sessionToken: _str
    ipAddress: Optional[_str] = None
    country: Optional[_str] = None
    language: _str
    deviceFingerprint: Optional[_str] = None
    isActive: _bool
    isOnline: _bool
    lastActiveAt: datetime.datetime
    canSendMessages: _bool
    canSendFiles: _bool
    canSendImages: _bool
    joinedAt: datetime.datetime
    lastSeenAt: datetime.datetime
    leftAt: Optional[datetime.datetime] = None
    shareLink: Optional['models.ConversationShareLink'] = None
    conversation: Optional['models.Conversation'] = None
    sentMessages: Optional[List['models.Message']] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.AnonymousParticipantKeys']] = None,
        exclude: Optional[Iterable['types.AnonymousParticipantKeys']] = None,
        required: Optional[Iterable['types.AnonymousParticipantKeys']] = None,
        optional: Optional[Iterable['types.AnonymousParticipantKeys']] = None,
        relations: Optional[Mapping['types.AnonymousParticipantRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.AnonymousParticipantKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _AnonymousParticipant_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _AnonymousParticipant_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _AnonymousParticipant_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _AnonymousParticipant_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _AnonymousParticipant_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _AnonymousParticipant_relational_fields:
                        raise errors.UnknownRelationalFieldError('AnonymousParticipant', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid AnonymousParticipant / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'AnonymousParticipant',
            }
        )
        _created_partial_types.add(name)


class Message(bases.BaseMessage):
    """Message dans une conversation
    """

    id: _str
    conversationId: _str
    senderId: Optional[_str] = None
    anonymousSenderId: Optional[_str] = None
    content: _str
    originalLanguage: _str
    messageType: _str
    """text, image, file, audio, video, location, system
    """

    isEdited: _bool
    editedAt: Optional[datetime.datetime] = None
    isDeleted: _bool
    deletedAt: Optional[datetime.datetime] = None
    replyToId: Optional[_str] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    readStatus: Optional[List['models.MessageReadStatus']] = None
    translations: Optional[List['models.MessageTranslation']] = None
    replyTo: Optional['models.Message'] = None
    replies: Optional[List['models.Message']] = None
    anonymousSender: Optional['models.AnonymousParticipant'] = None
    sender: Optional['models.User'] = None
    conversation: Optional['models.Conversation'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MessageKeys']] = None,
        exclude: Optional[Iterable['types.MessageKeys']] = None,
        required: Optional[Iterable['types.MessageKeys']] = None,
        optional: Optional[Iterable['types.MessageKeys']] = None,
        relations: Optional[Mapping['types.MessageRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MessageKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Message_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Message_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Message_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Message_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Message_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Message_relational_fields:
                        raise errors.UnknownRelationalFieldError('Message', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Message / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Message',
            }
        )
        _created_partial_types.add(name)


class MessageTranslation(bases.BaseMessageTranslation):
    """Traduction d'un message
    """

    id: _str
    messageId: _str
    sourceLanguage: _str
    targetLanguage: _str
    translatedContent: _str
    translationModel: _str
    cacheKey: _str
    confidenceScore: Optional[_float] = None
    createdAt: datetime.datetime
    message: Optional['models.Message'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MessageTranslationKeys']] = None,
        exclude: Optional[Iterable['types.MessageTranslationKeys']] = None,
        required: Optional[Iterable['types.MessageTranslationKeys']] = None,
        optional: Optional[Iterable['types.MessageTranslationKeys']] = None,
        relations: Optional[Mapping['types.MessageTranslationRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MessageTranslationKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _MessageTranslation_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _MessageTranslation_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _MessageTranslation_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _MessageTranslation_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _MessageTranslation_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _MessageTranslation_relational_fields:
                        raise errors.UnknownRelationalFieldError('MessageTranslation', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid MessageTranslation / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'MessageTranslation',
            }
        )
        _created_partial_types.add(name)


class MessageReadStatus(bases.BaseMessageReadStatus):
    """Statut de lecture d'un message par un utilisateur
    """

    id: _str
    messageId: _str
    userId: _str
    readAt: datetime.datetime
    user: Optional['models.User'] = None
    message: Optional['models.Message'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MessageReadStatusKeys']] = None,
        exclude: Optional[Iterable['types.MessageReadStatusKeys']] = None,
        required: Optional[Iterable['types.MessageReadStatusKeys']] = None,
        optional: Optional[Iterable['types.MessageReadStatusKeys']] = None,
        relations: Optional[Mapping['types.MessageReadStatusRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MessageReadStatusKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _MessageReadStatus_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _MessageReadStatus_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _MessageReadStatus_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _MessageReadStatus_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _MessageReadStatus_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _MessageReadStatus_relational_fields:
                        raise errors.UnknownRelationalFieldError('MessageReadStatus', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid MessageReadStatus / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'MessageReadStatus',
            }
        )
        _created_partial_types.add(name)


class FriendRequest(bases.BaseFriendRequest):
    """Demande d'amitiÃ© entre utilisateurs
    """

    id: _str
    senderId: _str
    receiverId: _str
    status: _str
    """pending, accepted, rejected, blocked
    """

    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    receiver: Optional['models.User'] = None
    sender: Optional['models.User'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.FriendRequestKeys']] = None,
        exclude: Optional[Iterable['types.FriendRequestKeys']] = None,
        required: Optional[Iterable['types.FriendRequestKeys']] = None,
        optional: Optional[Iterable['types.FriendRequestKeys']] = None,
        relations: Optional[Mapping['types.FriendRequestRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.FriendRequestKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _FriendRequest_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _FriendRequest_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _FriendRequest_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _FriendRequest_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _FriendRequest_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _FriendRequest_relational_fields:
                        raise errors.UnknownRelationalFieldError('FriendRequest', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid FriendRequest / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'FriendRequest',
            }
        )
        _created_partial_types.add(name)


class TypingIndicator(bases.BaseTypingIndicator):
    """Indicateur de frappe en cours pour des tests... A supprimer aprÃ¨s les tests
    """

    id: _str
    conversationId: _str
    userId: _str
    isTyping: _bool
    startedAt: datetime.datetime
    updatedAt: datetime.datetime
    user: Optional['models.User'] = None
    conversation: Optional['models.Conversation'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.TypingIndicatorKeys']] = None,
        exclude: Optional[Iterable['types.TypingIndicatorKeys']] = None,
        required: Optional[Iterable['types.TypingIndicatorKeys']] = None,
        optional: Optional[Iterable['types.TypingIndicatorKeys']] = None,
        relations: Optional[Mapping['types.TypingIndicatorRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.TypingIndicatorKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _TypingIndicator_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _TypingIndicator_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _TypingIndicator_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _TypingIndicator_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _TypingIndicator_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _TypingIndicator_relational_fields:
                        raise errors.UnknownRelationalFieldError('TypingIndicator', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid TypingIndicator / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'TypingIndicator',
            }
        )
        _created_partial_types.add(name)


class Notification(bases.BaseNotification):
    """Notification pour un utilisateur
    """

    id: _str
    userId: _str
    type: _str
    """new_conversation, new_message, message_edited, friend_request, etc.
    """

    title: _str
    content: _str
    data: Optional[_str] = None
    priority: _str
    isRead: _bool
    emailSent: _bool
    pushSent: _bool
    expiresAt: Optional[datetime.datetime] = None
    createdAt: datetime.datetime
    user: Optional['models.User'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.NotificationKeys']] = None,
        exclude: Optional[Iterable['types.NotificationKeys']] = None,
        required: Optional[Iterable['types.NotificationKeys']] = None,
        optional: Optional[Iterable['types.NotificationKeys']] = None,
        relations: Optional[Mapping['types.NotificationRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.NotificationKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Notification_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Notification_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Notification_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Notification_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Notification_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Notification_relational_fields:
                        raise errors.UnknownRelationalFieldError('Notification', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Notification / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Notification',
            }
        )
        _created_partial_types.add(name)


class Community(bases.BaseCommunity):
    """CommunautÃ© (reprÃ©sente une communautÃ© de conversation)
    """

    id: _str
    name: _str
    description: Optional[_str] = None
    avatar: Optional[_str] = None
    isPrivate: _bool
    createdBy: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    members: Optional[List['models.CommunityMember']] = None
    creator: Optional['models.User'] = None
    admins: Optional[List['models.CommunityAdmin']] = None
    moderators: Optional[List['models.CommunityModerator']] = None
    Conversation: Optional[List['models.Conversation']] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CommunityKeys']] = None,
        exclude: Optional[Iterable['types.CommunityKeys']] = None,
        required: Optional[Iterable['types.CommunityKeys']] = None,
        optional: Optional[Iterable['types.CommunityKeys']] = None,
        relations: Optional[Mapping['types.CommunityRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CommunityKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Community_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Community_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Community_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Community_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Community_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Community_relational_fields:
                        raise errors.UnknownRelationalFieldError('Community', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Community / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Community',
            }
        )
        _created_partial_types.add(name)


class CommunityMember(bases.BaseCommunityMember):
    """Appartenance aux communautÃ©s (legacy)
    """

    id: _str
    communityId: _str
    userId: _str
    joinedAt: datetime.datetime
    user: Optional['models.User'] = None
    community: Optional['models.Community'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CommunityMemberKeys']] = None,
        exclude: Optional[Iterable['types.CommunityMemberKeys']] = None,
        required: Optional[Iterable['types.CommunityMemberKeys']] = None,
        optional: Optional[Iterable['types.CommunityMemberKeys']] = None,
        relations: Optional[Mapping['types.CommunityMemberRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CommunityMemberKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _CommunityMember_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _CommunityMember_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _CommunityMember_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _CommunityMember_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _CommunityMember_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _CommunityMember_relational_fields:
                        raise errors.UnknownRelationalFieldError('CommunityMember', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid CommunityMember / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'CommunityMember',
            }
        )
        _created_partial_types.add(name)


class UserStats(bases.BaseUserStats):
    """Statistiques d'utilisation d'un utilisateur
    """

    id: _str
    userId: _str
    messagesSent: _int
    messagesReceived: _int
    charactersTyped: _int
    imageMessagesSent: _int
    filesShared: _int
    conversationsJoined: _int
    communitiesCreated: _int
    friendsAdded: _int
    friendRequestsSent: _int
    translationsUsed: _int
    languagesDetected: _int
    autoTranslateTimeMinutes: _int
    totalOnlineTimeMinutes: _int
    sessionCount: _int
    lastActiveAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: Optional['models.User'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserStatsKeys']] = None,
        exclude: Optional[Iterable['types.UserStatsKeys']] = None,
        required: Optional[Iterable['types.UserStatsKeys']] = None,
        optional: Optional[Iterable['types.UserStatsKeys']] = None,
        relations: Optional[Mapping['types.UserStatsRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.UserStatsKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _UserStats_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _UserStats_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _UserStats_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _UserStats_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _UserStats_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _UserStats_relational_fields:
                        raise errors.UnknownRelationalFieldError('UserStats', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid UserStats / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'UserStats',
            }
        )
        _created_partial_types.add(name)


class UserPreference(bases.BaseUserPreference):
    """PrÃ©fÃ©rence utilisateur gÃ©nÃ©rale
    """

    id: _str
    userId: _str
    key: _str
    value: _str
    valueType: _str
    description: Optional[_str] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: Optional['models.User'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserPreferenceKeys']] = None,
        exclude: Optional[Iterable['types.UserPreferenceKeys']] = None,
        required: Optional[Iterable['types.UserPreferenceKeys']] = None,
        optional: Optional[Iterable['types.UserPreferenceKeys']] = None,
        relations: Optional[Mapping['types.UserPreferenceRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.UserPreferenceKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _UserPreference_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _UserPreference_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _UserPreference_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _UserPreference_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _UserPreference_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _UserPreference_relational_fields:
                        raise errors.UnknownRelationalFieldError('UserPreference', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid UserPreference / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'UserPreference',
            }
        )
        _created_partial_types.add(name)


class ConversationPreference(bases.BaseConversationPreference):
    """PrÃ©fÃ©rence spÃ©cifique Ã  une conversation
    """

    id: _str
    conversationId: _str
    userId: _str
    key: _str
    value: _str
    valueType: _str
    description: Optional[_str] = None
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: Optional['models.User'] = None
    conversation: Optional['models.Conversation'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ConversationPreferenceKeys']] = None,
        exclude: Optional[Iterable['types.ConversationPreferenceKeys']] = None,
        required: Optional[Iterable['types.ConversationPreferenceKeys']] = None,
        optional: Optional[Iterable['types.ConversationPreferenceKeys']] = None,
        relations: Optional[Mapping['types.ConversationPreferenceRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ConversationPreferenceKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _ConversationPreference_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _ConversationPreference_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _ConversationPreference_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _ConversationPreference_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _ConversationPreference_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _ConversationPreference_relational_fields:
                        raise errors.UnknownRelationalFieldError('ConversationPreference', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid ConversationPreference / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'ConversationPreference',
            }
        )
        _created_partial_types.add(name)


class CommunityAdmin(bases.BaseCommunityAdmin):
    """Relation many-to-many pour les administrateurs de communautÃ©
    """

    id: _str
    communityId: _str
    userId: _str
    assignedAt: datetime.datetime
    user: Optional['models.User'] = None
    community: Optional['models.Community'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CommunityAdminKeys']] = None,
        exclude: Optional[Iterable['types.CommunityAdminKeys']] = None,
        required: Optional[Iterable['types.CommunityAdminKeys']] = None,
        optional: Optional[Iterable['types.CommunityAdminKeys']] = None,
        relations: Optional[Mapping['types.CommunityAdminRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CommunityAdminKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _CommunityAdmin_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _CommunityAdmin_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _CommunityAdmin_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _CommunityAdmin_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _CommunityAdmin_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _CommunityAdmin_relational_fields:
                        raise errors.UnknownRelationalFieldError('CommunityAdmin', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid CommunityAdmin / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'CommunityAdmin',
            }
        )
        _created_partial_types.add(name)


class CommunityModerator(bases.BaseCommunityModerator):
    """Relation many-to-many pour les modÃ©rateurs de communautÃ©
    """

    id: _str
    communityId: _str
    userId: _str
    assignedAt: datetime.datetime
    user: Optional['models.User'] = None
    community: Optional['models.Community'] = None

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass is not None:
            warnings.warn(
                'The `warn_subclass` argument is deprecated as it is no longer necessary and will be removed in the next release',
                DeprecationWarning,
                stacklevel=3,
            )


    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CommunityModeratorKeys']] = None,
        exclude: Optional[Iterable['types.CommunityModeratorKeys']] = None,
        required: Optional[Iterable['types.CommunityModeratorKeys']] = None,
        optional: Optional[Iterable['types.CommunityModeratorKeys']] = None,
        relations: Optional[Mapping['types.CommunityModeratorRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CommunityModeratorKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _CommunityModerator_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _CommunityModerator_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _CommunityModerator_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _CommunityModerator_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _CommunityModerator_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _CommunityModerator_relational_fields:
                        raise errors.UnknownRelationalFieldError('CommunityModerator', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid CommunityModerator / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'CommunityModerator',
            }
        )
        _created_partial_types.add(name)



_User_relational_fields: Set[str] = {
        'createdCommunities',
        'communityMemberships',
        'conversations',
        'conversationPreferences',
        'createdShareLinks',
        'receivedFriendRequests',
        'sentFriendRequests',
        'messageReadStatus',
        'sentMessages',
        'notifications',
        'typingIndicators',
        'preferences',
        'stats',
        'communityAdmins',
        'communityModerators',
    }
_User_fields: Dict['types.UserKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('username', {
            'name': 'username',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('firstName', {
            'name': 'firstName',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastName', {
            'name': 'lastName',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('phoneNumber', {
            'name': 'phoneNumber',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('password', {
            'name': 'password',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('displayName', {
            'name': 'displayName',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('avatar', {
            'name': 'avatar',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('isOnline', {
            'name': 'isOnline',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastSeen', {
            'name': 'lastSeen',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastActiveAt', {
            'name': 'lastActiveAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('systemLanguage', {
            'name': 'systemLanguage',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('regionalLanguage', {
            'name': 'regionalLanguage',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('customDestinationLanguage', {
            'name': 'customDestinationLanguage',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('autoTranslateEnabled', {
            'name': 'autoTranslateEnabled',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('translateToSystemLanguage', {
            'name': 'translateToSystemLanguage',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('translateToRegionalLanguage', {
            'name': 'translateToRegionalLanguage',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('useCustomDestination', {
            'name': 'useCustomDestination',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('role', {
            'name': 'role',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': '''USER, ADMIN, MODO, AUDIT, ANALYST, BIGBOSS''',
        }),
        ('isActive', {
            'name': 'isActive',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deactivatedAt', {
            'name': 'deactivatedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdCommunities', {
            'name': 'createdCommunities',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Community\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('communityMemberships', {
            'name': 'communityMemberships',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.CommunityMember\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversations', {
            'name': 'conversations',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.ConversationMember\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversationPreferences', {
            'name': 'conversationPreferences',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.ConversationPreference\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('createdShareLinks', {
            'name': 'createdShareLinks',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.ConversationShareLink\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('receivedFriendRequests', {
            'name': 'receivedFriendRequests',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.FriendRequest\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('sentFriendRequests', {
            'name': 'sentFriendRequests',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.FriendRequest\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('messageReadStatus', {
            'name': 'messageReadStatus',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.MessageReadStatus\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('sentMessages', {
            'name': 'sentMessages',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Message\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('notifications', {
            'name': 'notifications',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Notification\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('typingIndicators', {
            'name': 'typingIndicators',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.TypingIndicator\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('preferences', {
            'name': 'preferences',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.UserPreference\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('stats', {
            'name': 'stats',
            'is_list': False,
            'optional': True,
            'type': 'models.UserStats',
            'is_relational': True,
            'documentation': None,
        }),
        ('communityAdmins', {
            'name': 'communityAdmins',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.CommunityAdmin\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('communityModerators', {
            'name': 'communityModerators',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.CommunityModerator\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Conversation_relational_fields: Set[str] = {
        'anonymousParticipants',
        'members',
        'preferences',
        'shareLinks',
        'community',
        'messages',
        'typingIndicators',
    }
_Conversation_fields: Dict['types.ConversationKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('identifier', {
            'name': 'identifier',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': '''Identifiant lisible par l'homme (ex: "meeshy", "general", "support")''',
        }),
        ('type', {
            'name': 'type',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': '''direct, group, public, global''',
        }),
        ('title', {
            'name': 'title',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('image', {
            'name': 'image',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('avatar', {
            'name': 'avatar',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('communityId', {
            'name': 'communityId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('isActive', {
            'name': 'isActive',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('isArchived', {
            'name': 'isArchived',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastMessageAt', {
            'name': 'lastMessageAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('anonymousParticipants', {
            'name': 'anonymousParticipants',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.AnonymousParticipant\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('members', {
            'name': 'members',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.ConversationMember\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('preferences', {
            'name': 'preferences',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.ConversationPreference\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('shareLinks', {
            'name': 'shareLinks',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.ConversationShareLink\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('community', {
            'name': 'community',
            'is_list': False,
            'optional': True,
            'type': 'models.Community',
            'is_relational': True,
            'documentation': None,
        }),
        ('messages', {
            'name': 'messages',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Message\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('typingIndicators', {
            'name': 'typingIndicators',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.TypingIndicator\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_ConversationMember_relational_fields: Set[str] = {
        'user',
        'conversation',
    }
_ConversationMember_fields: Dict['types.ConversationMemberKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conversationId', {
            'name': 'conversationId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('role', {
            'name': 'role',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': '''admin, moderator, member''',
        }),
        ('canSendMessage', {
            'name': 'canSendMessage',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendFiles', {
            'name': 'canSendFiles',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendImages', {
            'name': 'canSendImages',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendVideos', {
            'name': 'canSendVideos',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendAudios', {
            'name': 'canSendAudios',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendLocations', {
            'name': 'canSendLocations',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendLinks', {
            'name': 'canSendLinks',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('joinedAt', {
            'name': 'joinedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('leftAt', {
            'name': 'leftAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('isActive', {
            'name': 'isActive',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversation', {
            'name': 'conversation',
            'is_list': False,
            'optional': True,
            'type': 'models.Conversation',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_ConversationShareLink_relational_fields: Set[str] = {
        'anonymousParticipants',
        'creator',
        'conversation',
    }
_ConversationShareLink_fields: Dict['types.ConversationShareLinkKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('linkId', {
            'name': 'linkId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('identifier', {
            'name': 'identifier',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': '''Identifiant lisible par l'homme (ex: "meeshy-public", "support-link")''',
        }),
        ('conversationId', {
            'name': 'conversationId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdBy', {
            'name': 'createdBy',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('maxUses', {
            'name': 'maxUses',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('currentUses', {
            'name': 'currentUses',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('maxConcurrentUsers', {
            'name': 'maxConcurrentUsers',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('currentConcurrentUsers', {
            'name': 'currentConcurrentUsers',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('maxUniqueSessions', {
            'name': 'maxUniqueSessions',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('currentUniqueSessions', {
            'name': 'currentUniqueSessions',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('expiresAt', {
            'name': 'expiresAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('isActive', {
            'name': 'isActive',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('allowAnonymousMessages', {
            'name': 'allowAnonymousMessages',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('allowAnonymousFiles', {
            'name': 'allowAnonymousFiles',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('allowAnonymousImages', {
            'name': 'allowAnonymousImages',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('allowViewHistory', {
            'name': 'allowViewHistory',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('requireNickname', {
            'name': 'requireNickname',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('requireEmail', {
            'name': 'requireEmail',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('allowedCountries', {
            'name': 'allowedCountries',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('allowedLanguages', {
            'name': 'allowedLanguages',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('allowedIpRanges', {
            'name': 'allowedIpRanges',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('anonymousParticipants', {
            'name': 'anonymousParticipants',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.AnonymousParticipant\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('creator', {
            'name': 'creator',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversation', {
            'name': 'conversation',
            'is_list': False,
            'optional': True,
            'type': 'models.Conversation',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_AnonymousParticipant_relational_fields: Set[str] = {
        'shareLink',
        'conversation',
        'sentMessages',
    }
_AnonymousParticipant_fields: Dict['types.AnonymousParticipantKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conversationId', {
            'name': 'conversationId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('shareLinkId', {
            'name': 'shareLinkId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('firstName', {
            'name': 'firstName',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastName', {
            'name': 'lastName',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('username', {
            'name': 'username',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('sessionToken', {
            'name': 'sessionToken',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('ipAddress', {
            'name': 'ipAddress',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('country', {
            'name': 'country',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('language', {
            'name': 'language',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('deviceFingerprint', {
            'name': 'deviceFingerprint',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('isActive', {
            'name': 'isActive',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('isOnline', {
            'name': 'isOnline',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastActiveAt', {
            'name': 'lastActiveAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendMessages', {
            'name': 'canSendMessages',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendFiles', {
            'name': 'canSendFiles',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('canSendImages', {
            'name': 'canSendImages',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('joinedAt', {
            'name': 'joinedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastSeenAt', {
            'name': 'lastSeenAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('leftAt', {
            'name': 'leftAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('shareLink', {
            'name': 'shareLink',
            'is_list': False,
            'optional': True,
            'type': 'models.ConversationShareLink',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversation', {
            'name': 'conversation',
            'is_list': False,
            'optional': True,
            'type': 'models.Conversation',
            'is_relational': True,
            'documentation': None,
        }),
        ('sentMessages', {
            'name': 'sentMessages',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Message\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Message_relational_fields: Set[str] = {
        'readStatus',
        'translations',
        'replyTo',
        'replies',
        'anonymousSender',
        'sender',
        'conversation',
    }
_Message_fields: Dict['types.MessageKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conversationId', {
            'name': 'conversationId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('senderId', {
            'name': 'senderId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('anonymousSenderId', {
            'name': 'anonymousSenderId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('content', {
            'name': 'content',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('originalLanguage', {
            'name': 'originalLanguage',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('messageType', {
            'name': 'messageType',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': '''text, image, file, audio, video, location, system''',
        }),
        ('isEdited', {
            'name': 'isEdited',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('editedAt', {
            'name': 'editedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('isDeleted', {
            'name': 'isDeleted',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('deletedAt', {
            'name': 'deletedAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('replyToId', {
            'name': 'replyToId',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('readStatus', {
            'name': 'readStatus',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.MessageReadStatus\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('translations', {
            'name': 'translations',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.MessageTranslation\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('replyTo', {
            'name': 'replyTo',
            'is_list': False,
            'optional': True,
            'type': 'models.Message',
            'is_relational': True,
            'documentation': None,
        }),
        ('replies', {
            'name': 'replies',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Message\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('anonymousSender', {
            'name': 'anonymousSender',
            'is_list': False,
            'optional': True,
            'type': 'models.AnonymousParticipant',
            'is_relational': True,
            'documentation': None,
        }),
        ('sender', {
            'name': 'sender',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversation', {
            'name': 'conversation',
            'is_list': False,
            'optional': True,
            'type': 'models.Conversation',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_MessageTranslation_relational_fields: Set[str] = {
        'message',
    }
_MessageTranslation_fields: Dict['types.MessageTranslationKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('messageId', {
            'name': 'messageId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('sourceLanguage', {
            'name': 'sourceLanguage',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('targetLanguage', {
            'name': 'targetLanguage',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('translatedContent', {
            'name': 'translatedContent',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('translationModel', {
            'name': 'translationModel',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('cacheKey', {
            'name': 'cacheKey',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('confidenceScore', {
            'name': 'confidenceScore',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('message', {
            'name': 'message',
            'is_list': False,
            'optional': True,
            'type': 'models.Message',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_MessageReadStatus_relational_fields: Set[str] = {
        'user',
        'message',
    }
_MessageReadStatus_fields: Dict['types.MessageReadStatusKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('messageId', {
            'name': 'messageId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('readAt', {
            'name': 'readAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('message', {
            'name': 'message',
            'is_list': False,
            'optional': True,
            'type': 'models.Message',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_FriendRequest_relational_fields: Set[str] = {
        'receiver',
        'sender',
    }
_FriendRequest_fields: Dict['types.FriendRequestKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('senderId', {
            'name': 'senderId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('receiverId', {
            'name': 'receiverId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('status', {
            'name': 'status',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': '''pending, accepted, rejected, blocked''',
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('receiver', {
            'name': 'receiver',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('sender', {
            'name': 'sender',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_TypingIndicator_relational_fields: Set[str] = {
        'user',
        'conversation',
    }
_TypingIndicator_fields: Dict['types.TypingIndicatorKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conversationId', {
            'name': 'conversationId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('isTyping', {
            'name': 'isTyping',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('startedAt', {
            'name': 'startedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversation', {
            'name': 'conversation',
            'is_list': False,
            'optional': True,
            'type': 'models.Conversation',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Notification_relational_fields: Set[str] = {
        'user',
    }
_Notification_fields: Dict['types.NotificationKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('type', {
            'name': 'type',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': '''new_conversation, new_message, message_edited, friend_request, etc.''',
        }),
        ('title', {
            'name': 'title',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('content', {
            'name': 'content',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('data', {
            'name': 'data',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('priority', {
            'name': 'priority',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('isRead', {
            'name': 'isRead',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('emailSent', {
            'name': 'emailSent',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('pushSent', {
            'name': 'pushSent',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('expiresAt', {
            'name': 'expiresAt',
            'is_list': False,
            'optional': True,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Community_relational_fields: Set[str] = {
        'members',
        'creator',
        'admins',
        'moderators',
        'Conversation',
    }
_Community_fields: Dict['types.CommunityKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('avatar', {
            'name': 'avatar',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('isPrivate', {
            'name': 'isPrivate',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdBy', {
            'name': 'createdBy',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('members', {
            'name': 'members',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.CommunityMember\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('creator', {
            'name': 'creator',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('admins', {
            'name': 'admins',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.CommunityAdmin\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('moderators', {
            'name': 'moderators',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.CommunityModerator\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('Conversation', {
            'name': 'Conversation',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Conversation\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_CommunityMember_relational_fields: Set[str] = {
        'user',
        'community',
    }
_CommunityMember_fields: Dict['types.CommunityMemberKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('communityId', {
            'name': 'communityId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('joinedAt', {
            'name': 'joinedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('community', {
            'name': 'community',
            'is_list': False,
            'optional': True,
            'type': 'models.Community',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_UserStats_relational_fields: Set[str] = {
        'user',
    }
_UserStats_fields: Dict['types.UserStatsKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('messagesSent', {
            'name': 'messagesSent',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('messagesReceived', {
            'name': 'messagesReceived',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('charactersTyped', {
            'name': 'charactersTyped',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('imageMessagesSent', {
            'name': 'imageMessagesSent',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('filesShared', {
            'name': 'filesShared',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('conversationsJoined', {
            'name': 'conversationsJoined',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('communitiesCreated', {
            'name': 'communitiesCreated',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('friendsAdded', {
            'name': 'friendsAdded',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('friendRequestsSent', {
            'name': 'friendRequestsSent',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('translationsUsed', {
            'name': 'translationsUsed',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('languagesDetected', {
            'name': 'languagesDetected',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('autoTranslateTimeMinutes', {
            'name': 'autoTranslateTimeMinutes',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('totalOnlineTimeMinutes', {
            'name': 'totalOnlineTimeMinutes',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('sessionCount', {
            'name': 'sessionCount',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('lastActiveAt', {
            'name': 'lastActiveAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_UserPreference_relational_fields: Set[str] = {
        'user',
    }
_UserPreference_fields: Dict['types.UserPreferenceKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('key', {
            'name': 'key',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('value', {
            'name': 'value',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('valueType', {
            'name': 'valueType',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_ConversationPreference_relational_fields: Set[str] = {
        'user',
        'conversation',
    }
_ConversationPreference_fields: Dict['types.ConversationPreferenceKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('conversationId', {
            'name': 'conversationId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('key', {
            'name': 'key',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('value', {
            'name': 'value',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('valueType', {
            'name': 'valueType',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('createdAt', {
            'name': 'createdAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('updatedAt', {
            'name': 'updatedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('conversation', {
            'name': 'conversation',
            'is_list': False,
            'optional': True,
            'type': 'models.Conversation',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_CommunityAdmin_relational_fields: Set[str] = {
        'user',
        'community',
    }
_CommunityAdmin_fields: Dict['types.CommunityAdminKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('communityId', {
            'name': 'communityId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('assignedAt', {
            'name': 'assignedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('community', {
            'name': 'community',
            'is_list': False,
            'optional': True,
            'type': 'models.Community',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_CommunityModerator_relational_fields: Set[str] = {
        'user',
        'community',
    }
_CommunityModerator_fields: Dict['types.CommunityModeratorKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('communityId', {
            'name': 'communityId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('userId', {
            'name': 'userId',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('assignedAt', {
            'name': 'assignedAt',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('user', {
            'name': 'user',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'is_relational': True,
            'documentation': None,
        }),
        ('community', {
            'name': 'community',
            'is_list': False,
            'optional': True,
            'type': 'models.Community',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(User)
model_rebuild(Conversation)
model_rebuild(ConversationMember)
model_rebuild(ConversationShareLink)
model_rebuild(AnonymousParticipant)
model_rebuild(Message)
model_rebuild(MessageTranslation)
model_rebuild(MessageReadStatus)
model_rebuild(FriendRequest)
model_rebuild(TypingIndicator)
model_rebuild(Notification)
model_rebuild(Community)
model_rebuild(CommunityMember)
model_rebuild(UserStats)
model_rebuild(UserPreference)
model_rebuild(ConversationPreference)
model_rebuild(CommunityAdmin)
model_rebuild(CommunityModerator)
