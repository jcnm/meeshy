# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BaseConversation(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Conversation']] = 'Conversation'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ConversationActions[_PrismaModelT]':
        from .client import get_client

        return actions.ConversationActions[_PrismaModelT](client or get_client(), cls)


class BaseConversationMember(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ConversationMember']] = 'ConversationMember'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ConversationMemberActions[_PrismaModelT]':
        from .client import get_client

        return actions.ConversationMemberActions[_PrismaModelT](client or get_client(), cls)


class BaseConversationShareLink(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ConversationShareLink']] = 'ConversationShareLink'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ConversationShareLinkActions[_PrismaModelT]':
        from .client import get_client

        return actions.ConversationShareLinkActions[_PrismaModelT](client or get_client(), cls)


class BaseAnonymousParticipant(_PrismaModel):
    __prisma_model__: ClassVar[Literal['AnonymousParticipant']] = 'AnonymousParticipant'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AnonymousParticipantActions[_PrismaModelT]':
        from .client import get_client

        return actions.AnonymousParticipantActions[_PrismaModelT](client or get_client(), cls)


class BaseMessage(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Message']] = 'Message'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MessageActions[_PrismaModelT]':
        from .client import get_client

        return actions.MessageActions[_PrismaModelT](client or get_client(), cls)


class BaseMessageTranslation(_PrismaModel):
    __prisma_model__: ClassVar[Literal['MessageTranslation']] = 'MessageTranslation'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MessageTranslationActions[_PrismaModelT]':
        from .client import get_client

        return actions.MessageTranslationActions[_PrismaModelT](client or get_client(), cls)


class BaseMessageReadStatus(_PrismaModel):
    __prisma_model__: ClassVar[Literal['MessageReadStatus']] = 'MessageReadStatus'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MessageReadStatusActions[_PrismaModelT]':
        from .client import get_client

        return actions.MessageReadStatusActions[_PrismaModelT](client or get_client(), cls)


class BaseFriendRequest(_PrismaModel):
    __prisma_model__: ClassVar[Literal['FriendRequest']] = 'FriendRequest'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.FriendRequestActions[_PrismaModelT]':
        from .client import get_client

        return actions.FriendRequestActions[_PrismaModelT](client or get_client(), cls)


class BaseTypingIndicator(_PrismaModel):
    __prisma_model__: ClassVar[Literal['TypingIndicator']] = 'TypingIndicator'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TypingIndicatorActions[_PrismaModelT]':
        from .client import get_client

        return actions.TypingIndicatorActions[_PrismaModelT](client or get_client(), cls)


class BaseNotification(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Notification']] = 'Notification'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.NotificationActions[_PrismaModelT]':
        from .client import get_client

        return actions.NotificationActions[_PrismaModelT](client or get_client(), cls)


class BaseCommunity(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Community']] = 'Community'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CommunityActions[_PrismaModelT]':
        from .client import get_client

        return actions.CommunityActions[_PrismaModelT](client or get_client(), cls)


class BaseCommunityMember(_PrismaModel):
    __prisma_model__: ClassVar[Literal['CommunityMember']] = 'CommunityMember'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CommunityMemberActions[_PrismaModelT]':
        from .client import get_client

        return actions.CommunityMemberActions[_PrismaModelT](client or get_client(), cls)


class BaseUserStats(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserStats']] = 'UserStats'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserStatsActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserStatsActions[_PrismaModelT](client or get_client(), cls)


class BaseUserPreference(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserPreference']] = 'UserPreference'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserPreferenceActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserPreferenceActions[_PrismaModelT](client or get_client(), cls)


class BaseConversationPreference(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ConversationPreference']] = 'ConversationPreference'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ConversationPreferenceActions[_PrismaModelT]':
        from .client import get_client

        return actions.ConversationPreferenceActions[_PrismaModelT](client or get_client(), cls)


class BaseCommunityAdmin(_PrismaModel):
    __prisma_model__: ClassVar[Literal['CommunityAdmin']] = 'CommunityAdmin'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CommunityAdminActions[_PrismaModelT]':
        from .client import get_client

        return actions.CommunityAdminActions[_PrismaModelT](client or get_client(), cls)


class BaseCommunityModerator(_PrismaModel):
    __prisma_model__: ClassVar[Literal['CommunityModerator']] = 'CommunityModerator'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CommunityModeratorActions[_PrismaModelT]':
        from .client import get_client

        return actions.CommunityModeratorActions[_PrismaModelT](client or get_client(), cls)


