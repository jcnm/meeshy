generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5

  binaryTargets = ["native"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// Utilisateur enregistré de la plateforme
model User {
  id                          String    @id @default(auto()) @map("_id") @db.ObjectId
  username                    String    @unique
  firstName                   String
  lastName                    String
  email                       String    @unique
  phoneNumber                 String?
  password                    String
  displayName                 String?
  avatar                      String?
  isOnline                    Boolean   @default(false)
  lastSeen                    DateTime  @default(now())
  lastActiveAt                DateTime  @default(now())
  systemLanguage              String    @default("fr")
  regionalLanguage            String    @default("fr")
  customDestinationLanguage   String?
  autoTranslateEnabled        Boolean   @default(true)
  translateToSystemLanguage   Boolean   @default(true)
  translateToRegionalLanguage Boolean   @default(false)
  useCustomDestination        Boolean   @default(false)
  /// USER, ADMIN, MODO, AUDIT, ANALYST, BIGBOSS
  role                        String    @default("USER")
  isActive                    Boolean   @default(true)
  deactivatedAt               DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  createdCommunities      Community[]              @relation("CommunityCreator")
  communityMemberships    CommunityMember[]
  conversations           ConversationMember[]
  conversationPreferences ConversationPreference[]
  createdShareLinks       ConversationShareLink[]  @relation("ShareLinkCreator")
  receivedFriendRequests  FriendRequest[]          @relation("FriendRequestReceiver")
  sentFriendRequests      FriendRequest[]          @relation("FriendRequestSender")
  messageReadStatus       MessageReadStatus[]
  sentMessages            Message[]                @relation("MessageSender")
  notifications           Notification[]
  typingIndicators        TypingIndicator[]
  preferences             UserPreference[]
  stats                   UserStats?
  communityAdmins         CommunityAdmin[]
  communityModerators     CommunityModerator[]
}

/// Conversation entre utilisateurs (direct, group, public, global)
model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  /// Identifiant lisible par l'homme (ex: "meeshy", "general", "support")
  identifier    String?  @unique
  /// direct, group, public, global
  type          String
  title         String?
  description   String?
  image         String?
  avatar        String?
  communityId   String?  @db.ObjectId
  isActive      Boolean  @default(true)
  isArchived    Boolean  @default(false)
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  anonymousParticipants AnonymousParticipant[]
  members               ConversationMember[]
  preferences           ConversationPreference[]
  shareLinks            ConversationShareLink[]
  community             Community?               @relation(fields: [communityId], references: [id])
  messages              Message[]
  typingIndicators      TypingIndicator[]
}

/// Appartenance d'un utilisateur à une conversation
model ConversationMember {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  conversationId   String    @db.ObjectId
  userId           String    @db.ObjectId
  /// admin, moderator, member
  role             String    @default("member")
  canSendMessage   Boolean   @default(true)
  canSendFiles     Boolean   @default(true)
  canSendImages    Boolean   @default(true)
  canSendVideos    Boolean   @default(true)
  canSendAudios    Boolean   @default(true)
  canSendLocations Boolean   @default(true)
  canSendLinks     Boolean   @default(true)
  joinedAt         DateTime  @default(now())
  leftAt           DateTime?
  isActive         Boolean   @default(true)

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

/// Lien de partage pour accès anonyme à une conversation
model ConversationShareLink {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  linkId                 String    @unique
  /// Identifiant lisible par l'homme (ex: "meeshy-public", "support-link")
  identifier             String?   @unique
  conversationId         String    @db.ObjectId
  createdBy              String    @db.ObjectId
  name                   String?
  description            String?
  maxUses                Int?
  currentUses            Int       @default(0)
  maxConcurrentUsers     Int?
  currentConcurrentUsers Int       @default(0)
  maxUniqueSessions      Int?
  currentUniqueSessions  Int       @default(0)
  expiresAt              DateTime?
  isActive               Boolean   @default(true)
  allowAnonymousMessages Boolean   @default(true)
  allowAnonymousFiles    Boolean   @default(false)
  allowAnonymousImages   Boolean   @default(true)
  allowViewHistory       Boolean   @default(true)
  requireNickname        Boolean   @default(true)
  requireEmail           Boolean   @default(false)
  allowedCountries       String[]  @default([])
  allowedLanguages       String[]  @default([])
  allowedIpRanges        String[]  @default([])
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  anonymousParticipants AnonymousParticipant[] @relation("ShareLinkParticipants")
  creator               User                   @relation("ShareLinkCreator", fields: [createdBy], references: [id])
  conversation          Conversation           @relation(fields: [conversationId], references: [id])
}

/// Participant anonyme via lien de partage
model AnonymousParticipant {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  conversationId    String    @db.ObjectId
  shareLinkId       String    @db.ObjectId
  firstName         String
  lastName          String
  username          String
  email             String?
  sessionToken      String    @unique
  ipAddress         String?
  country           String?
  language          String    @default("fr")
  deviceFingerprint String?
  isActive          Boolean   @default(true)
  isOnline          Boolean   @default(false)
  lastActiveAt      DateTime  @default(now())
  canSendMessages   Boolean   @default(true)
  canSendFiles      Boolean   @default(false)
  canSendImages     Boolean   @default(true)
  joinedAt          DateTime  @default(now())
  lastSeenAt        DateTime  @default(now())
  leftAt            DateTime?

  shareLink    ConversationShareLink @relation("ShareLinkParticipants", fields: [shareLinkId], references: [id])
  conversation Conversation          @relation(fields: [conversationId], references: [id])
  sentMessages Message[]             @relation("AnonymousMessageSender")
}

/// Message dans une conversation
model Message {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  conversationId    String    @db.ObjectId
  senderId          String?   @db.ObjectId
  anonymousSenderId String?   @db.ObjectId
  content           String
  originalLanguage  String    @default("fr")
  /// text, image, file, audio, video, location, system
  messageType       String    @default("text")
  isEdited          Boolean   @default(false)
  editedAt          DateTime?
  isDeleted         Boolean   @default(false)
  deletedAt         DateTime?
  replyToId         String?   @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  readStatus      MessageReadStatus[]
  translations    MessageTranslation[]
  replyTo         Message?              @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Message[]             @relation("MessageReplies")
  anonymousSender AnonymousParticipant? @relation("AnonymousMessageSender", fields: [anonymousSenderId], references: [id])
  sender          User?                 @relation("MessageSender", fields: [senderId], references: [id])
  conversation    Conversation          @relation(fields: [conversationId], references: [id])
}

/// Traduction d'un message
model MessageTranslation {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId         String   @db.ObjectId
  sourceLanguage    String
  targetLanguage    String
  translatedContent String
  translationModel  String
  cacheKey          String   @unique
  confidenceScore   Float?
  createdAt         DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// Statut de lecture d'un message par un utilisateur
model MessageReadStatus {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  userId    String   @db.ObjectId
  readAt    DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// Demande d'amitié entre utilisateurs
model FriendRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  /// pending, accepted, rejected, blocked
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  receiver User @relation("FriendRequestReceiver", fields: [receiverId], references: [id])
  sender   User @relation("FriendRequestSender", fields: [senderId], references: [id])
}

/// Indicateur de frappe en cours pour des tests... A supprimer après les tests
model TypingIndicator {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  userId         String   @db.ObjectId
  isTyping       Boolean  @default(true)
  startedAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

/// Notification pour un utilisateur
model Notification {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  /// new_conversation, new_message, message_edited, friend_request, etc.
  type      String
  title     String
  content   String
  data      String?
  priority  String    @default("normal")
  isRead    Boolean   @default(false)
  emailSent Boolean   @default(false)
  pushSent  Boolean   @default(false)
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

/// Communauté (représente une communauté de conversation)
model Community {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  avatar      String?
  isPrivate   Boolean  @default(true)
  createdBy   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members    CommunityMember[]
  creator    User                 @relation("CommunityCreator", fields: [createdBy], references: [id])
  admins     CommunityAdmin[]
  moderators CommunityModerator[]

  Conversation Conversation[]
}

/// Appartenance aux communautés (legacy)
model CommunityMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  communityId String   @db.ObjectId
  userId      String   @db.ObjectId
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])
}

/// Statistiques d'utilisation d'un utilisateur
model UserStats {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String   @unique @db.ObjectId
  messagesSent             Int      @default(0)
  messagesReceived         Int      @default(0)
  charactersTyped          Int      @default(0)
  imageMessagesSent        Int      @default(0)
  filesShared              Int      @default(0)
  conversationsJoined      Int      @default(0)
  communitiesCreated       Int      @default(0)
  friendsAdded             Int      @default(0)
  friendRequestsSent       Int      @default(0)
  translationsUsed         Int      @default(0)
  languagesDetected        Int      @default(0)
  autoTranslateTimeMinutes Int      @default(0)
  totalOnlineTimeMinutes   Int      @default(0)
  sessionCount             Int      @default(0)
  lastActiveAt             DateTime @default(now())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

/// Préférence utilisateur générale
model UserPreference {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  key         String
  value       String
  valueType   String   @default("string")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

/// Préférence spécifique à une conversation
model ConversationPreference {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  userId         String   @db.ObjectId
  key            String
  value          String
  valueType      String   @default("string")
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

/// Relation many-to-many pour les administrateurs de communauté
model CommunityAdmin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  communityId String   @db.ObjectId
  userId      String   @db.ObjectId
  assignedAt  DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])
}

/// Relation many-to-many pour les modérateurs de communauté
model CommunityModerator {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  communityId String   @db.ObjectId
  userId      String   @db.ObjectId
  assignedAt  DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])
}
