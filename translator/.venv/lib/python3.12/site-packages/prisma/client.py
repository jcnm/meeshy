# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template client.py.jinja --
import warnings
import logging
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing_extensions import override

from pydantic import BaseModel

from . import types, models, errors, actions
from ._base_client import BasePrisma, UseClientDefault, USE_CLIENT_DEFAULT
from .types import DatasourceOverride, HttpConfig, MetricsFormat
from ._types import BaseModelT, PrismaMethod, TransactionId, Datasource
from .bases import _PrismaModel
from ._builder import QueryBuilder, dumps
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix, model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED, DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._raw_query import deserialize_raw_results
from ._metrics import Metrics
from .metadata import PRISMA_MODELS, RELATIONAL_FIELD_MAPPINGS
from ._transactions import AsyncTransactionManager, SyncTransactionManager

# re-exports
from ._base_client import SyncBasePrisma, AsyncBasePrisma, load_env as load_env
from ._registry import (
    register as register,
    get_client as get_client,
    RegisteredClient as RegisteredClient,
)


__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('/Users/smpceo/Downloads/Meeshy/meeshy/translator/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'darwin-arm64': '/Users/smpceo/.cache/prisma-python/binaries/5.17.0/393aa359c9ad4a4bb28630fb5613f9c281cde053/node_modules/prisma/query-engine-darwin-arm64'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})


class Prisma(AsyncBasePrisma):
    # Note: these property names can be customised using `/// @Python(instance_name: '...')`
    # https://prisma-client-py.readthedocs.io/en/stable/reference/schema-extensions/#instance_name
    user: 'actions.UserActions[models.User]'
    conversation: 'actions.ConversationActions[models.Conversation]'
    conversationmember: 'actions.ConversationMemberActions[models.ConversationMember]'
    conversationsharelink: 'actions.ConversationShareLinkActions[models.ConversationShareLink]'
    anonymousparticipant: 'actions.AnonymousParticipantActions[models.AnonymousParticipant]'
    message: 'actions.MessageActions[models.Message]'
    messagetranslation: 'actions.MessageTranslationActions[models.MessageTranslation]'
    messagereadstatus: 'actions.MessageReadStatusActions[models.MessageReadStatus]'
    friendrequest: 'actions.FriendRequestActions[models.FriendRequest]'
    typingindicator: 'actions.TypingIndicatorActions[models.TypingIndicator]'
    notification: 'actions.NotificationActions[models.Notification]'
    community: 'actions.CommunityActions[models.Community]'
    communitymember: 'actions.CommunityMemberActions[models.CommunityMember]'
    userstats: 'actions.UserStatsActions[models.UserStats]'
    userpreference: 'actions.UserPreferenceActions[models.UserPreference]'
    conversationpreference: 'actions.ConversationPreferenceActions[models.ConversationPreference]'
    communityadmin: 'actions.CommunityAdminActions[models.CommunityAdmin]'
    communitymoderator: 'actions.CommunityModeratorActions[models.CommunityModerator]'

    __slots__ = (
        'user',
        'conversation',
        'conversationmember',
        'conversationsharelink',
        'anonymousparticipant',
        'message',
        'messagetranslation',
        'messagereadstatus',
        'friendrequest',
        'typingindicator',
        'notification',
        'community',
        'communitymember',
        'userstats',
        'userpreference',
        'conversationpreference',
        'communityadmin',
        'communitymoderator',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        super().__init__(
            http=http,
            use_dotenv=use_dotenv,
            log_queries=log_queries,
            datasource=datasource,
            connect_timeout=connect_timeout,
        )
        self._set_generated_properties(
            schema_path=SCHEMA_PATH,
            engine_type=ENGINE_TYPE,
            prisma_models=PRISMA_MODELS,
            packaged_schema_path=PACKAGED_SCHEMA_PATH,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
            preview_features=set([]),
            active_provider='mongodb',
            default_datasource_name='db',
        )

        self.user = actions.UserActions[models.User](self, models.User)
        self.conversation = actions.ConversationActions[models.Conversation](self, models.Conversation)
        self.conversationmember = actions.ConversationMemberActions[models.ConversationMember](self, models.ConversationMember)
        self.conversationsharelink = actions.ConversationShareLinkActions[models.ConversationShareLink](self, models.ConversationShareLink)
        self.anonymousparticipant = actions.AnonymousParticipantActions[models.AnonymousParticipant](self, models.AnonymousParticipant)
        self.message = actions.MessageActions[models.Message](self, models.Message)
        self.messagetranslation = actions.MessageTranslationActions[models.MessageTranslation](self, models.MessageTranslation)
        self.messagereadstatus = actions.MessageReadStatusActions[models.MessageReadStatus](self, models.MessageReadStatus)
        self.friendrequest = actions.FriendRequestActions[models.FriendRequest](self, models.FriendRequest)
        self.typingindicator = actions.TypingIndicatorActions[models.TypingIndicator](self, models.TypingIndicator)
        self.notification = actions.NotificationActions[models.Notification](self, models.Notification)
        self.community = actions.CommunityActions[models.Community](self, models.Community)
        self.communitymember = actions.CommunityMemberActions[models.CommunityMember](self, models.CommunityMember)
        self.userstats = actions.UserStatsActions[models.UserStats](self, models.UserStats)
        self.userpreference = actions.UserPreferenceActions[models.UserPreference](self, models.UserPreference)
        self.conversationpreference = actions.ConversationPreferenceActions[models.ConversationPreference](self, models.ConversationPreference)
        self.communityadmin = actions.CommunityAdminActions[models.CommunityAdmin](self, models.CommunityAdmin)
        self.communitymoderator = actions.CommunityModeratorActions[models.CommunityModerator](self, models.CommunityModerator)

        if auto_register:
            register(self)

    @property
    @override
    def _default_datasource(self) -> Datasource:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
            'source_file_path': '/Users/smpceo/Downloads/Meeshy/meeshy/translator/schema.prisma',
        }


    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: Union[int, timedelta] = DEFAULT_TX_MAX_WAIT,
        timeout: Union[int, timedelta] = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        async with client.tx() as transaction:
            user1 = await client.user.create({'name': 'Robert'})
            user2 = await client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(
            client=self,
            max_wait=max_wait,
            timeout=timeout,
        )


TransactionManager = AsyncTransactionManager[Prisma]


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    user: 'UserBatchActions'
    conversation: 'ConversationBatchActions'
    conversationmember: 'ConversationMemberBatchActions'
    conversationsharelink: 'ConversationShareLinkBatchActions'
    anonymousparticipant: 'AnonymousParticipantBatchActions'
    message: 'MessageBatchActions'
    messagetranslation: 'MessageTranslationBatchActions'
    messagereadstatus: 'MessageReadStatusBatchActions'
    friendrequest: 'FriendRequestBatchActions'
    typingindicator: 'TypingIndicatorBatchActions'
    notification: 'NotificationBatchActions'
    community: 'CommunityBatchActions'
    communitymember: 'CommunityMemberBatchActions'
    userstats: 'UserStatsBatchActions'
    userpreference: 'UserPreferenceBatchActions'
    conversationpreference: 'ConversationPreferenceBatchActions'
    communityadmin: 'CommunityAdminBatchActions'
    communitymoderator: 'CommunityModeratorBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.user = UserBatchActions(self)
        self.conversation = ConversationBatchActions(self)
        self.conversationmember = ConversationMemberBatchActions(self)
        self.conversationsharelink = ConversationShareLinkBatchActions(self)
        self.anonymousparticipant = AnonymousParticipantBatchActions(self)
        self.message = MessageBatchActions(self)
        self.messagetranslation = MessageTranslationBatchActions(self)
        self.messagereadstatus = MessageReadStatusBatchActions(self)
        self.friendrequest = FriendRequestBatchActions(self)
        self.typingindicator = TypingIndicatorBatchActions(self)
        self.notification = NotificationBatchActions(self)
        self.community = CommunityBatchActions(self)
        self.communitymember = CommunityMemberBatchActions(self)
        self.userstats = UserStatsBatchActions(self)
        self.userpreference = UserPreferenceBatchActions(self)
        self.conversationpreference = ConversationPreferenceBatchActions(self)
        self.communityadmin = CommunityAdminBatchActions(self)
        self.communitymoderator = CommunityModeratorBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(
            **kwargs,
            prisma_models=PRISMA_MODELS,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
        )
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )


    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.User,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.User,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.User,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.User,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.User,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ConversationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ConversationCreateInput,
        include: Optional[types.ConversationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Conversation,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ConversationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Conversation,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Conversation,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ConversationUpdateInput,
        where: types.ConversationWhereUniqueInput,
        include: Optional[types.ConversationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Conversation,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ConversationWhereUniqueInput,
        data: types.ConversationUpsertInput,
        include: Optional[types.ConversationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Conversation,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ConversationUpdateManyMutationInput,
        where: types.ConversationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Conversation,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ConversationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Conversation,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ConversationMemberBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ConversationMemberCreateInput,
        include: Optional[types.ConversationMemberInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ConversationMember,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ConversationMemberCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ConversationMember,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ConversationMemberWhereUniqueInput,
        include: Optional[types.ConversationMemberInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ConversationMember,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ConversationMemberUpdateInput,
        where: types.ConversationMemberWhereUniqueInput,
        include: Optional[types.ConversationMemberInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ConversationMember,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ConversationMemberWhereUniqueInput,
        data: types.ConversationMemberUpsertInput,
        include: Optional[types.ConversationMemberInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ConversationMember,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ConversationMemberUpdateManyMutationInput,
        where: types.ConversationMemberWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ConversationMember,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ConversationMemberWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ConversationMember,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ConversationShareLinkBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ConversationShareLinkCreateInput,
        include: Optional[types.ConversationShareLinkInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ConversationShareLink,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ConversationShareLinkCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ConversationShareLink,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ConversationShareLinkWhereUniqueInput,
        include: Optional[types.ConversationShareLinkInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ConversationShareLink,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ConversationShareLinkUpdateInput,
        where: types.ConversationShareLinkWhereUniqueInput,
        include: Optional[types.ConversationShareLinkInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ConversationShareLink,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ConversationShareLinkWhereUniqueInput,
        data: types.ConversationShareLinkUpsertInput,
        include: Optional[types.ConversationShareLinkInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ConversationShareLink,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ConversationShareLinkUpdateManyMutationInput,
        where: types.ConversationShareLinkWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ConversationShareLink,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ConversationShareLinkWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ConversationShareLink,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class AnonymousParticipantBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.AnonymousParticipantCreateInput,
        include: Optional[types.AnonymousParticipantInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.AnonymousParticipant,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.AnonymousParticipantCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.AnonymousParticipant,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AnonymousParticipantWhereUniqueInput,
        include: Optional[types.AnonymousParticipantInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.AnonymousParticipant,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AnonymousParticipantUpdateInput,
        where: types.AnonymousParticipantWhereUniqueInput,
        include: Optional[types.AnonymousParticipantInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.AnonymousParticipant,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AnonymousParticipantWhereUniqueInput,
        data: types.AnonymousParticipantUpsertInput,
        include: Optional[types.AnonymousParticipantInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.AnonymousParticipant,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AnonymousParticipantUpdateManyMutationInput,
        where: types.AnonymousParticipantWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.AnonymousParticipant,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.AnonymousParticipantWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.AnonymousParticipant,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class MessageBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.MessageCreateInput,
        include: Optional[types.MessageInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Message,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.MessageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Message,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.MessageWhereUniqueInput,
        include: Optional[types.MessageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Message,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.MessageUpdateInput,
        where: types.MessageWhereUniqueInput,
        include: Optional[types.MessageInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Message,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.MessageWhereUniqueInput,
        data: types.MessageUpsertInput,
        include: Optional[types.MessageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Message,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.MessageUpdateManyMutationInput,
        where: types.MessageWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Message,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.MessageWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Message,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class MessageTranslationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.MessageTranslationCreateInput,
        include: Optional[types.MessageTranslationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.MessageTranslation,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.MessageTranslationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.MessageTranslation,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.MessageTranslationWhereUniqueInput,
        include: Optional[types.MessageTranslationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.MessageTranslation,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.MessageTranslationUpdateInput,
        where: types.MessageTranslationWhereUniqueInput,
        include: Optional[types.MessageTranslationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.MessageTranslation,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.MessageTranslationWhereUniqueInput,
        data: types.MessageTranslationUpsertInput,
        include: Optional[types.MessageTranslationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.MessageTranslation,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.MessageTranslationUpdateManyMutationInput,
        where: types.MessageTranslationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.MessageTranslation,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.MessageTranslationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.MessageTranslation,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class MessageReadStatusBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.MessageReadStatusCreateInput,
        include: Optional[types.MessageReadStatusInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.MessageReadStatus,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.MessageReadStatusCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.MessageReadStatus,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.MessageReadStatusWhereUniqueInput,
        include: Optional[types.MessageReadStatusInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.MessageReadStatus,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.MessageReadStatusUpdateInput,
        where: types.MessageReadStatusWhereUniqueInput,
        include: Optional[types.MessageReadStatusInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.MessageReadStatus,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.MessageReadStatusWhereUniqueInput,
        data: types.MessageReadStatusUpsertInput,
        include: Optional[types.MessageReadStatusInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.MessageReadStatus,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.MessageReadStatusUpdateManyMutationInput,
        where: types.MessageReadStatusWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.MessageReadStatus,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.MessageReadStatusWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.MessageReadStatus,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class FriendRequestBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.FriendRequestCreateInput,
        include: Optional[types.FriendRequestInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.FriendRequest,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.FriendRequestCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.FriendRequest,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.FriendRequestWhereUniqueInput,
        include: Optional[types.FriendRequestInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.FriendRequest,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.FriendRequestUpdateInput,
        where: types.FriendRequestWhereUniqueInput,
        include: Optional[types.FriendRequestInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.FriendRequest,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.FriendRequestWhereUniqueInput,
        data: types.FriendRequestUpsertInput,
        include: Optional[types.FriendRequestInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.FriendRequest,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.FriendRequestUpdateManyMutationInput,
        where: types.FriendRequestWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.FriendRequest,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.FriendRequestWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.FriendRequest,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class TypingIndicatorBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.TypingIndicatorCreateInput,
        include: Optional[types.TypingIndicatorInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.TypingIndicator,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.TypingIndicatorCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.TypingIndicator,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.TypingIndicatorWhereUniqueInput,
        include: Optional[types.TypingIndicatorInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.TypingIndicator,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.TypingIndicatorUpdateInput,
        where: types.TypingIndicatorWhereUniqueInput,
        include: Optional[types.TypingIndicatorInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.TypingIndicator,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.TypingIndicatorWhereUniqueInput,
        data: types.TypingIndicatorUpsertInput,
        include: Optional[types.TypingIndicatorInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.TypingIndicator,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.TypingIndicatorUpdateManyMutationInput,
        where: types.TypingIndicatorWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.TypingIndicator,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.TypingIndicatorWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.TypingIndicator,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class NotificationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.NotificationCreateInput,
        include: Optional[types.NotificationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Notification,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.NotificationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Notification,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.NotificationWhereUniqueInput,
        include: Optional[types.NotificationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Notification,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.NotificationUpdateInput,
        where: types.NotificationWhereUniqueInput,
        include: Optional[types.NotificationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Notification,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.NotificationWhereUniqueInput,
        data: types.NotificationUpsertInput,
        include: Optional[types.NotificationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Notification,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.NotificationUpdateManyMutationInput,
        where: types.NotificationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Notification,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.NotificationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Notification,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CommunityBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CommunityCreateInput,
        include: Optional[types.CommunityInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Community,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CommunityCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Community,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CommunityWhereUniqueInput,
        include: Optional[types.CommunityInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Community,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CommunityUpdateInput,
        where: types.CommunityWhereUniqueInput,
        include: Optional[types.CommunityInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Community,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CommunityWhereUniqueInput,
        data: types.CommunityUpsertInput,
        include: Optional[types.CommunityInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Community,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CommunityUpdateManyMutationInput,
        where: types.CommunityWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Community,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CommunityWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Community,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CommunityMemberBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CommunityMemberCreateInput,
        include: Optional[types.CommunityMemberInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.CommunityMember,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CommunityMemberCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.CommunityMember,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CommunityMemberWhereUniqueInput,
        include: Optional[types.CommunityMemberInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.CommunityMember,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CommunityMemberUpdateInput,
        where: types.CommunityMemberWhereUniqueInput,
        include: Optional[types.CommunityMemberInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.CommunityMember,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CommunityMemberWhereUniqueInput,
        data: types.CommunityMemberUpsertInput,
        include: Optional[types.CommunityMemberInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.CommunityMember,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CommunityMemberUpdateManyMutationInput,
        where: types.CommunityMemberWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.CommunityMember,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CommunityMemberWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.CommunityMember,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserStatsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserStatsCreateInput,
        include: Optional[types.UserStatsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.UserStats,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserStatsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.UserStats,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserStatsWhereUniqueInput,
        include: Optional[types.UserStatsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.UserStats,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserStatsUpdateInput,
        where: types.UserStatsWhereUniqueInput,
        include: Optional[types.UserStatsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.UserStats,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserStatsWhereUniqueInput,
        data: types.UserStatsUpsertInput,
        include: Optional[types.UserStatsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.UserStats,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserStatsUpdateManyMutationInput,
        where: types.UserStatsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.UserStats,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserStatsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.UserStats,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserPreferenceBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserPreferenceCreateInput,
        include: Optional[types.UserPreferenceInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.UserPreference,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserPreferenceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.UserPreference,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserPreferenceWhereUniqueInput,
        include: Optional[types.UserPreferenceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.UserPreference,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserPreferenceUpdateInput,
        where: types.UserPreferenceWhereUniqueInput,
        include: Optional[types.UserPreferenceInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.UserPreference,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserPreferenceWhereUniqueInput,
        data: types.UserPreferenceUpsertInput,
        include: Optional[types.UserPreferenceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.UserPreference,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserPreferenceUpdateManyMutationInput,
        where: types.UserPreferenceWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.UserPreference,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserPreferenceWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.UserPreference,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ConversationPreferenceBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ConversationPreferenceCreateInput,
        include: Optional[types.ConversationPreferenceInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ConversationPreference,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ConversationPreferenceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ConversationPreference,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ConversationPreferenceWhereUniqueInput,
        include: Optional[types.ConversationPreferenceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ConversationPreference,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ConversationPreferenceUpdateInput,
        where: types.ConversationPreferenceWhereUniqueInput,
        include: Optional[types.ConversationPreferenceInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ConversationPreference,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ConversationPreferenceWhereUniqueInput,
        data: types.ConversationPreferenceUpsertInput,
        include: Optional[types.ConversationPreferenceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ConversationPreference,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ConversationPreferenceUpdateManyMutationInput,
        where: types.ConversationPreferenceWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ConversationPreference,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ConversationPreferenceWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ConversationPreference,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CommunityAdminBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CommunityAdminCreateInput,
        include: Optional[types.CommunityAdminInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.CommunityAdmin,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CommunityAdminCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.CommunityAdmin,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CommunityAdminWhereUniqueInput,
        include: Optional[types.CommunityAdminInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.CommunityAdmin,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CommunityAdminUpdateInput,
        where: types.CommunityAdminWhereUniqueInput,
        include: Optional[types.CommunityAdminInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.CommunityAdmin,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CommunityAdminWhereUniqueInput,
        data: types.CommunityAdminUpsertInput,
        include: Optional[types.CommunityAdminInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.CommunityAdmin,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CommunityAdminUpdateManyMutationInput,
        where: types.CommunityAdminWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.CommunityAdmin,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CommunityAdminWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.CommunityAdmin,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CommunityModeratorBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CommunityModeratorCreateInput,
        include: Optional[types.CommunityModeratorInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.CommunityModerator,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CommunityModeratorCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.CommunityModerator,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CommunityModeratorWhereUniqueInput,
        include: Optional[types.CommunityModeratorInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.CommunityModerator,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CommunityModeratorUpdateInput,
        where: types.CommunityModeratorWhereUniqueInput,
        include: Optional[types.CommunityModeratorInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.CommunityModerator,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CommunityModeratorWhereUniqueInput,
        data: types.CommunityModeratorUpsertInput,
        include: Optional[types.CommunityModeratorInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.CommunityModerator,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CommunityModeratorUpdateManyMutationInput,
        where: types.CommunityModeratorWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.CommunityModerator,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CommunityModeratorWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.CommunityModerator,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma