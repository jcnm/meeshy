#!/usr/bin/env python3
"""
Script de test pour v√©rifier le syst√®me de fallback de traduction
Teste les diff√©rents niveaux de fallback : Premium -> Medium -> Basic -> Simple
"""

import asyncio
import logging
import sys
from pathlib import Path

# Ajouter le r√©pertoire src au path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from services.quantized_ml_service import QuantizedMLService
from services.simple_translation_service import SimpleTranslationService

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_quantized_service_fallback():
    """Teste le syst√®me de fallback du service quantifi√©"""
    logger.info("üß™ Test du syst√®me de fallback du service quantifi√©")
    
    # Test avec diff√©rents types de mod√®les
    test_cases = [
        ("premium", "float16"),
        ("medium", "float16"), 
        ("basic", "float16"),
        ("all", "float16")
    ]
    
    for model_type, quantization in test_cases:
        logger.info(f"\nüîç Test avec model_type={model_type}, quantization={quantization}")
        
        try:
            service = QuantizedMLService(model_type, quantization, max_workers=2)
            initialized = await service.initialize()
            
            if initialized:
                available_models = service.get_available_models()
                logger.info(f"‚úÖ Service initialis√© avec succ√®s")
                logger.info(f"üìã Mod√®les disponibles: {available_models}")
                
                # Test de traduction
                if available_models:
                    test_text = "Hello, how are you?"
                    result = await service.translate(test_text, "en", "fr", available_models[0])
                    logger.info(f"üîÑ Traduction test: '{test_text}' -> '{result['translated_text']}'")
                    logger.info(f"üìä Mod√®le utilis√©: {result['model_used']}")
                    logger.info(f"‚è±Ô∏è Temps de traitement: {result['processing_time']:.3f}s")
                else:
                    logger.warning("‚ö†Ô∏è Aucun mod√®le disponible pour le test")
            else:
                logger.error("‚ùå √âchec de l'initialisation du service")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test: {e}")
        
        finally:
            if 'service' in locals():
                await service.cleanup()

async def test_simple_service():
    """Teste le service de traduction simple"""
    logger.info("\nüß™ Test du service de traduction simple")
    
    try:
        service = SimpleTranslationService()
        
        # Test avec des phrases basiques
        test_cases = [
            ("hello", "en", "fr"),
            ("thanks", "en", "es"),
            ("yes", "en", "de"),
            ("goodbye", "en", "pt"),
            ("This is a complex sentence that should not be translated", "en", "fr")
        ]
        
        for text, source, target in test_cases:
            result = await service.translate(text, source, target)
            logger.info(f"üîÑ '{text}' ({source}->{target}) -> '{result['translated_text']}'")
            logger.info(f"üìä Confiance: {result['confidence']}, Temps: {result['processing_time']:.3f}s")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test du service simple: {e}")

async def test_fallback_chain():
    """Teste la cha√Æne compl√®te de fallback"""
    logger.info("\nüß™ Test de la cha√Æne compl√®te de fallback")
    
    # Simuler un service qui √©choue √† charger les mod√®les ML
    logger.info("üîÑ Simulation d'un √©chec de chargement des mod√®les ML...")
    
    try:
        # Cr√©er un service avec un mod√®le inexistant pour forcer l'√©chec
        service = QuantizedMLService("premium", "float16", max_workers=1)
        
        # Modifier temporairement la configuration pour forcer l'√©chec
        service.model_configs['premium']['model_name'] = "inexistant/model"
        
        initialized = await service.initialize()
        
        if not initialized:
            logger.info("‚úÖ √âchec simul√© avec succ√®s")
            
            # Passer au service simple
            simple_service = SimpleTranslationService()
            result = await simple_service.translate("hello", "en", "fr")
            logger.info(f"üîÑ Fallback vers service simple: 'hello' -> '{result['translated_text']}'")
        else:
            logger.warning("‚ö†Ô∏è Le service s'est initialis√© malgr√© le mod√®le inexistant")
            
    except Exception as e:
        logger.info(f"‚úÖ Exception attendue lors du test de fallback: {e}")

async def test_user_model_preference():
    """Teste que le syst√®me respecte le mod√®le demand√© par l'utilisateur"""
    logger.info("\nüß™ Test du respect du mod√®le demand√© par l'utilisateur")
    
    # Test avec diff√©rents mod√®les demand√©s
    test_cases = [
        ("premium", "float16"),
        ("medium", "float16"),
        ("basic", "float16")
    ]
    
    for requested_model, quantization in test_cases:
        logger.info(f"\nüîç Test avec mod√®le demand√©: {requested_model}")
        
        try:
            service = QuantizedMLService(requested_model, quantization, max_workers=2)
            initialized = await service.initialize()
            
            if initialized:
                available_models = service.get_available_models()
                logger.info(f"‚úÖ Service initialis√© avec succ√®s")
                logger.info(f"üìã Mod√®les disponibles: {available_models}")
                logger.info(f"üéØ Mod√®le actif: {service.model_type}")
                
                # V√©rifier que le mod√®le demand√© est bien charg√© ou qu'un fallback appropri√© a √©t√© utilis√©
                if requested_model in available_models:
                    logger.info(f"‚úÖ Le mod√®le demand√© {requested_model} est disponible")
                else:
                    # V√©rifier qu'un mod√®le de qualit√© inf√©rieure a √©t√© utilis√©
                    fallback_order = ['basic', 'medium', 'premium']
                    try:
                        requested_index = fallback_order.index(requested_model)
                        actual_index = fallback_order.index(service.model_type)
                        
                        if actual_index < requested_index:
                            logger.info(f"‚úÖ Fallback appropri√©: {requested_model} -> {service.model_type} (mod√®le plus l√©ger)")
                        else:
                            logger.warning(f"‚ö†Ô∏è Fallback inattendu: {requested_model} -> {service.model_type}")
                    except ValueError:
                        logger.warning(f"‚ö†Ô∏è Mod√®le non reconnu dans l'ordre de fallback: {service.model_type}")
                
                # Test de traduction avec le mod√®le demand√©
                test_text = "Hello, how are you?"
                result = await service.translate(test_text, "en", "fr", requested_model)
                logger.info(f"üîÑ Traduction avec mod√®le demand√© '{requested_model}': '{test_text}' -> '{result['translated_text']}'")
                logger.info(f"üìä Mod√®le effectivement utilis√©: {result['model_used']}")
                
            else:
                logger.error("‚ùå √âchec de l'initialisation du service")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test: {e}")
        
        finally:
            if 'service' in locals():
                await service.cleanup()

async def test_quality_degradation_fallback():
    """Teste le fallback vers des mod√®les de qualit√© inf√©rieure"""
    logger.info("\nüß™ Test du fallback vers des mod√®les de qualit√© inf√©rieure")
    
    try:
        # Cr√©er un service avec seulement le mod√®le basic charg√©
        service = QuantizedMLService("basic", "float16", max_workers=1)
        
        # Forcer le chargement de seulement le mod√®le basic
        service.model_configs['medium']['model_name'] = "inexistant/medium"
        service.model_configs['premium']['model_name'] = "inexistant/premium"
        
        initialized = await service.initialize()
        
        if initialized:
            available_models = service.get_available_models()
            logger.info(f"üìã Mod√®les disponibles: {available_models}")
            
            # Tester la traduction avec un mod√®le non disponible
            test_text = "Hello world"
            
            # Demander le mod√®le premium (non disponible)
            result = await service.translate(test_text, "en", "fr", "premium")
            logger.info(f"üîÑ Demande mod√®le 'premium' -> Mod√®le utilis√©: {result['model_used']}")
            
            # Demander le mod√®le medium (non disponible)
            result = await service.translate(test_text, "en", "fr", "medium")
            logger.info(f"üîÑ Demande mod√®le 'medium' -> Mod√®le utilis√©: {result['model_used']}")
            
            # Demander le mod√®le basic (disponible)
            result = await service.translate(test_text, "en", "fr", "basic")
            logger.info(f"üîÑ Demande mod√®le 'basic' -> Mod√®le utilis√©: {result['model_used']}")
            
        else:
            logger.error("‚ùå √âchec de l'initialisation du service")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test de d√©gradation: {e}")
    
    finally:
        if 'service' in locals():
            await service.cleanup()

async def main():
    """Fonction principale de test"""
    logger.info("üöÄ D√©marrage des tests du syst√®me de fallback")
    
    # Test 1: Service quantifi√© avec fallback automatique
    await test_quantized_service_fallback()
    
    # Test 2: Service de traduction simple
    await test_simple_service()
    
    # Test 3: Cha√Æne compl√®te de fallback
    await test_fallback_chain()
    
    # Test 4: Respect du mod√®le demand√© par l'utilisateur
    await test_user_model_preference()
    
    # Test 5: Fallback vers des mod√®les de qualit√© inf√©rieure
    await test_quality_degradation_fallback()
    
    logger.info("\n‚úÖ Tests du syst√®me de fallback termin√©s")

if __name__ == "__main__":
    asyncio.run(main())
