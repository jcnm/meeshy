"""
Service de gestion des messages pour les traductions
Interface avec la base de donn√©es Prisma
"""

import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from services.database_service_simple import DatabaseServiceSimple as DatabaseService

logger = logging.getLogger(__name__)

class MessageService:
    """Service de gestion des messages et conversations"""
    
    def __init__(self, database_service: Optional[DatabaseService] = None):
        self.is_initialized = False
        self.database_service = database_service
    
    async def initialize(self, database_service: Optional[DatabaseService] = None):
        """Initialise le service de messages avec connexion √† la base de donn√©es"""
        try:
            logger.info("üí¨ Initialisation du service de messages...")
            
            # Utiliser le service de base de donn√©es fourni
            if database_service:
                self.database_service = database_service
            
            if self.database_service and self.database_service.is_connected:
                logger.info("‚úÖ Service de messages connect√© √† la base de donn√©es")
            else:
                logger.warning("‚ö†Ô∏è  Service de messages initialis√© sans connexion √† la base de donn√©es")
            
            self.is_initialized = True
            logger.info("‚úÖ Service de messages initialis√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation service messages: {e}")
            raise
    
    async def log_translation(self, translation_data: Dict[str, Any]) -> bool:
        """Enregistre une traduction dans les logs et potentiellement en base de donn√©es"""
        try:
            # Log basique
            logger.info(f"üìù Translation logged: {translation_data.get('message_id', 'unknown')}")
            
            # Si connect√© √† la base de donn√©es, on pourrait enregistrer en base
            if self.database_service and self.database_service.is_connected:
                prisma = self.database_service.get_prisma_client()
                if prisma:
                    # Ici on pourrait enregistrer la traduction en base de donn√©es
                    # await prisma.messagetranslation.create(data=translation_data)
                    logger.debug("üóÑÔ∏è  Traduction pourrait √™tre enregistr√©e en base de donn√©es")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur logging translation: {e}")
            return False
    
    async def get_conversation_languages(self, conversation_id: str) -> List[str]:
        """R√©cup√®re les langues des participants d'une conversation"""
        try:
            # Si connect√© √† la base de donn√©es, faire une vraie requ√™te
            if self.database_service and self.database_service.is_connected:
                prisma = self.database_service.get_prisma_client()
                if prisma:
                    try:
                        # Requ√™te pour r√©cup√©rer les langues des participants
                        # Dans une vraie impl√©mentation:
                        # conversation_members = await prisma.conversationmember.find_many(
                        #     where={'conversation_id': conversation_id},
                        #     include={'user': True}
                        # )
                        # return [member.user.system_language for member in conversation_members]
                        logger.debug(f"üîç Recherche des langues pour conversation {conversation_id}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è  Erreur requ√™te base de donn√©es: {e}")
            
            # Fallback avec langues par d√©faut
            return ['fr', 'en', 'es']  # Langues par d√©faut
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration langues conversation: {e}")
            return ['fr', 'en']  # Fallback
    
    async def health_check(self) -> Dict[str, Any]:
        """V√©rifie la sant√© du service de messages"""
        health_data = {
            'service_initialized': self.is_initialized,
            'database_service_available': self.database_service is not None,
            'database_connected': False
        }
        
        if self.database_service:
            db_health = await self.database_service.health_check()
            health_data.update(db_health)
        
        return health_data
