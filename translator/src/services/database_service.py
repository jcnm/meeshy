"""
Service de base de donn√©es pour le Translator Meeshy
G√®re la sauvegarde et la r√©cup√©ration des traductions
"""

import asyncio
import logging
from typing import Optional, Dict, Any
from prisma import Prisma

logger = logging.getLogger(__name__)

class DatabaseService:
    """Service de base de donn√©es pour le Translator"""
    
    def __init__(self, database_url: str = None):
        self.database_url = database_url
        self.prisma = None
        self.is_connected = False
    
    async def connect(self):
        """√âtablit la connexion √† la base de donn√©es"""
        try:
            if not self.prisma:
                # Le client Prisma est d√©j√† g√©n√©r√© dans l'image Docker
                self.prisma = Prisma()
            
            # Utiliser la configuration par d√©faut (le DATABASE_URL est dans .env)
            await self.prisma.connect()
            
            self.is_connected = True
            logger.info("‚úÖ [TRANSLATOR-DB] Connexion √† la base de donn√©es √©tablie")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [TRANSLATOR-DB] Erreur connexion base de donn√©es: {e}")
            self.is_connected = False
            return False
    
    async def disconnect(self):
        """Ferme la connexion √† la base de donn√©es"""
        try:
            if self.prisma:
                await self.prisma.disconnect()
                self.is_connected = False
                logger.info("‚úÖ [TRANSLATOR-DB] Connexion √† la base de donn√©es ferm√©e")
        except Exception as e:
            logger.error(f"‚ùå [TRANSLATOR-DB] Erreur fermeture base de donn√©es: {e}")
    
    async def save_translation(self, translation_data: Dict[str, Any]) -> bool:
        """
        Sauvegarde une traduction en base de donn√©es (upsert)
        
        Args:
            translation_data: Dictionnaire contenant les donn√©es de traduction
                - messageId: ID du message
                - sourceLanguage: Langue source
                - targetLanguage: Langue cible
                - translatedText: Texte traduit
                - translatorModel: Mod√®le utilis√©
                - confidenceScore: Score de confiance
                - processingTime: Temps de traitement
                - workerName: Nom du worker
                - poolType: Type de pool utilis√©e
        
        Returns:
            bool: True si la sauvegarde a r√©ussi, False sinon
        """
        if not self.is_connected:
            logger.warning("‚ö†Ô∏è [TRANSLATOR-DB] Base de donn√©es non connect√©e, pas de sauvegarde")
            return False
        
        try:
            # Extraire les donn√©es
            message_id = translation_data.get('messageId')
            source_language = translation_data.get('sourceLanguage', 'fr')
            target_language = translation_data.get('targetLanguage')
            translated_text = translation_data.get('translatedText')
            translator_model = translation_data.get('translatorModel', translation_data.get('modelType', 'basic'))
            confidence_score = translation_data.get('confidenceScore', 0.9)
            processing_time = translation_data.get('processingTime', 0.0)
            worker_name = translation_data.get('workerName', 'unknown')
            pool_type = translation_data.get('poolType', 'normal')
            
            # Validation des donn√©es obligatoires
            if not all([message_id, target_language, translated_text]):
                logger.warning(f"‚ö†Ô∏è [TRANSLATOR-DB] Donn√©es de traduction incompl√®tes: {translation_data}")
                return False
            
            # Cr√©er la cl√© de cache unique
            cache_key = f"{message_id}_{source_language}_{target_language}_{translator_model}"
            
            # D√©finir la hi√©rarchie des mod√®les
            model_hierarchy = {
                "basic": 1,
                "medium": 2,
                "premium": 3
            }
            current_model_level = model_hierarchy.get(translator_model, 1)
            
            # V√©rifier si la traduction existe d√©j√†
            existing_translation = await self.prisma.messagetranslation.find_unique(
                where={
                    "messageId_targetLanguage": {
                        "messageId": message_id,
                        "targetLanguage": target_language
                    }
                }
            )
            
            if existing_translation:
                # V√©rifier le niveau du mod√®le existant
                existing_model_level = model_hierarchy.get(existing_translation.translationModel, 1)
                
                # Ne mettre √† jour que si le nouveau mod√®le est de niveau sup√©rieur ou √©gal
                if current_model_level >= existing_model_level:
                    await self.prisma.messagetranslation.update(
                        where={
                            "messageId_targetLanguage": {
                                "messageId": message_id,
                                "targetLanguage": target_language
                            }
                        },
                        data={
                            "translatedContent": translated_text,
                            "translationModel": translator_model,
                            "confidenceScore": confidence_score,
                            "cacheKey": cache_key
                        }
                    )
                    
                    if current_model_level > existing_model_level:
                        logger.info(f"‚¨ÜÔ∏è [TRANSLATOR-DB] Traduction am√©lior√©e: {message_id} -> {target_language} ({existing_translation.translationModel} ‚Üí {translator_model})")
                    else:
                        logger.info(f"üîÑ [TRANSLATOR-DB] Traduction mise √† jour: {message_id} -> {target_language} ({translator_model})")
                else:
                    logger.info(f"‚è≠Ô∏è [TRANSLATOR-DB] Traduction existante de niveau sup√©rieur ignor√©e: {message_id} -> {target_language} ({existing_translation.translationModel} > {translator_model})")
                    return True
                
            else:
                # Cr√©er une nouvelle traduction
                await self.prisma.messagetranslation.create(
                    data={
                        "messageId": message_id,
                        "sourceLanguage": source_language,
                        "targetLanguage": target_language,
                        "translatedContent": translated_text,
                        "translationModel": translator_model,
                        "confidenceScore": confidence_score,
                        "cacheKey": cache_key
                    }
                )
                
                logger.info(f"‚úÖ [TRANSLATOR-DB] Nouvelle traduction sauvegard√©e: {message_id} -> {target_language} ({translator_model})")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [TRANSLATOR-DB] Erreur sauvegarde traduction: {e}")
            return False
    
    def is_db_connected(self) -> bool:
        """V√©rifie si la connexion √† la base de donn√©es est active"""
        return self.is_connected
    
    async def get_translation(self, message_id: str, target_language: str) -> Optional[Dict[str, Any]]:
        """
        R√©cup√®re une traduction depuis la base de donn√©es
        
        Args:
            message_id: ID du message
            target_language: Langue cible
        
        Returns:
            Dict ou None: Donn√©es de traduction ou None si non trouv√©e
        """
        if not self.is_connected:
            logger.warning("‚ö†Ô∏è [TRANSLATOR-DB] Base de donn√©es non connect√©e")
            return None
        
        try:
            translation = await self.prisma.messagetranslation.find_unique(
                where={
                    "messageId_targetLanguage": {
                        "messageId": message_id,
                        "targetLanguage": target_language
                    }
                }
            )
            
            if translation:
                return {
                    "messageId": translation.messageId,
                    "sourceLanguage": translation.sourceLanguage,
                    "targetLanguage": translation.targetLanguage,
                    "translatedText": translation.translatedContent,
                    "translatorModel": translation.translationModel,
                    "confidenceScore": translation.confidenceScore,
                    "cacheKey": translation.cacheKey,
                    "createdAt": translation.createdAt.isoformat() if translation.createdAt else None
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå [TRANSLATOR-DB] Erreur r√©cup√©ration traduction: {e}")
            return None
    
    async def invalidate_message_translations(self, message_id: str) -> bool:
        """
        Invalide toutes les traductions d'un message (pour forcer la retraduction)
        
        Args:
            message_id: ID du message
        
        Returns:
            bool: True si succ√®s, False sinon
        """
        if not self.is_connected:
            logger.warning("‚ö†Ô∏è [TRANSLATOR-DB] Base de donn√©es non connect√©e")
            return False
        
        try:
            # Supprimer toutes les traductions existantes pour ce message
            deleted_count = await self.prisma.messagetranslation.delete_many(
                where={
                    "messageId": message_id
                }
            )
            
            logger.info(f"üóëÔ∏è [TRANSLATOR-DB] {deleted_count} traductions supprim√©es pour le message {message_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [TRANSLATOR-DB] Erreur invalidation traductions: {e}")
            return False
    
    async def health_check(self) -> Dict[str, Any]:
        """V√©rifie la sant√© de la connexion √† la base de donn√©es"""
        try:
            if not self.is_connected:
                return {
                    "connected": False,
                    "status": "disconnected",
                    "error": "Database not connected"
                }
            
            # Test simple de connexion (MongoDB ne supporte pas SELECT 1)
            # Utiliser une requ√™te MongoDB valide √† la place
            await self.prisma.user.count()
            
            return {
                "connected": True,
                "status": "healthy",
                "type": "mongodb"
            }
            
        except Exception as e:
            logger.error(f"‚ùå [TRANSLATOR-DB] Erreur health check: {e}")
            return {
                "connected": False,
                "status": "error",
                "error": str(e)
            }
