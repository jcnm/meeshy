"""
Serveur de traduction haute performance Meeshy
Architecture: PUB/SUB + REQ/REP avec pool de connexions et traitement asynchrone
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# Charger les variables d'environnement
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("[TRANSLATOR] ‚úÖ Variables d'environnement .env charg√©es")
except ImportError:
    print("[TRANSLATOR] ‚ö†Ô∏è python-dotenv non disponible, utilisation des variables syst√®me")

# Ajouter le r√©pertoire src au path
src_path = Path(__file__).parent
sys.path.insert(0, str(src_path))

from config.settings import Settings
from services.zmq_server import ZMQTranslationServer
from services.translation_ml_service import TranslationMLService

from api.translation_api import TranslationAPI

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('translator.log', mode='w')  # Mode 'w' pour √©craser le fichier
    ]
)

logger = logging.getLogger(__name__)

class MeeshyTranslationServer:
    """Serveur de traduction haute performance Meeshy"""
    
    def __init__(self):
        self.settings = Settings()
        self.translation_service = None
        self.zmq_server = None
        self.translation_api = None
        self.is_initialized = False
    
    async def initialize(self) -> bool:
        """Initialise le serveur de traduction avec QuantizedMLService uniquement"""
        try:
            logger.info("[TRANSLATOR] üöÄ Initialisation du serveur de traduction avec TranslationMLService...")
            
            # 1. Initialiser le service ML unifi√© (obligatoire)
            max_workers = int(os.getenv('TRANSLATION_WORKERS', '50'))
            quantization_level = os.getenv('QUANTIZATION_LEVEL', 'float16')
            
            # Utiliser le service ML unifi√© avec tous les mod√®les
            self.translation_service = TranslationMLService(self.settings, model_type="all", max_workers=max_workers, quantization_level=quantization_level)
            
            # Charger les mod√®les ML au d√©marrage
            logger.info("[TRANSLATOR] üìö Chargement des mod√®les ML...")
            ml_initialized = await self.translation_service.initialize()
            if not ml_initialized:
                logger.error("[TRANSLATOR] ‚ùå √âchec de l'initialisation du service ML unifi√©")
                return False
            
            # V√©rifier si au moins un mod√®le est disponible
            stats = await self.translation_service.get_stats()
            available_models = list(stats.get('models_loaded', {}).keys())
            if not available_models:
                logger.error("[TRANSLATOR] ‚ùå Aucun mod√®le ML disponible")
                return False
            
            logger.info(f"[TRANSLATOR] ‚úÖ Service ML unifi√© initialis√© avec succ√®s")
            logger.info(f"[TRANSLATOR] ‚úÖ Mod√®les disponibles: {available_models}")
            
            # 2. Initialiser le serveur ZMQ avec le service ML unifi√©
            zmq_push_port = int(os.getenv('TRANSLATOR_ZMQ_PULL_PORT', '5555'))
            zmq_pub_port = int(os.getenv('TRANSLATOR_ZMQ_PUB_PORT', '5558'))
            
            # Configuration des workers avec valeurs configurables
            normal_workers_default = int(os.getenv('NORMAL_WORKERS_DEFAULT', '20'))
            any_workers_default = int(os.getenv('ANY_WORKERS_DEFAULT', '10'))
            
            # Calculer les workers en fonction de max_workers si pas configur√© explicitement
            if os.getenv('NORMAL_WORKERS_DEFAULT') is None:
                normal_workers = max(normal_workers_default, max_workers // 2)
            else:
                normal_workers = normal_workers_default
                
            if os.getenv('ANY_WORKERS_DEFAULT') is None:
                any_workers = max(any_workers_default, max_workers // 4)
            else:
                any_workers = any_workers_default
            
            # R√©cup√©rer l'URL de la base de donn√©es
            database_url = os.getenv('DATABASE_URL', 'postgresql://meeshy:MeeshyP@ssword@localhost:5432/meeshy')
            
            self.zmq_server = ZMQTranslationServer(
                gateway_push_port=zmq_push_port,  # Port o√π Translator PULL bind (Gateway PUSH connect ici)
                gateway_sub_port=zmq_pub_port,    # Port o√π Translator PUB bind (Gateway SUB connect ici)
                normal_workers=normal_workers,
                any_workers=any_workers,
                translation_service=self.translation_service,
                database_url=database_url
            )
            
            logger.info(f"[TRANSLATOR] üîß Configuration workers haute performance: normal={normal_workers}, any={any_workers}, total={normal_workers + any_workers}")
            logger.info(f"[TRANSLATOR] üöÄ Capacit√© estim√©e: ~{normal_workers + any_workers} traductions simultan√©es")
            # Initialiser le serveur ZMQ
            await self.zmq_server.initialize()
            logger.info("[TRANSLATOR] ‚úÖ Serveur ZMQ configur√© avec service ML unifi√©")
            
            # 3. Initialiser l'API FastAPI avec le service ML unifi√©
            self.translation_api = TranslationAPI(
                translation_service=self.translation_service,  # Service ML unifi√©
                zmq_server=self.zmq_server
            )
            logger.info("[TRANSLATOR] ‚úÖ API FastAPI configur√©e avec service ML unifi√©")
            
            self.is_initialized = True
            logger.info("[TRANSLATOR] ‚úÖ Architecture unifi√©e initialis√©e avec succ√®s")
            logger.info(f"[TRANSLATOR] üéØ Tous les canaux (ZMQ, REST) utilisent le service ML unifi√©")
            
            return True
            
        except Exception as e:
            logger.error(f"[TRANSLATOR] ‚ùå Erreur lors de l'initialisation: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def start_zmq_server(self):
        """D√©marre le serveur ZMQ haute performance"""
        try:
            logger.info("[TRANSLATOR] üîå D√©marrage du serveur ZMQ haute performance...")
            # Marquer le serveur comme d√©marr√©
            self.zmq_server.running = True
            logger.info(f"[TRANSLATOR] ‚úÖ Serveur ZMQ marqu√© comme d√©marr√© (running={self.zmq_server.running})")
            # D√©marrer le serveur ZMQ en arri√®re-plan
            task = asyncio.create_task(self.zmq_server.start())
            logger.info("[TRANSLATOR] ‚úÖ T√¢che serveur ZMQ cr√©√©e avec succ√®s")
            return task
        except Exception as e:
            logger.error(f"[TRANSLATOR] ‚ùå Erreur serveur ZMQ: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    async def start_api_server(self):
        """D√©marre l'API FastAPI"""
        try:
            logger.info("[TRANSLATOR] üåê D√©marrage de l'API FastAPI...")
            import uvicorn
            
            host = "0.0.0.0"
            port = int(self.settings.fastapi_port or 8000)
            
            config = uvicorn.Config(
                app=self.translation_api.app,
                host=host,
                port=port,
                log_level="info",
                access_log=True
            )
            
            server = uvicorn.Server(config)
            await server.serve()
            
        except Exception as e:
            logger.error(f"[TRANSLATOR] ‚ùå Erreur API FastAPI: {e}")
    
    async def start(self):
        """D√©marre le serveur de traduction"""
        if not await self.initialize():
            logger.error("[TRANSLATOR] ‚ùå √âchec de l'initialisation, arr√™t du serveur")
            return
        
        try:
            logger.info("[TRANSLATOR] üöÄ D√©marrage du serveur de traduction haute performance...")
            
            # D√©marrer le serveur ZMQ en arri√®re-plan
            zmq_task = await self.start_zmq_server()
            if not zmq_task:
                logger.error("[TRANSLATOR] ‚ùå Impossible de d√©marrer le serveur ZMQ")
                return
            
            logger.info("[TRANSLATOR] ‚úÖ Serveur ZMQ d√©marr√© avec succ√®s")
            
            # D√©marrer l'API FastAPI en parall√®le avec ZMQ
            api_task = asyncio.create_task(self.start_api_server())
            
            # Attendre que l'une des t√¢ches se termine
            await asyncio.gather(zmq_task, api_task, return_exceptions=True)
            
        except KeyboardInterrupt:
            logger.info("[TRANSLATOR] üõë Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            logger.error(f"[TRANSLATOR] ‚ùå Erreur serveur: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await self.stop()
    
    async def stop(self):
        """Arr√™te le serveur de traduction"""
        logger.info("üõë Arr√™t du serveur de traduction haute performance...")
        
        try:
            if self.zmq_server:
                await self.zmq_server.stop()
            
            if self.translation_service:
                await self.translation_service.close()
            
            logger.info("‚úÖ Serveur de traduction haute performance arr√™t√©")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t: {e}")

async def main():
    """Point d'entr√©e principal"""
    logger.info("[TRANSLATOR] üöÄ D√©marrage de la fonction main()")
    server = MeeshyTranslationServer()
    # DEBUG: Logs r√©duits de 60% - Suppression des confirmations de cr√©ation
    await server.start()
    # DEBUG: Logs r√©duits de 60% - Suppression des confirmations de fin

if __name__ == "__main__":
    try:
        logger.info("[TRANSLATOR] üöÄ Point d'entr√©e __main__ atteint")
        asyncio.run(main())
        logger.info("[TRANSLATOR] ‚úÖ asyncio.run(main()) termin√©")
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t du programme")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
