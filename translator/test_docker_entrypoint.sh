#!/bin/bash
set -e

# Configuration
MAX_RETRIES=30
RETRY_DELAY=2
APP_NAME="TRANSLATOR"

# Charger les variables d'environnement du r√©pertoire parent
if [ -f "../.env" ]; then
    export $(grep -v '^#' ../.env | xargs)
    echo "[${APP_NAME}] Variables d'environnement charg√©es depuis ../.env"
fi

log() {
    echo "[${APP_NAME}] $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log "üöÄ D√©marrage du service ${APP_NAME}..."

# Fonction de v√©rification de la base de donn√©es
wait_for_database() {
    log "‚è≥ Attente de la disponibilit√© de la base de donn√©es..."
    
    local retries=0
    until [ $retries -ge $MAX_RETRIES ]; do
        log "Tentative de connexion DB ($((retries + 1))/${MAX_RETRIES})"
        
        # Test simple avec Python sans importer Prisma
        if python3 -c "
import os
from urllib.parse import urlparse
try:
    db_url = os.environ.get('DATABASE_URL')
    if not db_url:
        raise Exception('DATABASE_URL non d√©finie')
    
    # Test de parsing d'URL basique
    parsed = urlparse(db_url)
    if not parsed.hostname:
        raise Exception('URL MongoDB invalide')
    
    print('Configuration DB valid√©e')
    exit(0)
except Exception as e:
    print(f'Erreur config DB: {e}')
    exit(1)
"; then
            log "‚úÖ Configuration de base de donn√©es valid√©e"
            return 0
        fi
        
        retries=$((retries + 1))
        if [ $retries -lt $MAX_RETRIES ]; then
            log "‚è≥ Nouvelle tentative dans ${RETRY_DELAY}s..."
            sleep $RETRY_DELAY
        fi
    done
    
    log "‚ö†Ô∏è Impossible de valider la DB apr√®s ${MAX_RETRIES} tentatives"
    log "üöÄ D√©marrage de l'application quand m√™me (les reconnexions se feront au runtime)"
}

# G√©n√©ration du client Prisma
generate_prisma_client() {
    log "üîß G√©n√©ration du client Prisma..."
    
    # D√©tecter le fichier schema
    local schema_path=""
    if [ -f "prisma/schema.prisma" ]; then
        schema_path="--schema prisma/schema.prisma"
        log "üìã Sch√©ma trouv√©: prisma/schema.prisma"
    elif [ -f "shared/prisma/schema.prisma" ]; then
        schema_path="--schema shared/prisma/schema.prisma"
        log "üìã Sch√©ma trouv√©: shared/prisma/schema.prisma"
    else
        log "üìã Utilisation du sch√©ma par d√©faut"
    fi
    
    # G√©n√©ration (critique - doit r√©ussir)
    if python -m prisma generate $schema_path; then
        log "‚úÖ Client Prisma g√©n√©r√© avec succ√®s"
    else
        log "‚ùå ERREUR: Impossible de g√©n√©rer le client Prisma"
        exit 1
    fi
}

# Test de connexion √† la base de donn√©es avec Prisma
test_prisma_connection() {
    log "üîç Test de connexion Prisma √† la base de donn√©es..."
    
    if python3 -c "
import asyncio
import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire du client Prisma au PYTHONPATH
current_dir = Path.cwd()
prisma_client_path = current_dir / 'prisma'
if prisma_client_path.exists():
    sys.path.insert(0, str(prisma_client_path))

from prisma import Prisma

async def test_connection():
    try:
        prisma = Prisma()
        await prisma.connect()
        print('‚úÖ Connexion Prisma r√©ussie')
        await prisma.disconnect()
        return True
    except Exception as e:
        print(f'‚ùå Erreur connexion Prisma: {e}')
        return False

result = asyncio.run(test_connection())
exit(0 if result else 1)
"; then
        log "‚úÖ Test de connexion Prisma r√©ussi"
        return 0
    else
        log "‚ùå Test de connexion Prisma √©chou√©"
        return 1
    fi
}

# Fonction principale
main() {
    log "üéØ Initialisation du service ${APP_NAME}..."
    
    # 1. V√©rification de la configuration DB (avec timeout)
    wait_for_database
    
    # 2. G√©n√©ration du client Prisma (critique)
    generate_prisma_client
    
    # 3. Test de connexion Prisma
    test_prisma_connection
    
    log "‚úÖ Tous les tests sont pass√©s avec succ√®s !"
}

# Point d'entr√©e
main "$@"
