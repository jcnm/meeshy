#!/bin/bash
set -e

echo "[TEST] üß™ Test des migrations Prisma pour le service Translator..."

# Variables d'environnement de test
export DATABASE_URL="postgresql://meeshy:MeeshyP@ssword@localhost:5432/meeshy"

# Fonction pour nettoyer apr√®s les tests
cleanup() {
    echo "[TEST] üßπ Nettoyage apr√®s les tests..."
    # Arr√™ter les conteneurs de test si n√©cessaire
    docker-compose down 2>/dev/null || true
}

# Fonction pour tester les migrations Prisma
test_prisma_migrations() {
    echo "[TEST] üîß Test des migrations Prisma..."
    
    # V√©rifier que le sch√©ma Prisma existe
    if [ ! -f "./shared/prisma/schema.prisma" ]; then
        echo "[TEST] ‚ùå Sch√©ma Prisma non trouv√© dans ./shared/prisma/schema.prisma"
        return 1
    fi
    
    # V√©rifier que le dossier migrations existe (optionnel)
    if [ ! -d "./shared/prisma/migrations" ]; then
        echo "[TEST] ‚ö†Ô∏è Dossier migrations non trouv√© dans ./shared/prisma/migrations (normal pour l'initialisation)"
    else
        echo "[TEST] ‚úÖ Dossier migrations trouv√©"
    fi
    
    echo "[TEST] ‚úÖ Sch√©ma Prisma trouv√©"
    
    # Tester la g√©n√©ration du client Prisma (optionnel)
    echo "[TEST] üì¶ Test de g√©n√©ration du client Prisma..."
    if prisma generate --schema=./shared/prisma/schema.prisma; then
        echo "[TEST] ‚úÖ G√©n√©ration du client Prisma r√©ussie"
    else
        echo "[TEST] ‚ö†Ô∏è √âchec de la g√©n√©ration du client Prisma (normal si prisma-client-py non install√©)"
    fi
    
    # Tester la validation du sch√©ma
    echo "[TEST] üîç Test de validation du sch√©ma Prisma..."
    if prisma validate --schema=./shared/prisma/schema.prisma; then
        echo "[TEST] ‚úÖ Validation du sch√©ma Prisma r√©ussie"
    else
        echo "[TEST] ‚ö†Ô∏è √âchec de la validation du sch√©ma Prisma (normal si prisma-client-py non install√©)"
    fi
    
    # Tester la commande db push (pour l'initialisation)
    echo "[TEST] üóÑÔ∏è Test de la commande db push..."
    if prisma db push --schema=./shared/prisma/schema.prisma --skip-generate --accept-data-loss --force-reset; then
        echo "[TEST] ‚úÖ Commande db push r√©ussie"
    else
        echo "[TEST] ‚ö†Ô∏è Commande db push √©chou√©e (normal si pas de base de donn√©es)"
    fi
    
    # Tester la commande migrate deploy
    echo "[TEST] üîÑ Test de la commande migrate deploy..."
    if prisma migrate deploy --schema=./shared/prisma/schema.prisma; then
        echo "[TEST] ‚úÖ Commande migrate deploy r√©ussie"
    else
        echo "[TEST] ‚ö†Ô∏è Commande migrate deploy √©chou√©e (normal si pas de base de donn√©es)"
    fi
    
    echo "[TEST] ‚úÖ Tests Prisma termin√©s (certains peuvent avoir √©chou√© si prisma-client-py n'est pas install√©)"
}

# Fonction pour tester le script d'entr√©e Docker
test_docker_entrypoint() {
    echo "[TEST] üê≥ Test du script d'entr√©e Docker..."
    
    # V√©rifier que le script d'entr√©e existe
    if [ ! -f "./docker-entrypoint.sh" ]; then
        echo "[TEST] ‚ùå Script d'entr√©e Docker non trouv√©"
        return 1
    fi
    
    # V√©rifier que le script est ex√©cutable
    if [ ! -x "./docker-entrypoint.sh" ]; then
        echo "[TEST] ‚ùå Script d'entr√©e Docker non ex√©cutable"
        return 1
    fi
    
    echo "[TEST] ‚úÖ Script d'entr√©e Docker valide"
}

# Fonction pour tester la configuration Docker
test_docker_config() {
    echo "[TEST] üê≥ Test de la configuration Docker..."
    
    # V√©rifier que le Dockerfile existe
    if [ ! -f "./Dockerfile" ]; then
        echo "[TEST] ‚ùå Dockerfile non trouv√©"
        return 1
    fi
    
    # V√©rifier que le script d'entr√©e est r√©f√©renc√© dans le Dockerfile
    if ! grep -q "docker-entrypoint.sh" ./Dockerfile; then
        echo "[TEST] ‚ùå Script d'entr√©e non r√©f√©renc√© dans le Dockerfile"
        return 1
    fi
    
    # V√©rifier que postgresql-client est install√©
    if ! grep -q "postgresql-client" ./Dockerfile; then
        echo "[TEST] ‚ùå postgresql-client non install√© dans le Dockerfile"
        return 1
    fi
    
    echo "[TEST] ‚úÖ Configuration Docker valide"
}

# Fonction principale
main() {
    echo "[TEST] üéØ D√©marrage des tests de migrations Prisma..."
    
    # Configuration du trap pour le nettoyage
    trap cleanup EXIT
    
    # Tests
    test_prisma_migrations
    test_docker_entrypoint
    test_docker_config
    
    echo "[TEST] ‚úÖ Tous les tests r√©ussis !"
    echo "[TEST] üöÄ Le service Translator est pr√™t √† ex√©cuter les migrations Prisma au d√©marrage"
}

# Ex√©cuter les tests
main
