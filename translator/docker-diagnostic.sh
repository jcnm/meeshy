#!/bin/bash

# Script de diagnostic pour le service de traduction Meeshy dans Docker
# Identifie les probl√®mes courants avec les mod√®les ML

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç [DOCKER] Diagnostic du service de traduction Meeshy${NC}"
echo "=============================================="

# Variables
CONTAINER_NAME="translator"
MODELS_PATH="/app/models"

# Fonction de log
log() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. V√©rifier que le conteneur est en cours d'ex√©cution
echo -e "${BLUE}üìã V√©rification du conteneur...${NC}"
if ! docker ps | grep -q "$CONTAINER_NAME"; then
    error "Le conteneur $CONTAINER_NAME n'est pas en cours d'ex√©cution"
    echo "D√©marrage du conteneur..."
    docker-compose up -d translator
    sleep 10
fi

log "Conteneur $CONTAINER_NAME est en cours d'ex√©cution"

# 2. V√©rifier l'√©tat de sant√© du conteneur
echo -e "${BLUE}üè• V√©rification de l'√©tat de sant√©...${NC}"
HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME 2>/dev/null || echo "unknown")

if [ "$HEALTH_STATUS" = "healthy" ]; then
    log "Conteneur en bonne sant√©"
elif [ "$HEALTH_STATUS" = "starting" ]; then
    warn "Conteneur en cours de d√©marrage (peut prendre plusieurs minutes pour les mod√®les ML)"
else
    error "Conteneur en mauvais √©tat: $HEALTH_STATUS"
fi

# 3. V√©rifier les logs r√©cents
echo -e "${BLUE}üìù Analyse des logs r√©cents...${NC}"
echo "--- Derniers logs (50 lignes) ---"
docker logs --tail=50 $CONTAINER_NAME

# 4. V√©rifier l'utilisation des ressources
echo -e "${BLUE}üíæ V√©rification des ressources...${NC}"
docker stats --no-stream $CONTAINER_NAME

# 5. V√©rifier l'espace disque
echo -e "${BLUE}üíø V√©rification de l'espace disque...${NC}"
docker exec $CONTAINER_NAME df -h /app/models 2>/dev/null || warn "Impossible de v√©rifier l'espace disque"

# 6. V√©rifier les mod√®les ML
echo -e "${BLUE}ü§ñ V√©rification des mod√®les ML...${NC}"
MODELS_COUNT=$(docker exec $CONTAINER_NAME find $MODELS_PATH -name "*.bin" -o -name "*.safetensors" 2>/dev/null | wc -l || echo "0")

if [ "$MODELS_COUNT" -gt 0 ]; then
    log "Mod√®les trouv√©s: $MODELS_COUNT"
    echo "--- Mod√®les disponibles ---"
    docker exec $CONTAINER_NAME find $MODELS_PATH -name "*.bin" -o -name "*.safetensors" 2>/dev/null | head -10
else
    warn "Aucun mod√®le ML trouv√© dans $MODELS_PATH"
fi

# 7. Test de connectivit√© API
echo -e "${BLUE}üåê Test de connectivit√© API...${NC}"
if curl -s http://localhost:8000/health >/dev/null 2>&1; then
    log "API FastAPI accessible"
else
    error "API FastAPI inaccessible"
fi

# 8. Test de connectivit√© ZMQ
echo -e "${BLUE}üîå Test de connectivit√© ZMQ...${NC}"
if docker exec $CONTAINER_NAME python3 -c "import zmq; print('ZMQ disponible')" 2>/dev/null; then
    log "ZMQ disponible dans le conteneur"
else
    error "ZMQ non disponible dans le conteneur"
fi

# 9. V√©rifier les variables d'environnement
echo -e "${BLUE}‚öôÔ∏è V√©rification des variables d'environnement...${NC}"
docker exec $CONTAINER_NAME env | grep -E "(ML_|MODEL_|DEVICE|TORCH)" | sort

# 10. Test de traduction simple
echo -e "${BLUE}üîÑ Test de traduction simple...${NC}"
TEST_RESPONSE=$(curl -s -X POST "http://localhost:8000/translate" \
    -H "Content-Type: application/json" \
    -d '{"text":"Hello world","source_language":"en","target_language":"fr","model_type":"basic"}' \
    --max-time 30 2>/dev/null || echo "timeout")

if echo "$TEST_RESPONSE" | grep -q "translated_text"; then
    log "Test de traduction r√©ussi"
    echo "R√©ponse: $TEST_RESPONSE"
else
    error "Test de traduction √©chou√©"
    echo "R√©ponse: $TEST_RESPONSE"
fi

# 11. Recommandations
echo -e "${BLUE}üí° Recommandations...${NC}"

# V√©rifier la m√©moire disponible
MEMORY_LIMIT=$(docker inspect --format='{{.HostConfig.Memory}}' $CONTAINER_NAME 2>/dev/null || echo "0")
if [ "$MEMORY_LIMIT" -lt 8589934592 ]; then  # 8GB
    warn "Recommandation: Augmenter la limite de m√©moire √† au moins 8GB pour les mod√®les ML"
fi

# V√©rifier les CPUs
CPU_LIMIT=$(docker inspect --format='{{.HostConfig.CpuCount}}' $CONTAINER_NAME 2>/dev/null || echo "0")
if [ "$CPU_LIMIT" -lt 4 ]; then
    warn "Recommandation: Allouer au moins 4 CPUs pour les performances ML"
fi

# V√©rifier le temps de d√©marrage
START_TIME=$(docker inspect --format='{{.State.StartedAt}}' $CONTAINER_NAME 2>/dev/null)
if [ -n "$START_TIME" ]; then
    log "Conteneur d√©marr√© le: $START_TIME"
fi

echo -e "${GREEN}‚úÖ Diagnostic termin√©${NC}"
echo ""
echo -e "${BLUE}üîß Solutions courantes:${NC}"
echo "1. Augmenter la m√©moire Docker (8GB minimum)"
echo "2. Augmenter les CPUs (4 minimum)"
echo "3. V√©rifier que les mod√®les sont t√©l√©charg√©s"
echo "4. Red√©marrer le conteneur: docker-compose restart translator"
echo "5. V√©rifier les logs: docker logs -f translator"
