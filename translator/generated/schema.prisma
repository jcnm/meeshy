// This file is a symbolic reference to the shared schema
// The actual schema is in ../shared/prisma/schema.prisma

generator client {
  provider = "prisma-client-py"
  output   = "./generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for language preferences
model User {
  id                              String     @id @default(cuid())
  email                          String     @unique
  username                      String     @unique
  firstName                     String?
  lastName                      String?
  avatar                        String?
  isOnline                      Boolean    @default(false)
  lastSeen                      DateTime?
  status                        String     @default("active")
  
  // Language configuration
  systemLanguage                String     @default("fr")
  regionalLanguage              String     @default("fr")
  customDestinationLanguage     String?
  autoTranslateEnabled          Boolean    @default(true)
  translateToSystemLanguage     Boolean    @default(true)
  translateToRegionalLanguage   Boolean    @default(false)
  useCustomDestination          Boolean    @default(false)
  
  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt
  
  // Relations
  sentMessages                  Message[]  @relation("MessageSender")
  conversations                 ConversationMember[]
  createdConversations          Conversation[] @relation("ConversationCreator")
}

// Conversation model  
model Conversation {
  id              String   @id @default(cuid())
  title           String?
  type            String   @default("direct") // direct, group
  isArchived      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  creator         User     @relation("ConversationCreator", fields: [creatorId], references: [id])
  creatorId       String
  messages        Message[]
  members         ConversationMember[]
}

// Conversation membership
model ConversationMember {
  id              String   @id @default(cuid())
  role            String   @default("member") // admin, member
  joinedAt        DateTime @default(now())
  lastReadAt      DateTime?
  
  // Relations
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  
  @@unique([conversationId, userId])
}

// Message model with original content
model Message {
  id                String              @id @default(cuid())
  content           String
  originalLanguage  String              @default("fr")
  messageType       String              @default("text") // text, file, image
  fileUrl           String?
  isEdited          Boolean             @default(false)
  isDeleted         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  sender            User                @relation("MessageSender", fields: [senderId], references: [id])
  senderId          String
  conversation      Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId    String
  translations      MessageTranslation[]
}

// Message translations - normalized storage
model MessageTranslation {
  id                  String   @id @default(cuid())
  sourceLanguage      String   
  targetLanguage      String
  translatedContent   String
  translationModel    String   @default("basic") // basic, medium, premium
  cacheKey           String   @unique
  confidence         Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  message            Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId          String
  
  @@unique([messageId, targetLanguage])
  @@index([cacheKey])
  @@index([sourceLanguage, targetLanguage])
}
