# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    firstName: Optional[_str]
    lastName: Optional[_str]
    avatar: Optional[_str]
    isOnline: _bool
    lastSeen: Optional[datetime.datetime]
    status: _str
    systemLanguage: _str
    regionalLanguage: _str
    customDestinationLanguage: Optional[_str]
    autoTranslateEnabled: _bool
    translateToSystemLanguage: _bool
    translateToRegionalLanguage: _bool
    useCustomDestination: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    sentMessages: 'MessageCreateManyNestedWithoutRelationsInput'
    conversations: 'ConversationMemberCreateManyNestedWithoutRelationsInput'
    createdConversations: 'ConversationCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    username: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    firstName: Optional[_str]
    lastName: Optional[_str]
    avatar: Optional[_str]
    isOnline: _bool
    lastSeen: Optional[datetime.datetime]
    status: _str
    systemLanguage: _str
    regionalLanguage: _str
    customDestinationLanguage: Optional[_str]
    autoTranslateEnabled: _bool
    translateToSystemLanguage: _bool
    translateToRegionalLanguage: _bool
    useCustomDestination: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    username: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_UserWhereUnique_username_Input = TypedDict(
    '_UserWhereUnique_username_Input',
    {
        'username': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
    '_UserWhereUnique_username_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    username: _str
    firstName: Optional[_str]
    lastName: Optional[_str]
    avatar: Optional[_str]
    isOnline: _bool
    lastSeen: Optional[datetime.datetime]
    status: _str
    systemLanguage: _str
    regionalLanguage: _str
    customDestinationLanguage: Optional[_str]
    autoTranslateEnabled: _bool
    translateToSystemLanguage: _bool
    translateToRegionalLanguage: _bool
    useCustomDestination: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    sentMessages: 'MessageUpdateManyWithoutRelationsInput'
    conversations: 'ConversationMemberUpdateManyWithoutRelationsInput'
    createdConversations: 'ConversationUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    username: _str
    firstName: Optional[_str]
    lastName: Optional[_str]
    avatar: Optional[_str]
    isOnline: _bool
    lastSeen: Optional[datetime.datetime]
    status: _str
    systemLanguage: _str
    regionalLanguage: _str
    customDestinationLanguage: Optional[_str]
    autoTranslateEnabled: _bool
    translateToSystemLanguage: _bool
    translateToRegionalLanguage: _bool
    useCustomDestination: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_firstName_OrderByInput = TypedDict(
    '_User_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_User_lastName_OrderByInput = TypedDict(
    '_User_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_User_avatar_OrderByInput = TypedDict(
    '_User_avatar_OrderByInput',
    {
        'avatar': 'SortOrder',
    },
    total=True
)

_User_isOnline_OrderByInput = TypedDict(
    '_User_isOnline_OrderByInput',
    {
        'isOnline': 'SortOrder',
    },
    total=True
)

_User_lastSeen_OrderByInput = TypedDict(
    '_User_lastSeen_OrderByInput',
    {
        'lastSeen': 'SortOrder',
    },
    total=True
)

_User_status_OrderByInput = TypedDict(
    '_User_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_User_systemLanguage_OrderByInput = TypedDict(
    '_User_systemLanguage_OrderByInput',
    {
        'systemLanguage': 'SortOrder',
    },
    total=True
)

_User_regionalLanguage_OrderByInput = TypedDict(
    '_User_regionalLanguage_OrderByInput',
    {
        'regionalLanguage': 'SortOrder',
    },
    total=True
)

_User_customDestinationLanguage_OrderByInput = TypedDict(
    '_User_customDestinationLanguage_OrderByInput',
    {
        'customDestinationLanguage': 'SortOrder',
    },
    total=True
)

_User_autoTranslateEnabled_OrderByInput = TypedDict(
    '_User_autoTranslateEnabled_OrderByInput',
    {
        'autoTranslateEnabled': 'SortOrder',
    },
    total=True
)

_User_translateToSystemLanguage_OrderByInput = TypedDict(
    '_User_translateToSystemLanguage_OrderByInput',
    {
        'translateToSystemLanguage': 'SortOrder',
    },
    total=True
)

_User_translateToRegionalLanguage_OrderByInput = TypedDict(
    '_User_translateToRegionalLanguage_OrderByInput',
    {
        'translateToRegionalLanguage': 'SortOrder',
    },
    total=True
)

_User_useCustomDestination_OrderByInput = TypedDict(
    '_User_useCustomDestination_OrderByInput',
    {
        'useCustomDestination': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_username_OrderByInput',
    '_User_firstName_OrderByInput',
    '_User_lastName_OrderByInput',
    '_User_avatar_OrderByInput',
    '_User_isOnline_OrderByInput',
    '_User_lastSeen_OrderByInput',
    '_User_status_OrderByInput',
    '_User_systemLanguage_OrderByInput',
    '_User_regionalLanguage_OrderByInput',
    '_User_customDestinationLanguage_OrderByInput',
    '_User_autoTranslateEnabled_OrderByInput',
    '_User_translateToSystemLanguage_OrderByInput',
    '_User_translateToRegionalLanguage_OrderByInput',
    '_User_useCustomDestination_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromUser']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromUser']
    createdConversations: Union[bool, 'FindManyConversationArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromUserRecursive1']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromUserRecursive1']
    createdConversations: Union[bool, 'FindManyConversationArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromUserRecursive2']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromUserRecursive2']
    createdConversations: Union[bool, 'FindManyConversationArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromUserRecursive3']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromUserRecursive3']
    createdConversations: Union[bool, 'FindManyConversationArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromUserRecursive4']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromUserRecursive4']
    createdConversations: Union[bool, 'FindManyConversationArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ConversationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive1']
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive1']
    members: Union[bool, 'FindManyConversationMemberArgsFromUserRecursive1']


class ConversationIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive2']
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive2']
    members: Union[bool, 'FindManyConversationMemberArgsFromUserRecursive2']


class ConversationIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive3']
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive3']
    members: Union[bool, 'FindManyConversationMemberArgsFromUserRecursive3']


class ConversationIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    creator: Union[bool, 'UserArgsFromUserRecursive4']
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive4']
    members: Union[bool, 'FindManyConversationMemberArgsFromUserRecursive4']


class ConversationIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ConversationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConversationIncludeFromConversationRecursive1'


class ConversationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConversationIncludeFromConversationRecursive2'


class ConversationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConversationIncludeFromConversationRecursive3'


class ConversationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConversationIncludeFromConversationRecursive4'


class ConversationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyConversationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive1'


class FindManyConversationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive2'


class FindManyConversationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive3'


class FindManyConversationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive4'


class FindManyConversationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    
    

class ConversationMemberIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    conversation: Union[bool, 'ConversationArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class ConversationMemberIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    conversation: Union[bool, 'ConversationArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class ConversationMemberIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    conversation: Union[bool, 'ConversationArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class ConversationMemberIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    conversation: Union[bool, 'ConversationArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class ConversationMemberIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ConversationMemberArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class ConversationMemberArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class ConversationMemberArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class ConversationMemberArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class ConversationMemberArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyConversationMemberArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class FindManyConversationMemberArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class FindManyConversationMemberArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class FindManyConversationMemberArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class FindManyConversationMemberArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    
    

class MessageIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    sender: Union[bool, 'UserArgsFromUserRecursive1']
    conversation: Union[bool, 'ConversationArgsFromUserRecursive1']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromUserRecursive1']


class MessageIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    sender: Union[bool, 'UserArgsFromUserRecursive2']
    conversation: Union[bool, 'ConversationArgsFromUserRecursive2']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromUserRecursive2']


class MessageIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    sender: Union[bool, 'UserArgsFromUserRecursive3']
    conversation: Union[bool, 'ConversationArgsFromUserRecursive3']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromUserRecursive3']


class MessageIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    sender: Union[bool, 'UserArgsFromUserRecursive4']
    conversation: Union[bool, 'ConversationArgsFromUserRecursive4']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromUserRecursive4']


class MessageIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageTranslationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive1']


class MessageTranslationIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive2']


class MessageTranslationIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive3']


class MessageTranslationIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive4']


class MessageTranslationIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MessageTranslationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class MessageTranslationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class MessageTranslationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class MessageTranslationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class MessageTranslationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMessageTranslationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class FindManyMessageTranslationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class FindManyMessageTranslationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class FindManyMessageTranslationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class FindManyMessageTranslationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isOnline: Union[_bool, 'types.BooleanFilter']
    lastSeen: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    systemLanguage: Union[_str, 'types.StringFilter']
    regionalLanguage: Union[_str, 'types.StringFilter']
    customDestinationLanguage: Union[None, _str, 'types.StringFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanFilter']
    useCustomDestination: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sentMessages: 'MessageListRelationFilter'
    conversations: 'ConversationMemberListRelationFilter'
    createdConversations: 'ConversationListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isOnline: Union[_bool, 'types.BooleanFilter']
    lastSeen: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    systemLanguage: Union[_str, 'types.StringFilter']
    regionalLanguage: Union[_str, 'types.StringFilter']
    customDestinationLanguage: Union[None, _str, 'types.StringFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanFilter']
    useCustomDestination: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sentMessages: 'MessageListRelationFilter'
    conversations: 'ConversationMemberListRelationFilter'
    createdConversations: 'ConversationListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isOnline: Union[_bool, 'types.BooleanFilter']
    lastSeen: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    systemLanguage: Union[_str, 'types.StringFilter']
    regionalLanguage: Union[_str, 'types.StringFilter']
    customDestinationLanguage: Union[None, _str, 'types.StringFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanFilter']
    useCustomDestination: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sentMessages: 'MessageListRelationFilter'
    conversations: 'ConversationMemberListRelationFilter'
    createdConversations: 'ConversationListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isOnline: Union[_bool, 'types.BooleanFilter']
    lastSeen: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    systemLanguage: Union[_str, 'types.StringFilter']
    regionalLanguage: Union[_str, 'types.StringFilter']
    customDestinationLanguage: Union[None, _str, 'types.StringFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanFilter']
    useCustomDestination: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sentMessages: 'MessageListRelationFilter'
    conversations: 'ConversationMemberListRelationFilter'
    createdConversations: 'ConversationListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    firstName: Union[None, _str, 'types.StringFilter']
    lastName: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isOnline: Union[_bool, 'types.BooleanFilter']
    lastSeen: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_str, 'types.StringFilter']
    systemLanguage: Union[_str, 'types.StringFilter']
    regionalLanguage: Union[_str, 'types.StringFilter']
    customDestinationLanguage: Union[None, _str, 'types.StringFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanFilter']
    useCustomDestination: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sentMessages: 'MessageListRelationFilter'
    conversations: 'ConversationMemberListRelationFilter'
    createdConversations: 'ConversationListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isOnline: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSeen: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    systemLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    regionalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    customDestinationLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    useCustomDestination: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isOnline: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSeen: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    systemLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    regionalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    customDestinationLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    useCustomDestination: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isOnline: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSeen: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    systemLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    regionalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    customDestinationLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    useCustomDestination: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isOnline: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSeen: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    systemLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    regionalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    customDestinationLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    useCustomDestination: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isOnline: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSeen: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    systemLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    regionalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    customDestinationLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    autoTranslateEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToSystemLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    translateToRegionalLanguage: Union[_bool, 'types.BooleanWithAggregatesFilter']
    useCustomDestination: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    username: _str
    firstName: _str
    lastName: _str
    avatar: _str
    isOnline: _bool
    lastSeen: datetime.datetime
    status: _str
    systemLanguage: _str
    regionalLanguage: _str
    customDestinationLanguage: _str
    autoTranslateEnabled: _bool
    translateToSystemLanguage: _bool
    translateToRegionalLanguage: _bool
    useCustomDestination: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    username: _str
    firstName: _str
    lastName: _str
    avatar: _str
    isOnline: _bool
    lastSeen: datetime.datetime
    status: _str
    systemLanguage: _str
    regionalLanguage: _str
    customDestinationLanguage: _str
    autoTranslateEnabled: _bool
    translateToSystemLanguage: _bool
    translateToRegionalLanguage: _bool
    useCustomDestination: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    username: bool
    firstName: bool
    lastName: bool
    avatar: bool
    isOnline: bool
    lastSeen: bool
    status: bool
    systemLanguage: bool
    regionalLanguage: bool
    customDestinationLanguage: bool
    autoTranslateEnabled: bool
    translateToSystemLanguage: bool
    translateToRegionalLanguage: bool
    useCustomDestination: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    username: bool
    firstName: bool
    lastName: bool
    avatar: bool
    isOnline: bool
    lastSeen: bool
    status: bool
    systemLanguage: bool
    regionalLanguage: bool
    customDestinationLanguage: bool
    autoTranslateEnabled: bool
    translateToSystemLanguage: bool
    translateToRegionalLanguage: bool
    useCustomDestination: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'username': bool,
        'firstName': bool,
        'lastName': bool,
        'avatar': bool,
        'isOnline': bool,
        'lastSeen': bool,
        'status': bool,
        'systemLanguage': bool,
        'regionalLanguage': bool,
        'customDestinationLanguage': bool,
        'autoTranslateEnabled': bool,
        'translateToSystemLanguage': bool,
        'translateToRegionalLanguage': bool,
        'useCustomDestination': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'username': int,
        'firstName': int,
        'lastName': int,
        'avatar': int,
        'isOnline': int,
        'lastSeen': int,
        'status': int,
        'systemLanguage': int,
        'regionalLanguage': int,
        'customDestinationLanguage': int,
        'autoTranslateEnabled': int,
        'translateToSystemLanguage': int,
        'translateToRegionalLanguage': int,
        'useCustomDestination': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'username',
    'firstName',
    'lastName',
    'avatar',
    'isOnline',
    'lastSeen',
    'status',
    'systemLanguage',
    'regionalLanguage',
    'customDestinationLanguage',
    'autoTranslateEnabled',
    'translateToSystemLanguage',
    'translateToRegionalLanguage',
    'useCustomDestination',
    'createdAt',
    'updatedAt',
    'sentMessages',
    'conversations',
    'createdConversations',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'username',
    'firstName',
    'lastName',
    'avatar',
    'isOnline',
    'lastSeen',
    'status',
    'systemLanguage',
    'regionalLanguage',
    'customDestinationLanguage',
    'autoTranslateEnabled',
    'translateToSystemLanguage',
    'translateToRegionalLanguage',
    'useCustomDestination',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'sentMessages',
        'conversations',
        'createdConversations',
    ]

# Conversation types

class ConversationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Conversation create method"""
    id: _str
    title: Optional[_str]
    type: _str
    isArchived: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    creator: 'UserCreateNestedWithoutRelationsInput'
    creatorId: _str
    messages: 'MessageCreateManyNestedWithoutRelationsInput'
    members: 'ConversationMemberCreateManyNestedWithoutRelationsInput'


class ConversationCreateInput(ConversationOptionalCreateInput):
    """Required arguments to the Conversation create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ConversationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Conversation create method, without relations"""
    id: _str
    title: Optional[_str]
    type: _str
    isArchived: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    creatorId: _str


class ConversationCreateWithoutRelationsInput(ConversationOptionalCreateWithoutRelationsInput):
    """Required arguments to the Conversation create method, without relations"""


class ConversationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ConversationCreateWithoutRelationsInput'
    connect: 'ConversationWhereUniqueInput'


class ConversationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ConversationCreateWithoutRelationsInput', List['ConversationCreateWithoutRelationsInput']]
    connect: Union['ConversationWhereUniqueInput', List['ConversationWhereUniqueInput']]


_ConversationWhereUnique_id_Input = TypedDict(
    '_ConversationWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ConversationWhereUniqueInput = _ConversationWhereUnique_id_Input


class ConversationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: Optional[_str]
    type: _str
    isArchived: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    creator: 'UserUpdateOneWithoutRelationsInput'
    messages: 'MessageUpdateManyWithoutRelationsInput'
    members: 'ConversationMemberUpdateManyWithoutRelationsInput'


class ConversationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: Optional[_str]
    type: _str
    isArchived: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ConversationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ConversationCreateWithoutRelationsInput']
    connect: List['ConversationWhereUniqueInput']
    set: List['ConversationWhereUniqueInput']
    disconnect: List['ConversationWhereUniqueInput']
    delete: List['ConversationWhereUniqueInput']

    # TODO
    # update: List['ConversationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ConversationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ConversationScalarWhereInput']
    # upsert: List['ConversationUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ConversationCreateOrConnectWithoutRelationsInput']


class ConversationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ConversationCreateWithoutRelationsInput'
    connect: 'ConversationWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ConversationUpdateInput'
    # upsert: 'ConversationUpsertWithoutRelationsInput'
    # connectOrCreate: 'ConversationCreateOrConnectWithoutRelationsInput'


class ConversationUpsertInput(TypedDict):
    create: 'ConversationCreateInput'
    update: 'ConversationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Conversation_id_OrderByInput = TypedDict(
    '_Conversation_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Conversation_title_OrderByInput = TypedDict(
    '_Conversation_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Conversation_type_OrderByInput = TypedDict(
    '_Conversation_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Conversation_isArchived_OrderByInput = TypedDict(
    '_Conversation_isArchived_OrderByInput',
    {
        'isArchived': 'SortOrder',
    },
    total=True
)

_Conversation_createdAt_OrderByInput = TypedDict(
    '_Conversation_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Conversation_updatedAt_OrderByInput = TypedDict(
    '_Conversation_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Conversation_creatorId_OrderByInput = TypedDict(
    '_Conversation_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

ConversationOrderByInput = Union[
    '_Conversation_id_OrderByInput',
    '_Conversation_title_OrderByInput',
    '_Conversation_type_OrderByInput',
    '_Conversation_isArchived_OrderByInput',
    '_Conversation_createdAt_OrderByInput',
    '_Conversation_updatedAt_OrderByInput',
    '_Conversation_creatorId_OrderByInput',
]



# recursive Conversation types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ConversationRelationFilter = TypedDict(
    'ConversationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ConversationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ConversationInclude(TypedDict, total=False):
    """Conversation relational arguments"""
    creator: Union[bool, 'UserArgsFromConversation']
    messages: Union[bool, 'FindManyMessageArgsFromConversation']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversation']


    

class UserIncludeFromConversation(TypedDict, total=False):
    """Relational arguments for Conversation"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromConversationRecursive1']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromConversationRecursive1']
    createdConversations: Union[bool, 'FindManyConversationArgsFromConversationRecursive1']


class UserIncludeFromConversationRecursive1(TypedDict, total=False):
    """Relational arguments for Conversation"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromConversationRecursive2']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromConversationRecursive2']
    createdConversations: Union[bool, 'FindManyConversationArgsFromConversationRecursive2']


class UserIncludeFromConversationRecursive2(TypedDict, total=False):
    """Relational arguments for Conversation"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromConversationRecursive3']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromConversationRecursive3']
    createdConversations: Union[bool, 'FindManyConversationArgsFromConversationRecursive3']


class UserIncludeFromConversationRecursive3(TypedDict, total=False):
    """Relational arguments for Conversation"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromConversationRecursive4']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromConversationRecursive4']
    createdConversations: Union[bool, 'FindManyConversationArgsFromConversationRecursive4']


class UserIncludeFromConversationRecursive4(TypedDict, total=False):
    """Relational arguments for Conversation"""

    

class UserArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    
    

class FindManyUserArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ConversationIncludeFromConversation(TypedDict, total=False):
    """Relational arguments for Conversation"""
    creator: Union[bool, 'UserArgsFromConversationRecursive1']
    messages: Union[bool, 'FindManyMessageArgsFromConversationRecursive1']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversationRecursive1']


class ConversationIncludeFromConversationRecursive1(TypedDict, total=False):
    """Relational arguments for Conversation"""
    creator: Union[bool, 'UserArgsFromConversationRecursive2']
    messages: Union[bool, 'FindManyMessageArgsFromConversationRecursive2']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversationRecursive2']


class ConversationIncludeFromConversationRecursive2(TypedDict, total=False):
    """Relational arguments for Conversation"""
    creator: Union[bool, 'UserArgsFromConversationRecursive3']
    messages: Union[bool, 'FindManyMessageArgsFromConversationRecursive3']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversationRecursive3']


class ConversationIncludeFromConversationRecursive3(TypedDict, total=False):
    """Relational arguments for Conversation"""
    creator: Union[bool, 'UserArgsFromConversationRecursive4']
    messages: Union[bool, 'FindManyMessageArgsFromConversationRecursive4']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversationRecursive4']


class ConversationIncludeFromConversationRecursive4(TypedDict, total=False):
    """Relational arguments for Conversation"""

    

class ConversationArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'ConversationIncludeFromConversationRecursive1'


class ConversationArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'ConversationIncludeFromConversationRecursive2'


class ConversationArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'ConversationIncludeFromConversationRecursive3'


class ConversationArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'ConversationIncludeFromConversationRecursive4'


class ConversationArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    
    

class FindManyConversationArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive1'


class FindManyConversationArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive2'


class FindManyConversationArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive3'


class FindManyConversationArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive4'


class FindManyConversationArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    
    

class ConversationMemberIncludeFromConversation(TypedDict, total=False):
    """Relational arguments for Conversation"""
    conversation: Union[bool, 'ConversationArgsFromConversationRecursive1']
    user: Union[bool, 'UserArgsFromConversationRecursive1']


class ConversationMemberIncludeFromConversationRecursive1(TypedDict, total=False):
    """Relational arguments for Conversation"""
    conversation: Union[bool, 'ConversationArgsFromConversationRecursive2']
    user: Union[bool, 'UserArgsFromConversationRecursive2']


class ConversationMemberIncludeFromConversationRecursive2(TypedDict, total=False):
    """Relational arguments for Conversation"""
    conversation: Union[bool, 'ConversationArgsFromConversationRecursive3']
    user: Union[bool, 'UserArgsFromConversationRecursive3']


class ConversationMemberIncludeFromConversationRecursive3(TypedDict, total=False):
    """Relational arguments for Conversation"""
    conversation: Union[bool, 'ConversationArgsFromConversationRecursive4']
    user: Union[bool, 'UserArgsFromConversationRecursive4']


class ConversationMemberIncludeFromConversationRecursive4(TypedDict, total=False):
    """Relational arguments for Conversation"""

    

class ConversationMemberArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class ConversationMemberArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class ConversationMemberArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class ConversationMemberArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class ConversationMemberArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    
    

class FindManyConversationMemberArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class FindManyConversationMemberArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class FindManyConversationMemberArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class FindManyConversationMemberArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class FindManyConversationMemberArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    
    

class MessageIncludeFromConversation(TypedDict, total=False):
    """Relational arguments for Conversation"""
    sender: Union[bool, 'UserArgsFromConversationRecursive1']
    conversation: Union[bool, 'ConversationArgsFromConversationRecursive1']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromConversationRecursive1']


class MessageIncludeFromConversationRecursive1(TypedDict, total=False):
    """Relational arguments for Conversation"""
    sender: Union[bool, 'UserArgsFromConversationRecursive2']
    conversation: Union[bool, 'ConversationArgsFromConversationRecursive2']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromConversationRecursive2']


class MessageIncludeFromConversationRecursive2(TypedDict, total=False):
    """Relational arguments for Conversation"""
    sender: Union[bool, 'UserArgsFromConversationRecursive3']
    conversation: Union[bool, 'ConversationArgsFromConversationRecursive3']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromConversationRecursive3']


class MessageIncludeFromConversationRecursive3(TypedDict, total=False):
    """Relational arguments for Conversation"""
    sender: Union[bool, 'UserArgsFromConversationRecursive4']
    conversation: Union[bool, 'ConversationArgsFromConversationRecursive4']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromConversationRecursive4']


class MessageIncludeFromConversationRecursive4(TypedDict, total=False):
    """Relational arguments for Conversation"""

    

class MessageArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    
    

class FindManyMessageArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageTranslationIncludeFromConversation(TypedDict, total=False):
    """Relational arguments for Conversation"""
    message: Union[bool, 'MessageArgsFromConversationRecursive1']


class MessageTranslationIncludeFromConversationRecursive1(TypedDict, total=False):
    """Relational arguments for Conversation"""
    message: Union[bool, 'MessageArgsFromConversationRecursive2']


class MessageTranslationIncludeFromConversationRecursive2(TypedDict, total=False):
    """Relational arguments for Conversation"""
    message: Union[bool, 'MessageArgsFromConversationRecursive3']


class MessageTranslationIncludeFromConversationRecursive3(TypedDict, total=False):
    """Relational arguments for Conversation"""
    message: Union[bool, 'MessageArgsFromConversationRecursive4']


class MessageTranslationIncludeFromConversationRecursive4(TypedDict, total=False):
    """Relational arguments for Conversation"""

    

class MessageTranslationArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class MessageTranslationArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class MessageTranslationArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class MessageTranslationArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class MessageTranslationArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    
    

class FindManyMessageTranslationArgsFromConversation(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class FindManyMessageTranslationArgsFromConversationRecursive1(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class FindManyMessageTranslationArgsFromConversationRecursive2(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class FindManyMessageTranslationArgsFromConversationRecursive3(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class FindManyMessageTranslationArgsFromConversationRecursive4(TypedDict, total=False):
    """Arguments for Conversation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    


FindManyConversationArgs = FindManyConversationArgsFromConversation
FindFirstConversationArgs = FindManyConversationArgsFromConversation


    

class ConversationWhereInput(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    isArchived: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_str, 'types.StringFilter']
    messages: 'MessageListRelationFilter'
    members: 'ConversationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['ConversationWhereInputRecursive1', List['ConversationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ConversationWhereInputRecursive1']
    OR: List['ConversationWhereInputRecursive1']
    NOT: List['ConversationWhereInputRecursive1']


class ConversationWhereInputRecursive1(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    isArchived: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_str, 'types.StringFilter']
    messages: 'MessageListRelationFilter'
    members: 'ConversationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['ConversationWhereInputRecursive2', List['ConversationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ConversationWhereInputRecursive2']
    OR: List['ConversationWhereInputRecursive2']
    NOT: List['ConversationWhereInputRecursive2']


class ConversationWhereInputRecursive2(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    isArchived: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_str, 'types.StringFilter']
    messages: 'MessageListRelationFilter'
    members: 'ConversationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['ConversationWhereInputRecursive3', List['ConversationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ConversationWhereInputRecursive3']
    OR: List['ConversationWhereInputRecursive3']
    NOT: List['ConversationWhereInputRecursive3']


class ConversationWhereInputRecursive3(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    isArchived: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_str, 'types.StringFilter']
    messages: 'MessageListRelationFilter'
    members: 'ConversationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['ConversationWhereInputRecursive4', List['ConversationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ConversationWhereInputRecursive4']
    OR: List['ConversationWhereInputRecursive4']
    NOT: List['ConversationWhereInputRecursive4']


class ConversationWhereInputRecursive4(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[None, _str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    isArchived: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creator: 'UserRelationFilter'
    creatorId: Union[_str, 'types.StringFilter']
    messages: 'MessageListRelationFilter'
    members: 'ConversationMemberListRelationFilter'



# aggregate Conversation types


    

class ConversationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    isArchived: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConversationScalarWhereWithAggregatesInputRecursive1']
    OR: List['ConversationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ConversationScalarWhereWithAggregatesInputRecursive1']


class ConversationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    isArchived: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConversationScalarWhereWithAggregatesInputRecursive2']
    OR: List['ConversationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ConversationScalarWhereWithAggregatesInputRecursive2']


class ConversationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    isArchived: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConversationScalarWhereWithAggregatesInputRecursive3']
    OR: List['ConversationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ConversationScalarWhereWithAggregatesInputRecursive3']


class ConversationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    isArchived: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConversationScalarWhereWithAggregatesInputRecursive4']
    OR: List['ConversationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ConversationScalarWhereWithAggregatesInputRecursive4']


class ConversationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Conversation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    isArchived: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']



class ConversationGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    type: _str
    isArchived: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    creatorId: _str
    _sum: 'ConversationSumAggregateOutput'
    _avg: 'ConversationAvgAggregateOutput'
    _min: 'ConversationMinAggregateOutput'
    _max: 'ConversationMaxAggregateOutput'
    _count: 'ConversationCountAggregateOutput'


class ConversationAvgAggregateOutput(TypedDict, total=False):
    """Conversation output for aggregating averages"""


class ConversationSumAggregateOutput(TypedDict, total=False):
    """Conversation output for aggregating sums"""


class ConversationScalarAggregateOutput(TypedDict, total=False):
    """Conversation output including scalar fields"""
    id: _str
    title: _str
    type: _str
    isArchived: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    creatorId: _str


ConversationMinAggregateOutput = ConversationScalarAggregateOutput
ConversationMaxAggregateOutput = ConversationScalarAggregateOutput


class ConversationMaxAggregateInput(TypedDict, total=False):
    """Conversation input for aggregating by max"""
    id: bool
    title: bool
    type: bool
    isArchived: bool
    createdAt: bool
    updatedAt: bool
    creatorId: bool


class ConversationMinAggregateInput(TypedDict, total=False):
    """Conversation input for aggregating by min"""
    id: bool
    title: bool
    type: bool
    isArchived: bool
    createdAt: bool
    updatedAt: bool
    creatorId: bool


class ConversationNumberAggregateInput(TypedDict, total=False):
    """Conversation input for aggregating numbers"""


ConversationAvgAggregateInput = ConversationNumberAggregateInput
ConversationSumAggregateInput = ConversationNumberAggregateInput


ConversationCountAggregateInput = TypedDict(
    'ConversationCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'type': bool,
        'isArchived': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'creatorId': bool,
        '_all': bool,
    },
    total=False,
)

ConversationCountAggregateOutput = TypedDict(
    'ConversationCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'type': int,
        'isArchived': int,
        'createdAt': int,
        'updatedAt': int,
        'creatorId': int,
        '_all': int,
    },
    total=False,
)


ConversationKeys = Literal[
    'id',
    'title',
    'type',
    'isArchived',
    'createdAt',
    'updatedAt',
    'creator',
    'creatorId',
    'messages',
    'members',
]
ConversationScalarFieldKeys = Literal[
    'id',
    'title',
    'type',
    'isArchived',
    'createdAt',
    'updatedAt',
    'creatorId',
]
ConversationScalarFieldKeysT = TypeVar('ConversationScalarFieldKeysT', bound=ConversationScalarFieldKeys)

ConversationRelationalFieldKeys = Literal[
        'creator',
        'messages',
        'members',
    ]

# ConversationMember types

class ConversationMemberOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ConversationMember create method"""
    id: _str
    role: _str
    joinedAt: datetime.datetime
    lastReadAt: Optional[datetime.datetime]
    conversation: 'ConversationCreateNestedWithoutRelationsInput'
    conversationId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _str


class ConversationMemberCreateInput(ConversationMemberOptionalCreateInput):
    """Required arguments to the ConversationMember create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ConversationMemberOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ConversationMember create method, without relations"""
    id: _str
    role: _str
    joinedAt: datetime.datetime
    lastReadAt: Optional[datetime.datetime]
    conversationId: _str
    userId: _str


class ConversationMemberCreateWithoutRelationsInput(ConversationMemberOptionalCreateWithoutRelationsInput):
    """Required arguments to the ConversationMember create method, without relations"""


class ConversationMemberCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ConversationMemberCreateWithoutRelationsInput'
    connect: 'ConversationMemberWhereUniqueInput'


class ConversationMemberCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ConversationMemberCreateWithoutRelationsInput', List['ConversationMemberCreateWithoutRelationsInput']]
    connect: Union['ConversationMemberWhereUniqueInput', List['ConversationMemberWhereUniqueInput']]


_ConversationMemberWhereUnique_id_Input = TypedDict(
    '_ConversationMemberWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ConversationMemberCompoundconversationId_userIdKeyInner = TypedDict(
    '_ConversationMemberCompoundconversationId_userIdKeyInner',
    {
        'conversationId': '_str',
        'userId': '_str',
    },
    total=True
)

_ConversationMemberCompoundconversationId_userIdKey = TypedDict(
    '_ConversationMemberCompoundconversationId_userIdKey',
    {
        'conversationId_userId': '_ConversationMemberCompoundconversationId_userIdKeyInner',
    },
    total=True
)

ConversationMemberWhereUniqueInput = Union[
    '_ConversationMemberWhereUnique_id_Input',
    '_ConversationMemberCompoundconversationId_userIdKey',
]


class ConversationMemberUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    role: _str
    joinedAt: datetime.datetime
    lastReadAt: Optional[datetime.datetime]
    conversation: 'ConversationUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class ConversationMemberUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: _str
    joinedAt: datetime.datetime
    lastReadAt: Optional[datetime.datetime]


class ConversationMemberUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ConversationMemberCreateWithoutRelationsInput']
    connect: List['ConversationMemberWhereUniqueInput']
    set: List['ConversationMemberWhereUniqueInput']
    disconnect: List['ConversationMemberWhereUniqueInput']
    delete: List['ConversationMemberWhereUniqueInput']

    # TODO
    # update: List['ConversationMemberUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ConversationMemberUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ConversationMemberScalarWhereInput']
    # upsert: List['ConversationMemberUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ConversationMemberCreateOrConnectWithoutRelationsInput']


class ConversationMemberUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ConversationMemberCreateWithoutRelationsInput'
    connect: 'ConversationMemberWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ConversationMemberUpdateInput'
    # upsert: 'ConversationMemberUpsertWithoutRelationsInput'
    # connectOrCreate: 'ConversationMemberCreateOrConnectWithoutRelationsInput'


class ConversationMemberUpsertInput(TypedDict):
    create: 'ConversationMemberCreateInput'
    update: 'ConversationMemberUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ConversationMember_id_OrderByInput = TypedDict(
    '_ConversationMember_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ConversationMember_role_OrderByInput = TypedDict(
    '_ConversationMember_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_ConversationMember_joinedAt_OrderByInput = TypedDict(
    '_ConversationMember_joinedAt_OrderByInput',
    {
        'joinedAt': 'SortOrder',
    },
    total=True
)

_ConversationMember_lastReadAt_OrderByInput = TypedDict(
    '_ConversationMember_lastReadAt_OrderByInput',
    {
        'lastReadAt': 'SortOrder',
    },
    total=True
)

_ConversationMember_conversationId_OrderByInput = TypedDict(
    '_ConversationMember_conversationId_OrderByInput',
    {
        'conversationId': 'SortOrder',
    },
    total=True
)

_ConversationMember_userId_OrderByInput = TypedDict(
    '_ConversationMember_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

ConversationMemberOrderByInput = Union[
    '_ConversationMember_id_OrderByInput',
    '_ConversationMember_role_OrderByInput',
    '_ConversationMember_joinedAt_OrderByInput',
    '_ConversationMember_lastReadAt_OrderByInput',
    '_ConversationMember_conversationId_OrderByInput',
    '_ConversationMember_userId_OrderByInput',
]



# recursive ConversationMember types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ConversationMemberRelationFilter = TypedDict(
    'ConversationMemberRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ConversationMemberListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ConversationMemberInclude(TypedDict, total=False):
    """ConversationMember relational arguments"""
    conversation: Union[bool, 'ConversationArgsFromConversationMember']
    user: Union[bool, 'UserArgsFromConversationMember']


    

class UserIncludeFromConversationMember(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromConversationMemberRecursive1']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromConversationMemberRecursive1']
    createdConversations: Union[bool, 'FindManyConversationArgsFromConversationMemberRecursive1']


class UserIncludeFromConversationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromConversationMemberRecursive2']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromConversationMemberRecursive2']
    createdConversations: Union[bool, 'FindManyConversationArgsFromConversationMemberRecursive2']


class UserIncludeFromConversationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromConversationMemberRecursive3']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromConversationMemberRecursive3']
    createdConversations: Union[bool, 'FindManyConversationArgsFromConversationMemberRecursive3']


class UserIncludeFromConversationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromConversationMemberRecursive4']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromConversationMemberRecursive4']
    createdConversations: Union[bool, 'FindManyConversationArgsFromConversationMemberRecursive4']


class UserIncludeFromConversationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ConversationMember"""

    

class UserArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    
    

class FindManyUserArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ConversationIncludeFromConversationMember(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    creator: Union[bool, 'UserArgsFromConversationMemberRecursive1']
    messages: Union[bool, 'FindManyMessageArgsFromConversationMemberRecursive1']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversationMemberRecursive1']


class ConversationIncludeFromConversationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    creator: Union[bool, 'UserArgsFromConversationMemberRecursive2']
    messages: Union[bool, 'FindManyMessageArgsFromConversationMemberRecursive2']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversationMemberRecursive2']


class ConversationIncludeFromConversationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    creator: Union[bool, 'UserArgsFromConversationMemberRecursive3']
    messages: Union[bool, 'FindManyMessageArgsFromConversationMemberRecursive3']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversationMemberRecursive3']


class ConversationIncludeFromConversationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    creator: Union[bool, 'UserArgsFromConversationMemberRecursive4']
    messages: Union[bool, 'FindManyMessageArgsFromConversationMemberRecursive4']
    members: Union[bool, 'FindManyConversationMemberArgsFromConversationMemberRecursive4']


class ConversationIncludeFromConversationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ConversationMember"""

    

class ConversationArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'ConversationIncludeFromConversationRecursive1'


class ConversationArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'ConversationIncludeFromConversationRecursive2'


class ConversationArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'ConversationIncludeFromConversationRecursive3'


class ConversationArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'ConversationIncludeFromConversationRecursive4'


class ConversationArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    
    

class FindManyConversationArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive1'


class FindManyConversationArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive2'


class FindManyConversationArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive3'


class FindManyConversationArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive4'


class FindManyConversationArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    
    

class ConversationMemberIncludeFromConversationMember(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    conversation: Union[bool, 'ConversationArgsFromConversationMemberRecursive1']
    user: Union[bool, 'UserArgsFromConversationMemberRecursive1']


class ConversationMemberIncludeFromConversationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    conversation: Union[bool, 'ConversationArgsFromConversationMemberRecursive2']
    user: Union[bool, 'UserArgsFromConversationMemberRecursive2']


class ConversationMemberIncludeFromConversationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    conversation: Union[bool, 'ConversationArgsFromConversationMemberRecursive3']
    user: Union[bool, 'UserArgsFromConversationMemberRecursive3']


class ConversationMemberIncludeFromConversationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    conversation: Union[bool, 'ConversationArgsFromConversationMemberRecursive4']
    user: Union[bool, 'UserArgsFromConversationMemberRecursive4']


class ConversationMemberIncludeFromConversationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ConversationMember"""

    

class ConversationMemberArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class ConversationMemberArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class ConversationMemberArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class ConversationMemberArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class ConversationMemberArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    
    

class FindManyConversationMemberArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class FindManyConversationMemberArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class FindManyConversationMemberArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class FindManyConversationMemberArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class FindManyConversationMemberArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    
    

class MessageIncludeFromConversationMember(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    sender: Union[bool, 'UserArgsFromConversationMemberRecursive1']
    conversation: Union[bool, 'ConversationArgsFromConversationMemberRecursive1']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromConversationMemberRecursive1']


class MessageIncludeFromConversationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    sender: Union[bool, 'UserArgsFromConversationMemberRecursive2']
    conversation: Union[bool, 'ConversationArgsFromConversationMemberRecursive2']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromConversationMemberRecursive2']


class MessageIncludeFromConversationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    sender: Union[bool, 'UserArgsFromConversationMemberRecursive3']
    conversation: Union[bool, 'ConversationArgsFromConversationMemberRecursive3']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromConversationMemberRecursive3']


class MessageIncludeFromConversationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    sender: Union[bool, 'UserArgsFromConversationMemberRecursive4']
    conversation: Union[bool, 'ConversationArgsFromConversationMemberRecursive4']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromConversationMemberRecursive4']


class MessageIncludeFromConversationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ConversationMember"""

    

class MessageArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    
    

class FindManyMessageArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageTranslationIncludeFromConversationMember(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    message: Union[bool, 'MessageArgsFromConversationMemberRecursive1']


class MessageTranslationIncludeFromConversationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    message: Union[bool, 'MessageArgsFromConversationMemberRecursive2']


class MessageTranslationIncludeFromConversationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    message: Union[bool, 'MessageArgsFromConversationMemberRecursive3']


class MessageTranslationIncludeFromConversationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ConversationMember"""
    message: Union[bool, 'MessageArgsFromConversationMemberRecursive4']


class MessageTranslationIncludeFromConversationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ConversationMember"""

    

class MessageTranslationArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class MessageTranslationArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class MessageTranslationArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class MessageTranslationArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class MessageTranslationArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    
    

class FindManyMessageTranslationArgsFromConversationMember(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class FindManyMessageTranslationArgsFromConversationMemberRecursive1(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class FindManyMessageTranslationArgsFromConversationMemberRecursive2(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class FindManyMessageTranslationArgsFromConversationMemberRecursive3(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class FindManyMessageTranslationArgsFromConversationMemberRecursive4(TypedDict, total=False):
    """Arguments for ConversationMember"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    


FindManyConversationMemberArgs = FindManyConversationMemberArgsFromConversationMember
FindFirstConversationMemberArgs = FindManyConversationMemberArgsFromConversationMember


    

class ConversationMemberWhereInput(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    lastReadAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ConversationMemberWhereInputRecursive1', List['ConversationMemberWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ConversationMemberWhereInputRecursive1']
    OR: List['ConversationMemberWhereInputRecursive1']
    NOT: List['ConversationMemberWhereInputRecursive1']


class ConversationMemberWhereInputRecursive1(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    lastReadAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ConversationMemberWhereInputRecursive2', List['ConversationMemberWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ConversationMemberWhereInputRecursive2']
    OR: List['ConversationMemberWhereInputRecursive2']
    NOT: List['ConversationMemberWhereInputRecursive2']


class ConversationMemberWhereInputRecursive2(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    lastReadAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ConversationMemberWhereInputRecursive3', List['ConversationMemberWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ConversationMemberWhereInputRecursive3']
    OR: List['ConversationMemberWhereInputRecursive3']
    NOT: List['ConversationMemberWhereInputRecursive3']


class ConversationMemberWhereInputRecursive3(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    lastReadAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ConversationMemberWhereInputRecursive4', List['ConversationMemberWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ConversationMemberWhereInputRecursive4']
    OR: List['ConversationMemberWhereInputRecursive4']
    NOT: List['ConversationMemberWhereInputRecursive4']


class ConversationMemberWhereInputRecursive4(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    lastReadAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']



# aggregate ConversationMember types


    

class ConversationMemberScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastReadAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConversationMemberScalarWhereWithAggregatesInputRecursive1']
    OR: List['ConversationMemberScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ConversationMemberScalarWhereWithAggregatesInputRecursive1']


class ConversationMemberScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastReadAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConversationMemberScalarWhereWithAggregatesInputRecursive2']
    OR: List['ConversationMemberScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ConversationMemberScalarWhereWithAggregatesInputRecursive2']


class ConversationMemberScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastReadAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConversationMemberScalarWhereWithAggregatesInputRecursive3']
    OR: List['ConversationMemberScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ConversationMemberScalarWhereWithAggregatesInputRecursive3']


class ConversationMemberScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastReadAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConversationMemberScalarWhereWithAggregatesInputRecursive4']
    OR: List['ConversationMemberScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ConversationMemberScalarWhereWithAggregatesInputRecursive4']


class ConversationMemberScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ConversationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastReadAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class ConversationMemberGroupByOutput(TypedDict, total=False):
    id: _str
    role: _str
    joinedAt: datetime.datetime
    lastReadAt: datetime.datetime
    conversationId: _str
    userId: _str
    _sum: 'ConversationMemberSumAggregateOutput'
    _avg: 'ConversationMemberAvgAggregateOutput'
    _min: 'ConversationMemberMinAggregateOutput'
    _max: 'ConversationMemberMaxAggregateOutput'
    _count: 'ConversationMemberCountAggregateOutput'


class ConversationMemberAvgAggregateOutput(TypedDict, total=False):
    """ConversationMember output for aggregating averages"""


class ConversationMemberSumAggregateOutput(TypedDict, total=False):
    """ConversationMember output for aggregating sums"""


class ConversationMemberScalarAggregateOutput(TypedDict, total=False):
    """ConversationMember output including scalar fields"""
    id: _str
    role: _str
    joinedAt: datetime.datetime
    lastReadAt: datetime.datetime
    conversationId: _str
    userId: _str


ConversationMemberMinAggregateOutput = ConversationMemberScalarAggregateOutput
ConversationMemberMaxAggregateOutput = ConversationMemberScalarAggregateOutput


class ConversationMemberMaxAggregateInput(TypedDict, total=False):
    """ConversationMember input for aggregating by max"""
    id: bool
    role: bool
    joinedAt: bool
    lastReadAt: bool
    conversationId: bool
    userId: bool


class ConversationMemberMinAggregateInput(TypedDict, total=False):
    """ConversationMember input for aggregating by min"""
    id: bool
    role: bool
    joinedAt: bool
    lastReadAt: bool
    conversationId: bool
    userId: bool


class ConversationMemberNumberAggregateInput(TypedDict, total=False):
    """ConversationMember input for aggregating numbers"""


ConversationMemberAvgAggregateInput = ConversationMemberNumberAggregateInput
ConversationMemberSumAggregateInput = ConversationMemberNumberAggregateInput


ConversationMemberCountAggregateInput = TypedDict(
    'ConversationMemberCountAggregateInput',
    {
        'id': bool,
        'role': bool,
        'joinedAt': bool,
        'lastReadAt': bool,
        'conversationId': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

ConversationMemberCountAggregateOutput = TypedDict(
    'ConversationMemberCountAggregateOutput',
    {
        'id': int,
        'role': int,
        'joinedAt': int,
        'lastReadAt': int,
        'conversationId': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


ConversationMemberKeys = Literal[
    'id',
    'role',
    'joinedAt',
    'lastReadAt',
    'conversation',
    'conversationId',
    'user',
    'userId',
]
ConversationMemberScalarFieldKeys = Literal[
    'id',
    'role',
    'joinedAt',
    'lastReadAt',
    'conversationId',
    'userId',
]
ConversationMemberScalarFieldKeysT = TypeVar('ConversationMemberScalarFieldKeysT', bound=ConversationMemberScalarFieldKeys)

ConversationMemberRelationalFieldKeys = Literal[
        'conversation',
        'user',
    ]

# Message types

class MessageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Message create method"""
    id: _str
    originalLanguage: _str
    messageType: _str
    fileUrl: Optional[_str]
    isEdited: _bool
    isDeleted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    sender: 'UserCreateNestedWithoutRelationsInput'
    senderId: _str
    conversation: 'ConversationCreateNestedWithoutRelationsInput'
    conversationId: _str
    translations: 'MessageTranslationCreateManyNestedWithoutRelationsInput'


class MessageCreateInput(MessageOptionalCreateInput):
    """Required arguments to the Message create method"""
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MessageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Message create method, without relations"""
    id: _str
    originalLanguage: _str
    messageType: _str
    fileUrl: Optional[_str]
    isEdited: _bool
    isDeleted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    senderId: _str
    conversationId: _str


class MessageCreateWithoutRelationsInput(MessageOptionalCreateWithoutRelationsInput):
    """Required arguments to the Message create method, without relations"""
    content: _str


class MessageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'


class MessageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MessageCreateWithoutRelationsInput', List['MessageCreateWithoutRelationsInput']]
    connect: Union['MessageWhereUniqueInput', List['MessageWhereUniqueInput']]


_MessageWhereUnique_id_Input = TypedDict(
    '_MessageWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MessageWhereUniqueInput = _MessageWhereUnique_id_Input


class MessageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    content: _str
    originalLanguage: _str
    messageType: _str
    fileUrl: Optional[_str]
    isEdited: _bool
    isDeleted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    sender: 'UserUpdateOneWithoutRelationsInput'
    conversation: 'ConversationUpdateOneWithoutRelationsInput'
    translations: 'MessageTranslationUpdateManyWithoutRelationsInput'


class MessageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    content: _str
    originalLanguage: _str
    messageType: _str
    fileUrl: Optional[_str]
    isEdited: _bool
    isDeleted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MessageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MessageCreateWithoutRelationsInput']
    connect: List['MessageWhereUniqueInput']
    set: List['MessageWhereUniqueInput']
    disconnect: List['MessageWhereUniqueInput']
    delete: List['MessageWhereUniqueInput']

    # TODO
    # update: List['MessageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MessageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MessageScalarWhereInput']
    # upsert: List['MessageUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['MessageCreateOrConnectWithoutRelationsInput']


class MessageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MessageUpdateInput'
    # upsert: 'MessageUpsertWithoutRelationsInput'
    # connectOrCreate: 'MessageCreateOrConnectWithoutRelationsInput'


class MessageUpsertInput(TypedDict):
    create: 'MessageCreateInput'
    update: 'MessageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Message_id_OrderByInput = TypedDict(
    '_Message_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Message_content_OrderByInput = TypedDict(
    '_Message_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Message_originalLanguage_OrderByInput = TypedDict(
    '_Message_originalLanguage_OrderByInput',
    {
        'originalLanguage': 'SortOrder',
    },
    total=True
)

_Message_messageType_OrderByInput = TypedDict(
    '_Message_messageType_OrderByInput',
    {
        'messageType': 'SortOrder',
    },
    total=True
)

_Message_fileUrl_OrderByInput = TypedDict(
    '_Message_fileUrl_OrderByInput',
    {
        'fileUrl': 'SortOrder',
    },
    total=True
)

_Message_isEdited_OrderByInput = TypedDict(
    '_Message_isEdited_OrderByInput',
    {
        'isEdited': 'SortOrder',
    },
    total=True
)

_Message_isDeleted_OrderByInput = TypedDict(
    '_Message_isDeleted_OrderByInput',
    {
        'isDeleted': 'SortOrder',
    },
    total=True
)

_Message_createdAt_OrderByInput = TypedDict(
    '_Message_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Message_updatedAt_OrderByInput = TypedDict(
    '_Message_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Message_senderId_OrderByInput = TypedDict(
    '_Message_senderId_OrderByInput',
    {
        'senderId': 'SortOrder',
    },
    total=True
)

_Message_conversationId_OrderByInput = TypedDict(
    '_Message_conversationId_OrderByInput',
    {
        'conversationId': 'SortOrder',
    },
    total=True
)

MessageOrderByInput = Union[
    '_Message_id_OrderByInput',
    '_Message_content_OrderByInput',
    '_Message_originalLanguage_OrderByInput',
    '_Message_messageType_OrderByInput',
    '_Message_fileUrl_OrderByInput',
    '_Message_isEdited_OrderByInput',
    '_Message_isDeleted_OrderByInput',
    '_Message_createdAt_OrderByInput',
    '_Message_updatedAt_OrderByInput',
    '_Message_senderId_OrderByInput',
    '_Message_conversationId_OrderByInput',
]



# recursive Message types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MessageRelationFilter = TypedDict(
    'MessageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MessageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MessageInclude(TypedDict, total=False):
    """Message relational arguments"""
    sender: Union[bool, 'UserArgsFromMessage']
    conversation: Union[bool, 'ConversationArgsFromMessage']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessage']


    

class UserIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecursive1']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromMessageRecursive1']
    createdConversations: Union[bool, 'FindManyConversationArgsFromMessageRecursive1']


class UserIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecursive2']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromMessageRecursive2']
    createdConversations: Union[bool, 'FindManyConversationArgsFromMessageRecursive2']


class UserIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecursive3']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromMessageRecursive3']
    createdConversations: Union[bool, 'FindManyConversationArgsFromMessageRecursive3']


class UserIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecursive4']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromMessageRecursive4']
    createdConversations: Union[bool, 'FindManyConversationArgsFromMessageRecursive4']


class UserIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class UserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyUserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ConversationIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    creator: Union[bool, 'UserArgsFromMessageRecursive1']
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive1']
    members: Union[bool, 'FindManyConversationMemberArgsFromMessageRecursive1']


class ConversationIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    creator: Union[bool, 'UserArgsFromMessageRecursive2']
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive2']
    members: Union[bool, 'FindManyConversationMemberArgsFromMessageRecursive2']


class ConversationIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    creator: Union[bool, 'UserArgsFromMessageRecursive3']
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive3']
    members: Union[bool, 'FindManyConversationMemberArgsFromMessageRecursive3']


class ConversationIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    creator: Union[bool, 'UserArgsFromMessageRecursive4']
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive4']
    members: Union[bool, 'FindManyConversationMemberArgsFromMessageRecursive4']


class ConversationIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class ConversationArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ConversationIncludeFromConversationRecursive1'


class ConversationArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ConversationIncludeFromConversationRecursive2'


class ConversationArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ConversationIncludeFromConversationRecursive3'


class ConversationArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ConversationIncludeFromConversationRecursive4'


class ConversationArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyConversationArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive1'


class FindManyConversationArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive2'


class FindManyConversationArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive3'


class FindManyConversationArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive4'


class FindManyConversationArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    
    

class ConversationMemberIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    conversation: Union[bool, 'ConversationArgsFromMessageRecursive1']
    user: Union[bool, 'UserArgsFromMessageRecursive1']


class ConversationMemberIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    conversation: Union[bool, 'ConversationArgsFromMessageRecursive2']
    user: Union[bool, 'UserArgsFromMessageRecursive2']


class ConversationMemberIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    conversation: Union[bool, 'ConversationArgsFromMessageRecursive3']
    user: Union[bool, 'UserArgsFromMessageRecursive3']


class ConversationMemberIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    conversation: Union[bool, 'ConversationArgsFromMessageRecursive4']
    user: Union[bool, 'UserArgsFromMessageRecursive4']


class ConversationMemberIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class ConversationMemberArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class ConversationMemberArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class ConversationMemberArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class ConversationMemberArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class ConversationMemberArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyConversationMemberArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class FindManyConversationMemberArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class FindManyConversationMemberArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class FindManyConversationMemberArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class FindManyConversationMemberArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    
    

class MessageIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    sender: Union[bool, 'UserArgsFromMessageRecursive1']
    conversation: Union[bool, 'ConversationArgsFromMessageRecursive1']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessageRecursive1']


class MessageIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    sender: Union[bool, 'UserArgsFromMessageRecursive2']
    conversation: Union[bool, 'ConversationArgsFromMessageRecursive2']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessageRecursive2']


class MessageIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    sender: Union[bool, 'UserArgsFromMessageRecursive3']
    conversation: Union[bool, 'ConversationArgsFromMessageRecursive3']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessageRecursive3']


class MessageIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    sender: Union[bool, 'UserArgsFromMessageRecursive4']
    conversation: Union[bool, 'ConversationArgsFromMessageRecursive4']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessageRecursive4']


class MessageIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageTranslationIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive1']


class MessageTranslationIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive2']


class MessageTranslationIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive3']


class MessageTranslationIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive4']


class MessageTranslationIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MessageTranslationArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class MessageTranslationArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class MessageTranslationArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class MessageTranslationArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class MessageTranslationArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMessageTranslationArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class FindManyMessageTranslationArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class FindManyMessageTranslationArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class FindManyMessageTranslationArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class FindManyMessageTranslationArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    


FindManyMessageArgs = FindManyMessageArgsFromMessage
FindFirstMessageArgs = FindManyMessageArgsFromMessage


    

class MessageWhereInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    originalLanguage: Union[_str, 'types.StringFilter']
    messageType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    isDeleted: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sender: 'UserRelationFilter'
    senderId: Union[_str, 'types.StringFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    translations: 'MessageTranslationListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive1', List['MessageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive1']
    OR: List['MessageWhereInputRecursive1']
    NOT: List['MessageWhereInputRecursive1']


class MessageWhereInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    originalLanguage: Union[_str, 'types.StringFilter']
    messageType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    isDeleted: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sender: 'UserRelationFilter'
    senderId: Union[_str, 'types.StringFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    translations: 'MessageTranslationListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive2', List['MessageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive2']
    OR: List['MessageWhereInputRecursive2']
    NOT: List['MessageWhereInputRecursive2']


class MessageWhereInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    originalLanguage: Union[_str, 'types.StringFilter']
    messageType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    isDeleted: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sender: 'UserRelationFilter'
    senderId: Union[_str, 'types.StringFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    translations: 'MessageTranslationListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive3', List['MessageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive3']
    OR: List['MessageWhereInputRecursive3']
    NOT: List['MessageWhereInputRecursive3']


class MessageWhereInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    originalLanguage: Union[_str, 'types.StringFilter']
    messageType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    isDeleted: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sender: 'UserRelationFilter'
    senderId: Union[_str, 'types.StringFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    translations: 'MessageTranslationListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive4', List['MessageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive4']
    OR: List['MessageWhereInputRecursive4']
    NOT: List['MessageWhereInputRecursive4']


class MessageWhereInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    originalLanguage: Union[_str, 'types.StringFilter']
    messageType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    isDeleted: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    sender: 'UserRelationFilter'
    senderId: Union[_str, 'types.StringFilter']
    conversation: 'ConversationRelationFilter'
    conversationId: Union[_str, 'types.StringFilter']
    translations: 'MessageTranslationListRelationFilter'



# aggregate Message types


    

class MessageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    originalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    messageType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isDeleted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    senderId: Union[_str, 'types.StringWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive1']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive1']


class MessageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    originalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    messageType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isDeleted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    senderId: Union[_str, 'types.StringWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive2']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive2']


class MessageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    originalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    messageType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isDeleted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    senderId: Union[_str, 'types.StringWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive3']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive3']


class MessageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    originalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    messageType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isDeleted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    senderId: Union[_str, 'types.StringWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive4']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive4']


class MessageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    originalLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    messageType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isDeleted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    senderId: Union[_str, 'types.StringWithAggregatesFilter']
    conversationId: Union[_str, 'types.StringWithAggregatesFilter']



class MessageGroupByOutput(TypedDict, total=False):
    id: _str
    content: _str
    originalLanguage: _str
    messageType: _str
    fileUrl: _str
    isEdited: _bool
    isDeleted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    senderId: _str
    conversationId: _str
    _sum: 'MessageSumAggregateOutput'
    _avg: 'MessageAvgAggregateOutput'
    _min: 'MessageMinAggregateOutput'
    _max: 'MessageMaxAggregateOutput'
    _count: 'MessageCountAggregateOutput'


class MessageAvgAggregateOutput(TypedDict, total=False):
    """Message output for aggregating averages"""


class MessageSumAggregateOutput(TypedDict, total=False):
    """Message output for aggregating sums"""


class MessageScalarAggregateOutput(TypedDict, total=False):
    """Message output including scalar fields"""
    id: _str
    content: _str
    originalLanguage: _str
    messageType: _str
    fileUrl: _str
    isEdited: _bool
    isDeleted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    senderId: _str
    conversationId: _str


MessageMinAggregateOutput = MessageScalarAggregateOutput
MessageMaxAggregateOutput = MessageScalarAggregateOutput


class MessageMaxAggregateInput(TypedDict, total=False):
    """Message input for aggregating by max"""
    id: bool
    content: bool
    originalLanguage: bool
    messageType: bool
    fileUrl: bool
    isEdited: bool
    isDeleted: bool
    createdAt: bool
    updatedAt: bool
    senderId: bool
    conversationId: bool


class MessageMinAggregateInput(TypedDict, total=False):
    """Message input for aggregating by min"""
    id: bool
    content: bool
    originalLanguage: bool
    messageType: bool
    fileUrl: bool
    isEdited: bool
    isDeleted: bool
    createdAt: bool
    updatedAt: bool
    senderId: bool
    conversationId: bool


class MessageNumberAggregateInput(TypedDict, total=False):
    """Message input for aggregating numbers"""


MessageAvgAggregateInput = MessageNumberAggregateInput
MessageSumAggregateInput = MessageNumberAggregateInput


MessageCountAggregateInput = TypedDict(
    'MessageCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'originalLanguage': bool,
        'messageType': bool,
        'fileUrl': bool,
        'isEdited': bool,
        'isDeleted': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'senderId': bool,
        'conversationId': bool,
        '_all': bool,
    },
    total=False,
)

MessageCountAggregateOutput = TypedDict(
    'MessageCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'originalLanguage': int,
        'messageType': int,
        'fileUrl': int,
        'isEdited': int,
        'isDeleted': int,
        'createdAt': int,
        'updatedAt': int,
        'senderId': int,
        'conversationId': int,
        '_all': int,
    },
    total=False,
)


MessageKeys = Literal[
    'id',
    'content',
    'originalLanguage',
    'messageType',
    'fileUrl',
    'isEdited',
    'isDeleted',
    'createdAt',
    'updatedAt',
    'sender',
    'senderId',
    'conversation',
    'conversationId',
    'translations',
]
MessageScalarFieldKeys = Literal[
    'id',
    'content',
    'originalLanguage',
    'messageType',
    'fileUrl',
    'isEdited',
    'isDeleted',
    'createdAt',
    'updatedAt',
    'senderId',
    'conversationId',
]
MessageScalarFieldKeysT = TypeVar('MessageScalarFieldKeysT', bound=MessageScalarFieldKeys)

MessageRelationalFieldKeys = Literal[
        'sender',
        'conversation',
        'translations',
    ]

# MessageTranslation types

class MessageTranslationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MessageTranslation create method"""
    id: _str
    translationModel: _str
    confidence: Optional[_float]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    message: 'MessageCreateNestedWithoutRelationsInput'
    messageId: _str


class MessageTranslationCreateInput(MessageTranslationOptionalCreateInput):
    """Required arguments to the MessageTranslation create method"""
    sourceLanguage: _str
    targetLanguage: _str
    translatedContent: _str
    cacheKey: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MessageTranslationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MessageTranslation create method, without relations"""
    id: _str
    translationModel: _str
    confidence: Optional[_float]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    messageId: _str


class MessageTranslationCreateWithoutRelationsInput(MessageTranslationOptionalCreateWithoutRelationsInput):
    """Required arguments to the MessageTranslation create method, without relations"""
    sourceLanguage: _str
    targetLanguage: _str
    translatedContent: _str
    cacheKey: _str


class MessageTranslationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageTranslationCreateWithoutRelationsInput'
    connect: 'MessageTranslationWhereUniqueInput'


class MessageTranslationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MessageTranslationCreateWithoutRelationsInput', List['MessageTranslationCreateWithoutRelationsInput']]
    connect: Union['MessageTranslationWhereUniqueInput', List['MessageTranslationWhereUniqueInput']]


_MessageTranslationWhereUnique_id_Input = TypedDict(
    '_MessageTranslationWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_MessageTranslationWhereUnique_cacheKey_Input = TypedDict(
    '_MessageTranslationWhereUnique_cacheKey_Input',
    {
        'cacheKey': '_str',
    },
    total=True
)

_MessageTranslationCompoundmessageId_targetLanguageKeyInner = TypedDict(
    '_MessageTranslationCompoundmessageId_targetLanguageKeyInner',
    {
        'messageId': '_str',
        'targetLanguage': '_str',
    },
    total=True
)

_MessageTranslationCompoundmessageId_targetLanguageKey = TypedDict(
    '_MessageTranslationCompoundmessageId_targetLanguageKey',
    {
        'messageId_targetLanguage': '_MessageTranslationCompoundmessageId_targetLanguageKeyInner',
    },
    total=True
)

MessageTranslationWhereUniqueInput = Union[
    '_MessageTranslationWhereUnique_id_Input',
    '_MessageTranslationWhereUnique_cacheKey_Input',
    '_MessageTranslationCompoundmessageId_targetLanguageKey',
]


class MessageTranslationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    sourceLanguage: _str
    targetLanguage: _str
    translatedContent: _str
    translationModel: _str
    cacheKey: _str
    confidence: Optional[Union[AtomicFloatInput, _float]]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    message: 'MessageUpdateOneWithoutRelationsInput'


class MessageTranslationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    sourceLanguage: _str
    targetLanguage: _str
    translatedContent: _str
    translationModel: _str
    cacheKey: _str
    confidence: Optional[Union[AtomicFloatInput, _float]]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MessageTranslationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MessageTranslationCreateWithoutRelationsInput']
    connect: List['MessageTranslationWhereUniqueInput']
    set: List['MessageTranslationWhereUniqueInput']
    disconnect: List['MessageTranslationWhereUniqueInput']
    delete: List['MessageTranslationWhereUniqueInput']

    # TODO
    # update: List['MessageTranslationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MessageTranslationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MessageTranslationScalarWhereInput']
    # upsert: List['MessageTranslationUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['MessageTranslationCreateOrConnectWithoutRelationsInput']


class MessageTranslationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageTranslationCreateWithoutRelationsInput'
    connect: 'MessageTranslationWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MessageTranslationUpdateInput'
    # upsert: 'MessageTranslationUpsertWithoutRelationsInput'
    # connectOrCreate: 'MessageTranslationCreateOrConnectWithoutRelationsInput'


class MessageTranslationUpsertInput(TypedDict):
    create: 'MessageTranslationCreateInput'
    update: 'MessageTranslationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MessageTranslation_id_OrderByInput = TypedDict(
    '_MessageTranslation_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MessageTranslation_sourceLanguage_OrderByInput = TypedDict(
    '_MessageTranslation_sourceLanguage_OrderByInput',
    {
        'sourceLanguage': 'SortOrder',
    },
    total=True
)

_MessageTranslation_targetLanguage_OrderByInput = TypedDict(
    '_MessageTranslation_targetLanguage_OrderByInput',
    {
        'targetLanguage': 'SortOrder',
    },
    total=True
)

_MessageTranslation_translatedContent_OrderByInput = TypedDict(
    '_MessageTranslation_translatedContent_OrderByInput',
    {
        'translatedContent': 'SortOrder',
    },
    total=True
)

_MessageTranslation_translationModel_OrderByInput = TypedDict(
    '_MessageTranslation_translationModel_OrderByInput',
    {
        'translationModel': 'SortOrder',
    },
    total=True
)

_MessageTranslation_cacheKey_OrderByInput = TypedDict(
    '_MessageTranslation_cacheKey_OrderByInput',
    {
        'cacheKey': 'SortOrder',
    },
    total=True
)

_MessageTranslation_confidence_OrderByInput = TypedDict(
    '_MessageTranslation_confidence_OrderByInput',
    {
        'confidence': 'SortOrder',
    },
    total=True
)

_MessageTranslation_createdAt_OrderByInput = TypedDict(
    '_MessageTranslation_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_MessageTranslation_updatedAt_OrderByInput = TypedDict(
    '_MessageTranslation_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_MessageTranslation_messageId_OrderByInput = TypedDict(
    '_MessageTranslation_messageId_OrderByInput',
    {
        'messageId': 'SortOrder',
    },
    total=True
)

MessageTranslationOrderByInput = Union[
    '_MessageTranslation_id_OrderByInput',
    '_MessageTranslation_sourceLanguage_OrderByInput',
    '_MessageTranslation_targetLanguage_OrderByInput',
    '_MessageTranslation_translatedContent_OrderByInput',
    '_MessageTranslation_translationModel_OrderByInput',
    '_MessageTranslation_cacheKey_OrderByInput',
    '_MessageTranslation_confidence_OrderByInput',
    '_MessageTranslation_createdAt_OrderByInput',
    '_MessageTranslation_updatedAt_OrderByInput',
    '_MessageTranslation_messageId_OrderByInput',
]



# recursive MessageTranslation types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MessageTranslationRelationFilter = TypedDict(
    'MessageTranslationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MessageTranslationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MessageTranslationInclude(TypedDict, total=False):
    """MessageTranslation relational arguments"""
    message: Union[bool, 'MessageArgsFromMessageTranslation']


    

class UserIncludeFromMessageTranslation(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageTranslationRecursive1']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromMessageTranslationRecursive1']
    createdConversations: Union[bool, 'FindManyConversationArgsFromMessageTranslationRecursive1']


class UserIncludeFromMessageTranslationRecursive1(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageTranslationRecursive2']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromMessageTranslationRecursive2']
    createdConversations: Union[bool, 'FindManyConversationArgsFromMessageTranslationRecursive2']


class UserIncludeFromMessageTranslationRecursive2(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageTranslationRecursive3']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromMessageTranslationRecursive3']
    createdConversations: Union[bool, 'FindManyConversationArgsFromMessageTranslationRecursive3']


class UserIncludeFromMessageTranslationRecursive3(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageTranslationRecursive4']
    conversations: Union[bool, 'FindManyConversationMemberArgsFromMessageTranslationRecursive4']
    createdConversations: Union[bool, 'FindManyConversationArgsFromMessageTranslationRecursive4']


class UserIncludeFromMessageTranslationRecursive4(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""

    

class UserArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    
    

class FindManyUserArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ConversationIncludeFromMessageTranslation(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    creator: Union[bool, 'UserArgsFromMessageTranslationRecursive1']
    messages: Union[bool, 'FindManyMessageArgsFromMessageTranslationRecursive1']
    members: Union[bool, 'FindManyConversationMemberArgsFromMessageTranslationRecursive1']


class ConversationIncludeFromMessageTranslationRecursive1(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    creator: Union[bool, 'UserArgsFromMessageTranslationRecursive2']
    messages: Union[bool, 'FindManyMessageArgsFromMessageTranslationRecursive2']
    members: Union[bool, 'FindManyConversationMemberArgsFromMessageTranslationRecursive2']


class ConversationIncludeFromMessageTranslationRecursive2(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    creator: Union[bool, 'UserArgsFromMessageTranslationRecursive3']
    messages: Union[bool, 'FindManyMessageArgsFromMessageTranslationRecursive3']
    members: Union[bool, 'FindManyConversationMemberArgsFromMessageTranslationRecursive3']


class ConversationIncludeFromMessageTranslationRecursive3(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    creator: Union[bool, 'UserArgsFromMessageTranslationRecursive4']
    messages: Union[bool, 'FindManyMessageArgsFromMessageTranslationRecursive4']
    members: Union[bool, 'FindManyConversationMemberArgsFromMessageTranslationRecursive4']


class ConversationIncludeFromMessageTranslationRecursive4(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""

    

class ConversationArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'ConversationIncludeFromConversationRecursive1'


class ConversationArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'ConversationIncludeFromConversationRecursive2'


class ConversationArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'ConversationIncludeFromConversationRecursive3'


class ConversationArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'ConversationIncludeFromConversationRecursive4'


class ConversationArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    
    

class FindManyConversationArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive1'


class FindManyConversationArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive2'


class FindManyConversationArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive3'


class FindManyConversationArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    include: 'ConversationIncludeFromConversationRecursive4'


class FindManyConversationArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationOrderByInput', List['ConversationOrderByInput']]
    where: 'ConversationWhereInput'
    cursor: 'ConversationWhereUniqueInput'
    distinct: List['ConversationScalarFieldKeys']
    
    

class ConversationMemberIncludeFromMessageTranslation(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    conversation: Union[bool, 'ConversationArgsFromMessageTranslationRecursive1']
    user: Union[bool, 'UserArgsFromMessageTranslationRecursive1']


class ConversationMemberIncludeFromMessageTranslationRecursive1(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    conversation: Union[bool, 'ConversationArgsFromMessageTranslationRecursive2']
    user: Union[bool, 'UserArgsFromMessageTranslationRecursive2']


class ConversationMemberIncludeFromMessageTranslationRecursive2(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    conversation: Union[bool, 'ConversationArgsFromMessageTranslationRecursive3']
    user: Union[bool, 'UserArgsFromMessageTranslationRecursive3']


class ConversationMemberIncludeFromMessageTranslationRecursive3(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    conversation: Union[bool, 'ConversationArgsFromMessageTranslationRecursive4']
    user: Union[bool, 'UserArgsFromMessageTranslationRecursive4']


class ConversationMemberIncludeFromMessageTranslationRecursive4(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""

    

class ConversationMemberArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class ConversationMemberArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class ConversationMemberArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class ConversationMemberArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class ConversationMemberArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    
    

class FindManyConversationMemberArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive1'


class FindManyConversationMemberArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive2'


class FindManyConversationMemberArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive3'


class FindManyConversationMemberArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    include: 'ConversationMemberIncludeFromConversationMemberRecursive4'


class FindManyConversationMemberArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['ConversationMemberOrderByInput', List['ConversationMemberOrderByInput']]
    where: 'ConversationMemberWhereInput'
    cursor: 'ConversationMemberWhereUniqueInput'
    distinct: List['ConversationMemberScalarFieldKeys']
    
    

class MessageIncludeFromMessageTranslation(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    sender: Union[bool, 'UserArgsFromMessageTranslationRecursive1']
    conversation: Union[bool, 'ConversationArgsFromMessageTranslationRecursive1']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessageTranslationRecursive1']


class MessageIncludeFromMessageTranslationRecursive1(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    sender: Union[bool, 'UserArgsFromMessageTranslationRecursive2']
    conversation: Union[bool, 'ConversationArgsFromMessageTranslationRecursive2']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessageTranslationRecursive2']


class MessageIncludeFromMessageTranslationRecursive2(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    sender: Union[bool, 'UserArgsFromMessageTranslationRecursive3']
    conversation: Union[bool, 'ConversationArgsFromMessageTranslationRecursive3']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessageTranslationRecursive3']


class MessageIncludeFromMessageTranslationRecursive3(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    sender: Union[bool, 'UserArgsFromMessageTranslationRecursive4']
    conversation: Union[bool, 'ConversationArgsFromMessageTranslationRecursive4']
    translations: Union[bool, 'FindManyMessageTranslationArgsFromMessageTranslationRecursive4']


class MessageIncludeFromMessageTranslationRecursive4(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""

    

class MessageArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    
    

class FindManyMessageArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageTranslationIncludeFromMessageTranslation(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    message: Union[bool, 'MessageArgsFromMessageTranslationRecursive1']


class MessageTranslationIncludeFromMessageTranslationRecursive1(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    message: Union[bool, 'MessageArgsFromMessageTranslationRecursive2']


class MessageTranslationIncludeFromMessageTranslationRecursive2(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    message: Union[bool, 'MessageArgsFromMessageTranslationRecursive3']


class MessageTranslationIncludeFromMessageTranslationRecursive3(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""
    message: Union[bool, 'MessageArgsFromMessageTranslationRecursive4']


class MessageTranslationIncludeFromMessageTranslationRecursive4(TypedDict, total=False):
    """Relational arguments for MessageTranslation"""

    

class MessageTranslationArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class MessageTranslationArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class MessageTranslationArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class MessageTranslationArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class MessageTranslationArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    
    

class FindManyMessageTranslationArgsFromMessageTranslation(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive1'


class FindManyMessageTranslationArgsFromMessageTranslationRecursive1(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive2'


class FindManyMessageTranslationArgsFromMessageTranslationRecursive2(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive3'


class FindManyMessageTranslationArgsFromMessageTranslationRecursive3(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    include: 'MessageTranslationIncludeFromMessageTranslationRecursive4'


class FindManyMessageTranslationArgsFromMessageTranslationRecursive4(TypedDict, total=False):
    """Arguments for MessageTranslation"""
    take: int
    skip: int
    order_by: Union['MessageTranslationOrderByInput', List['MessageTranslationOrderByInput']]
    where: 'MessageTranslationWhereInput'
    cursor: 'MessageTranslationWhereUniqueInput'
    distinct: List['MessageTranslationScalarFieldKeys']
    


FindManyMessageTranslationArgs = FindManyMessageTranslationArgsFromMessageTranslation
FindFirstMessageTranslationArgs = FindManyMessageTranslationArgsFromMessageTranslation


    

class MessageTranslationWhereInput(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sourceLanguage: Union[_str, 'types.StringFilter']
    targetLanguage: Union[_str, 'types.StringFilter']
    translatedContent: Union[_str, 'types.StringFilter']
    translationModel: Union[_str, 'types.StringFilter']
    cacheKey: Union[_str, 'types.StringFilter']
    confidence: Union[None, _float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MessageTranslationWhereInputRecursive1', List['MessageTranslationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MessageTranslationWhereInputRecursive1']
    OR: List['MessageTranslationWhereInputRecursive1']
    NOT: List['MessageTranslationWhereInputRecursive1']


class MessageTranslationWhereInputRecursive1(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sourceLanguage: Union[_str, 'types.StringFilter']
    targetLanguage: Union[_str, 'types.StringFilter']
    translatedContent: Union[_str, 'types.StringFilter']
    translationModel: Union[_str, 'types.StringFilter']
    cacheKey: Union[_str, 'types.StringFilter']
    confidence: Union[None, _float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MessageTranslationWhereInputRecursive2', List['MessageTranslationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MessageTranslationWhereInputRecursive2']
    OR: List['MessageTranslationWhereInputRecursive2']
    NOT: List['MessageTranslationWhereInputRecursive2']


class MessageTranslationWhereInputRecursive2(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sourceLanguage: Union[_str, 'types.StringFilter']
    targetLanguage: Union[_str, 'types.StringFilter']
    translatedContent: Union[_str, 'types.StringFilter']
    translationModel: Union[_str, 'types.StringFilter']
    cacheKey: Union[_str, 'types.StringFilter']
    confidence: Union[None, _float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MessageTranslationWhereInputRecursive3', List['MessageTranslationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MessageTranslationWhereInputRecursive3']
    OR: List['MessageTranslationWhereInputRecursive3']
    NOT: List['MessageTranslationWhereInputRecursive3']


class MessageTranslationWhereInputRecursive3(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sourceLanguage: Union[_str, 'types.StringFilter']
    targetLanguage: Union[_str, 'types.StringFilter']
    translatedContent: Union[_str, 'types.StringFilter']
    translationModel: Union[_str, 'types.StringFilter']
    cacheKey: Union[_str, 'types.StringFilter']
    confidence: Union[None, _float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MessageTranslationWhereInputRecursive4', List['MessageTranslationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MessageTranslationWhereInputRecursive4']
    OR: List['MessageTranslationWhereInputRecursive4']
    NOT: List['MessageTranslationWhereInputRecursive4']


class MessageTranslationWhereInputRecursive4(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sourceLanguage: Union[_str, 'types.StringFilter']
    targetLanguage: Union[_str, 'types.StringFilter']
    translatedContent: Union[_str, 'types.StringFilter']
    translationModel: Union[_str, 'types.StringFilter']
    cacheKey: Union[_str, 'types.StringFilter']
    confidence: Union[None, _float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']



# aggregate MessageTranslation types


    

class MessageTranslationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sourceLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    targetLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    translatedContent: Union[_str, 'types.StringWithAggregatesFilter']
    translationModel: Union[_str, 'types.StringWithAggregatesFilter']
    cacheKey: Union[_str, 'types.StringWithAggregatesFilter']
    confidence: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageTranslationScalarWhereWithAggregatesInputRecursive1']
    OR: List['MessageTranslationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MessageTranslationScalarWhereWithAggregatesInputRecursive1']


class MessageTranslationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sourceLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    targetLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    translatedContent: Union[_str, 'types.StringWithAggregatesFilter']
    translationModel: Union[_str, 'types.StringWithAggregatesFilter']
    cacheKey: Union[_str, 'types.StringWithAggregatesFilter']
    confidence: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageTranslationScalarWhereWithAggregatesInputRecursive2']
    OR: List['MessageTranslationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MessageTranslationScalarWhereWithAggregatesInputRecursive2']


class MessageTranslationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sourceLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    targetLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    translatedContent: Union[_str, 'types.StringWithAggregatesFilter']
    translationModel: Union[_str, 'types.StringWithAggregatesFilter']
    cacheKey: Union[_str, 'types.StringWithAggregatesFilter']
    confidence: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageTranslationScalarWhereWithAggregatesInputRecursive3']
    OR: List['MessageTranslationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MessageTranslationScalarWhereWithAggregatesInputRecursive3']


class MessageTranslationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sourceLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    targetLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    translatedContent: Union[_str, 'types.StringWithAggregatesFilter']
    translationModel: Union[_str, 'types.StringWithAggregatesFilter']
    cacheKey: Union[_str, 'types.StringWithAggregatesFilter']
    confidence: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageTranslationScalarWhereWithAggregatesInputRecursive4']
    OR: List['MessageTranslationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MessageTranslationScalarWhereWithAggregatesInputRecursive4']


class MessageTranslationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MessageTranslation arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sourceLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    targetLanguage: Union[_str, 'types.StringWithAggregatesFilter']
    translatedContent: Union[_str, 'types.StringWithAggregatesFilter']
    translationModel: Union[_str, 'types.StringWithAggregatesFilter']
    cacheKey: Union[_str, 'types.StringWithAggregatesFilter']
    confidence: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']



class MessageTranslationGroupByOutput(TypedDict, total=False):
    id: _str
    sourceLanguage: _str
    targetLanguage: _str
    translatedContent: _str
    translationModel: _str
    cacheKey: _str
    confidence: _float
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    messageId: _str
    _sum: 'MessageTranslationSumAggregateOutput'
    _avg: 'MessageTranslationAvgAggregateOutput'
    _min: 'MessageTranslationMinAggregateOutput'
    _max: 'MessageTranslationMaxAggregateOutput'
    _count: 'MessageTranslationCountAggregateOutput'


class MessageTranslationAvgAggregateOutput(TypedDict, total=False):
    """MessageTranslation output for aggregating averages"""
    confidence: float


class MessageTranslationSumAggregateOutput(TypedDict, total=False):
    """MessageTranslation output for aggregating sums"""
    confidence: _float


class MessageTranslationScalarAggregateOutput(TypedDict, total=False):
    """MessageTranslation output including scalar fields"""
    id: _str
    sourceLanguage: _str
    targetLanguage: _str
    translatedContent: _str
    translationModel: _str
    cacheKey: _str
    confidence: _float
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    messageId: _str


MessageTranslationMinAggregateOutput = MessageTranslationScalarAggregateOutput
MessageTranslationMaxAggregateOutput = MessageTranslationScalarAggregateOutput


class MessageTranslationMaxAggregateInput(TypedDict, total=False):
    """MessageTranslation input for aggregating by max"""
    id: bool
    sourceLanguage: bool
    targetLanguage: bool
    translatedContent: bool
    translationModel: bool
    cacheKey: bool
    confidence: bool
    createdAt: bool
    updatedAt: bool
    messageId: bool


class MessageTranslationMinAggregateInput(TypedDict, total=False):
    """MessageTranslation input for aggregating by min"""
    id: bool
    sourceLanguage: bool
    targetLanguage: bool
    translatedContent: bool
    translationModel: bool
    cacheKey: bool
    confidence: bool
    createdAt: bool
    updatedAt: bool
    messageId: bool


class MessageTranslationNumberAggregateInput(TypedDict, total=False):
    """MessageTranslation input for aggregating numbers"""
    confidence: bool


MessageTranslationAvgAggregateInput = MessageTranslationNumberAggregateInput
MessageTranslationSumAggregateInput = MessageTranslationNumberAggregateInput


MessageTranslationCountAggregateInput = TypedDict(
    'MessageTranslationCountAggregateInput',
    {
        'id': bool,
        'sourceLanguage': bool,
        'targetLanguage': bool,
        'translatedContent': bool,
        'translationModel': bool,
        'cacheKey': bool,
        'confidence': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'messageId': bool,
        '_all': bool,
    },
    total=False,
)

MessageTranslationCountAggregateOutput = TypedDict(
    'MessageTranslationCountAggregateOutput',
    {
        'id': int,
        'sourceLanguage': int,
        'targetLanguage': int,
        'translatedContent': int,
        'translationModel': int,
        'cacheKey': int,
        'confidence': int,
        'createdAt': int,
        'updatedAt': int,
        'messageId': int,
        '_all': int,
    },
    total=False,
)


MessageTranslationKeys = Literal[
    'id',
    'sourceLanguage',
    'targetLanguage',
    'translatedContent',
    'translationModel',
    'cacheKey',
    'confidence',
    'createdAt',
    'updatedAt',
    'message',
    'messageId',
]
MessageTranslationScalarFieldKeys = Literal[
    'id',
    'sourceLanguage',
    'targetLanguage',
    'translatedContent',
    'translationModel',
    'cacheKey',
    'confidence',
    'createdAt',
    'updatedAt',
    'messageId',
]
MessageTranslationScalarFieldKeysT = TypeVar('MessageTranslationScalarFieldKeysT', bound=MessageTranslationScalarFieldKeys)

MessageTranslationRelationalFieldKeys = Literal[
        'message',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields