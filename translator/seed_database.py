#!/usr/bin/env python3

"""
Script de seed pour initialiser la base de donn√©es MongoDB avec des donn√©es de test
Utilise le client Prisma Python du Translator
"""

import asyncio
import os
import sys
import traceback
from pathlib import Path
from datetime import datetime, timedelta

print("üå± D√©but du seeding de la base de donn√©es MongoDB...")

# Charger les variables d'environnement depuis ../.env
env_file = Path("../.env")
if env_file.exists():
    print(f"üìã Chargement des variables depuis {env_file}")
    with open(env_file, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                if '=' in line:
                    key, value = line.split('=', 1)
                    # Supprimer les guillemets si pr√©sents
                    value = value.strip('"\'')
                    os.environ[key] = value

print(f"üìã DATABASE_URL: {os.environ.get('DATABASE_URL', 'NON D√âFINIE')[:50]}...")

# Ajouter le r√©pertoire du client Prisma au PYTHONPATH
current_dir = Path.cwd()
prisma_client_path = current_dir / 'shared' / 'prisma'
if prisma_client_path.exists():
    sys.path.insert(0, str(prisma_client_path))
    print(f"üìã Ajout du chemin: {prisma_client_path}")

try:
    print("üìã Import du module Prisma...")
    from prisma import Prisma
    print("‚úÖ Module Prisma import√© avec succ√®s")
    
    # Messages multilingues pour les tests
    TEST_MESSAGES = [
        # Messages fran√ßais
        {"text": "Bonjour tout le monde ! Comment allez-vous aujourd'hui ?", "lang": "fr"},
        {"text": "J'adore cette plateforme de messagerie multilingue !", "lang": "fr"},
        {"text": "Quelqu'un a-t-il test√© la traduction automatique ?", "lang": "fr"},
        
        # Messages anglais
        {"text": "Hello everyone! Great to be here!", "lang": "en"},
        {"text": "This real-time translation feature is amazing!", "lang": "en"},
        {"text": "Can anyone recommend good language learning resources?", "lang": "en"},
        
        # Messages espagnols
        {"text": "¬°Hola amigos! ¬øC√≥mo est√°n todos?", "lang": "es"},
        {"text": "Me encanta poder escribir en mi idioma nativo", "lang": "es"},
        
        # Messages allemands
        {"text": "Guten Tag! Wie geht es euch allen?", "lang": "de"},
        {"text": "Diese √úbersetzungstechnologie ist fantastisch!", "lang": "de"},
        
        # Messages chinois
        {"text": "Â§ßÂÆ∂Â•ΩÔºÅÂæàÈ´òÂÖ¥ËßÅÂà∞Â§ßÂÆ∂ÔºÅ", "lang": "zh"},
        {"text": "Ëøô‰∏™ÂÆûÊó∂ÁøªËØëÂäüËÉΩÂ§™Ê£í‰∫ÜÔºÅ", "lang": "zh"},
        
        # Messages japonais
        {"text": "ÁöÜ„Åï„Çì„ÄÅ„Åì„Çì„Å´„Å°„ÅØÔºÅÂÖÉÊ∞ó„Åß„Åô„ÅãÔºü", "lang": "ja"},
        {"text": "„Åì„ÅÆÁøªË®≥Ê©üËÉΩ„ÅØÊú¨ÂΩì„Å´Á¥†Êô¥„Çâ„Åó„ÅÑ„Åß„Åô„Å≠ÔºÅ", "lang": "ja"},
        
        # Messages portugais
        {"text": "Ol√° pessoal! Como est√£o todos?", "lang": "pt"},
        {"text": "Essa plataforma multil√≠ngue √© incr√≠vel!", "lang": "pt"}
    ]
    
    async def seed_database():
        try:
            print('üîß Connexion √† la base de donn√©es...')
            prisma = Prisma()
            
            # Timeout de 10 secondes pour la connexion
            try:
                await asyncio.wait_for(prisma.connect(), timeout=10.0)
                print('‚úÖ Connexion Prisma r√©ussie')
            except asyncio.TimeoutError:
                print('‚ùå Timeout lors de la connexion Prisma (10s)')
                return False
            
            # Nettoyer les donn√©es existantes
            print('üßπ Nettoyage des donn√©es existantes...')
            await prisma.messagetranslation.delete_many()
            await prisma.message.delete_many()
            await prisma.conversationmember.delete_many()
            await prisma.conversation.delete_many()
            await prisma.user.delete_many()
            
            # Cr√©er les utilisateurs
            print('üë• Cr√©ation des utilisateurs...')
            
            # 1. Utilisateur fran√ßais (Admin)
            alice = await prisma.user.create({
                "username": "alice_fr",
                "email": "alice@meeshy.com",
                "firstName": "Alice",
                "lastName": "Dubois",
                "password": "$2b$10$UxJ6jmYYODq6QnsTm8TZMu9AlWUDlY/fZdw/e0YA1gjqz9Cjmwlqq",  # password123
                "role": "ADMIN",
                "isActive": True,
                "systemLanguage": "fr",
                "regionalLanguage": "fr",
                "autoTranslateEnabled": True,
                "translateToSystemLanguage": True,
                "translateToRegionalLanguage": False
            })
            
            # 2. Utilisateur anglais
            bob = await prisma.user.create({
                "username": "bob_en",
                "email": "bob@meeshy.com",
                "firstName": "Bob",
                "lastName": "Johnson",
                "password": "$2b$10$UxJ6jmYYODq6QnsTm8TZMu9AlWUDlY/fZdw/e0YA1gjqz9Cjmwlqq",  # password123
                "role": "ADMIN",
                "isActive": True,
                "systemLanguage": "en",
                "regionalLanguage": "es",
                "autoTranslateEnabled": True,
                "translateToSystemLanguage": True,
                "translateToRegionalLanguage": False
            })
            
            # 3. Utilisateur espagnol
            carlos = await prisma.user.create({
                "username": "carlos_es",
                "email": "carlos@meeshy.com",
                "firstName": "Carlos",
                "lastName": "Garc√≠a",
                "password": "$2b$10$UxJ6jmYYODq6QnsTm8TZMu9AlWUDlY/fZdw/e0YA1gjqz9Cjmwlqq",  # password123
                "role": "MODO",
                "isActive": True,
                "systemLanguage": "es",
                "regionalLanguage": "en",
                "autoTranslateEnabled": True,
                "translateToSystemLanguage": True,
                "translateToRegionalLanguage": False
            })
            
            # 4. Utilisateur allemand
            dieter = await prisma.user.create({
                "username": "dieter_de",
                "email": "dieter@meeshy.com",
                "firstName": "Dieter",
                "lastName": "Schmidt",
                "password": "$2b$10$UxJ6jmYYODq6QnsTm8TZMu9AlWUDlY/fZdw/e0YA1gjqz9Cjmwlqq",  # password123
                "role": "USER",
                "isActive": True,
                "systemLanguage": "de",
                "regionalLanguage": "fr",
                "autoTranslateEnabled": True,
                "translateToSystemLanguage": True,
                "translateToRegionalLanguage": False
            })
            
            # 5. Utilisateur chinois
            li = await prisma.user.create({
                "username": "li_zh",
                "email": "li@meeshy.com",
                "firstName": "Li",
                "lastName": "Wei",
                "password": "$2b$10$UxJ6jmYYODq6QnsTm8TZMu9AlWUDlY/fZdw/e0YA1gjqz9Cjmwlqq",  # password123
                "role": "USER",
                "isActive": True,
                "systemLanguage": "zh",
                "regionalLanguage": "en",
                "autoTranslateEnabled": True,
                "translateToSystemLanguage": True,
                "translateToRegionalLanguage": False
            })
            
            # 6. Utilisateur japonais
            yuki = await prisma.user.create({
                "username": "yuki_ja",
                "email": "yuki@meeshy.com",
                "firstName": "Yuki",
                "lastName": "Tanaka",
                "password": "$2b$10$UxJ6jmYYODq6QnsTm8TZMu9AlWUDlY/fZdw/e0YA1gjqz9Cjmwlqq",  # password123
                "role": "ANALYST",
                "isActive": True,
                "systemLanguage": "ja",
                "regionalLanguage": "fr",
                "autoTranslateEnabled": True,
                "translateToSystemLanguage": True,
                "translateToRegionalLanguage": False
            })
            
            # 7. Utilisateur portugais
            maria = await prisma.user.create({
                "username": "maria_pt",
                "email": "maria@meeshy.com",
                "firstName": "Maria",
                "lastName": "Silva",
                "password": "$2b$10$UxJ6jmYYODq6QnsTm8TZMu9AlWUDlY/fZdw/e0YA1gjqz9Cjmwlqq",  # password123
                "role": "USER",
                "isActive": True,
                "systemLanguage": "pt",
                "regionalLanguage": "ar",
                "autoTranslateEnabled": True,
                "translateToSystemLanguage": True,
                "translateToRegionalLanguage": False
            })
            
            users = [alice, bob, carlos, dieter, li, yuki, maria]
            print('‚úÖ 7 utilisateurs multilingues cr√©√©s')
            
            # Cr√©er la conversation globale "meeshy"
            print('üí≠ Cr√©ation de la conversation "meeshy"...')
            
            meeshy_conversation = await prisma.conversation.create({
                "type": "global",
                "title": "Meeshy",
                "identifier": "meeshy",
                "description": "Conversation globale pour tous les utilisateurs de Meeshy"
            })
            

            # Ajouter tous les utilisateurs √† la conversation
            for user in users:
                await prisma.conversationmember.create({
                    "conversationId": meeshy_conversation.id,
                    "userId": user.id,
                    "role": "ADMIN" if user.role == "ADMIN" else ("MODERATOR" if user.role == "MODO" else "MEMBER")
                })
            
            print('‚úÖ Conversation "meeshy" cr√©√©e avec tous les utilisateurs')
            
            # Cr√©er les messages
            print('üí¨ Cr√©ation des messages...')
            
            messages = []
            for i, message_data in enumerate(TEST_MESSAGES):
                user_index = i % len(users)
                sender = users[user_index]
                
                # Cr√©er le message avec un d√©lai r√©aliste
                created_at = datetime.now() - timedelta(minutes=(len(TEST_MESSAGES) - i) * 5)
                
                message = await prisma.message.create({
                    "conversationId": meeshy_conversation.id,
                    "senderId": sender.id,
                    "content": message_data["text"],
                    "originalLanguage": message_data["lang"],
                    "messageType": "text",
                    "createdAt": created_at
                })
                
                messages.append(message)
                
                # Cr√©er les traductions vers toutes les autres langues
                user_languages = list(set([u.systemLanguage for u in users]))
                target_languages = [lang for lang in user_languages if lang != message_data["lang"]]
                
                for target_lang in target_languages:
                    # Traduction simple pour l'exemple
                    translated_content = f"[{target_lang.upper()}] {message_data['text']}"
                    model_used = ["basic", "medium", "premium"][i % 3]
                    
                    await prisma.messagetranslation.create({
                        "messageId": message.id,
                        "sourceLanguage": message_data["lang"],
                        "targetLanguage": target_lang,
                        "translatedContent": translated_content,
                        "translationModel": model_used,
                        "cacheKey": f"{message.id}_{message_data['lang']}_{target_lang}"
                    })
            
            print(f'‚úÖ {len(messages)} messages cr√©√©s avec traductions')
            
            # Statistiques finales
            total_users = await prisma.user.count()
            total_messages = await prisma.message.count()
            total_translations = await prisma.messagetranslation.count()
            total_conversations = await prisma.conversation.count()
            
            print(f"""
üìä === STATISTIQUES DU SEEDING ===
üë• Utilisateurs cr√©√©s: {total_users}
üí¨ Messages cr√©√©s: {total_messages}
üåê Traductions cr√©√©es: {total_translations}
üí≠ Conversations: {total_conversations}

üéØ === D√âTAILS DES UTILISATEURS ===
üá´üá∑ Alice Dubois (alice@meeshy.com) - Fran√ßais - Admin
üá∫üá∏ Bob Johnson (bob@meeshy.com) - Anglais - User  
üá™üá∏ Carlos Garc√≠a (carlos@meeshy.com) - Espagnol - User
üá©üá™ Dieter Schmidt (dieter@meeshy.com) - Allemand - User
üá®üá≥ Li Wei (li@meeshy.com) - Chinois - User
üáØüáµ Yuki Tanaka (yuki@meeshy.com) - Japonais - User
üáµüáπ Maria Silva (maria@meeshy.com) - Portugais - User

üîë === INFORMATIONS DE CONNEXION ===
Mot de passe pour tous: password123

üì± === CONVERSATION 'MEESHY' ===
ID: meeshy
Type: GLOBAL 
Messages: {total_messages} (tous avec traductions)
Langues: FR, EN, ES, DE, ZH, JA, PT

üåü === PR√äT POUR LES TESTS ===
‚úì Multi-language real-time messaging
‚úì Automatic translation system  
‚úì 7 diverse user profiles
‚úì Rich multilingual conversation data
‚úì Au moins un message par utilisateur
‚úì Traductions vers toutes les langues des membres
            """)
            
            await prisma.disconnect()
            return True
            
        except Exception as e:
            error_msg = str(e)
            print(f'‚ùå Erreur lors du seeding: {error_msg}')
            print(f'üìã D√©tails: {traceback.format_exc()}')
            await prisma.disconnect()
            return False
    
    print("üöÄ Lancement du seeding asynchrone...")
    result = asyncio.run(seed_database())
    print(f"üìä R√©sultat: {result}")
    exit(0 if result else 1)
    
except Exception as e:
    print(f'‚ùå Erreur import Prisma: {e}')
    print(f'üìã D√©tails: {traceback.format_exc()}')
    exit(1)
