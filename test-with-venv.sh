#!/bin/bash

# Script de test du service quantifi√© avec environnement virtuel
# Teste la compatibilit√© et les performances

set -e

echo "üêç TEST AVEC ENVIRONNEMENT VIRTUEL"
echo "=================================="
echo "üìÖ Date: $(date)"
echo "üéØ Objectif: Tester le service quantifi√© dans un venv propre"
echo ""

# Configuration
VENV_NAME="translator_test_venv"
PYTHON_VERSION="python3.12"
REQUIREMENTS_FILE="translator/requirements-optimized.txt"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de log color√©
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction de nettoyage
cleanup() {
    log_info "üßπ Nettoyage de l'environnement virtuel..."
    
    if [ -d "$VENV_NAME" ]; then
        log_info "Suppression du venv: $VENV_NAME"
        rm -rf "$VENV_NAME"
    fi
    
    log_success "Nettoyage termin√©"
}

# Trap pour nettoyer en cas d'erreur
trap cleanup EXIT

# √âtape 1: V√©rifier les pr√©requis
log_info "üîç V√©rification des pr√©requis..."

if ! command -v python3 &> /dev/null; then
    log_error "Python3 n'est pas install√©"
    exit 1
fi

if ! command -v pip3 &> /dev/null; then
    log_error "pip3 n'est pas install√©"
    exit 1
fi

log_success "Python3 et pip3 sont disponibles"

# √âtape 2: Cr√©er l'environnement virtuel
log_info "üêç Cr√©ation de l'environnement virtuel..."

if [ -d "$VENV_NAME" ]; then
    log_warning "L'environnement virtuel existe d√©j√†, suppression..."
    rm -rf "$VENV_NAME"
fi

python3 -m venv "$VENV_NAME"

if [ ! -d "$VENV_NAME" ]; then
    log_error "√âchec de la cr√©ation de l'environnement virtuel"
    exit 1
fi

log_success "Environnement virtuel cr√©√©: $VENV_NAME"

# √âtape 3: Activer l'environnement virtuel
log_info "üîß Activation de l'environnement virtuel..."

source "$VENV_NAME/bin/activate"

if [ "$VIRTUAL_ENV" != "$(pwd)/$VENV_NAME" ]; then
    log_error "√âchec de l'activation de l'environnement virtuel"
    exit 1
fi

log_success "Environnement virtuel activ√©: $VIRTUAL_ENV"

# √âtape 4: Mettre √† jour pip
log_info "üì¶ Mise √† jour de pip..."

pip install --upgrade pip

log_success "pip mis √† jour"

# √âtape 5: Installer les d√©pendances de base
log_info "üìö Installation des d√©pendances de base..."

# Installer les d√©pendances essentielles d'abord
pip install torch==2.0.1 transformers==4.30.0

if [ $? -ne 0 ]; then
    log_error "√âchec de l'installation des d√©pendances ML"
    exit 1
fi

log_success "D√©pendances ML install√©es"

# √âtape 6: Installer les d√©pendances optimis√©es
log_info "üöÄ Installation des d√©pendances optimis√©es..."

if [ -f "$REQUIREMENTS_FILE" ]; then
    pip install -r "$REQUIREMENTS_FILE"
    
    if [ $? -ne 0 ]; then
        log_warning "Certaines d√©pendances optimis√©es n'ont pas pu √™tre install√©es"
        log_info "Installation des d√©pendances minimales..."
        
        # Installation minimale
        pip install fastapi uvicorn pyzmq redis psutil
    fi
else
    log_warning "Fichier requirements-optimized.txt non trouv√©"
    log_info "Installation des d√©pendances minimales..."
    pip install fastapi uvicorn pyzmq redis psutil
fi

log_success "D√©pendances install√©es"

# √âtape 7: V√©rifier l'installation
log_info "üîç V√©rification de l'installation..."

python3 -c "
import torch
import transformers
import fastapi
import zmq
import redis
import psutil

print('‚úÖ PyTorch version:', torch.__version__)
print('‚úÖ Transformers version:', transformers.__version__)
print('‚úÖ FastAPI version:', fastapi.__version__)
print('‚úÖ ZMQ version:', zmq.__version__)
print('‚úÖ Redis version:', redis.__version__)
print('‚úÖ psutil version:', psutil.__version__)

# V√©rifier CUDA
if torch.cuda.is_available():
    print('‚úÖ CUDA disponible:', torch.cuda.get_device_name(0))
else:
    print('‚ÑπÔ∏è  CUDA non disponible, utilisation CPU')

print('‚úÖ Toutes les d√©pendances sont install√©es correctement')
"

# √âtape 8: Test du service quantifi√©
log_info "üß™ Test du service quantifi√©..."

# Copier les fichiers n√©cessaires
log_info "üìÅ Pr√©paration des fichiers de test..."

# Cr√©er un r√©pertoire temporaire pour les tests
mkdir -p test_temp
cp -r translator/src test_temp/
cp test-quantized-service.py test_temp/
cp test-quantization-performance.py test_temp/

cd test_temp

# Test simple
log_info "üîß Test simple du service quantifi√©..."
python3 test-quantized-service.py

if [ $? -eq 0 ]; then
    log_success "Test simple r√©ussi"
else
    log_error "Test simple √©chou√©"
    exit 1
fi

# Test de performance (optionnel)
log_info "‚ö° Test de performance du service quantifi√©..."
python3 test-quantization-performance.py

if [ $? -eq 0 ]; then
    log_success "Test de performance r√©ussi"
else
    log_warning "Test de performance √©chou√© (normal si d√©pendances manquantes)"
fi

cd ..

# √âtape 9: Test d'int√©gration avec l'architecture existante
log_info "üîÑ Test d'int√©gration avec l'architecture existante..."

# Copier les fichiers de configuration
cp translator/src/config/settings.py test_temp/src/config/
cp translator/env.example test_temp/.env

cd test_temp

# Test d'import des services
python3 -c "
import sys
import os
sys.path.append('src')

try:
    from services.quantized_ml_service import QuantizedMLService
    from services.unified_ml_service import UnifiedMLTranslationService
    from config.settings import get_settings
    
    print('‚úÖ Import des services r√©ussi')
    print('‚úÖ Configuration charg√©e')
    
    # Test de cr√©ation des services
    quantized = QuantizedMLService('basic', 'float16')
    unified = UnifiedMLTranslationService()
    
    print('‚úÖ Cr√©ation des services r√©ussie')
    print('‚úÖ Services compatibles')
    
except Exception as e:
    print(f'‚ùå Erreur d\'import: {e}')
    sys.exit(1)
"

if [ $? -eq 0 ]; then
    log_success "Test d'int√©gration r√©ussi"
else
    log_error "Test d'int√©gration √©chou√©"
    exit 1
fi

cd ..

# √âtape 10: R√©sum√© des tests
log_info "üìã R√©sum√© des tests..."

echo ""
echo "üéØ R√âSULTATS DES TESTS"
echo "======================"
echo "‚úÖ Environnement virtuel cr√©√© et activ√©"
echo "‚úÖ D√©pendances install√©es"
echo "‚úÖ Service quantifi√© test√©"
echo "‚úÖ Compatibilit√© v√©rifi√©e"
echo "‚úÖ Int√©gration valid√©e"
echo ""

# Afficher les informations de l'environnement
echo "üìä INFORMATIONS DE L'ENVIRONNEMENT"
echo "=================================="
echo "Python: $(python3 --version)"
echo "Pip: $(pip --version)"
echo "Venv: $VIRTUAL_ENV"
echo "PyTorch: $(python3 -c 'import torch; print(torch.__version__)')"
echo "Transformers: $(python3 -c 'import transformers; print(transformers.__version__)')"

# Recommandations
echo ""
echo "üí° RECOMMANDATIONS"
echo "=================="
echo "1. L'environnement virtuel est pr√™t pour les tests"
echo "2. Le service quantifi√© fonctionne correctement"
echo "3. Vous pouvez maintenant tester les performances"
echo "4. Pour continuer les tests: source $VENV_NAME/bin/activate"
echo "5. Pour nettoyer: rm -rf $VENV_NAME"

log_success "Tests termin√©s avec succ√®s !"

# D√©sactiver l'environnement virtuel
deactivate

log_info "Environnement virtuel d√©sactiv√©"
