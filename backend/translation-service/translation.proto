syntax = "proto3";

package translation;

// ===== SERVICES PRINCIPAUX (Messages asynchrones ZeroMQ) =====

// Service de traduction - Messages essentiels uniquement
service TranslationService {
  // Traduction simple - version optimisée
  rpc TranslateMessage(TranslateRequest) returns (TranslateResponse);
  
  // Traduction vers toutes les langues requises
  rpc TranslateToAllLanguages(TranslateBatchRequest) returns (TranslateBatchResponse);
  
  // Détection de langue rapide
  rpc DetectLanguage(DetectLanguageRequest) returns (DetectLanguageResponse);
  
  // Vérification cache rapide
  rpc CheckCache(CacheCheckRequest) returns (CacheCheckResponse);
}

// Service séparé pour métriques et monitoring (API REST distincte)
service MetricsService {
  rpc GetTranslationMetrics(MetricsRequest) returns (MetricsResponse);
  rpc GetPerformanceStats(PerformanceRequest) returns (PerformanceResponse);
  rpc GetCacheStats(CacheStatsRequest) returns (CacheStatsResponse);
  rpc GetModelStats(ModelStatsRequest) returns (ModelStatsResponse);
}

// Service de santé léger
service HealthService {
  rpc CheckHealth(HealthCheckRequest) returns (HealthCheckResponse);
}

// ===== MESSAGES DE TRADUCTION (Optimisés ZeroMQ) =====

// Requête de traduction ultra-légère
message TranslateRequest {
  string message_id = 1;                  // ID unique pour tracking async
  string text = 2;                        // Texte à traduire
  string target_language = 3;             // Langue cible (requis)
  string conversation_id = 4;             // Pour cache contextuel
  
  // Optionnels pour contrôle fin
  string source_language = 5;             // Auto-détection si vide
  string model_tier = 6;                  // "basic"|"medium"|"premium", défaut: auto
  bool skip_cache = 7;                    // Défaut: false
}

// Réponse de traduction minimale
message TranslateResponse {
  string message_id = 1;                  // ID de corrélation
  string translated_text = 2;             // Résultat principal
  string detected_source_language = 3;    // Langue détectée
  
  // Métadonnées BASIC uniquement
  BasicMetadata metadata = 4;
  
  // Statut de l'opération
  TranslationStatus status = 5;
}

// Métadonnées basiques - strict minimum
message BasicMetadata {
  float confidence_score = 1;             // Score de confiance (0.0-1.0)
  bool from_cache = 2;                    // Provient du cache
  string model_used = 3;                  // Modèle utilisé ("basic"|"medium"|"premium")
}

// Traduction batch optimisée
message TranslateBatchRequest {
  string message_id = 1;                  // ID du message source
  string text = 2;                        // Texte à traduire
  repeated string target_languages = 3;   // Langues cibles
  string conversation_id = 4;             // Pour cache contextuel
  string source_language = 5;             // Auto-détection si vide
}

message TranslateBatchResponse {
  string message_id = 1;                  // ID de corrélation
  string detected_source_language = 2;    // Langue source détectée
  repeated BatchTranslation translations = 3; // Traductions
  TranslationStatus status = 4;           // Statut global
}

// Traduction individuelle dans un batch - ultra-légère
message BatchTranslation {
  string target_language = 1;             // Langue cible
  string translated_text = 2;             // Texte traduit
  float confidence_score = 3;             // Score de confiance
  bool from_cache = 4;                    // Provient du cache
}

// Détection de langue simplifiée
message DetectLanguageRequest {
  string text = 1;                        // Texte à analyser
}

message DetectLanguageResponse {
  string detected_language = 1;           // Code ISO détecté
  float confidence_score = 2;             // Score de confiance
  string recommended_model_tier = 3;      // Recommandation de modèle
}

// Cache check ultra-rapide
message CacheCheckRequest {
  string text_hash = 1;                   // Hash du texte (côté client)
  string source_language = 2;             // Langue source
  string target_language = 3;             // Langue cible
}

message CacheCheckResponse {
  bool cache_hit = 1;                     // Trouvé dans le cache
  string cached_translation = 2;          // Traduction (si trouvée)
  int32 ttl_seconds = 3;                  // TTL restant
}

// Health check minimal
message HealthCheckRequest {
  // Vide - juste ping
}

message HealthCheckResponse {
  HealthStatus status = 1;                // UP|DOWN|DEGRADED
  int32 response_time_ms = 2;             // Temps de réponse
}

// ===== API MÉTRIQUES SÉPARÉE (REST/HTTP) =====

// Métriques de traduction (API séparée)
message MetricsRequest {
  string time_range = 1;                  // "1h"|"24h"|"7d"|"30d"
  repeated string language_pairs = 2;     // Filtrer par paires
  repeated string conversation_ids = 3;   // Filtrer par conversations
}

message MetricsResponse {
  int64 total_translations = 1;           // Nombre total
  float average_confidence = 2;           // Confiance moyenne
  float cache_hit_rate = 3;               // Taux de cache hit
  repeated LanguagePairMetrics language_metrics = 4; // Par paire de langues
  repeated ModelUsageMetrics model_metrics = 5;      // Par modèle
}

message LanguagePairMetrics {
  string source_language = 1;
  string target_language = 2;
  int64 translation_count = 3;
  float average_confidence = 4;
  float cache_hit_rate = 5;
}

message ModelUsageMetrics {
  string model_tier = 1;                  // "basic"|"medium"|"premium"
  int64 usage_count = 2;                  // Nombre d'utilisations
  float average_processing_time_ms = 3;   // Temps moyen
  float success_rate = 4;                 // Taux de succès
}

// Métriques de performance (API séparée)
message PerformanceRequest {
  string time_range = 1;
  bool include_percentiles = 2;
}

message PerformanceResponse {
  float requests_per_second = 1;
  float average_latency_ms = 2;
  float p95_latency_ms = 3;
  float p99_latency_ms = 4;
  float error_rate = 5;
  int64 queue_depth = 6;
}

// Stats du cache (API séparée)
message CacheStatsRequest {
  bool include_language_breakdown = 1;
}

message CacheStatsResponse {
  int64 total_entries = 1;
  float hit_rate = 2;
  int64 memory_usage_bytes = 3;
  repeated LanguagePairCacheStats language_stats = 4;
}

message LanguagePairCacheStats {
  string source_language = 1;
  string target_language = 2;
  int64 cache_entries = 3;
  float hit_rate = 4;
}

// Stats des modèles (API séparée)
message ModelStatsRequest {
  bool include_memory_usage = 1;
}

message ModelStatsResponse {
  repeated LoadedModelStats loaded_models = 1;
  int64 total_memory_usage_bytes = 2;
  float gpu_utilization = 3;
}

message LoadedModelStats {
  string model_tier = 1;
  bool is_loaded = 2;
  int64 memory_usage_bytes = 3;
  int64 translation_count = 4;
  float average_inference_time_ms = 5;
}

// ===== ENUMS =====

enum TranslationStatus {
  STATUS_UNKNOWN = 0;
  SUCCESS = 1;
  PARTIAL_SUCCESS = 2;        // Batch avec quelques échecs
  FAILED = 3;
  LANGUAGE_NOT_SUPPORTED = 4;
  TEXT_TOO_LONG = 5;
  RATE_LIMITED = 6;
}

enum HealthStatus {
  HEALTH_UNKNOWN = 0;
  UP = 1;
  DEGRADED = 2;
  DOWN = 3;
}