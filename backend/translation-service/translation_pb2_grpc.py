# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import translation_pb2 as translation__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in translation_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TranslationServiceStub(object):
    """===== SERVICES PRINCIPAUX (Messages asynchrones ZeroMQ) =====

    Service de traduction - Messages essentiels uniquement
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TranslateMessage = channel.unary_unary(
                '/translation.TranslationService/TranslateMessage',
                request_serializer=translation__pb2.TranslateRequest.SerializeToString,
                response_deserializer=translation__pb2.TranslateResponse.FromString,
                _registered_method=True)
        self.TranslateToAllLanguages = channel.unary_unary(
                '/translation.TranslationService/TranslateToAllLanguages',
                request_serializer=translation__pb2.TranslateBatchRequest.SerializeToString,
                response_deserializer=translation__pb2.TranslateBatchResponse.FromString,
                _registered_method=True)
        self.DetectLanguage = channel.unary_unary(
                '/translation.TranslationService/DetectLanguage',
                request_serializer=translation__pb2.DetectLanguageRequest.SerializeToString,
                response_deserializer=translation__pb2.DetectLanguageResponse.FromString,
                _registered_method=True)
        self.CheckCache = channel.unary_unary(
                '/translation.TranslationService/CheckCache',
                request_serializer=translation__pb2.CacheCheckRequest.SerializeToString,
                response_deserializer=translation__pb2.CacheCheckResponse.FromString,
                _registered_method=True)


class TranslationServiceServicer(object):
    """===== SERVICES PRINCIPAUX (Messages asynchrones ZeroMQ) =====

    Service de traduction - Messages essentiels uniquement
    """

    def TranslateMessage(self, request, context):
        """Traduction simple - version optimisée
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TranslateToAllLanguages(self, request, context):
        """Traduction vers toutes les langues requises
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectLanguage(self, request, context):
        """Détection de langue rapide
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCache(self, request, context):
        """Vérification cache rapide
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranslationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TranslateMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.TranslateMessage,
                    request_deserializer=translation__pb2.TranslateRequest.FromString,
                    response_serializer=translation__pb2.TranslateResponse.SerializeToString,
            ),
            'TranslateToAllLanguages': grpc.unary_unary_rpc_method_handler(
                    servicer.TranslateToAllLanguages,
                    request_deserializer=translation__pb2.TranslateBatchRequest.FromString,
                    response_serializer=translation__pb2.TranslateBatchResponse.SerializeToString,
            ),
            'DetectLanguage': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectLanguage,
                    request_deserializer=translation__pb2.DetectLanguageRequest.FromString,
                    response_serializer=translation__pb2.DetectLanguageResponse.SerializeToString,
            ),
            'CheckCache': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCache,
                    request_deserializer=translation__pb2.CacheCheckRequest.FromString,
                    response_serializer=translation__pb2.CacheCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'translation.TranslationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('translation.TranslationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TranslationService(object):
    """===== SERVICES PRINCIPAUX (Messages asynchrones ZeroMQ) =====

    Service de traduction - Messages essentiels uniquement
    """

    @staticmethod
    def TranslateMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/TranslateMessage',
            translation__pb2.TranslateRequest.SerializeToString,
            translation__pb2.TranslateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TranslateToAllLanguages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/TranslateToAllLanguages',
            translation__pb2.TranslateBatchRequest.SerializeToString,
            translation__pb2.TranslateBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectLanguage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/DetectLanguage',
            translation__pb2.DetectLanguageRequest.SerializeToString,
            translation__pb2.DetectLanguageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/CheckCache',
            translation__pb2.CacheCheckRequest.SerializeToString,
            translation__pb2.CacheCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MetricsServiceStub(object):
    """Service séparé pour métriques et monitoring (API REST distincte)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTranslationMetrics = channel.unary_unary(
                '/translation.MetricsService/GetTranslationMetrics',
                request_serializer=translation__pb2.MetricsRequest.SerializeToString,
                response_deserializer=translation__pb2.MetricsResponse.FromString,
                _registered_method=True)
        self.GetPerformanceStats = channel.unary_unary(
                '/translation.MetricsService/GetPerformanceStats',
                request_serializer=translation__pb2.PerformanceRequest.SerializeToString,
                response_deserializer=translation__pb2.PerformanceResponse.FromString,
                _registered_method=True)
        self.GetCacheStats = channel.unary_unary(
                '/translation.MetricsService/GetCacheStats',
                request_serializer=translation__pb2.CacheStatsRequest.SerializeToString,
                response_deserializer=translation__pb2.CacheStatsResponse.FromString,
                _registered_method=True)
        self.GetModelStats = channel.unary_unary(
                '/translation.MetricsService/GetModelStats',
                request_serializer=translation__pb2.ModelStatsRequest.SerializeToString,
                response_deserializer=translation__pb2.ModelStatsResponse.FromString,
                _registered_method=True)


class MetricsServiceServicer(object):
    """Service séparé pour métriques et monitoring (API REST distincte)
    """

    def GetTranslationMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPerformanceStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCacheStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTranslationMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTranslationMetrics,
                    request_deserializer=translation__pb2.MetricsRequest.FromString,
                    response_serializer=translation__pb2.MetricsResponse.SerializeToString,
            ),
            'GetPerformanceStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPerformanceStats,
                    request_deserializer=translation__pb2.PerformanceRequest.FromString,
                    response_serializer=translation__pb2.PerformanceResponse.SerializeToString,
            ),
            'GetCacheStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCacheStats,
                    request_deserializer=translation__pb2.CacheStatsRequest.FromString,
                    response_serializer=translation__pb2.CacheStatsResponse.SerializeToString,
            ),
            'GetModelStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelStats,
                    request_deserializer=translation__pb2.ModelStatsRequest.FromString,
                    response_serializer=translation__pb2.ModelStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'translation.MetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('translation.MetricsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MetricsService(object):
    """Service séparé pour métriques et monitoring (API REST distincte)
    """

    @staticmethod
    def GetTranslationMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.MetricsService/GetTranslationMetrics',
            translation__pb2.MetricsRequest.SerializeToString,
            translation__pb2.MetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPerformanceStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.MetricsService/GetPerformanceStats',
            translation__pb2.PerformanceRequest.SerializeToString,
            translation__pb2.PerformanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCacheStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.MetricsService/GetCacheStats',
            translation__pb2.CacheStatsRequest.SerializeToString,
            translation__pb2.CacheStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.MetricsService/GetModelStats',
            translation__pb2.ModelStatsRequest.SerializeToString,
            translation__pb2.ModelStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HealthServiceStub(object):
    """Service de santé léger
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckHealth = channel.unary_unary(
                '/translation.HealthService/CheckHealth',
                request_serializer=translation__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=translation__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class HealthServiceServicer(object):
    """Service de santé léger
    """

    def CheckHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=translation__pb2.HealthCheckRequest.FromString,
                    response_serializer=translation__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'translation.HealthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('translation.HealthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HealthService(object):
    """Service de santé léger
    """

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.HealthService/CheckHealth',
            translation__pb2.HealthCheckRequest.SerializeToString,
            translation__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
