version: '3.8'

services:
  # Service Fastify (Backend API) - Production
  fastify-service:
    build:
      context: ./fastify-service
      dockerfile: Dockerfile
    container_name: meeshy-fastify-prod
    ports:
      - "3001:3001"
    env_file:
      - ./fastify-service/.env.production
    volumes:
      - fastify-logs:/app/logs
      - ./shared:/app/shared:ro
    depends_on:
      postgres:
        condition: service_healthy
      translation-service:
        condition: service_healthy
    networks:
      - meeshy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Service de traduction gRPC - Production
  translation-service:
    build:
      context: ./translation-service
      dockerfile: Dockerfile
    container_name: meeshy-translation-prod
    environment:
      - PYTHONPATH=/app/src
      - GRPC_PORT=50051
      - LOG_LEVEL=INFO
    volumes:
      - translation-models:/app/models
    networks:
      - meeshy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import grpc; import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Base de donn√©es PostgreSQL - Production
  postgres:
    image: postgres:15-alpine
    container_name: meeshy-postgres-prod
    environment:
      POSTGRES_DB: meeshy_db
      POSTGRES_USER: meeshy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-meeshy_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - meeshy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meeshy -d meeshy_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis pour le cache - Production
  redis:
    image: redis:7-alpine
    container_name: meeshy-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - meeshy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy - Production
  nginx:
    image: nginx:alpine
    container_name: meeshy-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      fastify-service:
        condition: service_healthy
    networks:
      - meeshy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: meeshy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - meeshy-network
    restart: unless-stopped

  # Monitoring avec Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: meeshy-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - meeshy-network
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  translation-models:
    driver: local
  fastify-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  meeshy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
