version: '3.8'

services:
  # MongoDB Database Service
  database:
    image: ${DATABASE_IMAGE:-mongo:8.0}
    container_name: meeshy-database-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-meeshy}
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-meeshy}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-MeeshyPassword123}
    volumes:
      - database_data_dev:/data/db
      - database_config_dev:/data/configdb
      - ./shared/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - meeshy-network-dev
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: meeshy-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - meeshy-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Translator Service (Development)
  translator:
    build:
      context: ./translator
      dockerfile: Dockerfile
    container_name: meeshy-translator-dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PRISMA_SCHEMA_PATH=${PRISMA_SCHEMA_PATH}
      - PYTHONPATH=/workspace:/workspace/generated
      - PYTHONUNBUFFERED=1
      - NODE_ENV=development
    ports:
      - "8000:8000"      # HTTP API
      - "50051:50051"    # gRPC
      - "5555:5555"      # ZMQ PUSH
      - "5558:5558"      # ZMQ SUB
    volumes:
      - ./shared:/workspace/shared:ro
      - ./translator:/workspace
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meeshy-network-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Gateway Service (Development)
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: meeshy-gateway-dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - TRANSLATOR_URL=http://translator:8000
      - ZMQ_PUSH_URL=tcp://translator:5555
      - ZMQ_SUB_URL=tcp://translator:5558
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./shared:/workspace/shared:ro
      - ./gateway:/workspace
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      translator:
        condition: service_healthy
    networks:
      - meeshy-network-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Service (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: meeshy-frontend-dev
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:3000}
      - NEXT_PUBLIC_TRANSLATION_URL=${NEXT_PUBLIC_TRANSLATION_URL:-http://localhost:8000}
      - NODE_ENV=development
    ports:
      - "3100:3100"
    volumes:
      - ./frontend:/workspace
      - /workspace/node_modules
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - meeshy-network-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Development)
  nginx:
    image: nginx:alpine
    container_name: meeshy-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs_dev:/etc/nginx/ssl
    depends_on:
      - frontend
      - gateway
    networks:
      - meeshy-network-dev

volumes:
  database_data_dev:
  database_config_dev:
  redis_data_dev:
  ssl_certs_dev:

networks:
  meeshy-network-dev:
    driver: bridge
